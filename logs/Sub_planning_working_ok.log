[13-08-2021_16-58-51] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[13-08-2021_16-58-51] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[13-08-2021_16-58-51] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[13-08-2021_16-58-51] DEBUG :: __main__ >> Parsing command line arguments: ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp', '-m', 'hcr', '-t', 'sequential', '-yield', 'True', '-method', 'ground-first', '-conc', 'False', '-min_bound', 'disable', '-ao', 'results', '-dpos', '-plc', 'False', '-pic', 'False', '-strat', 'hasty', '-bound', '3=1', '2=1', '1=2', '-lblend', '2=0.0', '-rblend', '2=0.0', '-ll', '3=50', '2=100', '1=150']

[13-08-2021_16-58-51] DEBUG :: __main__ >> Parsing complete:
('files', ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'])
('display_loader', None)
('domain_rules', None)
('world_structure', None)
('problem_specifics', None)
('plan_file', './plans/ASH_Plan_13-08-2021_16-58-51.txt')
('log_file', './logs/ASH_Log_13-08-2021_16-58-51.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'results')
('clingo_output', False)
('console_logging', 'INFO')
('operation', 'standard')
('experimental_runs', 1)
('initial_runs', 0)
('pause_on_run_completion', False)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', {3: 50, 2: 100, 1: 150})
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('top_level', None)
('bottom_level', 1)
('enable_concurrency', False)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', 'disable')
('disable_pause_on_start', True)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('minimise_length', None)
('minimise_actions', None)
('minimise_cost', None)
('online_method', 'ground-first')
('division_strategy', 'hasty')
('division_strategy_bounds', {3: 1, 2: 1, 1: 2})
('left_blend_quantities', {2: 0.0})
('right_blend_quantities', {2: 0.0})
('treat_tasks_as_independent', True)
('save_grounding', False)
('positive_final_goal_preemptive_achievement_heuristic', None)
('negative_final_goal_preemptive_achievement_heuristic', None)
('final_goal_intermediate_achievement_ordering_preferences', None)
('detect_dependencies', False)
('search_space_length', None)
('search_space_type', 'step_wise')
('search_space_level', 1)
('make_schema', None)
('load_schema', None)
('generate_solution_space', False)
('solution_space_type', None)

[13-08-2021_16-58-51] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./test_problems/blocks_world_plus/BWP_system_laws.lp
                ./test_problems/blocks_world_plus/BWP_problem_small_3.lp]

[13-08-2021_16-58-51] DEBUG :: core.Planner >> The domain files ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Instantiating logic program...

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated.

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Entering new one-shot solve call:
('self', LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,ROBOT,A) } :- incomplete_plan((step-1)); pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,ROBOT,A) }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,ROBOT,A), A != do_nothing }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = true.
#false :- not occurs(AL,ROBOT,(step-1)); occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); incomplete_plan((step-1)); pl(AL); step > (start+1); concurrency = true.
has_affect(AL,ROBOT,A,step) :- effect(AL,ROBOT,A,F,V,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
has_affect(AL,ROBOT,A,step) :- effect(AL,ROBOT,A,F,V); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); not has_affect(AL,ROBOT,A,step); action(AL,_,ROBOT,A); A != do_nothing; pl(AL); step > start.
action(AL,sequential,ROBOT,do_nothing) :- insta_of(AL,robot,ROBOT); sl(AL); concurrency = true.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_length, minimise_actions, minimise_cost, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,step); incomplete_plan((step-1)); pl(AL); step > start; minimise_length = true. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; S <= step; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)).
current_sub_goal((AL+1),ROBOT,A,F,V,first,start) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,sequential,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
1 = { precond(AL,ROBO,move(P_2),in(ROBO),P_1,true,t): is(AL,connected(P_1,P_2)), fluent(AL,inertial,in(ROBO),P_1), static(AL,connected(P_1,P_2)), P_1 != P_2, insta_of(AL,location,P_1) } :- action(AL,_,ROBO,move(P_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,P_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); number(N_1); BLOCK_2 = (block,N_2); number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., Anonymous #1))
	('solver_options', ['--parallel-mode=1,compete'])
	('assumptions', [])
	('context', None)
	('solve_incrementor', None)
	('base_parts', [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())])
	('inc_parts', [IncPart(name='step', args=['#inc'], range_=None)])
	('incremental', False)

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	assumptions = []
	context = None
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = [IncPart(name='step', args=['#inc'], range_=None)]

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 336 rules

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.0024823000000000206s

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:91:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:584:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:597:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:598:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:602:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:603:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:604:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:608:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:609:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:610:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:614:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:615:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:627:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:628:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:629:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:635:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:636:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:641:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:642:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:647:55-82: info: atom does not occur in any rule head:
  state_of(AL_1,DESC,STATE)


[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.008901s.

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Model found:
Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.000366s.

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed.

[13-08-2021_16-58-51] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.008901s, Solving = 0.000366s, Total = 0.009268s
Final Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-51] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[13-08-2021_16-58-51] DEBUG :: Logic Program ASH #1 >> Instantiating logic program...

[13-08-2021_16-58-51] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-51] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[13-08-2021_16-58-51] DEBUG :: Logic Program ASH #1 >> Logic program instantiated.

[13-08-2021_16-58-51] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,ROBOT,A) } :- incomplete_plan((step-1)); pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,ROBOT,A) }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,ROBOT,A), A != do_nothing }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = true.
#false :- not occurs(AL,ROBOT,(step-1)); occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); incomplete_plan((step-1)); pl(AL); step > (start+1); concurrency = true.
has_affect(AL,ROBOT,A,step) :- effect(AL,ROBOT,A,F,V,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
has_affect(AL,ROBOT,A,step) :- effect(AL,ROBOT,A,F,V); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); not has_affect(AL,ROBOT,A,step); action(AL,_,ROBOT,A); A != do_nothing; pl(AL); step > start.
action(AL,sequential,ROBOT,do_nothing) :- insta_of(AL,robot,ROBOT); sl(AL); concurrency = true.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_length, minimise_actions, minimise_cost, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,step); incomplete_plan((step-1)); pl(AL); step > start; minimise_length = true. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; S <= step; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)).
current_sub_goal((AL+1),ROBOT,A,F,V,first,start) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,sequential,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
1 = { precond(AL,ROBO,move(P_2),in(ROBO),P_1,true,t): is(AL,connected(P_1,P_2)), fluent(AL,inertial,in(ROBO),P_1), static(AL,connected(P_1,P_2)), P_1 != P_2, insta_of(AL,location,P_1) } :- action(AL,_,ROBO,move(P_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,P_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); number(N_1); BLOCK_2 = (block,N_2); number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[13-08-2021_16-58-51] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem.

[13-08-2021_16-58-51] DEBUG :: ASH Planner Main #1 >> Generating initial states.

[13-08-2021_16-58-51] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Instantiating logic program...

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new one-shot solve call:
('self', LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,ROBOT,A) } :- incomplete_plan((step-1)); pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,ROBOT,A) }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,ROBOT,A), A != do_nothing }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = true.
#false :- not occurs(AL,ROBOT,(step-1)); occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); incomplete_plan((step-1)); pl(AL); step > (start+1); concurrency = true.
has_affect(AL,ROBOT,A,step) :- effect(AL,ROBOT,A,F,V,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
has_affect(AL,ROBOT,A,step) :- effect(AL,ROBOT,A,F,V); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); not has_affect(AL,ROBOT,A,step); action(AL,_,ROBOT,A); A != do_nothing; pl(AL); step > start.
action(AL,sequential,ROBOT,do_nothing) :- insta_of(AL,robot,ROBOT); sl(AL); concurrency = true.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_length, minimise_actions, minimise_cost, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,step); incomplete_plan((step-1)); pl(AL); step > start; minimise_length = true. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; S <= step; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)).
current_sub_goal((AL+1),ROBOT,A,F,V,first,start) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,sequential,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
1 = { precond(AL,ROBO,move(P_2),in(ROBO),P_1,true,t): is(AL,connected(P_1,P_2)), fluent(AL,inertial,in(ROBO),P_1), static(AL,connected(P_1,P_2)), P_1 != P_2, insta_of(AL,location,P_1) } :- action(AL,_,ROBO,move(P_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,P_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); number(N_1); BLOCK_2 = (block,N_2); number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., Main #1 || Generate Initial States #1))
	('solver_options', ['--models=2', '--parallel-mode=8,compete', '--warn=none'])
	('assumptions', [])
	('context', None)
	('solve_incrementor', None)
	('base_parts', [('entities', []), ('static_state', []), ('initial_state', []), ('abstraction_levels', [1, 'hierarchical']), ('instance_module', []), ('state_module', [0, 0]), ('domain_sorts', []), ('variable_relations', [0]), ('abstraction_mappings', [0])])
	('inc_parts', [IncPart(name='step', args=['#inc'], range_=None)])
	('incremental', False)

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--parallel-mode=8,compete', '--warn=none']
	assumptions = []
	context = None
	incrementor = None
	base_parts = [('entities', []), ('static_state', []), ('initial_state', []), ('abstraction_levels', [1, 'hierarchical']), ('instance_module', []), ('state_module', [0, 0]), ('domain_sorts', []), ('variable_relations', [0]), ('abstraction_mappings', [0])]
	inc_parts = [IncPart(name='step', args=['#inc'], range_=None)]

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 336 rules

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0022668000000000132s

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('entities', []), ('static_state', []), ('initial_state', []), ('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.103550s.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Model found:
Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.022096s.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.103550s, Solving = 0.022096s, Total = 0.125646s
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-51] DEBUG :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED
Statistics :: Grounding = 0.103550s, Solving = 0.022096s, Total = 0.125646s
Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-51] DEBUG :: ASH Planner Main #1 >> The given partial initial state has a unique complete interpretation (only one stable model exists).

[13-08-2021_16-58-51] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3, complete(blue), false, 0)
holds(3, complete(red), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, tower_base((block,1)), true, 0)
holds(3, tower_base((block,2)), true, 0)
holds(3, tower_base((block,3)), false, 0)
holds(3, tower_base((block,4)), false, 0)
holds(3, tower_base((block,5)), false, 0)
holds(3, tower_base((block,6)), false, 0)
holds(3, unordered_tower((block,1)), true, 0)
holds(3, unordered_tower((block,2)), false, 0)
holds(3, unordered_tower((block,3)), false, 0)
holds(3, unordered_tower((block,4)), false, 0)
holds(3, unordered_tower((block,5)), false, 0)
holds(3, unordered_tower((block,6)), false, 0)

[13-08-2021_16-58-51] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2, complete(blue), false, 0)
holds(2, complete(red), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, tower_base((block,1)), true, 0)
holds(2, tower_base((block,2)), true, 0)
holds(2, tower_base((block,3)), false, 0)
holds(2, tower_base((block,4)), false, 0)
holds(2, tower_base((block,5)), false, 0)
holds(2, tower_base((block,6)), false, 0)
holds(2, unordered_tower((block,1)), true, 0)
holds(2, unordered_tower((block,2)), false, 0)
holds(2, unordered_tower((block,3)), false, 0)
holds(2, unordered_tower((block,4)), false, 0)
holds(2, unordered_tower((block,5)), false, 0)
holds(2, unordered_tower((block,6)), false, 0)

[13-08-2021_16-58-51] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1, complete(blue), false, 0)
holds(1, complete(red), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, tower_base((block,1)), true, 0)
holds(1, tower_base((block,2)), true, 0)
holds(1, tower_base((block,3)), false, 0)
holds(1, tower_base((block,4)), false, 0)
holds(1, tower_base((block,5)), false, 0)
holds(1, tower_base((block,6)), false, 0)
holds(1, unordered_tower((block,1)), true, 0)
holds(1, unordered_tower((block,2)), false, 0)
holds(1, unordered_tower((block,3)), false, 0)
holds(1, unordered_tower((block,4)), false, 0)
holds(1, unordered_tower((block,5)), false, 0)
holds(1, unordered_tower((block,6)), false, 0)

[13-08-2021_16-58-51] DEBUG :: ASH Planner Main #1 >> Generating final goals.

[13-08-2021_16-58-51] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Instantiating logic program...

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new one-shot solve call:
('self', LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,ROBOT,A) } :- incomplete_plan((step-1)); pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,ROBOT,A) }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,ROBOT,A), A != do_nothing }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = true.
#false :- not occurs(AL,ROBOT,(step-1)); occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); incomplete_plan((step-1)); pl(AL); step > (start+1); concurrency = true.
has_affect(AL,ROBOT,A,step) :- effect(AL,ROBOT,A,F,V,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
has_affect(AL,ROBOT,A,step) :- effect(AL,ROBOT,A,F,V); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); not has_affect(AL,ROBOT,A,step); action(AL,_,ROBOT,A); A != do_nothing; pl(AL); step > start.
action(AL,sequential,ROBOT,do_nothing) :- insta_of(AL,robot,ROBOT); sl(AL); concurrency = true.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_length, minimise_actions, minimise_cost, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,step); incomplete_plan((step-1)); pl(AL); step > start; minimise_length = true. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; S <= step; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)).
current_sub_goal((AL+1),ROBOT,A,F,V,first,start) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,sequential,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
1 = { precond(AL,ROBO,move(P_2),in(ROBO),P_1,true,t): is(AL,connected(P_1,P_2)), fluent(AL,inertial,in(ROBO),P_1), static(AL,connected(P_1,P_2)), P_1 != P_2, insta_of(AL,location,P_1) } :- action(AL,_,ROBO,move(P_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,P_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); number(N_1); BLOCK_2 = (block,N_2); number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., Main #1 || Generate Final Goals #1))
	('solver_options', ['--models=2', '--parallel-mode=8,compete', '--warn=none'])
	('assumptions', [])
	('context', None)
	('solve_incrementor', None)
	('base_parts', [('entities', []), ('static_state', []), ('goal_state', []), ('abstraction_levels', [1, 'hierarchical']), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('variable_relations', [0]), ('abstraction_mappings', [0])])
	('inc_parts', [IncPart(name='step', args=['#inc'], range_=None)])
	('incremental', False)

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--parallel-mode=8,compete', '--warn=none']
	assumptions = []
	context = None
	incrementor = None
	base_parts = [('entities', []), ('static_state', []), ('goal_state', []), ('abstraction_levels', [1, 'hierarchical']), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('variable_relations', [0]), ('abstraction_mappings', [0])]
	inc_parts = [IncPart(name='step', args=['#inc'], range_=None)]

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 336 rules

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.00256099999999998s

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[13-08-2021_16-58-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('entities', []), ('static_state', []), ('goal_state', []), ('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.039444s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Model found:
Model :: Total atoms = 2599, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.007171s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.039444s, Solving = 0.007171s, Total = 0.046615s
Final Model :: Total atoms = 2599, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Final goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED
Statistics :: Grounding = 0.039444s, Solving = 0.007171s, Total = 0.046615s
Model :: Total atoms = 2599, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> The given partial final goal has a unique complete interpretation (only one stable model exists).

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
             Final goal at abstraction level 3              
          ========================================          

final_goal(3, complete(blue), false, false)
final_goal(3, complete(blue), true, true)
final_goal(3, complete(red), false, false)
final_goal(3, complete(red), true, true)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, on((block,6)), puzzle_room_table, true)

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
             Final goal at abstraction level 2              
          ========================================          

final_goal(2, complete(blue), false, false)
final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), false, false)
final_goal(2, complete(red), true, true)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
             Final goal at abstraction level 1              
          ========================================          

final_goal(1, complete(blue), false, false)
final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), false, false)
final_goal(1, complete(red), true, true)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)

[13-08-2021_16-58-52] INFO :: ASH Planner Main #1 >> Hierarchical planning problem initialised successfully:
Initial State = UNIQUE
Final Goal = UNIQUE
Ready to plan...

[13-08-2021_16-58-52] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('conformance', True)
	('concurrency', False)
	('save_grounding', False)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Hasty object at 0x000001DCAE13B950>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('detect_dependencies', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_length', None)
	('minimise_actions', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', {1: 150, 2: 100, 3: 50})
	('level_range', range(1, 4))
	('online', True)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 0 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 0 : Achieved sgoals 0 : Unachieved sgoals 0
Level 1 : Total sgoals 0 : Achieved sgoals 0 : Unachieved sgoals 0

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-3]

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 50)
	('level', 3)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 0, initial = True, final = True, sgoals = [1-0]

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 0

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 0

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 3
Planning mode = classical 
Problem type = complete
Concurrency = disabled

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-52] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-52] DEBUG :: ASH Planner Main #1 >> Adding start state as initial state...

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 18 rules into program part ash_goal_state.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=50, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[3, 'classical']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'false', 'false'), range_=None)]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 426 rules

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0036288999999999905s

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[3, 'classical']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.018979s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 1636, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003585s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCAFA09680>

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, false, false). %* None *%

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.055143s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005675s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.060817200000000016, Incremental time limit = None
Running cumulative time = 0.060817200000000016, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.044107s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003493s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.04759989999999992, Incremental time limit = None
Running cumulative time = 0.10841709999999993, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.046720s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004943s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.05166309999999996, Incremental time limit = None
Running cumulative time = 0.1600801999999999, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.047903s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005935s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.053837799999999825, Incremental time limit = None
Running cumulative time = 0.21391799999999972, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.056611s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006705s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06331560000000003, Incremental time limit = None
Running cumulative time = 0.27723359999999975, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057218s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006948s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06416520000000003, Incremental time limit = None
Running cumulative time = 0.3413987999999998, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.056063s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007526s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06358950000000008, Incremental time limit = None
Running cumulative time = 0.40498829999999986, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054674s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008332s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06300640000000013, Incremental time limit = None
Running cumulative time = 0.4679947, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054711s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009532s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06424359999999996, Incremental time limit = None
Running cumulative time = 0.5322382999999999, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.058818s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012254s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07107219999999992, Incremental time limit = None
Running cumulative time = 0.6033104999999999, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.058165s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017898s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07606299999999999, Incremental time limit = None
Running cumulative time = 0.6793734999999999, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.058295s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024388s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0826823000000001, Incremental time limit = None
Running cumulative time = 0.7620558, Cumulative time limit = 3600

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062296s.

[13-08-2021_16-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036302s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0985980999999998, Incremental time limit = None
Running cumulative time = 0.8606538999999997, Cumulative time limit = 3600

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.056264s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067414s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12367860000000008, Incremental time limit = None
Running cumulative time = 0.9843324999999998, Cumulative time limit = 3600

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062547s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.074182s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1367288000000002, Incremental time limit = None
Running cumulative time = 1.1210613, Cumulative time limit = 3600

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.058864s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.110784s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16964840000000025, Incremental time limit = None
Running cumulative time = 1.2907097000000003, Cumulative time limit = 3600

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060627s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.178492s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23911969999999982, Incremental time limit = None
Running cumulative time = 1.5298294000000001, Cumulative time limit = 3600

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.067923s.

[13-08-2021_16-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.366739s.

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.43466229999999983, Incremental time limit = None
Running cumulative time = 1.9644917, Cumulative time limit = 3600

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.067401s.

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.514869s.

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5822704999999999, Incremental time limit = None
Running cumulative time = 2.5467622, Cumulative time limit = 3600

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062715s.

[13-08-2021_16-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 9345, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.322113s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3848273, Incremental time limit = None
Running cumulative time = 2.9315895, Cumulative time limit = 3600

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 1.147064s, Cumulative Solving = 1.784525s, Cumulative Total = 2.931589s, Calls = 20
Final Model :: Total atoms = 9345, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.055143s, Solving = 0.005675s, Total = 0.060817s
2 : Statistics :: Grounding = 0.044107s, Solving = 0.003493s, Total = 0.047600s
3 : Statistics :: Grounding = 0.046720s, Solving = 0.004943s, Total = 0.051663s
4 : Statistics :: Grounding = 0.047903s, Solving = 0.005935s, Total = 0.053838s
5 : Statistics :: Grounding = 0.056611s, Solving = 0.006705s, Total = 0.063316s
6 : Statistics :: Grounding = 0.057218s, Solving = 0.006948s, Total = 0.064165s
7 : Statistics :: Grounding = 0.056063s, Solving = 0.007526s, Total = 0.063590s
8 : Statistics :: Grounding = 0.054674s, Solving = 0.008332s, Total = 0.063006s
9 : Statistics :: Grounding = 0.054711s, Solving = 0.009532s, Total = 0.064244s
10 : Statistics :: Grounding = 0.058818s, Solving = 0.012254s, Total = 0.071072s
11 : Statistics :: Grounding = 0.058165s, Solving = 0.017898s, Total = 0.076063s
12 : Statistics :: Grounding = 0.058295s, Solving = 0.024388s, Total = 0.082682s
13 : Statistics :: Grounding = 0.062296s, Solving = 0.036302s, Total = 0.098598s
14 : Statistics :: Grounding = 0.056264s, Solving = 0.067414s, Total = 0.123679s
15 : Statistics :: Grounding = 0.062547s, Solving = 0.074182s, Total = 0.136729s
16 : Statistics :: Grounding = 0.058864s, Solving = 0.110784s, Total = 0.169648s
17 : Statistics :: Grounding = 0.060627s, Solving = 0.178492s, Total = 0.239120s
18 : Statistics :: Grounding = 0.067923s, Solving = 0.366739s, Total = 0.434662s
19 : Statistics :: Grounding = 0.067401s, Solving = 0.514869s, Total = 0.582270s
20 : Statistics :: Grounding = 0.062715s, Solving = 0.322113s, Total = 0.384827s

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.931589s because Stop condition reached.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 1.147064s, Cumulative Solving = 1.784525s, Cumulative Total = 2.931589s, Calls = 20
Model :: Total atoms = 9345, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

(1, [{'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'S': 1}])
(2, [{'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 2}])
(3, [{'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 3}])
(4, [{'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 4}])
(5, [{'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 5}])
(6, [{'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 6}])
(7, [{'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 7}])
(8, [{'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 8}])
(9, [{'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'S': 9}])
(10, [{'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 10}])
(11, [{'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 11}])
(12, [{'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 12}])
(13, [{'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 13}])
(14, [{'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'S': 14}])
(15, [{'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'S': 15}])
(16, [{'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'S': 16}])
(17, [{'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'S': 17}])
(18, [{'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'S': 18}])
(19, [{'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'S': 19}])
(20, [{'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'S': 20}])

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, plan_length=20, step_range=range(0, 21)

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=0 : level=2 len(self.__actions.get(level, []))=0 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, plan_length=20, step_range=range(0, 21)

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=0 : level=2 len(self.__actions.get(level, []))=0 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> plan_length=20, true_size_bound=1, partial_problems=20

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=20, plan_length=20, start_step=0, blend=Blend(left=0, right=0)

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> Decided: number_small_problems=20, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=1, blend=Blend(left=0, right=0)), DivisionPoint(index=2, blend=Blend(left=0, right=0)), DivisionPoint(index=3, blend=Blend(left=0, right=0)), DivisionPoint(index=4, blend=Blend(left=0, right=0)), DivisionPoint(index=5, blend=Blend(left=0, right=0)), DivisionPoint(index=6, blend=Blend(left=0, right=0)), DivisionPoint(index=7, blend=Blend(left=0, right=0)), DivisionPoint(index=8, blend=Blend(left=0, right=0)), DivisionPoint(index=9, blend=Blend(left=0, right=0)), DivisionPoint(index=10, blend=Blend(left=0, right=0)), DivisionPoint(index=11, blend=Blend(left=0, right=0)), DivisionPoint(index=12, blend=Blend(left=0, right=0)), DivisionPoint(index=13, blend=Blend(left=0, right=0)), DivisionPoint(index=14, blend=Blend(left=0, right=0)), DivisionPoint(index=15, blend=Blend(left=0, right=0)), DivisionPoint(index=16, blend=Blend(left=0, right=0)), DivisionPoint(index=17, blend=Blend(left=0, right=0)), DivisionPoint(index=18, blend=Blend(left=0, right=0)), DivisionPoint(index=19, blend=Blend(left=0, right=0))]

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> Getting sgoals range for problem number 1 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> Obtained sgoals range = [2-2].

[13-08-2021_16-58-55] DEBUG :: core.Strategies >> Obtained sgoals range = [1-1].

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-1]

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-1], problem number = 1, increment number = 0

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 1)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 0, initial = True, final = False, sgoals = [1-1]

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 0

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 0

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [1-1])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-55] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Adding start state as initial state...

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 1, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0034534999999999982s

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025652s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004607s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB1B044A0>

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 0)', truth=True, inc_range=IncRange(start=0, end=1, step=1))

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 0, 1, 1, sequential, true). %* None *%

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080055s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(1, 0)', truth=True, inc_range=IncRange(start=0, end=1, step=1)), conversion = current_last_sgoals(1,0).

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008322s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08837679999999981, Incremental time limit = None
Running cumulative time = 0.08837679999999981, Cumulative time limit = 3600

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=0, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08005510000000005, solving_time=0.008321699999999765, total_time=0.08837679999999981, clingo_stats={'problem': {'lp': {'atoms': 7658.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16493.0, 'bodies_tr': 16493.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 33712.0, 'rules_normal': 33369.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33712.0, 'rules_tr_normal': 33369.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 12529.0, 'eqs_atom': 3158.0, 'eqs_body': 1062.0, 'eqs_other': 8309.0}, 'lpStep': {'atoms': 3781.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15317.0, 'bodies_tr': 15317.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 29526.0, 'rules_normal': 29183.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29526.0, 'rules_tr_normal': 29183.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6783.0, 'eqs_atom': 1071.0, 'eqs_body': 297.0, 'eqs_other': 5415.0}, 'generator': {'vars': 1481.0, 'vars_eliminated': 0.0, 'vars_frozen': 1017.0, 'constraints': 17.0, 'constraints_binary': 212.0, 'constraints_ternary': 16.0, 'acyc_edges': 0.0, 'complexity': 263.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 18.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.08776473999023438, 'cpu': 0.09375, 'solve': 0.0019664764404296875, 'unsat': 0.0019664764404296875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12167549133300781, 'cpu': 0.125, 'solve': 0.004932403564453125, 'unsat': 0.0019664764404296875, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 26.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.08005510000000005, solving_time=0.008321699999999765, total_time=0.08837679999999981, clingo_stats={}))

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060913s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004036s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.06494950000000044, Incremental time limit = None
Running cumulative time = 0.15332630000000025, Cumulative time limit = 3600

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.060913299999999726, solving_time=0.0040362000000007114, total_time=0.06494950000000044, clingo_stats={'problem': {'lp': {'atoms': 9316.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29549.0, 'bodies_tr': 29549.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 411.0, 'rules': 58968.0, 'rules_normal': 58465.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 58964.0, 'rules_tr_normal': 58465.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 15044.0, 'eqs_atom': 3791.0, 'eqs_body': 1378.0, 'eqs_other': 9875.0}, 'lpStep': {'atoms': 1658.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13056.0, 'bodies_tr': 13056.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25256.0, 'rules_normal': 25096.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25252.0, 'rules_tr_normal': 25096.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2515.0, 'eqs_atom': 633.0, 'eqs_body': 316.0, 'eqs_other': 1566.0}, 'generator': {'vars': 1625.0, 'vars_eliminated': 0.0, 'vars_frozen': 1145.0, 'constraints': 55.0, 'constraints_binary': 733.0, 'constraints_ternary': 79.0, 'acyc_edges': 0.0, 'complexity': 905.0}}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 6.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 3.0, 'lemmas': 8.0, 'lits_learnt': 16.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 3.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 40.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 3.0, 'lemmas_other': 3.0, 'lits_conflict': 4.0, 'lits_loop': 6.0, 'lits_other': 6.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 1.0, 'levels': 10.0, 'levels_bounded': 1.0, 'max': 8.0, 'max_executed': 8.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.06543540954589844, 'cpu': 0.046875, 'solve': 0.00096893310546875, 'unsat': 0.00096893310546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18711090087890625, 'cpu': 0.171875, 'solve': 0.005901336669921875, 'unsat': 0.0029354095458984375, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 6.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 3.0, 'lemmas': 12.0, 'lits_learnt': 20.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 3.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 66.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 7.0, 'lemmas_other': 3.0, 'lits_conflict': 4.0, 'lits_loop': 10.0, 'lits_other': 6.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 1.0, 'levels': 10.0, 'levels_bounded': 1.0, 'max': 8.0, 'max_executed': 8.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14096839999999977, solving_time=0.012357900000000477, total_time=0.15332630000000025, clingo_stats={}))

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122886s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006815s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12970149999999947, Incremental time limit = None
Running cumulative time = 0.2830277999999997, Cumulative time limit = 3600

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12288639999999962, solving_time=0.006815099999999852, total_time=0.12970149999999947, clingo_stats={'problem': {'lp': {'atoms': 11188.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42798.0, 'bodies_tr': 42798.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 597.0, 'count_bodies_tr': 597.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 487.0, 'rules': 84572.0, 'rules_normal': 83909.0, 'rules_choice': 651.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 84564.0, 'rules_tr_normal': 83909.0, 'rules_tr_choice': 651.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 18362.0, 'eqs_atom': 4628.0, 'eqs_body': 1708.0, 'eqs_other': 12026.0}, 'lpStep': {'atoms': 1872.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13249.0, 'bodies_tr': 13249.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 25604.0, 'rules_normal': 25444.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25600.0, 'rules_tr_normal': 25444.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3318.0, 'eqs_atom': 837.0, 'eqs_body': 330.0, 'eqs_other': 2151.0}, 'generator': {'vars': 1962.0, 'vars_eliminated': 0.0, 'vars_frozen': 1376.0, 'constraints': 126.0, 'constraints_binary': 2567.0, 'constraints_ternary': 301.0, 'acyc_edges': 0.0, 'complexity': 3069.0}}, 'solving': {'solvers': {'choices': 148.0, 'conflicts': 21.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 17.0, 'integrated': 71.0, 'lemmas': 92.0, 'lits_learnt': 178.0, 'lemmas_binary': 10.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 59.0, 'integrated_jumps': 55.0, 'guiding_paths_lits': 70.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 11.0, 'lemmas_other': 67.0, 'lits_conflict': 20.0, 'lits_loop': 59.0, 'lits_other': 99.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 9.0, 'levels': 185.0, 'levels_bounded': 90.0, 'max': 26.0, 'max_executed': 16.0, 'max_bounded': 10.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.13065147399902344, 'cpu': 0.09375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3177623748779297, 'cpu': 0.265625, 'solve': 0.00789642333984375, 'unsat': 0.0049304962158203125, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 173.0, 'conflicts': 27.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 27.0, 'integrated': 74.0, 'lemmas': 104.0, 'lits_learnt': 198.0, 'lemmas_binary': 18.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 62.0, 'integrated_jumps': 71.0, 'guiding_paths_lits': 136.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 18.0, 'lemmas_other': 70.0, 'lits_conflict': 24.0, 'lits_loop': 69.0, 'lits_other': 105.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 10.0, 'levels': 195.0, 'levels_bounded': 91.0, 'max': 26.0, 'max_executed': 16.0, 'max_bounded': 10.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.2638547999999994, solving_time=0.01917300000000033, total_time=0.2830277999999997, clingo_stats={}))

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.065116s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006236s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07135180000000041, Incremental time limit = None
Running cumulative time = 0.35437960000000013, Cumulative time limit = 3600

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.06511620000000029, solving_time=0.006235600000000119, total_time=0.07135180000000041, clingo_stats={'problem': {'lp': {'atoms': 13210.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 56287.0, 'bodies_tr': 56287.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 780.0, 'count_bodies_tr': 780.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 573.0, 'rules': 110382.0, 'rules_normal': 109559.0, 'rules_choice': 807.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 110372.0, 'rules_tr_normal': 109559.0, 'rules_tr_choice': 807.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 22131.0, 'eqs_atom': 5469.0, 'eqs_body': 1987.0, 'eqs_other': 14675.0}, 'lpStep': {'atoms': 2022.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13489.0, 'bodies_tr': 13489.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 25810.0, 'rules_normal': 25650.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25808.0, 'rules_tr_normal': 25650.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 3769.0, 'eqs_atom': 841.0, 'eqs_body': 279.0, 'eqs_other': 2649.0}, 'generator': {'vars': 2461.0, 'vars_eliminated': 0.0, 'vars_frozen': 1728.0, 'constraints': 193.0, 'constraints_binary': 4673.0, 'constraints_ternary': 592.0, 'acyc_edges': 0.0, 'complexity': 5573.0}}, 'solving': {'solvers': {'choices': 201.0, 'conflicts': 43.0, 'conflicts_analyzed': 36.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 14.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 41.0, 'integrated': 198.0, 'lemmas': 251.0, 'lits_learnt': 440.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 166.0, 'integrated_jumps': 104.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 34.0, 'lemmas_loop': 25.0, 'lemmas_other': 192.0, 'lits_conflict': 47.0, 'lits_loop': 132.0, 'lits_other': 261.0, 'jumps': {'jumps': 36.0, 'jumps_bounded': 22.0, 'levels': 366.0, 'levels_bounded': 264.0, 'max': 22.0, 'max_executed': 19.0, 'max_bounded': 12.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.07180976867675781, 'cpu': 0.078125, 'solve': 0.001964569091796875, 'unsat': 0.001964569091796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3895721435546875, 'cpu': 0.34375, 'solve': 0.009860992431640625, 'unsat': 0.0068950653076171875, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 374.0, 'conflicts': 70.0, 'conflicts_analyzed': 52.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 14.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 53.0, 'distributed_sum_lbd': 68.0, 'integrated': 272.0, 'lemmas': 355.0, 'lits_learnt': 638.0, 'lemmas_binary': 44.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 228.0, 'integrated_jumps': 175.0, 'guiding_paths_lits': 220.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 50.0, 'lemmas_loop': 43.0, 'lemmas_other': 262.0, 'lits_conflict': 71.0, 'lits_loop': 201.0, 'lits_other': 366.0, 'jumps': {'jumps': 52.0, 'jumps_bounded': 32.0, 'levels': 561.0, 'levels_bounded': 355.0, 'max': 26.0, 'max_executed': 19.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3289709999999997, solving_time=0.025408600000000447, total_time=0.35437960000000013, clingo_stats={}))

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.069154s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007658s.

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07681180000000065, Incremental time limit = None
Running cumulative time = 0.4311914000000008, Cumulative time limit = 3600

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.06915410000000044, solving_time=0.0076577000000002116, total_time=0.07681180000000065, clingo_stats={'problem': {'lp': {'atoms': 15330.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 69766.0, 'bodies_tr': 69766.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 963.0, 'count_bodies_tr': 963.0, 'sccs': 53.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 647.0, 'rules': 136118.0, 'rules_normal': 135135.0, 'rules_choice': 963.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 20.0, 'rules_tr': 136106.0, 'rules_tr_normal': 135135.0, 'rules_tr_choice': 963.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 25544.0, 'eqs_atom': 6252.0, 'eqs_body': 2281.0, 'eqs_other': 17011.0}, 'lpStep': {'atoms': 2120.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13479.0, 'bodies_tr': 13479.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 9.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 74.0, 'rules': 25736.0, 'rules_normal': 25576.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25734.0, 'rules_tr_normal': 25576.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 3413.0, 'eqs_atom': 783.0, 'eqs_body': 294.0, 'eqs_other': 2336.0}, 'generator': {'vars': 2840.0, 'vars_eliminated': 0.0, 'vars_frozen': 2011.0, 'constraints': 182.0, 'constraints_binary': 4343.0, 'constraints_ternary': 592.0, 'acyc_edges': 0.0, 'complexity': 5573.0}}, 'solving': {'solvers': {'choices': 42.0, 'conflicts': 15.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 9.0, 'integrated': 12.0, 'lemmas': 16.0, 'lits_learnt': 39.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 9.0, 'integrated_jumps': 19.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 1.0, 'lemmas_other': 11.0, 'lits_conflict': 9.0, 'lits_loop': 5.0, 'lits_other': 25.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 6.0, 'levels': 29.0, 'levels_bounded': 6.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.0778045654296875, 'cpu': 0.078125, 'solve': 0.000972747802734375, 'unsat': 0.000972747802734375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.467376708984375, 'cpu': 0.421875, 'solve': 0.010833740234375, 'unsat': 0.007867813110351562, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 416.0, 'conflicts': 85.0, 'conflicts_analyzed': 61.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 14.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 57.0, 'distributed_sum_lbd': 77.0, 'integrated': 284.0, 'lemmas': 371.0, 'lits_learnt': 677.0, 'lemmas_binary': 55.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 237.0, 'integrated_jumps': 194.0, 'guiding_paths_lits': 304.0, 'guiding_paths': 36.0, 'splits': 0.0, 'lemmas_conflict': 54.0, 'lemmas_loop': 44.0, 'lemmas_other': 273.0, 'lits_conflict': 80.0, 'lits_loop': 206.0, 'lits_other': 391.0, 'jumps': {'jumps': 61.0, 'jumps_bounded': 38.0, 'levels': 590.0, 'levels_bounded': 361.0, 'max': 26.0, 'max_executed': 19.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3981251000000001, solving_time=0.03306630000000066, total_time=0.4311914000000008, clingo_stats={}))

[13-08-2021_16-58-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088262s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007850s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09611199999999975, Incremental time limit = None
Running cumulative time = 0.5273034000000005, Cumulative time limit = 3600

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08826209999999968, solving_time=0.007849900000000076, total_time=0.09611199999999975, clingo_stats={'problem': {'lp': {'atoms': 17310.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 83368.0, 'bodies_tr': 83368.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1146.0, 'count_bodies_tr': 1146.0, 'sccs': 63.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 734.0, 'rules': 162094.0, 'rules_normal': 160951.0, 'rules_choice': 1119.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 162080.0, 'rules_tr_normal': 160951.0, 'rules_tr_choice': 1119.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 29563.0, 'eqs_atom': 7207.0, 'eqs_body': 2564.0, 'eqs_other': 19792.0}, 'lpStep': {'atoms': 1980.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13602.0, 'bodies_tr': 13602.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87.0, 'rules': 25976.0, 'rules_normal': 25816.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25974.0, 'rules_tr_normal': 25816.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 4019.0, 'eqs_atom': 955.0, 'eqs_body': 283.0, 'eqs_other': 2781.0}, 'generator': {'vars': 3400.0, 'vars_eliminated': 0.0, 'vars_frozen': 2376.0, 'constraints': 301.0, 'constraints_binary': 8140.0, 'constraints_ternary': 1089.0, 'acyc_edges': 0.0, 'complexity': 9705.0}}, 'solving': {'solvers': {'choices': 127.0, 'conflicts': 60.0, 'conflicts_analyzed': 54.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 28.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 43.0, 'distributed_sum_lbd': 79.0, 'integrated': 206.0, 'lemmas': 256.0, 'lits_learnt': 933.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 28.0, 'cpu_time': 0.0, 'integrated_imps': 139.0, 'integrated_jumps': 53.0, 'guiding_paths_lits': 112.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 41.0, 'lemmas_loop': 9.0, 'lemmas_other': 206.0, 'lits_conflict': 178.0, 'lits_loop': 45.0, 'lits_other': 710.0, 'jumps': {'jumps': 54.0, 'jumps_bounded': 32.0, 'levels': 345.0, 'levels_bounded': 272.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 16.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.0972442626953125, 'cpu': 0.09375, 'solve': 0.002964019775390625, 'unsat': 0.002964019775390625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5646209716796875, 'cpu': 0.515625, 'solve': 0.013797760009765625, 'unsat': 0.010831832885742188, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 543.0, 'conflicts': 145.0, 'conflicts_analyzed': 115.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 42.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 100.0, 'distributed_sum_lbd': 156.0, 'integrated': 490.0, 'lemmas': 627.0, 'lits_learnt': 1610.0, 'lemmas_binary': 66.0, 'lemmas_ternary': 32.0, 'cpu_time': 0.0, 'integrated_imps': 376.0, 'integrated_jumps': 247.0, 'guiding_paths_lits': 416.0, 'guiding_paths': 43.0, 'splits': 0.0, 'lemmas_conflict': 95.0, 'lemmas_loop': 53.0, 'lemmas_other': 479.0, 'lits_conflict': 258.0, 'lits_loop': 251.0, 'lits_other': 1101.0, 'jumps': {'jumps': 115.0, 'jumps_bounded': 70.0, 'levels': 935.0, 'levels_bounded': 633.0, 'max': 26.0, 'max_executed': 19.0, 'max_bounded': 16.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.4863871999999998, solving_time=0.040916200000000735, total_time=0.5273034000000005, clingo_stats={}))

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.070089s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 6143, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012312s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.08240100000000083, Incremental time limit = None
Running cumulative time = 0.6097044000000014, Cumulative time limit = 3600

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.556476s, Cumulative Solving = 0.053228s, Cumulative Total = 0.609704s, Calls = 7
Final Model :: Total atoms = 6143, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=7, end_step=8, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.07008900000000029, solving_time=0.012312000000000545, total_time=0.08240100000000083, clingo_stats={'problem': {'lp': {'atoms': 19430.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 96912.0, 'bodies_tr': 96912.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1329.0, 'count_bodies_tr': 1329.0, 'sccs': 72.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 809.0, 'rules': 187930.0, 'rules_normal': 186627.0, 'rules_choice': 1275.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 28.0, 'rules_tr': 187914.0, 'rules_tr_normal': 186627.0, 'rules_tr_choice': 1275.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 33236.0, 'eqs_atom': 8068.0, 'eqs_body': 2857.0, 'eqs_other': 22311.0}, 'lpStep': {'atoms': 2120.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13544.0, 'bodies_tr': 13544.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 9.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 75.0, 'rules': 25836.0, 'rules_normal': 25676.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25834.0, 'rules_tr_normal': 25676.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 3673.0, 'eqs_atom': 861.0, 'eqs_body': 293.0, 'eqs_other': 2519.0}, 'generator': {'vars': 3829.0, 'vars_eliminated': 0.0, 'vars_frozen': 2667.0, 'constraints': 294.0, 'constraints_binary': 7779.0, 'constraints_ternary': 1026.0, 'acyc_edges': 0.0, 'complexity': 9705.0}}, 'solving': {'solvers': {'choices': 965.0, 'conflicts': 75.0, 'conflicts_analyzed': 75.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 4.0, 'models': 1.0, 'models_level': 80.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 70.0, 'distributed_sum_lbd': 150.0, 'integrated': 335.0, 'lemmas': 414.0, 'lits_learnt': 2191.0, 'lemmas_binary': 116.0, 'lemmas_ternary': 56.0, 'cpu_time': 0.03125, 'integrated_imps': 101.0, 'integrated_jumps': 372.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 72.0, 'lemmas_loop': 40.0, 'lemmas_other': 302.0, 'lits_conflict': 345.0, 'lits_loop': 205.0, 'lits_other': 1641.0, 'jumps': {'jumps': 75.0, 'jumps_bounded': 13.0, 'levels': 221.0, 'levels_bounded': 47.0, 'max': 21.0, 'max_executed': 21.0, 'max_bounded': 18.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.08381843566894531, 'cpu': 0.109375, 'solve': 0.00801849365234375, 'unsat': 0.0, 'sat': 0.00299072265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6484394073486328, 'cpu': 0.625, 'solve': 0.021816253662109375, 'unsat': 0.010831832885742188, 'sat': 0.0039615631103515625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1508.0, 'conflicts': 220.0, 'conflicts_analyzed': 190.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 46.0, 'models': 2.0, 'models_level': 81.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 170.0, 'distributed_sum_lbd': 306.0, 'integrated': 825.0, 'lemmas': 1041.0, 'lits_learnt': 3801.0, 'lemmas_binary': 182.0, 'lemmas_ternary': 88.0, 'cpu_time': 0.03125, 'integrated_imps': 477.0, 'integrated_jumps': 619.0, 'guiding_paths_lits': 542.0, 'guiding_paths': 50.0, 'splits': 0.0, 'lemmas_conflict': 167.0, 'lemmas_loop': 93.0, 'lemmas_other': 781.0, 'lits_conflict': 603.0, 'lits_loop': 456.0, 'lits_other': 2742.0, 'jumps': {'jumps': 190.0, 'jumps_bounded': 83.0, 'levels': 1156.0, 'levels_bounded': 680.0, 'max': 26.0, 'max_executed': 21.0, 'max_bounded': 18.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.5564762000000001, solving_time=0.05322820000000128, total_time=0.6097044000000014, clingo_stats={}))

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 1 achieved.

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 1 was achieved successfully.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.080055s, Solving = 0.008322s, Total = 0.088377s
2 : Statistics :: Grounding = 0.060913s, Solving = 0.004036s, Total = 0.064950s
3 : Statistics :: Grounding = 0.122886s, Solving = 0.006815s, Total = 0.129701s
4 : Statistics :: Grounding = 0.065116s, Solving = 0.006236s, Total = 0.071352s
5 : Statistics :: Grounding = 0.069154s, Solving = 0.007658s, Total = 0.076812s
6 : Statistics :: Grounding = 0.088262s, Solving = 0.007850s, Total = 0.096112s
7 : Statistics :: Grounding = 0.070089s, Solving = 0.012312s, Total = 0.082401s

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.609704s because Manual generator exit.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.556476s, Cumulative Solving = 0.053228s, Cumulative Total = 0.609704s, Calls = 7
Model :: Total atoms = 6143, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{}
{}

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}}
{2: {1: 7}}

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, plan_length=7, step_range=range(0, 8)

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=0 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, plan_length=7, step_range=range(0, 8)

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=0 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00.

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> plan_length=7, true_size_bound=1, partial_problems=7

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=7, plan_length=7, start_step=0, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Decided: number_small_problems=7, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=1, blend=Blend(left=0, right=0)), DivisionPoint(index=2, blend=Blend(left=0, right=0)), DivisionPoint(index=3, blend=Blend(left=0, right=0)), DivisionPoint(index=4, blend=Blend(left=0, right=0)), DivisionPoint(index=5, blend=Blend(left=0, right=0)), DivisionPoint(index=6, blend=Blend(left=0, right=0))]

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Getting sgoals range for problem number 1 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Obtained sgoals range = [2-2].

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Obtained sgoals range = [1-1].

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-1]

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-1], problem number = 1, increment number = 0

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 1)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 0, initial = True, final = False, sgoals = [1-1]

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 0

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 0

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [1-1])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-56] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Adding start state as initial state...

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 1, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003419500000000575s

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026345s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006482s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2C6A7C0>

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 0)', truth=True, inc_range=IncRange(start=0, end=1, step=1))

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 0, 1, 1, sequential, true). %* None *%

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124772s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(1, 0)', truth=True, inc_range=IncRange(start=0, end=1, step=1)), conversion = current_last_sgoals(1,0).

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012272s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1370445, Incremental time limit = None
Running cumulative time = 0.1370445, Cumulative time limit = 3600

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=0, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12477219999999978, solving_time=0.012272300000000236, total_time=0.1370445, clingo_stats={'problem': {'lp': {'atoms': 11264.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28274.0, 'bodies_tr': 28274.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55864.0, 'rules_normal': 55299.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55860.0, 'rules_tr_normal': 55299.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23374.0, 'eqs_atom': 6371.0, 'eqs_body': 1836.0, 'eqs_other': 15167.0}, 'lpStep': {'atoms': 5622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25671.0, 'bodies_tr': 25671.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49412.0, 'rules_normal': 48847.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49408.0, 'rules_tr_normal': 48847.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11600.0, 'eqs_atom': 2078.0, 'eqs_body': 327.0, 'eqs_other': 9195.0}, 'generator': {'vars': 2343.0, 'vars_eliminated': 0.0, 'vars_frozen': 1454.0, 'constraints': 50.0, 'constraints_binary': 507.0, 'constraints_ternary': 48.0, 'acyc_edges': 0.0, 'complexity': 631.0}}, 'solving': {'solvers': {'choices': 40.0, 'conflicts': 11.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 17.0, 'integrated': 39.0, 'lemmas': 36.0, 'lits_learnt': 49.0, 'lemmas_binary': 13.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 22.0, 'integrated_jumps': 8.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 8.0, 'lemmas_other': 23.0, 'lits_conflict': 5.0, 'lits_loop': 14.0, 'lits_other': 30.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 60.0, 'levels_bounded': 30.0, 'max': 13.0, 'max_executed': 7.0, 'max_bounded': 6.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.13663673400878906, 'cpu': 0.140625, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17356300354003906, 'cpu': 0.171875, 'solve': 0.0059833526611328125, 'unsat': 0.0019683837890625, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 40.0, 'conflicts': 11.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 17.0, 'integrated': 39.0, 'lemmas': 36.0, 'lits_learnt': 49.0, 'lemmas_binary': 13.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 22.0, 'integrated_jumps': 8.0, 'guiding_paths_lits': 50.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 8.0, 'lemmas_other': 23.0, 'lits_conflict': 5.0, 'lits_loop': 14.0, 'lits_other': 30.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 60.0, 'levels_bounded': 30.0, 'max': 13.0, 'max_executed': 7.0, 'max_bounded': 6.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12477219999999978, solving_time=0.012272300000000236, total_time=0.1370445, clingo_stats={}))

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(1), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100228s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4534, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010046s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11027440000000066, Incremental time limit = None
Running cumulative time = 0.24731890000000067, Cumulative time limit = 3600

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.225000s, Cumulative Solving = 0.022319s, Cumulative Total = 0.247319s, Calls = 2
Final Model :: Total atoms = 4534, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=2, end_step=3, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.10022810000000071, solving_time=0.010046299999999952, total_time=0.11027440000000066, clingo_stats={'problem': {'lp': {'atoms': 13673.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49673.0, 'bodies_tr': 49673.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 804.0, 'rules': 97403.0, 'rules_normal': 96630.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 97395.0, 'rules_tr_normal': 96630.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27225.0, 'eqs_atom': 7341.0, 'eqs_body': 2142.0, 'eqs_other': 17742.0}, 'lpStep': {'atoms': 2409.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21399.0, 'bodies_tr': 21399.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 206.0, 'rules': 41539.0, 'rules_normal': 41331.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41535.0, 'rules_tr_normal': 41331.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3851.0, 'eqs_atom': 970.0, 'eqs_body': 306.0, 'eqs_other': 2575.0}, 'generator': {'vars': 2649.0, 'vars_eliminated': 0.0, 'vars_frozen': 1722.0, 'constraints': 137.0, 'constraints_binary': 2298.0, 'constraints_ternary': 186.0, 'acyc_edges': 0.0, 'complexity': 2676.0}}, 'solving': {'solvers': {'choices': 570.0, 'conflicts': 26.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 46.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 27.0, 'distributed_sum_lbd': 32.0, 'integrated': 120.0, 'lemmas': 161.0, 'lits_learnt': 295.0, 'lemmas_binary': 21.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 90.0, 'integrated_jumps': 162.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 25.0, 'lemmas_loop': 33.0, 'lemmas_other': 103.0, 'lits_conflict': 28.0, 'lits_loop': 148.0, 'lits_other': 119.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 10.0, 'levels': 203.0, 'levels_bounded': 80.0, 'max': 22.0, 'max_executed': 20.0, 'max_bounded': 8.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11167716979980469, 'cpu': 0.125, 'solve': 0.00595855712890625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.28524017333984375, 'cpu': 0.296875, 'solve': 0.011941909790039062, 'unsat': 0.0019683837890625, 'sat': 0.00399017333984375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 610.0, 'conflicts': 37.0, 'conflicts_analyzed': 31.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 47.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 38.0, 'distributed_sum_lbd': 49.0, 'integrated': 159.0, 'lemmas': 197.0, 'lits_learnt': 344.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 112.0, 'integrated_jumps': 170.0, 'guiding_paths_lits': 114.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 30.0, 'lemmas_loop': 41.0, 'lemmas_other': 126.0, 'lits_conflict': 33.0, 'lits_loop': 162.0, 'lits_other': 149.0, 'jumps': {'jumps': 31.0, 'jumps_bounded': 15.0, 'levels': 263.0, 'levels_bounded': 110.0, 'max': 22.0, 'max_executed': 20.0, 'max_bounded': 8.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.22500030000000049, solving_time=0.02231860000000019, total_time=0.24731890000000067, clingo_stats={}))

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 1 achieved.

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 1 was achieved successfully.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.124772s, Solving = 0.012272s, Total = 0.137045s
2 : Statistics :: Grounding = 0.100228s, Solving = 0.010046s, Total = 0.110274s

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.247319s because Manual generator exit.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.225000s, Cumulative Solving = 0.022319s, Cumulative Total = 0.247319s, Calls = 2
Model :: Total atoms = 4534, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}}
{2: {1: 7}}

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1}}
{2: {1: 7}, 1: {1: 2}}

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, plan_length=2, step_range=range(0, 3)

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=2 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 7 : Achieved sgoals 1 : Unachieved sgoals 19
Level 1 : Total sgoals 0 : Achieved sgoals 1 : Unachieved sgoals 6

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Getting sgoals range for problem number 1 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Obtained sgoals range = [1-1].

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Getting sgoals range for problem number 3 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Obtained sgoals range = [3-3].

[13-08-2021_16-58-56] DEBUG :: core.Strategies >> Obtained sgoals range = [2-2].

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [2-2]

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [2-2], problem number = 2, increment number = 1

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 2)
	('last_sgoals', 2)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 2, initial = False, final = False, sgoals = [2-2]

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 2

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 2

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [2-2])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-56] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-56] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 2...

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=2, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 2), range_=None), IncPart(name='plan_module', args=('#inc', 2, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 2, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 2, 2, 2, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00318039999999975s

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027664s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006264s.

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB1AA8540>

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=IncRange(start=2, end=3, step=1))

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 2). %* None *%
#program plan_module(#inc, 2, false, false). %* None *%
#program optimisation_module(#inc, 2, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 2, 2, 2, sequential, true). %* None *%

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      1 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('state_module', [Number(2), Number(2)]), ('plan_module', [Number(2), Number(2), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(2), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(2), Number(2), Number(2), Number(2), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('state_module', [Number(3), Number(2)]), ('plan_module', [Number(3), Number(2), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(2), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(3), Number(2), Number(2), Number(2), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123426s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=IncRange(start=2, end=3, step=1)), conversion = current_last_sgoals(2,2).

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016890s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14031549999999982, Incremental time limit = None
Running cumulative time = 0.14031549999999982, Cumulative time limit = 3600

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.123426s, Cumulative Solving = 0.016890s, Cumulative Total = 0.140315s, Calls = 1
Final Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=2, end_step=4, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12342589999999998, solving_time=0.016889599999999838, total_time=0.14031549999999982, clingo_stats={'problem': {'lp': {'atoms': 11264.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28223.0, 'bodies_tr': 28223.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55795.0, 'rules_normal': 55230.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55791.0, 'rules_tr_normal': 55230.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23487.0, 'eqs_atom': 6359.0, 'eqs_body': 1828.0, 'eqs_other': 15300.0}, 'lpStep': {'atoms': 5622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25620.0, 'bodies_tr': 25620.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49343.0, 'rules_normal': 48778.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49339.0, 'rules_tr_normal': 48778.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11713.0, 'eqs_atom': 2066.0, 'eqs_body': 319.0, 'eqs_other': 9328.0}, 'generator': {'vars': 2383.0, 'vars_eliminated': 0.0, 'vars_frozen': 1484.0, 'constraints': 45.0, 'constraints_binary': 464.0, 'constraints_ternary': 46.0, 'acyc_edges': 0.0, 'complexity': 581.0}}, 'solving': {'solvers': {'choices': 381.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 24.0, 'integrated': 74.0, 'lemmas': 54.0, 'lits_learnt': 71.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 28.0, 'integrated_jumps': 173.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 13.0, 'lemmas_other': 32.0, 'lits_conflict': 9.0, 'lits_loop': 26.0, 'lits_other': 36.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1401653289794922, 'cpu': 0.125, 'solve': 0.004962921142578125, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17809295654296875, 'cpu': 0.15625, 'solve': 0.00897979736328125, 'unsat': 0.0, 'sat': 0.003971099853515625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 381.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 24.0, 'integrated': 74.0, 'lemmas': 54.0, 'lits_learnt': 71.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 28.0, 'integrated_jumps': 173.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 13.0, 'lemmas_other': 32.0, 'lits_conflict': 9.0, 'lits_loop': 26.0, 'lits_other': 36.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12342589999999998, solving_time=0.016889599999999838, total_time=0.14031549999999982, clingo_stats={}))

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved.

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 2 was achieved successfully.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.123426s, Solving = 0.016890s, Total = 0.140315s

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.140315s because Manual generator exit.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.123426s, Cumulative Solving = 0.016890s, Cumulative Total = 0.140315s, Calls = 1
Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1}}
{2: {1: 7}, 1: {1: 2}}

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2}}
{2: {1: 7}, 1: {1: 2, 2: 3}}

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=2, plan_length=3, step_range=range(2, 4)

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=3 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 7 : Achieved sgoals 1 : Unachieved sgoals 19
Level 1 : Total sgoals 0 : Achieved sgoals 2 : Unachieved sgoals 5

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-57] DEBUG :: core.Strategies >> Getting sgoals range for problem number 3 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-57] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-57] DEBUG :: core.Strategies >> Obtained sgoals range = [2-2].

[13-08-2021_16-58-57] DEBUG :: core.Strategies >> Getting sgoals range for problem number 4 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-57] DEBUG :: core.Strategies >> Obtained sgoals range = [4-4].

[13-08-2021_16-58-57] DEBUG :: core.Strategies >> Obtained sgoals range = [3-3].

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [3-3]

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [3-3], problem number = 3, increment number = 2

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 3)
	('last_sgoals', 3)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 3, initial = False, final = False, sgoals = [3-3]

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 3

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 3

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [3-3])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-57] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 3...

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=3, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 3), range_=None), IncPart(name='plan_module', args=('#inc', 3, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 3, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 3, 3, 3, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0033541999999995298s

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025865s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010151s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2BBC130>

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=IncRange(start=3, end=4, step=1))

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 3). %* None *%
#program plan_module(#inc, 3, false, false). %* None *%
#program optimisation_module(#inc, 3, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 3, 3, 3, sequential, true). %* None *%

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      2 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('state_module', [Number(3), Number(3)]), ('plan_module', [Number(3), Number(3), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(3), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(3), Number(3), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('state_module', [Number(4), Number(3)]), ('plan_module', [Number(4), Number(3), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(3), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(4), Number(3), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120437s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=IncRange(start=3, end=4, step=1)), conversion = current_last_sgoals(3,3).

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013497s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13393389999999972, Incremental time limit = None
Running cumulative time = 0.13393389999999972, Cumulative time limit = 3600

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=3, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.1204369999999999, solving_time=0.013496899999999812, total_time=0.13393389999999972, clingo_stats={'problem': {'lp': {'atoms': 11264.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28178.0, 'bodies_tr': 28178.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55750.0, 'rules_normal': 55185.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55748.0, 'rules_tr_normal': 55185.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 23493.0, 'eqs_atom': 6358.0, 'eqs_body': 1828.0, 'eqs_other': 15307.0}, 'lpStep': {'atoms': 5622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25575.0, 'bodies_tr': 25575.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49298.0, 'rules_normal': 48733.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49296.0, 'rules_tr_normal': 48733.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 11719.0, 'eqs_atom': 2065.0, 'eqs_body': 319.0, 'eqs_other': 9335.0}, 'generator': {'vars': 2383.0, 'vars_eliminated': 0.0, 'vars_frozen': 1484.0, 'constraints': 6.0, 'constraints_binary': 232.0, 'constraints_ternary': 20.0, 'acyc_edges': 0.0, 'complexity': 266.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.13364410400390625, 'cpu': 0.140625, 'solve': 0.001964569091796875, 'unsat': 0.001964569091796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17356300354003906, 'cpu': 0.1875, 'solve': 0.009939193725585938, 'unsat': 0.001964569091796875, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 14.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1204369999999999, solving_time=0.013496899999999812, total_time=0.13393389999999972, clingo_stats={}))

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('state_module', [Number(5), Number(3)]), ('plan_module', [Number(5), Number(3), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(3), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(5), Number(3), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080934s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005460s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08639329999999923, Incremental time limit = None
Running cumulative time = 0.22032719999999895, Cumulative time limit = 3600

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08093359999999983, solving_time=0.005459699999999401, total_time=0.08639329999999923, clingo_stats={'problem': {'lp': {'atoms': 13055.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49493.0, 'bodies_tr': 49493.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 713.0, 'rules': 96840.0, 'rules_normal': 96067.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 96834.0, 'rules_tr_normal': 96067.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 26080.0, 'eqs_atom': 6853.0, 'eqs_body': 2133.0, 'eqs_other': 17094.0}, 'lpStep': {'atoms': 1791.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21315.0, 'bodies_tr': 21315.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 123.0, 'rules': 41090.0, 'rules_normal': 40882.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41086.0, 'rules_tr_normal': 40882.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2587.0, 'eqs_atom': 495.0, 'eqs_body': 305.0, 'eqs_other': 1787.0}, 'generator': {'vars': 2628.0, 'vars_eliminated': 0.0, 'vars_frozen': 1689.0, 'constraints': 62.0, 'constraints_binary': 1670.0, 'constraints_ternary': 110.0, 'acyc_edges': 0.0, 'complexity': 1878.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 8.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08776473999023438, 'cpu': 0.078125, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.26132774353027344, 'cpu': 0.265625, 'solve': 0.011934280395507812, 'unsat': 0.00395965576171875, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 22.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.20137059999999973, solving_time=0.018956599999999213, total_time=0.22032719999999895, clingo_stats={}))

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('state_module', [Number(6), Number(3)]), ('plan_module', [Number(6), Number(3), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(3), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(6), Number(3), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090579s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007492s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.0980711000000003, Incremental time limit = None
Running cumulative time = 0.31839829999999925, Cumulative time limit = 3600

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09057910000000025, solving_time=0.007492000000000054, total_time=0.0980711000000003, clingo_stats={'problem': {'lp': {'atoms': 15414.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71137.0, 'bodies_tr': 71137.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 694.0, 'count_bodies_tr': 694.0, 'sccs': 57.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 926.0, 'rules': 138715.0, 'rules_normal': 137734.0, 'rules_choice': 969.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 138705.0, 'rules_tr_normal': 137734.0, 'rules_tr_choice': 969.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 30528.0, 'eqs_atom': 7931.0, 'eqs_body': 2446.0, 'eqs_other': 20151.0}, 'lpStep': {'atoms': 2359.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21644.0, 'bodies_tr': 21644.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 213.0, 'rules': 41875.0, 'rules_normal': 41667.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41871.0, 'rules_tr_normal': 41667.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4448.0, 'eqs_atom': 1078.0, 'eqs_body': 313.0, 'eqs_other': 3057.0}, 'generator': {'vars': 3039.0, 'vars_eliminated': 0.0, 'vars_frozen': 2028.0, 'constraints': 178.0, 'constraints_binary': 4630.0, 'constraints_ternary': 327.0, 'acyc_edges': 0.0, 'complexity': 5211.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 8.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 70.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.0984039306640625, 'cpu': 0.09375, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.35973167419433594, 'cpu': 0.359375, 'solve': 0.0139312744140625, 'unsat': 0.0059566497802734375, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 16.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 92.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 12.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 16.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.2919497, solving_time=0.026448599999999267, total_time=0.31839829999999925, clingo_stats={}))

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('state_module', [Number(7), Number(3)]), ('plan_module', [Number(7), Number(3), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(3), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(7), Number(3), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090285s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012273s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10255819999999982, Incremental time limit = None
Running cumulative time = 0.42095649999999907, Cumulative time limit = 3600

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09028490000000033, solving_time=0.012273299999999487, total_time=0.10255819999999982, clingo_stats={'problem': {'lp': {'atoms': 18115.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93052.0, 'bodies_tr': 93052.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 903.0, 'count_bodies_tr': 903.0, 'sccs': 70.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1160.0, 'rules': 181117.0, 'rules_normal': 179928.0, 'rules_choice': 1173.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 181103.0, 'rules_tr_normal': 179928.0, 'rules_tr_choice': 1173.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 36307.0, 'eqs_atom': 9294.0, 'eqs_body': 2925.0, 'eqs_other': 24088.0}, 'lpStep': {'atoms': 2701.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21915.0, 'bodies_tr': 21915.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42402.0, 'rules_normal': 42194.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42398.0, 'rules_tr_normal': 42194.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5779.0, 'eqs_atom': 1363.0, 'eqs_body': 479.0, 'eqs_other': 3937.0}, 'generator': {'vars': 3780.0, 'vars_eliminated': 0.0, 'vars_frozen': 2529.0, 'constraints': 340.0, 'constraints_binary': 9967.0, 'constraints_ternary': 885.0, 'acyc_edges': 0.0, 'complexity': 11321.0}}, 'solving': {'solvers': {'choices': 80.0, 'conflicts': 40.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 30.0, 'integrated': 106.0, 'lemmas': 155.0, 'lits_learnt': 469.0, 'lemmas_binary': 55.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0, 'integrated_imps': 73.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 21.0, 'lemmas_other': 106.0, 'lits_conflict': 133.0, 'lits_loop': 87.0, 'lits_other': 249.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 8.0, 'levels': 86.0, 'levels_bounded': 8.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.10361480712890625, 'cpu': 0.078125, 'solve': 0.0029621124267578125, 'unsat': 0.0029621124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4633464813232422, 'cpu': 0.4375, 'solve': 0.016893386840820312, 'unsat': 0.00891876220703125, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 80.0, 'conflicts': 47.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 38.0, 'integrated': 106.0, 'lemmas': 167.0, 'lits_learnt': 485.0, 'lemmas_binary': 59.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.015625, 'integrated_imps': 73.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 176.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 33.0, 'lemmas_other': 106.0, 'lits_conflict': 133.0, 'lits_loop': 103.0, 'lits_other': 249.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 8.0, 'levels': 86.0, 'levels_bounded': 8.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3822346000000003, solving_time=0.038721899999998755, total_time=0.42095649999999907, clingo_stats={}))

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('state_module', [Number(8), Number(3)]), ('plan_module', [Number(8), Number(3), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(3), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(8), Number(3), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125917s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 6130, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019615s.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1455321999999999, Incremental time limit = None
Running cumulative time = 0.566488699999999, Cumulative time limit = 3600

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.508152s, Cumulative Solving = 0.058337s, Cumulative Total = 0.566489s, Calls = 5
Final Model :: Total atoms = 6130, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12591719999999995, solving_time=0.019614999999999938, total_time=0.1455321999999999, clingo_stats={'problem': {'lp': {'atoms': 21167.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 116056.0, 'bodies_tr': 116056.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1112.0, 'count_bodies_tr': 1112.0, 'sccs': 95.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1646.0, 'rules': 224787.0, 'rules_normal': 223390.0, 'rules_choice': 1377.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 20.0, 'rules_tr': 224773.0, 'rules_tr_normal': 223390.0, 'rules_tr_choice': 1377.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 43398.0, 'eqs_atom': 10814.0, 'eqs_body': 3036.0, 'eqs_other': 29548.0}, 'lpStep': {'atoms': 3052.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23004.0, 'bodies_tr': 23004.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 43670.0, 'rules_normal': 43462.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 43670.0, 'rules_tr_normal': 43462.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 7091.0, 'eqs_atom': 1520.0, 'eqs_body': 111.0, 'eqs_other': 5460.0}, 'generator': {'vars': 5479.0, 'vars_eliminated': 0.0, 'vars_frozen': 3592.0, 'constraints': 771.0, 'constraints_binary': 25234.0, 'constraints_ternary': 2852.0, 'acyc_edges': 0.0, 'complexity': 29067.0}}, 'solving': {'solvers': {'choices': 1115.0, 'conflicts': 114.0, 'conflicts_analyzed': 114.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 26.0, 'models': 1.0, 'models_level': 92.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 110.0, 'distributed_sum_lbd': 119.0, 'integrated': 308.0, 'lemmas': 475.0, 'lits_learnt': 1043.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.0, 'integrated_imps': 300.0, 'integrated_jumps': 534.0, 'guiding_paths_lits': 98.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 104.0, 'lemmas_loop': 63.0, 'lemmas_other': 308.0, 'lits_conflict': 125.0, 'lits_loop': 484.0, 'lits_other': 434.0, 'jumps': {'jumps': 114.0, 'jumps_bounded': 26.0, 'levels': 312.0, 'levels_bounded': 195.0, 'max': 15.0, 'max_executed': 15.0, 'max_bounded': 14.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.14760398864746094, 'cpu': 0.140625, 'solve': 0.008977890014648438, 'unsat': 0.0, 'sat': 0.00399017333984375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6109504699707031, 'cpu': 0.578125, 'solve': 0.02587127685546875, 'unsat': 0.00891876220703125, 'sat': 0.005954742431640625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1195.0, 'conflicts': 161.0, 'conflicts_analyzed': 146.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 26.0, 'models': 2.0, 'models_level': 93.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 132.0, 'distributed_sum_lbd': 157.0, 'integrated': 414.0, 'lemmas': 642.0, 'lits_learnt': 1528.0, 'lemmas_binary': 66.0, 'lemmas_ternary': 43.0, 'cpu_time': 0.015625, 'integrated_imps': 373.0, 'integrated_jumps': 543.0, 'guiding_paths_lits': 274.0, 'guiding_paths': 31.0, 'splits': 0.0, 'lemmas_conflict': 132.0, 'lemmas_loop': 96.0, 'lemmas_other': 414.0, 'lits_conflict': 258.0, 'lits_loop': 587.0, 'lits_other': 683.0, 'jumps': {'jumps': 146.0, 'jumps_bounded': 34.0, 'levels': 398.0, 'levels_bounded': 203.0, 'max': 15.0, 'max_executed': 15.0, 'max_bounded': 14.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.5081518000000003, solving_time=0.05833689999999869, total_time=0.566488699999999, clingo_stats={}))

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved.

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 3 was achieved successfully.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.120437s, Solving = 0.013497s, Total = 0.133934s
2 : Statistics :: Grounding = 0.080934s, Solving = 0.005460s, Total = 0.086393s
3 : Statistics :: Grounding = 0.090579s, Solving = 0.007492s, Total = 0.098071s
4 : Statistics :: Grounding = 0.090285s, Solving = 0.012273s, Total = 0.102558s
5 : Statistics :: Grounding = 0.125917s, Solving = 0.019615s, Total = 0.145532s

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.566489s because Manual generator exit.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.508152s, Cumulative Solving = 0.058337s, Cumulative Total = 0.566489s, Calls = 5
Model :: Total atoms = 6130, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-58-57] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2}}
{2: {1: 7}, 1: {1: 2, 2: 3}}

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8}}

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=3, plan_length=8, step_range=range(3, 9)

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=8 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 7 : Achieved sgoals 1 : Unachieved sgoals 19
Level 1 : Total sgoals 0 : Achieved sgoals 3 : Unachieved sgoals 4

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 4 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 3 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [3-3].

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 5 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [5-5].

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [4-4].

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [4-4]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [4-4], problem number = 4, increment number = 3

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 4)
	('last_sgoals', 4)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 8, initial = False, final = False, sgoals = [4-4]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 8

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 8

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [4-4])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-58] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 8...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=8, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 8), range_=None), IncPart(name='plan_module', args=('#inc', 8, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 8, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 8, 4, 4, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0033015000000000683s

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.043694s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007084s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2E65CC0>

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 8)', truth=True, inc_range=IncRange(start=8, end=9, step=1))

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 8). %* None *%
#program plan_module(#inc, 8, false, false). %* None *%
#program optimisation_module(#inc, 8, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 8, 4, 4, sequential, true). %* None *%

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      7 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('state_module', [Number(8), Number(8)]), ('plan_module', [Number(8), Number(8), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(8), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(8), Number(8), Number(4), Number(4), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('state_module', [Number(9), Number(8)]), ('plan_module', [Number(9), Number(8), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(8), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(9), Number(8), Number(4), Number(4), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122701s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(4, 8)', truth=True, inc_range=IncRange(start=8, end=9, step=1)), conversion = current_last_sgoals(4,8).

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014013s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1367137000000005, Incremental time limit = None
Running cumulative time = 0.1367137000000005, Cumulative time limit = 3600

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.122701s, Cumulative Solving = 0.014013s, Cumulative Total = 0.136714s, Calls = 1
Final Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=8, end_step=10, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12270090000000078, solving_time=0.014012799999999714, total_time=0.1367137000000005, clingo_stats={'problem': {'lp': {'atoms': 11275.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26816.0, 'bodies_tr': 26816.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 217.0, 'rules': 53721.0, 'rules_normal': 53156.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 53717.0, 'rules_tr_normal': 53156.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20740.0, 'eqs_atom': 5688.0, 'eqs_body': 1979.0, 'eqs_other': 13073.0}, 'lpStep': {'atoms': 5633.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24213.0, 'bodies_tr': 24213.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 217.0, 'rules': 47269.0, 'rules_normal': 46704.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 47265.0, 'rules_tr_normal': 46704.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8966.0, 'eqs_atom': 1395.0, 'eqs_body': 470.0, 'eqs_other': 7101.0}, 'generator': {'vars': 1535.0, 'vars_eliminated': 0.0, 'vars_frozen': 1050.0, 'constraints': 11.0, 'constraints_binary': 247.0, 'constraints_ternary': 17.0, 'acyc_edges': 0.0, 'complexity': 289.0}}, 'solving': {'solvers': {'choices': 235.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 36.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 7.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.13666534423828125, 'cpu': 0.125, 'solve': 0.005016326904296875, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.19149017333984375, 'cpu': 0.171875, 'solve': 0.00997161865234375, 'unsat': 0.0, 'sat': 0.0039730072021484375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 235.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 7.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12270090000000078, solving_time=0.014012799999999714, total_time=0.1367137000000005, clingo_stats={}))

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 4 was achieved successfully.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.122701s, Solving = 0.014013s, Total = 0.136714s

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.136714s because Manual generator exit.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.122701s, Cumulative Solving = 0.014013s, Cumulative Total = 0.136714s, Calls = 1
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8}}

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8, 4: 9}}

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=8, plan_length=9, step_range=range(8, 10)

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=9 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 7 : Achieved sgoals 1 : Unachieved sgoals 19
Level 1 : Total sgoals 0 : Achieved sgoals 4 : Unachieved sgoals 3

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 5 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 4 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [4-4].

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 6 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [6-6].

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [5-5].

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [5-5]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [5-5], problem number = 5, increment number = 4

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 5)
	('last_sgoals', 5)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 9, initial = False, final = False, sgoals = [5-5]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 9

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 9

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [5-5])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-58] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 9...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=9, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 9), range_=None), IncPart(name='plan_module', args=('#inc', 9, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 9, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 9, 5, 5, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030909000000001186s

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027163s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005274s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2ECD9F0>

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 9)', truth=True, inc_range=IncRange(start=9, end=10, step=1))

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 9). %* None *%
#program plan_module(#inc, 9, false, false). %* None *%
#program optimisation_module(#inc, 9, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 9, 5, 5, sequential, true). %* None *%

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      8 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('state_module', [Number(9), Number(9)]), ('plan_module', [Number(9), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(9), Number(9), Number(5), Number(5), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('state_module', [Number(10), Number(9)]), ('plan_module', [Number(10), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(10), Number(9), Number(5), Number(5), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123740s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(5, 9)', truth=True, inc_range=IncRange(start=9, end=10, step=1)), conversion = current_last_sgoals(5,9).

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012999s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13673949999999913, Incremental time limit = None
Running cumulative time = 0.13673949999999913, Cumulative time limit = 3600

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.123740s, Cumulative Solving = 0.012999s, Cumulative Total = 0.136739s, Calls = 1
Final Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=9, end_step=11, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12373999999999974, solving_time=0.012999499999999387, total_time=0.13673949999999913, clingo_stats={'problem': {'lp': {'atoms': 11275.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26815.0, 'bodies_tr': 26815.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 217.0, 'rules': 53720.0, 'rules_normal': 53155.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 53716.0, 'rules_tr_normal': 53155.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20740.0, 'eqs_atom': 5688.0, 'eqs_body': 1979.0, 'eqs_other': 13073.0}, 'lpStep': {'atoms': 5633.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24212.0, 'bodies_tr': 24212.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 217.0, 'rules': 47268.0, 'rules_normal': 46703.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 47264.0, 'rules_tr_normal': 46703.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8966.0, 'eqs_atom': 1395.0, 'eqs_body': 470.0, 'eqs_other': 7101.0}, 'generator': {'vars': 1535.0, 'vars_eliminated': 0.0, 'vars_frozen': 1050.0, 'constraints': 11.0, 'constraints_binary': 247.0, 'constraints_ternary': 17.0, 'acyc_edges': 0.0, 'complexity': 289.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 7.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.13663482666015625, 'cpu': 0.140625, 'solve': 0.0059566497802734375, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17254066467285156, 'cpu': 0.171875, 'solve': 0.00894927978515625, 'unsat': 0.0, 'sat': 0.0029621124267578125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 7.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12373999999999974, solving_time=0.012999499999999387, total_time=0.13673949999999913, clingo_stats={}))

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 5 was achieved successfully.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.123740s, Solving = 0.012999s, Total = 0.136739s

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.136739s because Manual generator exit.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.123740s, Cumulative Solving = 0.012999s, Cumulative Total = 0.136739s, Calls = 1
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8, 4: 9}}

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10}}

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=9, plan_length=10, step_range=range(9, 11)

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=10 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 7 : Achieved sgoals 1 : Unachieved sgoals 19
Level 1 : Total sgoals 0 : Achieved sgoals 5 : Unachieved sgoals 2

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 6 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 5 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [5-5].

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Getting sgoals range for problem number 7 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [7-7].

[13-08-2021_16-58-58] DEBUG :: core.Strategies >> Obtained sgoals range = [6-6].

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [6-6]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [6-6], problem number = 6, increment number = 5

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 6)
	('last_sgoals', 6)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 10, initial = False, final = False, sgoals = [6-6]

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 10

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 10

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [6-6])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-58] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 10...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=10, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 10), range_=None), IncPart(name='plan_module', args=('#inc', 10, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 10, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 10, 6, 6, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030719999999995196s

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026559s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006838s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2F04400>

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 10)', truth=True, inc_range=IncRange(start=10, end=11, step=1))

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 10). %* None *%
#program plan_module(#inc, 10, false, false). %* None *%
#program optimisation_module(#inc, 10, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 10, 6, 6, sequential, true). %* None *%

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      9 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('state_module', [Number(10), Number(10)]), ('plan_module', [Number(10), Number(10), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(10), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(10), Number(10), Number(6), Number(6), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('state_module', [Number(11), Number(10)]), ('plan_module', [Number(11), Number(10), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(10), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(11), Number(10), Number(6), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128341s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(6, 10)', truth=True, inc_range=IncRange(start=10, end=11, step=1)), conversion = current_last_sgoals(6,10).

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017068s.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14540820000000032, Incremental time limit = None
Running cumulative time = 0.14540820000000032, Cumulative time limit = 3600

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.128341s, Cumulative Solving = 0.017068s, Cumulative Total = 0.145408s, Calls = 1
Final Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=10, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12834069999999986, solving_time=0.017067500000000457, total_time=0.14540820000000032, clingo_stats={'problem': {'lp': {'atoms': 11264.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28194.0, 'bodies_tr': 28194.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55766.0, 'rules_normal': 55201.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55764.0, 'rules_tr_normal': 55201.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 23485.0, 'eqs_atom': 6358.0, 'eqs_body': 1828.0, 'eqs_other': 15299.0}, 'lpStep': {'atoms': 5622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25591.0, 'bodies_tr': 25591.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49314.0, 'rules_normal': 48749.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49312.0, 'rules_tr_normal': 48749.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 11711.0, 'eqs_atom': 2065.0, 'eqs_body': 319.0, 'eqs_other': 9327.0}, 'generator': {'vars': 2383.0, 'vars_eliminated': 0.0, 'vars_frozen': 1484.0, 'constraints': 7.0, 'constraints_binary': 253.0, 'constraints_ternary': 20.0, 'acyc_edges': 0.0, 'complexity': 288.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14599609375, 'cpu': 0.171875, 'solve': 0.0059566497802734375, 'unsat': 0.0, 'sat': 0.001007080078125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18286895751953125, 'cpu': 0.21875, 'solve': 0.009946823120117188, 'unsat': 0.0, 'sat': 0.003002166748046875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12834069999999986, solving_time=0.017067500000000457, total_time=0.14540820000000032, clingo_stats={}))

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 6 was achieved successfully.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.128341s, Solving = 0.017068s, Total = 0.145408s

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.145408s because Manual generator exit.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.128341s, Cumulative Solving = 0.017068s, Cumulative Total = 0.145408s, Calls = 1
Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-58] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10}}

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11}}

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=10, plan_length=11, step_range=range(10, 12)

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=11 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 7 : Achieved sgoals 1 : Unachieved sgoals 19
Level 1 : Total sgoals 0 : Achieved sgoals 6 : Unachieved sgoals 1

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Getting sgoals range for problem number 7 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Getting sgoals range for problem number 6 from scenario:
Divided plan : Level = 2, Length = 7, Actions = 7, Refined = True, Expansion = 7.00, Deviation = 0.00
Division points [total=6] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Obtained sgoals range = [6-6].

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Obtained sgoals range = [7-7].

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [7-7]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [7-7], problem number = 7, increment number = 6

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 7)
	('last_sgoals', 7)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 11, initial = False, final = False, sgoals = [7-7]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 11

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 11

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [7-7])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-59] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 11...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=11, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 11), range_=None), IncPart(name='plan_module', args=('#inc', 11, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 11, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 11, 7, 7, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003167599999999382s

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.028965s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007596s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCAF9B1680>

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 11)', truth=True, inc_range=IncRange(start=11, end=12, step=1))

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 11). %* None *%
#program plan_module(#inc, 11, false, false). %* None *%
#program optimisation_module(#inc, 11, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 11, 7, 7, sequential, true). %* None *%

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     10 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('state_module', [Number(11), Number(11)]), ('plan_module', [Number(11), Number(11), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(11), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(11), Number(11), Number(7), Number(7), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('state_module', [Number(12), Number(11)]), ('plan_module', [Number(12), Number(11), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(11), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(12), Number(11), Number(7), Number(7), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124456s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(7, 11)', truth=True, inc_range=IncRange(start=11, end=12, step=1)), conversion = current_last_sgoals(7,11).

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017097s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14155349999999967, Incremental time limit = None
Running cumulative time = 0.14155349999999967, Cumulative time limit = 3600

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.124456s, Cumulative Solving = 0.017097s, Cumulative Total = 0.141553s, Calls = 1
Final Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=11, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12445649999999997, solving_time=0.017096999999999696, total_time=0.14155349999999967, clingo_stats={'problem': {'lp': {'atoms': 11264.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28238.0, 'bodies_tr': 28238.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55811.0, 'rules_normal': 55246.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55807.0, 'rules_tr_normal': 55246.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23484.0, 'eqs_atom': 6358.0, 'eqs_body': 1828.0, 'eqs_other': 15298.0}, 'lpStep': {'atoms': 5622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25635.0, 'bodies_tr': 25635.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49359.0, 'rules_normal': 48794.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49355.0, 'rules_tr_normal': 48794.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11710.0, 'eqs_atom': 2065.0, 'eqs_body': 319.0, 'eqs_other': 9326.0}, 'generator': {'vars': 2383.0, 'vars_eliminated': 0.0, 'vars_frozen': 1484.0, 'constraints': 45.0, 'constraints_binary': 466.0, 'constraints_ternary': 46.0, 'acyc_edges': 0.0, 'complexity': 583.0}}, 'solving': {'solvers': {'choices': 213.0, 'conflicts': 10.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 36.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 21.0, 'integrated': 18.0, 'lemmas': 23.0, 'lits_learnt': 36.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 11.0, 'lemmas_other': 2.0, 'lits_conflict': 10.0, 'lits_loop': 22.0, 'lits_other': 4.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 0.0, 'levels': 10.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.14165115356445312, 'cpu': 0.140625, 'solve': 0.005016326904296875, 'unsat': 0.0, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18256759643554688, 'cpu': 0.1875, 'solve': 0.009031295776367188, 'unsat': 0.0, 'sat': 0.003017425537109375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 213.0, 'conflicts': 10.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 21.0, 'integrated': 18.0, 'lemmas': 23.0, 'lits_learnt': 36.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 11.0, 'lemmas_other': 2.0, 'lits_conflict': 10.0, 'lits_loop': 22.0, 'lits_other': 4.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 0.0, 'levels': 10.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12445649999999997, solving_time=0.017096999999999696, total_time=0.14155349999999967, clingo_stats={}))

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 7 was achieved successfully.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.124456s, Solving = 0.017097s, Total = 0.141553s

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.141553s because Manual generator exit.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.124456s, Cumulative Solving = 0.017097s, Cumulative Total = 0.141553s, Calls = 1
Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11}}

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12}}

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=11, plan_length=12, step_range=range(11, 13)

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=12 : level=2 len(self.__actions.get(level, []))=7 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 7 : Achieved sgoals 1 : Unachieved sgoals 19
Level 1 : Total sgoals 0 : Achieved sgoals 7 : Unachieved sgoals 0

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Getting sgoals range for problem number 1 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Obtained sgoals range = [1-1].

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Getting sgoals range for problem number 3 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Obtained sgoals range = [3-3].

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Obtained sgoals range = [2-2].

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [2-2]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [2-2], problem number = 2, increment number = 7

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 2)
	('last_sgoals', 2)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 7, initial = False, final = False, sgoals = [2-2]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 7

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 7

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [2-2])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-59] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 7...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=7, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 7), range_=None), IncPart(name='plan_module', args=('#inc', 7, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 7, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 7, 2, 2, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030471000000007464s

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041342s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006561s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2F0F090>

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=IncRange(start=7, end=8, step=1))

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 7). %* None *%
#program plan_module(#inc, 7, false, false). %* None *%
#program optimisation_module(#inc, 7, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 7, 2, 2, sequential, true). %* None *%

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      6 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('state_module', [Number(7), Number(7)]), ('plan_module', [Number(7), Number(7), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(7), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(7), Number(7), Number(2), Number(2), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('state_module', [Number(8), Number(7)]), ('plan_module', [Number(8), Number(7), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(7), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(8), Number(7), Number(2), Number(2), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082362s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=IncRange(start=7, end=8, step=1)), conversion = current_last_sgoals(2,7).

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008865s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.0912266000000006, Incremental time limit = None
Running cumulative time = 0.0912266000000006, Cumulative time limit = 3600

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=7, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08236199999999982, solving_time=0.008864600000000777, total_time=0.0912266000000006, clingo_stats={'problem': {'lp': {'atoms': 7658.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16512.0, 'bodies_tr': 16512.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 33718.0, 'rules_normal': 33375.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33718.0, 'rules_tr_normal': 33375.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 12528.0, 'eqs_atom': 3157.0, 'eqs_body': 1062.0, 'eqs_other': 8309.0}, 'lpStep': {'atoms': 3781.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15336.0, 'bodies_tr': 15336.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 29532.0, 'rules_normal': 29189.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29532.0, 'rules_tr_normal': 29189.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6782.0, 'eqs_atom': 1070.0, 'eqs_body': 297.0, 'eqs_other': 5415.0}, 'generator': {'vars': 1493.0, 'vars_eliminated': 0.0, 'vars_frozen': 1011.0, 'constraints': 17.0, 'constraints_binary': 212.0, 'constraints_ternary': 16.0, 'acyc_edges': 0.0, 'complexity': 263.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09073257446289062, 'cpu': 0.09375, 'solve': 0.0009708404541015625, 'unsat': 0.0009708404541015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.14159774780273438, 'cpu': 0.140625, 'solve': 0.004932403564453125, 'unsat': 0.0009708404541015625, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 14.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.08236199999999982, solving_time=0.008864600000000777, total_time=0.0912266000000006, clingo_stats={}))

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Abandon = False, Rationale = None).

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('state_module', [Number(9), Number(7)]), ('plan_module', [Number(9), Number(7), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(7), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(9), Number(7), Number(2), Number(2), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.061240s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3906, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007820s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.0690590000000002, Incremental time limit = None
Running cumulative time = 0.1602856000000008, Cumulative time limit = 3600

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.143601s, Cumulative Solving = 0.016684s, Cumulative Total = 0.160286s, Calls = 2
Final Model :: Total atoms = 3906, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=9, end_step=10, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.06123950000000011, solving_time=0.00781950000000009, total_time=0.0690590000000002, clingo_stats={'problem': {'lp': {'atoms': 9317.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29582.0, 'bodies_tr': 29582.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 411.0, 'rules': 58982.0, 'rules_normal': 58479.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 58978.0, 'rules_tr_normal': 58479.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 15175.0, 'eqs_atom': 3793.0, 'eqs_body': 1416.0, 'eqs_other': 9966.0}, 'lpStep': {'atoms': 1659.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13070.0, 'bodies_tr': 13070.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25264.0, 'rules_normal': 25104.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25260.0, 'rules_tr_normal': 25104.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2647.0, 'eqs_atom': 636.0, 'eqs_body': 354.0, 'eqs_other': 1657.0}, 'generator': {'vars': 1707.0, 'vars_eliminated': 0.0, 'vars_frozen': 1173.0, 'constraints': 68.0, 'constraints_binary': 1038.0, 'constraints_ternary': 161.0, 'acyc_edges': 0.0, 'complexity': 1315.0}}, 'solving': {'solvers': {'choices': 399.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 25.0, 'integrated': 51.0, 'lemmas': 48.0, 'lits_learnt': 87.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 207.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 13.0, 'lemmas_other': 20.0, 'lits_conflict': 15.0, 'lits_loop': 50.0, 'lits_other': 22.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.068817138671875, 'cpu': 0.0625, 'solve': 0.0039882659912109375, 'unsat': 0.0, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.21041488647460938, 'cpu': 0.203125, 'solve': 0.008920669555664062, 'unsat': 0.0009708404541015625, 'sat': 0.002964019775390625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 399.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 25.0, 'integrated': 51.0, 'lemmas': 52.0, 'lits_learnt': 91.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 18.0, 'integrated_jumps': 207.0, 'guiding_paths_lits': 78.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 17.0, 'lemmas_other': 20.0, 'lits_conflict': 15.0, 'lits_loop': 54.0, 'lits_other': 22.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14360149999999994, solving_time=0.016684100000000868, total_time=0.1602856000000008, clingo_stats={}))

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 2 was achieved successfully.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.082362s, Solving = 0.008865s, Total = 0.091227s
2 : Statistics :: Grounding = 0.061240s, Solving = 0.007820s, Total = 0.069059s

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.160286s because Manual generator exit.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.143601s, Cumulative Solving = 0.016684s, Cumulative Total = 0.160286s, Calls = 2
Model :: Total atoms = 3906, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7}}
{2: {1: 7}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12}}

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7}}
{2: {1: 7, 2: 9}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12}}

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=7, plan_length=9, step_range=range(7, 10)

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=12 : level=2 len(self.__actions.get(level, []))=9 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=7, plan_length=9, step_range=range(7, 10)

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=12 : level=2 len(self.__actions.get(level, []))=9 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00.

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> plan_length=2, true_size_bound=1, partial_problems=2

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=2, start_step=7, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=0))]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Getting sgoals range for problem number 8 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Getting sgoals range for problem number 9 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Obtained sgoals range = [9-9].

[13-08-2021_16-58-59] DEBUG :: core.Strategies >> Obtained sgoals range = [8-8].

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [8-8]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [8-8], problem number = 8, increment number = 7

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 8)
	('last_sgoals', 8)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 12, initial = False, final = False, sgoals = [8-8]

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 12

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 12

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [8-8])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-58-59] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 12...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=12, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 12), range_=None), IncPart(name='plan_module', args=('#inc', 12, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 12, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 12, 8, 8, 'sequential', 'true'), range_=None)]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003016900000000433s

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025986s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006294s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2BC9360>

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 12)', truth=True, inc_range=IncRange(start=12, end=13, step=1))

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 12). %* None *%
#program plan_module(#inc, 12, false, false). %* None *%
#program optimisation_module(#inc, 12, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 12, 8, 8, sequential, true). %* None *%

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     11 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('state_module', [Number(12), Number(12)]), ('plan_module', [Number(12), Number(12), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(12), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(12), Number(12), Number(8), Number(8), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('state_module', [Number(13), Number(12)]), ('plan_module', [Number(13), Number(12), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(12), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(13), Number(12), Number(8), Number(8), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130900s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(8, 12)', truth=True, inc_range=IncRange(start=12, end=13, step=1)), conversion = current_last_sgoals(8,12).

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017134s.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1480340000000009, Incremental time limit = None
Running cumulative time = 0.1480340000000009, Cumulative time limit = 3600

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.130900s, Cumulative Solving = 0.017134s, Cumulative Total = 0.148034s, Calls = 1
Final Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=12, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.13090009999999985, solving_time=0.017133900000001034, total_time=0.1480340000000009, clingo_stats={'problem': {'lp': {'atoms': 11264.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28245.0, 'bodies_tr': 28245.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55818.0, 'rules_normal': 55253.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55814.0, 'rules_tr_normal': 55253.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23445.0, 'eqs_atom': 6366.0, 'eqs_body': 1832.0, 'eqs_other': 15247.0}, 'lpStep': {'atoms': 5622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25642.0, 'bodies_tr': 25642.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49366.0, 'rules_normal': 48801.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49362.0, 'rules_tr_normal': 48801.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11671.0, 'eqs_atom': 2073.0, 'eqs_body': 323.0, 'eqs_other': 9275.0}, 'generator': {'vars': 2361.0, 'vars_eliminated': 0.0, 'vars_frozen': 1460.0, 'constraints': 50.0, 'constraints_binary': 505.0, 'constraints_ternary': 48.0, 'acyc_edges': 0.0, 'complexity': 629.0}}, 'solving': {'solvers': {'choices': 389.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 34.0, 'integrated': 88.0, 'lemmas': 49.0, 'lits_learnt': 70.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 181.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 16.0, 'lemmas_other': 22.0, 'lits_conflict': 11.0, 'lits_loop': 33.0, 'lits_other': 26.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1486034393310547, 'cpu': 0.140625, 'solve': 0.004985809326171875, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1845378875732422, 'cpu': 0.1875, 'solve': 0.009006500244140625, 'unsat': 0.0, 'sat': 0.003002166748046875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 389.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 34.0, 'integrated': 88.0, 'lemmas': 49.0, 'lits_learnt': 70.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 18.0, 'integrated_jumps': 181.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 16.0, 'lemmas_other': 22.0, 'lits_conflict': 11.0, 'lits_loop': 33.0, 'lits_other': 26.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13090009999999985, solving_time=0.017133900000001034, total_time=0.1480340000000009, clingo_stats={}))

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 8 was achieved successfully.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.130900s, Solving = 0.017134s, Total = 0.148034s

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.148034s because Manual generator exit.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-58-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-58-59] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.130900s, Cumulative Solving = 0.017134s, Cumulative Total = 0.148034s, Calls = 1
Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7}}
{2: {1: 7, 2: 9}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12}}

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8}}
{2: {1: 7, 2: 9}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13}}

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=12, plan_length=13, step_range=range(12, 14)

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=13 : level=2 len(self.__actions.get(level, []))=9 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 9 : Achieved sgoals 2 : Unachieved sgoals 18
Level 1 : Total sgoals 0 : Achieved sgoals 8 : Unachieved sgoals 1

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-00] DEBUG :: core.Strategies >> Getting sgoals range for problem number 9 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-00] DEBUG :: core.Strategies >> Getting sgoals range for problem number 8 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-00] DEBUG :: core.Strategies >> Obtained sgoals range = [8-8].

[13-08-2021_16-59-00] DEBUG :: core.Strategies >> Obtained sgoals range = [9-9].

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-9]

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-9], problem number = 9, increment number = 8

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 9)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 13, initial = False, final = False, sgoals = [9-9]

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 13

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 13

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [9-9])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-00] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 13...

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=13, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 13), range_=None), IncPart(name='plan_module', args=('#inc', 13, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 13, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 13, 9, 9, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0033794999999994246s

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025880s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006384s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2EDC2C0>

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 13)', truth=True, inc_range=IncRange(start=13, end=14, step=1))

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 13). %* None *%
#program plan_module(#inc, 13, false, false). %* None *%
#program optimisation_module(#inc, 13, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 13, 9, 9, sequential, true). %* None *%

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     12 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('state_module', [Number(13), Number(13)]), ('plan_module', [Number(13), Number(13), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(13), Number(13), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('state_module', [Number(14), Number(13)]), ('plan_module', [Number(14), Number(13), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(14), Number(13), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124327s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(9, 13)', truth=True, inc_range=IncRange(start=13, end=14, step=1)), conversion = current_last_sgoals(9,13).

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013811s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13813799999999965, Incremental time limit = None
Running cumulative time = 0.13813799999999965, Cumulative time limit = 3600

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=13, end_step=15, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12432650000000045, solving_time=0.0138114999999992, total_time=0.13813799999999965, clingo_stats={'problem': {'lp': {'atoms': 11264.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28200.0, 'bodies_tr': 28200.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55773.0, 'rules_normal': 55208.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55771.0, 'rules_tr_normal': 55208.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 23445.0, 'eqs_atom': 6366.0, 'eqs_body': 1832.0, 'eqs_other': 15247.0}, 'lpStep': {'atoms': 5622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25597.0, 'bodies_tr': 25597.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49321.0, 'rules_normal': 48756.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49319.0, 'rules_tr_normal': 48756.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 11671.0, 'eqs_atom': 2073.0, 'eqs_body': 323.0, 'eqs_other': 9275.0}, 'generator': {'vars': 2361.0, 'vars_eliminated': 0.0, 'vars_frozen': 1460.0, 'constraints': 6.0, 'constraints_binary': 232.0, 'constraints_ternary': 20.0, 'acyc_edges': 0.0, 'complexity': 266.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1376323699951172, 'cpu': 0.140625, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1735363006591797, 'cpu': 0.171875, 'solve': 0.004985809326171875, 'unsat': 0.0009975433349609375, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 14.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12432650000000045, solving_time=0.0138114999999992, total_time=0.13813799999999965, clingo_stats={}))

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('state_module', [Number(15), Number(13)]), ('plan_module', [Number(15), Number(13), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(15), Number(13), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085713s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005964s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09167709999999829, Incremental time limit = None
Running cumulative time = 0.22981509999999794, Cumulative time limit = 3600

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=15, end_step=16, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08571309999999954, solving_time=0.005963999999998748, total_time=0.09167709999999829, clingo_stats={'problem': {'lp': {'atoms': 13056.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49518.0, 'bodies_tr': 49518.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 45.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 728.0, 'rules': 96867.0, 'rules_normal': 96094.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 96861.0, 'rules_tr_normal': 96094.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 26045.0, 'eqs_atom': 6861.0, 'eqs_body': 2136.0, 'eqs_other': 17048.0}, 'lpStep': {'atoms': 1792.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21318.0, 'bodies_tr': 21318.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41094.0, 'rules_normal': 40886.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41090.0, 'rules_tr_normal': 40886.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2600.0, 'eqs_atom': 495.0, 'eqs_body': 304.0, 'eqs_other': 1801.0}, 'generator': {'vars': 2613.0, 'vars_eliminated': 0.0, 'vars_frozen': 1672.0, 'constraints': 67.0, 'constraints_binary': 1761.0, 'constraints_ternary': 112.0, 'acyc_edges': 0.0, 'complexity': 1976.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 16.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.09203147888183594, 'cpu': 0.09375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2655677795410156, 'cpu': 0.265625, 'solve': 0.00698089599609375, 'unsat': 0.0029926300048828125, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 30.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.2100396, solving_time=0.019775499999997947, total_time=0.22981509999999794, clingo_stats={}))

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('state_module', [Number(16), Number(13)]), ('plan_module', [Number(16), Number(13), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(16), Number(13), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094266s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007094s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10136009999999906, Incremental time limit = None
Running cumulative time = 0.331175199999997, Cumulative time limit = 3600

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=16, end_step=17, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09426629999999925, solving_time=0.007093799999999817, total_time=0.10136009999999906, clingo_stats={'problem': {'lp': {'atoms': 15518.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71221.0, 'bodies_tr': 71221.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 694.0, 'count_bodies_tr': 694.0, 'sccs': 58.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 948.0, 'rules': 138889.0, 'rules_normal': 137908.0, 'rules_choice': 969.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 138879.0, 'rules_tr_normal': 137908.0, 'rules_tr_choice': 969.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 30989.0, 'eqs_atom': 8041.0, 'eqs_body': 2554.0, 'eqs_other': 20394.0}, 'lpStep': {'atoms': 2462.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21703.0, 'bodies_tr': 21703.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 220.0, 'rules': 42022.0, 'rules_normal': 41814.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42018.0, 'rules_tr_normal': 41814.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4944.0, 'eqs_atom': 1180.0, 'eqs_body': 418.0, 'eqs_other': 3346.0}, 'generator': {'vars': 3160.0, 'vars_eliminated': 0.0, 'vars_frozen': 2069.0, 'constraints': 208.0, 'constraints_binary': 5387.0, 'constraints_ternary': 567.0, 'acyc_edges': 0.0, 'complexity': 6250.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 16.0, 'integrated': 0.0, 'lemmas': 44.0, 'lits_learnt': 340.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 70.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 44.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 340.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.10196304321289062, 'cpu': 0.109375, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.36753082275390625, 'cpu': 0.375, 'solve': 0.007978439331054688, 'unsat': 0.00399017333984375, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 16.0, 'integrated': 0.0, 'lemmas': 52.0, 'lits_learnt': 348.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 100.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 52.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 348.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.30430589999999924, solving_time=0.026869299999997764, total_time=0.331175199999997, clingo_stats={}))

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('state_module', [Number(17), Number(13)]), ('plan_module', [Number(17), Number(13), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(17), Number(13), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095135s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011034s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10616929999999947, Incremental time limit = None
Running cumulative time = 0.43734449999999647, Cumulative time limit = 3600

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=17, end_step=18, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09513489999999969, solving_time=0.011034399999999778, total_time=0.10616929999999947, clingo_stats={'problem': {'lp': {'atoms': 18558.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93835.0, 'bodies_tr': 93835.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 903.0, 'count_bodies_tr': 903.0, 'sccs': 81.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1260.0, 'rules': 182203.0, 'rules_normal': 181014.0, 'rules_choice': 1173.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 182191.0, 'rules_tr_normal': 181014.0, 'rules_tr_choice': 1173.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 37939.0, 'eqs_atom': 9635.0, 'eqs_body': 2836.0, 'eqs_other': 25468.0}, 'lpStep': {'atoms': 3040.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22614.0, 'bodies_tr': 22614.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 43314.0, 'rules_normal': 43106.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 43312.0, 'rules_tr_normal': 43106.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 6950.0, 'eqs_atom': 1594.0, 'eqs_body': 282.0, 'eqs_other': 5074.0}, 'generator': {'vars': 4350.0, 'vars_eliminated': 0.0, 'vars_frozen': 2809.0, 'constraints': 477.0, 'constraints_binary': 16322.0, 'constraints_ternary': 1787.0, 'acyc_edges': 0.0, 'complexity': 18739.0}}, 'solving': {'solvers': {'choices': 77.0, 'conflicts': 31.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 5.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 28.0, 'distributed_sum_lbd': 37.0, 'integrated': 145.0, 'lemmas': 248.0, 'lits_learnt': 975.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.0, 'integrated_imps': 98.0, 'integrated_jumps': 12.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 86.0, 'lemmas_other': 134.0, 'lits_conflict': 127.0, 'lits_loop': 641.0, 'lits_other': 207.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 14.0, 'levels': 225.0, 'levels_bounded': 154.0, 'max': 16.0, 'max_executed': 16.0, 'max_bounded': 12.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.10669708251953125, 'cpu': 0.109375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4742279052734375, 'cpu': 0.484375, 'solve': 0.009973526000976562, 'unsat': 0.005985260009765625, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 77.0, 'conflicts': 39.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 5.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 53.0, 'integrated': 145.0, 'lemmas': 300.0, 'lits_learnt': 1323.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.0, 'integrated_imps': 98.0, 'integrated_jumps': 12.0, 'guiding_paths_lits': 184.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 138.0, 'lemmas_other': 134.0, 'lits_conflict': 127.0, 'lits_loop': 989.0, 'lits_other': 207.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 14.0, 'levels': 225.0, 'levels_bounded': 154.0, 'max': 16.0, 'max_executed': 16.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.39944079999999893, solving_time=0.03790369999999754, total_time=0.43734449999999647, clingo_stats={}))

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('state_module', [Number(18), Number(13)]), ('plan_module', [Number(18), Number(13), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(13), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(18), Number(13), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096016s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 6129, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022287s.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1183027999999986, Incremental time limit = None
Running cumulative time = 0.5556472999999951, Cumulative time limit = 3600

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.495457s, Cumulative Solving = 0.060190s, Cumulative Total = 0.555647s, Calls = 5
Final Model :: Total atoms = 6129, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.09601619999999933, solving_time=0.022286599999999268, total_time=0.1183027999999986, clingo_stats={'problem': {'lp': {'atoms': 21649.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 116884.0, 'bodies_tr': 116884.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1112.0, 'count_bodies_tr': 1112.0, 'sccs': 106.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1746.0, 'rules': 225912.0, 'rules_normal': 224515.0, 'rules_choice': 1377.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 20.0, 'rules_tr': 225900.0, 'rules_tr_normal': 224515.0, 'rules_tr_choice': 1377.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 45195.0, 'eqs_atom': 11179.0, 'eqs_body': 2974.0, 'eqs_other': 31042.0}, 'lpStep': {'atoms': 3091.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23049.0, 'bodies_tr': 23049.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 43709.0, 'rules_normal': 43501.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 43709.0, 'rules_tr_normal': 43501.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 7256.0, 'eqs_atom': 1544.0, 'eqs_body': 138.0, 'eqs_other': 5574.0}, 'generator': {'vars': 6052.0, 'vars_eliminated': 0.0, 'vars_frozen': 3875.0, 'constraints': 794.0, 'constraints_binary': 24371.0, 'constraints_ternary': 2941.0, 'acyc_edges': 0.0, 'complexity': 28315.0}}, 'solving': {'solvers': {'choices': 902.0, 'conflicts': 110.0, 'conflicts_analyzed': 110.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 27.0, 'models': 1.0, 'models_level': 93.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 110.0, 'distributed_sum_lbd': 145.0, 'integrated': 372.0, 'lemmas': 681.0, 'lits_learnt': 2773.0, 'lemmas_binary': 70.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.125, 'integrated_imps': 273.0, 'integrated_jumps': 195.0, 'guiding_paths_lits': 98.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 101.0, 'lemmas_loop': 251.0, 'lemmas_other': 329.0, 'lits_conflict': 178.0, 'lits_loop': 1805.0, 'lits_other': 790.0, 'jumps': {'jumps': 110.0, 'jumps_bounded': 35.0, 'levels': 563.0, 'levels_bounded': 349.0, 'max': 19.0, 'max_executed': 18.0, 'max_bounded': 14.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.12067794799804688, 'cpu': 0.234375, 'solve': 0.0109710693359375, 'unsat': 0.0, 'sat': 0.0039882659912109375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5949058532714844, 'cpu': 0.71875, 'solve': 0.020944595336914062, 'unsat': 0.005985260009765625, 'sat': 0.005985260009765625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 979.0, 'conflicts': 149.0, 'conflicts_analyzed': 139.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 32.0, 'models': 2.0, 'models_level': 94.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 146.0, 'distributed_sum_lbd': 198.0, 'integrated': 517.0, 'lemmas': 981.0, 'lits_learnt': 4096.0, 'lemmas_binary': 81.0, 'lemmas_ternary': 62.0, 'cpu_time': 0.125, 'integrated_imps': 371.0, 'integrated_jumps': 207.0, 'guiding_paths_lits': 282.0, 'guiding_paths': 32.0, 'splits': 0.0, 'lemmas_conflict': 129.0, 'lemmas_loop': 389.0, 'lemmas_other': 463.0, 'lits_conflict': 305.0, 'lits_loop': 2794.0, 'lits_other': 997.0, 'jumps': {'jumps': 139.0, 'jumps_bounded': 49.0, 'levels': 788.0, 'levels_bounded': 503.0, 'max': 19.0, 'max_executed': 18.0, 'max_bounded': 14.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.49545699999999826, solving_time=0.06019029999999681, total_time=0.5556472999999951, clingo_stats={}))

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved.

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 9 was achieved successfully.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.124327s, Solving = 0.013811s, Total = 0.138138s
2 : Statistics :: Grounding = 0.085713s, Solving = 0.005964s, Total = 0.091677s
3 : Statistics :: Grounding = 0.094266s, Solving = 0.007094s, Total = 0.101360s
4 : Statistics :: Grounding = 0.095135s, Solving = 0.011034s, Total = 0.106169s
5 : Statistics :: Grounding = 0.096016s, Solving = 0.022287s, Total = 0.118303s

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.555647s because Manual generator exit.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.495457s, Cumulative Solving = 0.060190s, Cumulative Total = 0.555647s, Calls = 5
Model :: Total atoms = 6129, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-00] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8}}
{2: {1: 7, 2: 9}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13}}

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9}}
{2: {1: 7, 2: 9}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18}}

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=13, plan_length=18, step_range=range(13, 19)

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=18 : level=2 len(self.__actions.get(level, []))=9 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Online planning increment 9 finished.

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 9 : Achieved sgoals 2 : Unachieved sgoals 18
Level 1 : Total sgoals 0 : Achieved sgoals 9 : Unachieved sgoals 0

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-01] DEBUG :: core.Strategies >> Getting sgoals range for problem number 3 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-01] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-01] DEBUG :: core.Strategies >> Obtained sgoals range = [2-2].

[13-08-2021_16-59-01] DEBUG :: core.Strategies >> Getting sgoals range for problem number 4 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-01] DEBUG :: core.Strategies >> Obtained sgoals range = [4-4].

[13-08-2021_16-59-01] DEBUG :: core.Strategies >> Obtained sgoals range = [3-3].

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [3-3]

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [3-3], problem number = 3, increment number = 9

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 3)
	('last_sgoals', 3)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 9, initial = False, final = False, sgoals = [3-3]

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 9

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 9

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [3-3])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-01] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 9...

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=9, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 9), range_=None), IncPart(name='plan_module', args=('#inc', 9, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 9, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 9, 3, 3, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003113700000000108s

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025405s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004447s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2F5BE50>

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=IncRange(start=9, end=10, step=1))

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 9). %* None *%
#program plan_module(#inc, 9, false, false). %* None *%
#program optimisation_module(#inc, 9, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 9, 3, 3, sequential, true). %* None *%

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      8 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('state_module', [Number(9), Number(9)]), ('plan_module', [Number(9), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(9), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('state_module', [Number(10), Number(9)]), ('plan_module', [Number(10), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(10), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.086650s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=IncRange(start=9, end=10, step=1)), conversion = current_last_sgoals(3,9).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013353s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10000320000000151, Incremental time limit = None
Running cumulative time = 0.10000320000000151, Cumulative time limit = 3600

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=9, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08665030000000051, solving_time=0.013352900000001, total_time=0.10000320000000151, clingo_stats={'problem': {'lp': {'atoms': 7669.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16442.0, 'bodies_tr': 16442.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 33668.0, 'rules_normal': 33325.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33668.0, 'rules_tr_normal': 33325.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 12569.0, 'eqs_atom': 3173.0, 'eqs_body': 1072.0, 'eqs_other': 8324.0}, 'lpStep': {'atoms': 3792.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15266.0, 'bodies_tr': 15266.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 29482.0, 'rules_normal': 29139.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29482.0, 'rules_tr_normal': 29139.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6823.0, 'eqs_atom': 1086.0, 'eqs_body': 307.0, 'eqs_other': 5430.0}, 'generator': {'vars': 1481.0, 'vars_eliminated': 0.0, 'vars_frozen': 1008.0, 'constraints': 7.0, 'constraints_binary': 181.0, 'constraints_ternary': 17.0, 'acyc_edges': 0.0, 'complexity': 215.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 18.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09973526000976562, 'cpu': 0.09375, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.13264846801757812, 'cpu': 0.125, 'solve': 0.0039653778076171875, 'unsat': 0.00099945068359375, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 26.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.08665030000000051, solving_time=0.013352900000001, total_time=0.10000320000000151, clingo_stats={}))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('state_module', [Number(11), Number(9)]), ('plan_module', [Number(11), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(11), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.065562s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004979s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07054130000000036, Incremental time limit = None
Running cumulative time = 0.17054450000000188, Cumulative time limit = 3600

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.06556229999999985, solving_time=0.004979000000000511, total_time=0.07054130000000036, clingo_stats={'problem': {'lp': {'atoms': 9249.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29520.0, 'bodies_tr': 29520.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 384.0, 'rules': 58872.0, 'rules_normal': 58369.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 58868.0, 'rules_tr_normal': 58369.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 15125.0, 'eqs_atom': 3647.0, 'eqs_body': 1409.0, 'eqs_other': 10069.0}, 'lpStep': {'atoms': 1580.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13078.0, 'bodies_tr': 13078.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 3.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25.0, 'rules': 25204.0, 'rules_normal': 25044.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25200.0, 'rules_tr_normal': 25044.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2556.0, 'eqs_atom': 474.0, 'eqs_body': 337.0, 'eqs_other': 1745.0}, 'generator': {'vars': 1645.0, 'vars_eliminated': 0.0, 'vars_frozen': 1139.0, 'constraints': 30.0, 'constraints_binary': 661.0, 'constraints_ternary': 85.0, 'acyc_edges': 0.0, 'complexity': 798.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 24.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.07180404663085938, 'cpu': 0.078125, 'solve': 0.00199127197265625, 'unsat': 0.00199127197265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2044525146484375, 'cpu': 0.203125, 'solve': 0.0059566497802734375, 'unsat': 0.00299072265625, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 50.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.15221260000000036, solving_time=0.01833190000000151, total_time=0.17054450000000188, clingo_stats={}))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('state_module', [Number(12), Number(9)]), ('plan_module', [Number(12), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(12), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.065790s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004882s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07067200000000007, Incremental time limit = None
Running cumulative time = 0.24121650000000194, Cumulative time limit = 3600

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.06578989999999862, solving_time=0.004882100000001444, total_time=0.07067200000000007, clingo_stats={'problem': {'lp': {'atoms': 10960.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42817.0, 'bodies_tr': 42817.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 597.0, 'count_bodies_tr': 597.0, 'sccs': 29.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 84368.0, 'rules_normal': 83705.0, 'rules_choice': 651.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 84360.0, 'rules_tr_normal': 83705.0, 'rules_tr_choice': 651.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 18064.0, 'eqs_atom': 4330.0, 'eqs_body': 1691.0, 'eqs_other': 12043.0}, 'lpStep': {'atoms': 1711.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13297.0, 'bodies_tr': 13297.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25496.0, 'rules_normal': 25336.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25492.0, 'rules_tr_normal': 25336.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2939.0, 'eqs_atom': 683.0, 'eqs_body': 282.0, 'eqs_other': 1974.0}, 'generator': {'vars': 1984.0, 'vars_eliminated': 0.0, 'vars_frozen': 1365.0, 'constraints': 113.0, 'constraints_binary': 2641.0, 'constraints_ternary': 401.0, 'acyc_edges': 0.0, 'complexity': 3225.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 40.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.07080841064453125, 'cpu': 0.078125, 'solve': 0.001964569091796875, 'unsat': 0.001964569091796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.27526092529296875, 'cpu': 0.28125, 'solve': 0.007921218872070312, 'unsat': 0.004955291748046875, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 90.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.218002499999999, solving_time=0.023214000000002954, total_time=0.24121650000000194, clingo_stats={}))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('state_module', [Number(13), Number(9)]), ('plan_module', [Number(13), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(13), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.068401s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007122s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07552279999999989, Incremental time limit = None
Running cumulative time = 0.31673930000000183, Cumulative time limit = 3600

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.06840050000000097, solving_time=0.007122299999998916, total_time=0.07552279999999989, clingo_stats={'problem': {'lp': {'atoms': 12988.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 56539.0, 'bodies_tr': 56539.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 780.0, 'count_bodies_tr': 780.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 110490.0, 'rules_normal': 109667.0, 'rules_choice': 807.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 110480.0, 'rules_tr_normal': 109667.0, 'rules_tr_choice': 807.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 22311.0, 'eqs_atom': 5295.0, 'eqs_body': 1929.0, 'eqs_other': 15087.0}, 'lpStep': {'atoms': 2028.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13722.0, 'bodies_tr': 13722.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 154.0, 'rules': 26122.0, 'rules_normal': 25962.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 26120.0, 'rules_tr_normal': 25962.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 4247.0, 'eqs_atom': 965.0, 'eqs_body': 238.0, 'eqs_other': 3044.0}, 'generator': {'vars': 2668.0, 'vars_eliminated': 0.0, 'vars_frozen': 1819.0, 'constraints': 279.0, 'constraints_binary': 8255.0, 'constraints_ternary': 999.0, 'acyc_edges': 0.0, 'complexity': 9652.0}}, 'solving': {'solvers': {'choices': 257.0, 'conflicts': 40.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 9.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 51.0, 'integrated': 213.0, 'lemmas': 275.0, 'lits_learnt': 602.0, 'lemmas_binary': 31.0, 'lemmas_ternary': 38.0, 'cpu_time': 0.0, 'integrated_imps': 150.0, 'integrated_jumps': 141.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 70.0, 'lemmas_other': 179.0, 'lits_conflict': 34.0, 'lits_loop': 280.0, 'lits_other': 288.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 23.0, 'levels': 336.0, 'levels_bounded': 213.0, 'max': 32.0, 'max_executed': 32.0, 'max_bounded': 12.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.07679176330566406, 'cpu': 0.078125, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3520526885986328, 'cpu': 0.359375, 'solve': 0.009914398193359375, 'unsat': 0.0069484710693359375, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 257.0, 'conflicts': 45.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 51.0, 'integrated': 213.0, 'lemmas': 278.0, 'lits_learnt': 605.0, 'lemmas_binary': 31.0, 'lemmas_ternary': 38.0, 'cpu_time': 0.0, 'integrated_imps': 150.0, 'integrated_jumps': 141.0, 'guiding_paths_lits': 174.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 73.0, 'lemmas_other': 179.0, 'lits_conflict': 34.0, 'lits_loop': 283.0, 'lits_other': 288.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 23.0, 'levels': 336.0, 'levels_bounded': 213.0, 'max': 32.0, 'max_executed': 32.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.28640299999999996, solving_time=0.03033630000000187, total_time=0.31673930000000183, clingo_stats={}))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('state_module', [Number(14), Number(9)]), ('plan_module', [Number(14), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(14), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098726s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007990s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10671589999999931, Incremental time limit = None
Running cumulative time = 0.42345520000000114, Cumulative time limit = 3600

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=14, end_step=15, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09872589999999981, solving_time=0.007989999999999498, total_time=0.10671589999999931, clingo_stats={'problem': {'lp': {'atoms': 15046.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 70301.0, 'bodies_tr': 70301.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 963.0, 'count_bodies_tr': 963.0, 'sccs': 65.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 744.0, 'rules': 136648.0, 'rules_normal': 135665.0, 'rules_choice': 963.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 20.0, 'rules_tr': 136636.0, 'rules_tr_normal': 135665.0, 'rules_tr_choice': 963.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 26669.0, 'eqs_atom': 6293.0, 'eqs_body': 2190.0, 'eqs_other': 18186.0}, 'lpStep': {'atoms': 2058.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13762.0, 'bodies_tr': 13762.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 154.0, 'rules': 26158.0, 'rules_normal': 25998.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 26156.0, 'rules_tr_normal': 25998.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 4358.0, 'eqs_atom': 998.0, 'eqs_body': 261.0, 'eqs_other': 3099.0}, 'generator': {'vars': 3355.0, 'vars_eliminated': 0.0, 'vars_frozen': 2274.0, 'constraints': 347.0, 'constraints_binary': 10682.0, 'constraints_ternary': 1498.0, 'acyc_edges': 0.0, 'complexity': 12694.0}}, 'solving': {'solvers': {'choices': 141.0, 'conflicts': 33.0, 'conflicts_analyzed': 25.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 7.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 38.0, 'integrated': 102.0, 'lemmas': 143.0, 'lits_learnt': 437.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.0, 'integrated_imps': 44.0, 'integrated_jumps': 17.0, 'guiding_paths_lits': 98.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 79.0, 'lemmas_other': 44.0, 'lits_conflict': 35.0, 'lits_loop': 350.0, 'lits_other': 52.0, 'jumps': {'jumps': 25.0, 'jumps_bounded': 14.0, 'levels': 320.0, 'levels_bounded': 196.0, 'max': 19.0, 'max_executed': 17.0, 'max_bounded': 14.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.10828018188476562, 'cpu': 0.109375, 'solve': 0.0019664764404296875, 'unsat': 0.0019664764404296875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.46033287048339844, 'cpu': 0.46875, 'solve': 0.011880874633789062, 'unsat': 0.008914947509765625, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 398.0, 'conflicts': 78.0, 'conflicts_analyzed': 57.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 16.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 62.0, 'distributed_sum_lbd': 89.0, 'integrated': 315.0, 'lemmas': 421.0, 'lits_learnt': 1042.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 44.0, 'cpu_time': 0.0, 'integrated_imps': 194.0, 'integrated_jumps': 158.0, 'guiding_paths_lits': 272.0, 'guiding_paths': 32.0, 'splits': 0.0, 'lemmas_conflict': 46.0, 'lemmas_loop': 152.0, 'lemmas_other': 223.0, 'lits_conflict': 69.0, 'lits_loop': 633.0, 'lits_other': 340.0, 'jumps': {'jumps': 57.0, 'jumps_bounded': 37.0, 'levels': 656.0, 'levels_bounded': 409.0, 'max': 32.0, 'max_executed': 32.0, 'max_bounded': 14.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3851288999999998, solving_time=0.03832630000000137, total_time=0.42345520000000114, clingo_stats={}))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('state_module', [Number(15), Number(9)]), ('plan_module', [Number(15), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(15), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.072453s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007733s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08018609999999882, Incremental time limit = None
Running cumulative time = 0.5036413, Cumulative time limit = 3600

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=15, end_step=16, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.07245349999999995, solving_time=0.007732599999998868, total_time=0.08018609999999882, clingo_stats={'problem': {'lp': {'atoms': 17104.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 84065.0, 'bodies_tr': 84065.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1146.0, 'count_bodies_tr': 1146.0, 'sccs': 83.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 898.0, 'rules': 162808.0, 'rules_normal': 161665.0, 'rules_choice': 1119.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 162794.0, 'rules_tr_normal': 161665.0, 'rules_tr_choice': 1119.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 31030.0, 'eqs_atom': 7293.0, 'eqs_body': 2450.0, 'eqs_other': 21287.0}, 'lpStep': {'atoms': 2058.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13764.0, 'bodies_tr': 13764.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 154.0, 'rules': 26160.0, 'rules_normal': 26000.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 26158.0, 'rules_tr_normal': 26000.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 4361.0, 'eqs_atom': 1000.0, 'eqs_body': 260.0, 'eqs_other': 3101.0}, 'generator': {'vars': 4042.0, 'vars_eliminated': 0.0, 'vars_frozen': 2729.0, 'constraints': 426.0, 'constraints_binary': 13639.0, 'constraints_ternary': 2065.0, 'acyc_edges': 0.0, 'complexity': 16345.0}}, 'solving': {'solvers': {'choices': 167.0, 'conflicts': 50.0, 'conflicts_analyzed': 43.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 12.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 64.0, 'integrated': 157.0, 'lemmas': 235.0, 'lits_learnt': 715.0, 'lemmas_binary': 32.0, 'lemmas_ternary': 51.0, 'cpu_time': 0.0, 'integrated_imps': 62.0, 'integrated_jumps': 53.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 25.0, 'lemmas_loop': 66.0, 'lemmas_other': 144.0, 'lits_conflict': 60.0, 'lits_loop': 286.0, 'lits_other': 369.0, 'jumps': {'jumps': 43.0, 'jumps_bounded': 23.0, 'levels': 264.0, 'levels_bounded': 146.0, 'max': 18.0, 'max_executed': 15.0, 'max_bounded': 16.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.08176803588867188, 'cpu': 0.078125, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5421009063720703, 'cpu': 0.546875, 'solve': 0.013874053955078125, 'unsat': 0.010908126831054688, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 565.0, 'conflicts': 128.0, 'conflicts_analyzed': 100.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 28.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 96.0, 'distributed_sum_lbd': 153.0, 'integrated': 472.0, 'lemmas': 656.0, 'lits_learnt': 1757.0, 'lemmas_binary': 66.0, 'lemmas_ternary': 95.0, 'cpu_time': 0.0, 'integrated_imps': 256.0, 'integrated_jumps': 211.0, 'guiding_paths_lits': 368.0, 'guiding_paths': 38.0, 'splits': 0.0, 'lemmas_conflict': 71.0, 'lemmas_loop': 218.0, 'lemmas_other': 367.0, 'lits_conflict': 129.0, 'lits_loop': 919.0, 'lits_other': 709.0, 'jumps': {'jumps': 100.0, 'jumps_bounded': 60.0, 'levels': 920.0, 'levels_bounded': 555.0, 'max': 32.0, 'max_executed': 32.0, 'max_bounded': 16.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.4575823999999997, solving_time=0.046058900000000236, total_time=0.5036413, clingo_stats={}))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('state_module', [Number(16), Number(9)]), ('plan_module', [Number(16), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(16), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090079s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011285s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10136400000000023, Incremental time limit = None
Running cumulative time = 0.6050053000000002, Cumulative time limit = 3600

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=16, end_step=17, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09007889999999996, solving_time=0.01128510000000027, total_time=0.10136400000000023, clingo_stats={'problem': {'lp': {'atoms': 19162.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 98138.0, 'bodies_tr': 98138.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1329.0, 'count_bodies_tr': 1329.0, 'sccs': 103.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1225.0, 'rules': 189234.0, 'rules_normal': 187931.0, 'rules_choice': 1275.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 28.0, 'rules_tr': 189220.0, 'rules_tr_normal': 187931.0, 'rules_tr_choice': 1275.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 14.0, 'eqs': 35621.0, 'eqs_atom': 8245.0, 'eqs_body': 2558.0, 'eqs_other': 24818.0}, 'lpStep': {'atoms': 2058.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14073.0, 'bodies_tr': 14073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 327.0, 'rules': 26426.0, 'rules_normal': 26266.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 26426.0, 'rules_tr_normal': 26266.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4591.0, 'eqs_atom': 952.0, 'eqs_body': 108.0, 'eqs_other': 3531.0}, 'generator': {'vars': 5203.0, 'vars_eliminated': 0.0, 'vars_frozen': 3513.0, 'constraints': 761.0, 'constraints_binary': 23534.0, 'constraints_ternary': 3144.0, 'acyc_edges': 0.0, 'complexity': 27719.0}}, 'solving': {'solvers': {'choices': 105.0, 'conflicts': 59.0, 'conflicts_analyzed': 51.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 25.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 27.0, 'distributed_sum_lbd': 64.0, 'integrated': 117.0, 'lemmas': 284.0, 'lits_learnt': 2537.0, 'lemmas_binary': 25.0, 'lemmas_ternary': 35.0, 'cpu_time': 0.0, 'integrated_imps': 50.0, 'integrated_jumps': 29.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 158.0, 'lemmas_other': 99.0, 'lits_conflict': 412.0, 'lits_loop': 990.0, 'lits_other': 1135.0, 'jumps': {'jumps': 51.0, 'jumps_bounded': 26.0, 'levels': 219.0, 'levels_bounded': 143.0, 'max': 21.0, 'max_executed': 21.0, 'max_bounded': 18.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.10249137878417969, 'cpu': 0.109375, 'solve': 0.00399017333984375, 'unsat': 0.00399017333984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.64459228515625, 'cpu': 0.65625, 'solve': 0.017864227294921875, 'unsat': 0.014898300170898438, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 670.0, 'conflicts': 187.0, 'conflicts_analyzed': 151.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 53.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 123.0, 'distributed_sum_lbd': 217.0, 'integrated': 589.0, 'lemmas': 940.0, 'lits_learnt': 4294.0, 'lemmas_binary': 91.0, 'lemmas_ternary': 130.0, 'cpu_time': 0.0, 'integrated_imps': 306.0, 'integrated_jumps': 240.0, 'guiding_paths_lits': 494.0, 'guiding_paths': 45.0, 'splits': 0.0, 'lemmas_conflict': 98.0, 'lemmas_loop': 376.0, 'lemmas_other': 466.0, 'lits_conflict': 541.0, 'lits_loop': 1909.0, 'lits_other': 1844.0, 'jumps': {'jumps': 151.0, 'jumps_bounded': 86.0, 'levels': 1139.0, 'levels_bounded': 698.0, 'max': 32.0, 'max_executed': 32.0, 'max_bounded': 18.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.5476612999999997, solving_time=0.057344000000000506, total_time=0.6050053000000002, clingo_stats={}))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('state_module', [Number(17), Number(9)]), ('plan_module', [Number(17), Number(9), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(9), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(17), Number(9), Number(3), Number(3), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.077594s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 6674, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015322s.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.0929164999999994, Incremental time limit = None
Running cumulative time = 0.6979217999999996, Cumulative time limit = 3600

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.625255s, Cumulative Solving = 0.072667s, Cumulative Total = 0.697922s, Calls = 8
Final Model :: Total atoms = 6674, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.0775939999999995, solving_time=0.015322499999999906, total_time=0.0929164999999994, clingo_stats={'problem': {'lp': {'atoms': 21330.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 111996.0, 'bodies_tr': 111996.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1512.0, 'count_bodies_tr': 1512.0, 'sccs': 121.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1379.0, 'rules': 215488.0, 'rules_normal': 214025.0, 'rules_choice': 1431.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 32.0, 'rules_tr': 215472.0, 'rules_tr_normal': 214025.0, 'rules_tr_choice': 1431.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 40154.0, 'eqs_atom': 9267.0, 'eqs_body': 2840.0, 'eqs_other': 28047.0}, 'lpStep': {'atoms': 2168.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13858.0, 'bodies_tr': 13858.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 154.0, 'rules': 26254.0, 'rules_normal': 26094.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 26252.0, 'rules_tr_normal': 26094.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 4533.0, 'eqs_atom': 1022.0, 'eqs_body': 282.0, 'eqs_other': 3229.0}, 'generator': {'vars': 5890.0, 'vars_eliminated': 0.0, 'vars_frozen': 3968.0, 'constraints': 578.0, 'constraints_binary': 19353.0, 'constraints_ternary': 3141.0, 'acyc_edges': 0.0, 'complexity': 27719.0}}, 'solving': {'solvers': {'choices': 1108.0, 'conflicts': 113.0, 'conflicts_analyzed': 113.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 11.0, 'models': 1.0, 'models_level': 90.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 113.0, 'distributed_sum_lbd': 219.0, 'integrated': 515.0, 'lemmas': 722.0, 'lits_learnt': 5115.0, 'lemmas_binary': 124.0, 'lemmas_ternary': 81.0, 'cpu_time': 0.0, 'integrated_imps': 252.0, 'integrated_jumps': 375.0, 'guiding_paths_lits': 140.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 112.0, 'lemmas_loop': 121.0, 'lemmas_other': 489.0, 'lits_conflict': 745.0, 'lits_loop': 559.0, 'lits_other': 3811.0, 'jumps': {'jumps': 113.0, 'jumps_bounded': 13.0, 'levels': 358.0, 'levels_bounded': 76.0, 'max': 21.0, 'max_executed': 21.0, 'max_bounded': 20.0}}}}, 'summary': {'call': 8.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.09574508666992188, 'cpu': 0.078125, 'solve': 0.008974075317382812, 'unsat': 0.0, 'sat': 0.00299072265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7403373718261719, 'cpu': 0.734375, 'solve': 0.026838302612304688, 'unsat': 0.014898300170898438, 'sat': 0.00395965576171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1778.0, 'conflicts': 300.0, 'conflicts_analyzed': 264.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 64.0, 'models': 2.0, 'models_level': 91.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 236.0, 'distributed_sum_lbd': 436.0, 'integrated': 1104.0, 'lemmas': 1662.0, 'lits_learnt': 9409.0, 'lemmas_binary': 215.0, 'lemmas_ternary': 211.0, 'cpu_time': 0.0, 'integrated_imps': 558.0, 'integrated_jumps': 615.0, 'guiding_paths_lits': 634.0, 'guiding_paths': 52.0, 'splits': 0.0, 'lemmas_conflict': 210.0, 'lemmas_loop': 497.0, 'lemmas_other': 955.0, 'lits_conflict': 1286.0, 'lits_loop': 2468.0, 'lits_other': 5655.0, 'jumps': {'jumps': 264.0, 'jumps_bounded': 99.0, 'levels': 1497.0, 'levels_bounded': 774.0, 'max': 32.0, 'max_executed': 32.0, 'max_bounded': 20.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.6252552999999992, solving_time=0.07266650000000041, total_time=0.6979217999999996, clingo_stats={}))

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved.

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 3 was achieved successfully.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.086650s, Solving = 0.013353s, Total = 0.100003s
2 : Statistics :: Grounding = 0.065562s, Solving = 0.004979s, Total = 0.070541s
3 : Statistics :: Grounding = 0.065790s, Solving = 0.004882s, Total = 0.070672s
4 : Statistics :: Grounding = 0.068401s, Solving = 0.007122s, Total = 0.075523s
5 : Statistics :: Grounding = 0.098726s, Solving = 0.007990s, Total = 0.106716s
6 : Statistics :: Grounding = 0.072453s, Solving = 0.007733s, Total = 0.080186s
7 : Statistics :: Grounding = 0.090079s, Solving = 0.011285s, Total = 0.101364s
8 : Statistics :: Grounding = 0.077594s, Solving = 0.015322s, Total = 0.092916s

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.697922s because Manual generator exit.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-01] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.625255s, Cumulative Solving = 0.072667s, Cumulative Total = 0.697922s, Calls = 8
Model :: Total atoms = 6674, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9}}
{2: {1: 7, 2: 9}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18}}

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18}}

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 8 :: Actions = 8                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=9, plan_length=17, step_range=range(9, 18)

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=18 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=9, plan_length=17, step_range=range(9, 18)

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=18 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00.

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> plan_length=8, true_size_bound=1, partial_problems=8

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=8, plan_length=8, start_step=9, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Decided: number_small_problems=8, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=10, blend=Blend(left=0, right=0)), DivisionPoint(index=11, blend=Blend(left=0, right=0)), DivisionPoint(index=12, blend=Blend(left=0, right=0)), DivisionPoint(index=13, blend=Blend(left=0, right=0)), DivisionPoint(index=14, blend=Blend(left=0, right=0)), DivisionPoint(index=15, blend=Blend(left=0, right=0)), DivisionPoint(index=16, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Getting sgoals range for problem number 10 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Getting sgoals range for problem number 11 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Obtained sgoals range = [11-11].

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Obtained sgoals range = [10-10].

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [10-10]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [10-10], problem number = 10, increment number = 9

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 10)
	('last_sgoals', 10)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 18, initial = False, final = False, sgoals = [10-10]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 18

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 18

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [10-10])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-02] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 18...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=18, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 18), range_=None), IncPart(name='plan_module', args=('#inc', 18, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 18, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 18, 10, 10, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0031333000000000055s

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025320s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006314s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2E654F0>

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 18)', truth=True, inc_range=IncRange(start=18, end=19, step=1))

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 18). %* None *%
#program plan_module(#inc, 18, false, false). %* None *%
#program optimisation_module(#inc, 18, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 18, 10, 10, sequential, true). %* None *%

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     17 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('state_module', [Number(18), Number(18)]), ('plan_module', [Number(18), Number(18), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(18), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(18), Number(18), Number(10), Number(10), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('state_module', [Number(19), Number(18)]), ('plan_module', [Number(19), Number(18), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(18), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(19), Number(18), Number(10), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149559s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(10, 18)', truth=True, inc_range=IncRange(start=18, end=19, step=1)), conversion = current_last_sgoals(10,18).

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017656s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16721500000000056, Incremental time limit = None
Running cumulative time = 0.16721500000000056, Cumulative time limit = 3600

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.149559s, Cumulative Solving = 0.017656s, Cumulative Total = 0.167215s, Calls = 1
Final Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=18, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.14955929999999995, solving_time=0.017655700000000607, total_time=0.16721500000000056, clingo_stats={'problem': {'lp': {'atoms': 11275.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28106.0, 'bodies_tr': 28106.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55734.0, 'rules_normal': 55169.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55732.0, 'rules_tr_normal': 55169.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 23371.0, 'eqs_atom': 6376.0, 'eqs_body': 1846.0, 'eqs_other': 15149.0}, 'lpStep': {'atoms': 5633.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25503.0, 'bodies_tr': 25503.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49282.0, 'rules_normal': 48717.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49280.0, 'rules_tr_normal': 48717.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 11597.0, 'eqs_atom': 2083.0, 'eqs_body': 337.0, 'eqs_other': 9177.0}, 'generator': {'vars': 2348.0, 'vars_eliminated': 0.0, 'vars_frozen': 1460.0, 'constraints': 11.0, 'constraints_binary': 286.0, 'constraints_ternary': 22.0, 'acyc_edges': 0.0, 'complexity': 333.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.16655349731445312, 'cpu': 0.15625, 'solve': 0.00595855712890625, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.20196533203125, 'cpu': 0.1875, 'solve': 0.009918212890625, 'unsat': 0.0, 'sat': 0.0039310455322265625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14955929999999995, solving_time=0.017655700000000607, total_time=0.16721500000000056, clingo_stats={}))

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 10 was achieved successfully.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.149559s, Solving = 0.017656s, Total = 0.167215s

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.167215s because Manual generator exit.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.149559s, Cumulative Solving = 0.017656s, Cumulative Total = 0.167215s, Calls = 1
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18}}

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19}}

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=18, plan_length=19, step_range=range(18, 20)

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=19 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Online planning increment 10 finished.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 17 : Achieved sgoals 3 : Unachieved sgoals 17
Level 1 : Total sgoals 0 : Achieved sgoals 10 : Unachieved sgoals 7

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Getting sgoals range for problem number 11 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Getting sgoals range for problem number 10 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Obtained sgoals range = [10-10].

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Getting sgoals range for problem number 12 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Obtained sgoals range = [12-12].

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Obtained sgoals range = [11-11].

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-11]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [11-11], problem number = 11, increment number = 10

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 11)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 19, initial = False, final = False, sgoals = [11-11]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 19

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 19

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [11-11])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-02] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 19...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=19, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 19), range_=None), IncPart(name='plan_module', args=('#inc', 19, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 19, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 19, 11, 11, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003027099999998839s

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026710s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011158s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2EECC70>

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 19)', truth=True, inc_range=IncRange(start=19, end=20, step=1))

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 19). %* None *%
#program plan_module(#inc, 19, false, false). %* None *%
#program optimisation_module(#inc, 19, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 19, 11, 11, sequential, true). %* None *%

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     18 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('state_module', [Number(19), Number(19)]), ('plan_module', [Number(19), Number(19), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(19), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(19), Number(19), Number(11), Number(11), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('state_module', [Number(20), Number(19)]), ('plan_module', [Number(20), Number(19), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(19), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(20), Number(19), Number(11), Number(11), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153206s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(11, 19)', truth=True, inc_range=IncRange(start=19, end=20, step=1)), conversion = current_last_sgoals(11,19).

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016946s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17015199999999986, Incremental time limit = None
Running cumulative time = 0.17015199999999986, Cumulative time limit = 3600

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=19, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.1532057999999985, solving_time=0.016946200000001355, total_time=0.17015199999999986, clingo_stats={'problem': {'lp': {'atoms': 11276.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28161.0, 'bodies_tr': 28161.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55789.0, 'rules_normal': 55224.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55785.0, 'rules_tr_normal': 55224.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23388.0, 'eqs_atom': 6376.0, 'eqs_body': 1845.0, 'eqs_other': 15167.0}, 'lpStep': {'atoms': 5634.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25558.0, 'bodies_tr': 25558.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49337.0, 'rules_normal': 48772.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49333.0, 'rules_tr_normal': 48772.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11614.0, 'eqs_atom': 2083.0, 'eqs_body': 336.0, 'eqs_other': 9195.0}, 'generator': {'vars': 2347.0, 'vars_eliminated': 0.0, 'vars_frozen': 1460.0, 'constraints': 61.0, 'constraints_binary': 604.0, 'constraints_ternary': 49.0, 'acyc_edges': 0.0, 'complexity': 744.0}}, 'solving': {'solvers': {'choices': 36.0, 'conflicts': 14.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 22.0, 'integrated': 42.0, 'lemmas': 41.0, 'lits_learnt': 52.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 21.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 9.0, 'lemmas_other': 24.0, 'lits_conflict': 8.0, 'lits_loop': 16.0, 'lits_other': 28.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 8.0, 'levels': 84.0, 'levels_bounded': 48.0, 'max': 13.0, 'max_executed': 7.0, 'max_bounded': 6.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.16952133178710938, 'cpu': 0.171875, 'solve': 0.000995635986328125, 'unsat': 0.000995635986328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.21043777465820312, 'cpu': 0.21875, 'solve': 0.00997161865234375, 'unsat': 0.000995635986328125, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 36.0, 'conflicts': 14.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 22.0, 'integrated': 42.0, 'lemmas': 41.0, 'lits_learnt': 52.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 21.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 50.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 9.0, 'lemmas_other': 24.0, 'lits_conflict': 8.0, 'lits_loop': 16.0, 'lits_other': 28.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 8.0, 'levels': 84.0, 'levels_bounded': 48.0, 'max': 13.0, 'max_executed': 7.0, 'max_bounded': 6.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1532057999999985, solving_time=0.016946200000001355, total_time=0.17015199999999986, clingo_stats={}))

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('state_module', [Number(21), Number(19)]), ('plan_module', [Number(21), Number(19), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(19), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(21), Number(19), Number(11), Number(11), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088579s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4555, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009930s.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09850959999999986, Incremental time limit = None
Running cumulative time = 0.2686615999999997, Cumulative time limit = 3600

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.241785s, Cumulative Solving = 0.026877s, Cumulative Total = 0.268662s, Calls = 2
Final Model :: Total atoms = 4555, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.08857910000000047, solving_time=0.009930499999999398, total_time=0.09850959999999986, clingo_stats={'problem': {'lp': {'atoms': 13776.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49572.0, 'bodies_tr': 49572.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 794.0, 'rules': 97297.0, 'rules_normal': 96524.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 97289.0, 'rules_tr_normal': 96524.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27189.0, 'eqs_atom': 7279.0, 'eqs_body': 2141.0, 'eqs_other': 17769.0}, 'lpStep': {'atoms': 2500.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21411.0, 'bodies_tr': 21411.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 196.0, 'rules': 41508.0, 'rules_normal': 41300.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41504.0, 'rules_tr_normal': 41300.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3801.0, 'eqs_atom': 903.0, 'eqs_body': 296.0, 'eqs_other': 2602.0}, 'generator': {'vars': 2701.0, 'vars_eliminated': 0.0, 'vars_frozen': 1735.0, 'constraints': 147.0, 'constraints_binary': 1822.0, 'constraints_ternary': 240.0, 'acyc_edges': 0.0, 'complexity': 2269.0}}, 'solving': {'solvers': {'choices': 702.0, 'conflicts': 39.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 45.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 45.0, 'distributed_sum_lbd': 52.0, 'integrated': 139.0, 'lemmas': 187.0, 'lits_learnt': 297.0, 'lemmas_binary': 38.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 100.0, 'integrated_jumps': 326.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 39.0, 'lemmas_loop': 25.0, 'lemmas_other': 123.0, 'lits_conflict': 41.0, 'lits_loop': 102.0, 'lits_other': 154.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 8.0, 'levels': 173.0, 'levels_bounded': 64.0, 'max': 23.0, 'max_executed': 20.0, 'max_bounded': 8.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.0997314453125, 'cpu': 0.109375, 'solve': 0.00595855712890625, 'unsat': 0.0, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3101692199707031, 'cpu': 0.328125, 'solve': 0.01593017578125, 'unsat': 0.000995635986328125, 'sat': 0.002971649169921875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 738.0, 'conflicts': 53.0, 'conflicts_analyzed': 47.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 46.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 60.0, 'distributed_sum_lbd': 74.0, 'integrated': 181.0, 'lemmas': 228.0, 'lits_learnt': 349.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 121.0, 'integrated_jumps': 326.0, 'guiding_paths_lits': 114.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 47.0, 'lemmas_loop': 34.0, 'lemmas_other': 147.0, 'lits_conflict': 49.0, 'lits_loop': 118.0, 'lits_other': 182.0, 'jumps': {'jumps': 47.0, 'jumps_bounded': 16.0, 'levels': 257.0, 'levels_bounded': 112.0, 'max': 23.0, 'max_executed': 20.0, 'max_bounded': 8.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.24178489999999897, solving_time=0.026876700000000753, total_time=0.2686615999999997, clingo_stats={}))

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 11 was achieved successfully.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.153206s, Solving = 0.016946s, Total = 0.170152s
2 : Statistics :: Grounding = 0.088579s, Solving = 0.009930s, Total = 0.098510s

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.268662s because Manual generator exit.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.241785s, Cumulative Solving = 0.026877s, Cumulative Total = 0.268662s, Calls = 2
Model :: Total atoms = 4555, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19}}

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21}}

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=19, plan_length=21, step_range=range(19, 22)

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=21 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Online planning increment 11 finished.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 17 : Achieved sgoals 3 : Unachieved sgoals 17
Level 1 : Total sgoals 0 : Achieved sgoals 11 : Unachieved sgoals 6

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Getting sgoals range for problem number 12 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Getting sgoals range for problem number 11 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Obtained sgoals range = [11-11].

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Getting sgoals range for problem number 13 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Obtained sgoals range = [13-13].

[13-08-2021_16-59-02] DEBUG :: core.Strategies >> Obtained sgoals range = [12-12].

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [12-12]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [12-12], problem number = 12, increment number = 11

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 12)
	('last_sgoals', 12)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 21, initial = False, final = False, sgoals = [12-12]

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 21

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 21

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [12-12])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-02] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-02] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 21...

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=21, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 21), range_=None), IncPart(name='plan_module', args=('#inc', 21, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 21, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 21, 12, 12, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0031333000000000055s

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.035766s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011317s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2F689A0>

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 21)', truth=True, inc_range=IncRange(start=21, end=22, step=1))

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 21). %* None *%
#program plan_module(#inc, 21, false, false). %* None *%
#program optimisation_module(#inc, 21, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 21, 12, 12, sequential, true). %* None *%

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     20 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('state_module', [Number(21), Number(21)]), ('plan_module', [Number(21), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(21), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(21), Number(21), Number(12), Number(12), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('state_module', [Number(22), Number(21)]), ('plan_module', [Number(22), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(21), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(22), Number(21), Number(12), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141240s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(12, 21)', truth=True, inc_range=IncRange(start=21, end=22, step=1)), conversion = current_last_sgoals(12,21).

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017257s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15849709999999817, Incremental time limit = None
Running cumulative time = 0.15849709999999817, Cumulative time limit = 3600

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.141240s, Cumulative Solving = 0.017257s, Cumulative Total = 0.158497s, Calls = 1
Final Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=21, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.14123979999999925, solving_time=0.01725729999999892, total_time=0.15849709999999817, clingo_stats={'problem': {'lp': {'atoms': 11276.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28154.0, 'bodies_tr': 28154.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55774.0, 'rules_normal': 55209.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55770.0, 'rules_tr_normal': 55209.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23508.0, 'eqs_atom': 6363.0, 'eqs_body': 1837.0, 'eqs_other': 15308.0}, 'lpStep': {'atoms': 5634.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25551.0, 'bodies_tr': 25551.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49322.0, 'rules_normal': 48757.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49318.0, 'rules_tr_normal': 48757.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11734.0, 'eqs_atom': 2070.0, 'eqs_body': 328.0, 'eqs_other': 9336.0}, 'generator': {'vars': 2374.0, 'vars_eliminated': 0.0, 'vars_frozen': 1493.0, 'constraints': 54.0, 'constraints_binary': 551.0, 'constraints_ternary': 48.0, 'acyc_edges': 0.0, 'complexity': 683.0}}, 'solving': {'solvers': {'choices': 374.0, 'conflicts': 10.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 31.0, 'integrated': 80.0, 'lemmas': 46.0, 'lits_learnt': 66.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 16.0, 'integrated_jumps': 166.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 16.0, 'lemmas_other': 20.0, 'lits_conflict': 10.0, 'lits_loop': 32.0, 'lits_other': 24.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 0.0, 'levels': 10.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.15758895874023438, 'cpu': 0.15625, 'solve': 0.0049915313720703125, 'unsat': 0.0, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.20845985412597656, 'cpu': 0.203125, 'solve': 0.010972976684570312, 'unsat': 0.0, 'sat': 0.00395965576171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 374.0, 'conflicts': 10.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 31.0, 'integrated': 80.0, 'lemmas': 46.0, 'lits_learnt': 66.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 16.0, 'integrated_jumps': 166.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 16.0, 'lemmas_other': 20.0, 'lits_conflict': 10.0, 'lits_loop': 32.0, 'lits_other': 24.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 0.0, 'levels': 10.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14123979999999925, solving_time=0.01725729999999892, total_time=0.15849709999999817, clingo_stats={}))

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved.

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 12 was achieved successfully.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.141240s, Solving = 0.017257s, Total = 0.158497s

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.158497s because Manual generator exit.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.141240s, Cumulative Solving = 0.017257s, Cumulative Total = 0.158497s, Calls = 1
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21}}

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22}}

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=21, plan_length=22, step_range=range(21, 23)

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=22 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Online planning increment 12 finished.

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 17 : Achieved sgoals 3 : Unachieved sgoals 17
Level 1 : Total sgoals 0 : Achieved sgoals 12 : Unachieved sgoals 5

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-03] DEBUG :: core.Strategies >> Getting sgoals range for problem number 13 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-03] DEBUG :: core.Strategies >> Getting sgoals range for problem number 12 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-03] DEBUG :: core.Strategies >> Obtained sgoals range = [12-12].

[13-08-2021_16-59-03] DEBUG :: core.Strategies >> Getting sgoals range for problem number 14 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-03] DEBUG :: core.Strategies >> Obtained sgoals range = [14-14].

[13-08-2021_16-59-03] DEBUG :: core.Strategies >> Obtained sgoals range = [13-13].

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [13-13]

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [13-13], problem number = 13, increment number = 12

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 13)
	('last_sgoals', 13)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 22, initial = False, final = False, sgoals = [13-13]

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 22

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 22

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [13-13])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-03] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 22...

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=22, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 22), range_=None), IncPart(name='plan_module', args=('#inc', 22, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 22, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 22, 13, 13, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00300229999999857s

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027062s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006149s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2FDB6D0>

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 22)', truth=True, inc_range=IncRange(start=22, end=23, step=1))

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 22). %* None *%
#program plan_module(#inc, 22, false, false). %* None *%
#program optimisation_module(#inc, 22, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 22, 13, 13, sequential, true). %* None *%

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     21 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('state_module', [Number(22), Number(22)]), ('plan_module', [Number(22), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(22), Number(22), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('state_module', [Number(23), Number(22)]), ('plan_module', [Number(23), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(23), Number(22), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123099s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(13, 22)', truth=True, inc_range=IncRange(start=22, end=23, step=1)), conversion = current_last_sgoals(13,22).

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014242s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13734119999999983, Incremental time limit = None
Running cumulative time = 0.13734119999999983, Cumulative time limit = 3600

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=22, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12309899999999985, solving_time=0.014242199999999983, total_time=0.13734119999999983, clingo_stats={'problem': {'lp': {'atoms': 11276.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28114.0, 'bodies_tr': 28114.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55734.0, 'rules_normal': 55169.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55732.0, 'rules_tr_normal': 55169.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 23514.0, 'eqs_atom': 6362.0, 'eqs_body': 1837.0, 'eqs_other': 15315.0}, 'lpStep': {'atoms': 5634.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25511.0, 'bodies_tr': 25511.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49282.0, 'rules_normal': 48717.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49280.0, 'rules_tr_normal': 48717.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 11740.0, 'eqs_atom': 2069.0, 'eqs_body': 328.0, 'eqs_other': 9343.0}, 'generator': {'vars': 2374.0, 'vars_eliminated': 0.0, 'vars_frozen': 1493.0, 'constraints': 6.0, 'constraints_binary': 240.0, 'constraints_ternary': 20.0, 'acyc_edges': 0.0, 'complexity': 274.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 12.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.13778114318847656, 'cpu': 0.125, 'solve': 0.00211334228515625, 'unsat': 0.00211334228515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.174652099609375, 'cpu': 0.15625, 'solve': 0.006072998046875, 'unsat': 0.00211334228515625, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 20.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12309899999999985, solving_time=0.014242199999999983, total_time=0.13734119999999983, clingo_stats={}))

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('state_module', [Number(24), Number(22)]), ('plan_module', [Number(24), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(24), Number(22), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080641s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005243s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08588410000000124, Incremental time limit = None
Running cumulative time = 0.22322530000000107, Cumulative time limit = 3600

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=24, end_step=25, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08064090000000057, solving_time=0.0052432000000006695, total_time=0.08588410000000124, clingo_stats={'problem': {'lp': {'atoms': 13079.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49434.0, 'bodies_tr': 49434.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 713.0, 'rules': 96847.0, 'rules_normal': 96074.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 96841.0, 'rules_tr_normal': 96074.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 26110.0, 'eqs_atom': 6841.0, 'eqs_body': 2149.0, 'eqs_other': 17120.0}, 'lpStep': {'atoms': 1803.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21320.0, 'bodies_tr': 21320.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 123.0, 'rules': 41113.0, 'rules_normal': 40905.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41109.0, 'rules_tr_normal': 40905.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2596.0, 'eqs_atom': 479.0, 'eqs_body': 312.0, 'eqs_other': 1805.0}, 'generator': {'vars': 2665.0, 'vars_eliminated': 0.0, 'vars_frozen': 1711.0, 'constraints': 76.0, 'constraints_binary': 1389.0, 'constraints_ternary': 181.0, 'acyc_edges': 0.0, 'complexity': 1690.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 16.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08675575256347656, 'cpu': 0.078125, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.26140785217285156, 'cpu': 0.234375, 'solve': 0.0070705413818359375, 'unsat': 0.0031108856201171875, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 36.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.20373990000000042, solving_time=0.019485400000000652, total_time=0.22322530000000107, clingo_stats={}))

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('state_module', [Number(25), Number(22)]), ('plan_module', [Number(25), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(25), Number(22), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124925s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009585s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13451020000000113, Incremental time limit = None
Running cumulative time = 0.3577355000000022, Cumulative time limit = 3600

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12492510000000046, solving_time=0.00958510000000068, total_time=0.13451020000000113, clingo_stats={'problem': {'lp': {'atoms': 15501.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71111.0, 'bodies_tr': 71111.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 694.0, 'count_bodies_tr': 694.0, 'sccs': 57.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 926.0, 'rules': 138828.0, 'rules_normal': 137847.0, 'rules_choice': 969.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 138818.0, 'rules_tr_normal': 137847.0, 'rules_tr_choice': 969.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 30642.0, 'eqs_atom': 7971.0, 'eqs_body': 2444.0, 'eqs_other': 20227.0}, 'lpStep': {'atoms': 2422.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21677.0, 'bodies_tr': 21677.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 213.0, 'rules': 41981.0, 'rules_normal': 41773.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41977.0, 'rules_tr_normal': 41773.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4532.0, 'eqs_atom': 1130.0, 'eqs_body': 295.0, 'eqs_other': 3107.0}, 'generator': {'vars': 3167.0, 'vars_eliminated': 0.0, 'vars_frozen': 2069.0, 'constraints': 206.0, 'constraints_binary': 4396.0, 'constraints_ternary': 544.0, 'acyc_edges': 0.0, 'complexity': 5228.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 8.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 70.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1356334686279297, 'cpu': 0.125, 'solve': 0.002964019775390625, 'unsat': 0.002964019775390625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.39704132080078125, 'cpu': 0.359375, 'solve': 0.010034561157226562, 'unsat': 0.0060749053955078125, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 16.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 106.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 12.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 16.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3286650000000009, solving_time=0.02907050000000133, total_time=0.3577355000000022, clingo_stats={}))

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('state_module', [Number(26), Number(22)]), ('plan_module', [Number(26), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(26), Number(22), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092425s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009211s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10163549999999866, Incremental time limit = None
Running cumulative time = 0.45937100000000086, Cumulative time limit = 3600

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09242489999999925, solving_time=0.009210599999999403, total_time=0.10163549999999866, clingo_stats={'problem': {'lp': {'atoms': 18297.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93169.0, 'bodies_tr': 93169.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 903.0, 'count_bodies_tr': 903.0, 'sccs': 70.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1160.0, 'rules': 181456.0, 'rules_normal': 180267.0, 'rules_choice': 1173.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 181444.0, 'rules_tr_normal': 180267.0, 'rules_tr_choice': 1173.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 36694.0, 'eqs_atom': 9437.0, 'eqs_body': 2887.0, 'eqs_other': 24370.0}, 'lpStep': {'atoms': 2796.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22058.0, 'bodies_tr': 22058.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42628.0, 'rules_normal': 42420.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42626.0, 'rules_tr_normal': 42420.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 6052.0, 'eqs_atom': 1466.0, 'eqs_body': 443.0, 'eqs_other': 4143.0}, 'generator': {'vars': 3975.0, 'vars_eliminated': 0.0, 'vars_frozen': 2593.0, 'constraints': 378.0, 'constraints_binary': 10273.0, 'constraints_ternary': 1171.0, 'acyc_edges': 0.0, 'complexity': 11961.0}}, 'solving': {'solvers': {'choices': 69.0, 'conflicts': 45.0, 'conflicts_analyzed': 37.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 14.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 43.0, 'integrated': 144.0, 'lemmas': 178.0, 'lits_learnt': 435.0, 'lemmas_binary': 46.0, 'lemmas_ternary': 33.0, 'cpu_time': 0.0, 'integrated_imps': 86.0, 'integrated_jumps': 22.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 15.0, 'lemmas_other': 141.0, 'lits_conflict': 52.0, 'lits_loop': 52.0, 'lits_other': 331.0, 'jumps': {'jumps': 37.0, 'jumps_bounded': 19.0, 'levels': 128.0, 'levels_bounded': 74.0, 'max': 14.0, 'max_executed': 4.0, 'max_bounded': 12.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10172653198242188, 'cpu': 0.09375, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4987678527832031, 'cpu': 0.453125, 'solve': 0.012002944946289062, 'unsat': 0.008043289184570312, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 69.0, 'conflicts': 50.0, 'conflicts_analyzed': 37.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 14.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 30.0, 'distributed_sum_lbd': 51.0, 'integrated': 144.0, 'lemmas': 190.0, 'lits_learnt': 451.0, 'lemmas_binary': 50.0, 'lemmas_ternary': 33.0, 'cpu_time': 0.0, 'integrated_imps': 86.0, 'integrated_jumps': 22.0, 'guiding_paths_lits': 190.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 27.0, 'lemmas_other': 141.0, 'lits_conflict': 52.0, 'lits_loop': 68.0, 'lits_other': 331.0, 'jumps': {'jumps': 37.0, 'jumps_bounded': 19.0, 'levels': 128.0, 'levels_bounded': 74.0, 'max': 14.0, 'max_executed': 4.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.42108990000000013, solving_time=0.038281100000000734, total_time=0.45937100000000086, clingo_stats={}))

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('state_module', [Number(27), Number(22)]), ('plan_module', [Number(27), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(27), Number(22), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098581s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012537s.

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11111820000000172, Incremental time limit = None
Running cumulative time = 0.5704892000000026, Cumulative time limit = 3600

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=27, end_step=28, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09858080000000058, solving_time=0.012537400000001142, total_time=0.11111820000000172, clingo_stats={'problem': {'lp': {'atoms': 21358.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115862.0, 'bodies_tr': 115862.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1112.0, 'count_bodies_tr': 1112.0, 'sccs': 95.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1646.0, 'rules': 224843.0, 'rules_normal': 223446.0, 'rules_choice': 1377.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 20.0, 'rules_tr': 224830.0, 'rules_tr_normal': 223446.0, 'rules_tr_choice': 1377.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 7.0, 'eqs': 43902.0, 'eqs_atom': 11006.0, 'eqs_body': 3155.0, 'eqs_other': 29741.0}, 'lpStep': {'atoms': 3061.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22693.0, 'bodies_tr': 22693.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 43387.0, 'rules_normal': 43179.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 43386.0, 'rules_tr_normal': 43179.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 3.0, 'eqs': 7208.0, 'eqs_atom': 1569.0, 'eqs_body': 268.0, 'eqs_other': 5371.0}, 'generator': {'vars': 5535.0, 'vars_eliminated': 0.0, 'vars_frozen': 3592.0, 'constraints': 814.0, 'constraints_binary': 21551.0, 'constraints_ternary': 2784.0, 'acyc_edges': 0.0, 'complexity': 25368.0}}, 'solving': {'solvers': {'choices': 60.0, 'conflicts': 52.0, 'conflicts_analyzed': 45.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 35.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 28.0, 'distributed_sum_lbd': 37.0, 'integrated': 128.0, 'lemmas': 163.0, 'lits_learnt': 299.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 37.0, 'cpu_time': 0.0, 'integrated_imps': 127.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 98.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 7.0, 'lemmas_other': 128.0, 'lits_conflict': 42.0, 'lits_loop': 63.0, 'lits_other': 194.0, 'jumps': {'jumps': 45.0, 'jumps_bounded': 40.0, 'levels': 334.0, 'levels_bounded': 287.0, 'max': 17.0, 'max_executed': 15.0, 'max_bounded': 14.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.11170196533203125, 'cpu': 0.109375, 'solve': 0.0029621124267578125, 'unsat': 0.0029621124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6104698181152344, 'cpu': 0.5625, 'solve': 0.014965057373046875, 'unsat': 0.011005401611328125, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 129.0, 'conflicts': 102.0, 'conflicts_analyzed': 82.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 49.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 58.0, 'distributed_sum_lbd': 88.0, 'integrated': 272.0, 'lemmas': 353.0, 'lits_learnt': 750.0, 'lemmas_binary': 56.0, 'lemmas_ternary': 70.0, 'cpu_time': 0.0, 'integrated_imps': 213.0, 'integrated_jumps': 33.0, 'guiding_paths_lits': 288.0, 'guiding_paths': 33.0, 'splits': 0.0, 'lemmas_conflict': 50.0, 'lemmas_loop': 34.0, 'lemmas_other': 269.0, 'lits_conflict': 94.0, 'lits_loop': 131.0, 'lits_other': 525.0, 'jumps': {'jumps': 82.0, 'jumps_bounded': 59.0, 'levels': 462.0, 'levels_bounded': 361.0, 'max': 17.0, 'max_executed': 15.0, 'max_bounded': 14.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.5196707000000007, solving_time=0.050818500000001876, total_time=0.5704892000000026, clingo_stats={}))

[13-08-2021_16-59-03] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('state_module', [Number(28), Number(22)]), ('plan_module', [Number(28), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(28), Number(22), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102854s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 6719, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026915s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1297688000000008, Incremental time limit = None
Running cumulative time = 0.7002580000000034, Cumulative time limit = 3600

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.622524s, Cumulative Solving = 0.077734s, Cumulative Total = 0.700258s, Calls = 6
Final Model :: Total atoms = 6719, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.10285360000000132, solving_time=0.026915199999999473, total_time=0.1297688000000008, clingo_stats={'problem': {'lp': {'atoms': 24691.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 139746.0, 'bodies_tr': 139746.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1321.0, 'count_bodies_tr': 1321.0, 'sccs': 120.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2136.0, 'rules': 269521.0, 'rules_normal': 267916.0, 'rules_choice': 1581.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 269508.0, 'rules_tr_normal': 267916.0, 'rules_tr_choice': 1581.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 52272.0, 'eqs_atom': 12790.0, 'eqs_body': 3295.0, 'eqs_other': 36187.0}, 'lpStep': {'atoms': 3333.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23884.0, 'bodies_tr': 23884.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 44678.0, 'rules_normal': 44470.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 44678.0, 'rules_tr_normal': 44470.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 8370.0, 'eqs_atom': 1784.0, 'eqs_body': 140.0, 'eqs_other': 6446.0}, 'generator': {'vars': 7400.0, 'vars_eliminated': 0.0, 'vars_frozen': 4693.0, 'constraints': 1305.0, 'constraints_binary': 41414.0, 'constraints_ternary': 5267.0, 'acyc_edges': 0.0, 'complexity': 48285.0}}, 'solving': {'solvers': {'choices': 1291.0, 'conflicts': 99.0, 'conflicts_analyzed': 99.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 49.0, 'models': 1.0, 'models_level': 105.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 102.0, 'distributed_sum_lbd': 146.0, 'integrated': 438.0, 'lemmas': 600.0, 'lits_learnt': 5037.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 34.0, 'cpu_time': 0.078125, 'integrated_imps': 411.0, 'integrated_jumps': 608.0, 'guiding_paths_lits': 112.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 88.0, 'lemmas_loop': 92.0, 'lemmas_other': 420.0, 'lits_conflict': 667.0, 'lits_loop': 530.0, 'lits_other': 3840.0, 'jumps': {'jumps': 99.0, 'jumps_bounded': 47.0, 'levels': 270.0, 'levels_bounded': 167.0, 'max': 21.0, 'max_executed': 17.0, 'max_bounded': 16.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.13162994384765625, 'cpu': 0.21875, 'solve': 0.011966705322265625, 'unsat': 0.0, 'sat': 0.004985809326171875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7420997619628906, 'cpu': 0.78125, 'solve': 0.0269317626953125, 'unsat': 0.011005401611328125, 'sat': 0.0069522857666015625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1420.0, 'conflicts': 201.0, 'conflicts_analyzed': 181.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 98.0, 'models': 2.0, 'models_level': 106.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 160.0, 'distributed_sum_lbd': 234.0, 'integrated': 710.0, 'lemmas': 953.0, 'lits_learnt': 5787.0, 'lemmas_binary': 70.0, 'lemmas_ternary': 104.0, 'cpu_time': 0.078125, 'integrated_imps': 624.0, 'integrated_jumps': 641.0, 'guiding_paths_lits': 400.0, 'guiding_paths': 40.0, 'splits': 0.0, 'lemmas_conflict': 138.0, 'lemmas_loop': 126.0, 'lemmas_other': 689.0, 'lits_conflict': 761.0, 'lits_loop': 661.0, 'lits_other': 4365.0, 'jumps': {'jumps': 181.0, 'jumps_bounded': 106.0, 'levels': 732.0, 'levels_bounded': 528.0, 'max': 21.0, 'max_executed': 17.0, 'max_bounded': 16.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.622524300000002, solving_time=0.07773370000000135, total_time=0.7002580000000034, clingo_stats={}))

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 13 was achieved successfully.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.123099s, Solving = 0.014242s, Total = 0.137341s
2 : Statistics :: Grounding = 0.080641s, Solving = 0.005243s, Total = 0.085884s
3 : Statistics :: Grounding = 0.124925s, Solving = 0.009585s, Total = 0.134510s
4 : Statistics :: Grounding = 0.092425s, Solving = 0.009211s, Total = 0.101635s
5 : Statistics :: Grounding = 0.098581s, Solving = 0.012537s, Total = 0.111118s
6 : Statistics :: Grounding = 0.102854s, Solving = 0.026915s, Total = 0.129769s

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.700258s because Manual generator exit.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.622524s, Cumulative Solving = 0.077734s, Cumulative Total = 0.700258s, Calls = 6
Model :: Total atoms = 6719, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22}}

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28}}

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 6 :: Actions = 6                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=22, plan_length=28, step_range=range(22, 29)

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=28 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Online planning increment 13 finished.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 17 : Achieved sgoals 3 : Unachieved sgoals 17
Level 1 : Total sgoals 0 : Achieved sgoals 13 : Unachieved sgoals 4

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Getting sgoals range for problem number 14 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Getting sgoals range for problem number 13 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Obtained sgoals range = [13-13].

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Getting sgoals range for problem number 15 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Obtained sgoals range = [15-15].

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Obtained sgoals range = [14-14].

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [14-14]

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [14-14], problem number = 14, increment number = 13

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 14)
	('last_sgoals', 14)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 28, initial = False, final = False, sgoals = [14-14]

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 28

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 28

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [14-14])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-04] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 28...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=28, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 28), range_=None), IncPart(name='plan_module', args=('#inc', 28, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 28, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 28, 14, 14, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006754899999998898s

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029840s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006606s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2E57040>

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=IncRange(start=28, end=29, step=1))

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 28). %* None *%
#program plan_module(#inc, 28, false, false). %* None *%
#program optimisation_module(#inc, 28, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 28, 14, 14, sequential, true). %* None *%

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     27 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('state_module', [Number(28), Number(28)]), ('plan_module', [Number(28), Number(28), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(28), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(28), Number(28), Number(14), Number(14), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('state_module', [Number(29), Number(28)]), ('plan_module', [Number(29), Number(28), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(28), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(29), Number(28), Number(14), Number(14), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122663s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=IncRange(start=28, end=29, step=1)), conversion = current_last_sgoals(14,28).

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013995s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1366581, Incremental time limit = None
Running cumulative time = 0.1366581, Cumulative time limit = 3600

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.122663s, Cumulative Solving = 0.013995s, Cumulative Total = 0.136658s, Calls = 1
Final Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=28, end_step=30, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12266279999999874, solving_time=0.013995300000001265, total_time=0.1366581, clingo_stats={'problem': {'lp': {'atoms': 11287.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26896.0, 'bodies_tr': 26896.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 27.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 265.0, 'rules': 53831.0, 'rules_normal': 53266.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 53827.0, 'rules_tr_normal': 53266.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20864.0, 'eqs_atom': 5666.0, 'eqs_body': 1957.0, 'eqs_other': 13241.0}, 'lpStep': {'atoms': 5645.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24293.0, 'bodies_tr': 24293.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 27.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 265.0, 'rules': 47379.0, 'rules_normal': 46814.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 47375.0, 'rules_tr_normal': 46814.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9090.0, 'eqs_atom': 1373.0, 'eqs_body': 448.0, 'eqs_other': 7269.0}, 'generator': {'vars': 1671.0, 'vars_eliminated': 0.0, 'vars_frozen': 1149.0, 'constraints': 11.0, 'constraints_binary': 254.0, 'constraints_ternary': 17.0, 'acyc_edges': 0.0, 'complexity': 296.0}}, 'solving': {'solvers': {'choices': 273.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 36.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 18.0, 'lemmas': 25.0, 'lits_learnt': 25.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 53.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 18.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 18.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.13713836669921875, 'cpu': 0.125, 'solve': 0.0069828033447265625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18101882934570312, 'cpu': 0.171875, 'solve': 0.010972976684570312, 'unsat': 0.0, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 273.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 18.0, 'lemmas': 25.0, 'lits_learnt': 25.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 53.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 18.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 18.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12266279999999874, solving_time=0.013995300000001265, total_time=0.1366581, clingo_stats={}))

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 14 was achieved successfully.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.122663s, Solving = 0.013995s, Total = 0.136658s

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.136658s because Manual generator exit.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.122663s, Cumulative Solving = 0.013995s, Cumulative Total = 0.136658s, Calls = 1
Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28}}

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29}}

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=28, plan_length=29, step_range=range(28, 30)

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=29 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Online planning increment 14 finished.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 17 : Achieved sgoals 3 : Unachieved sgoals 17
Level 1 : Total sgoals 0 : Achieved sgoals 14 : Unachieved sgoals 3

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Getting sgoals range for problem number 15 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Getting sgoals range for problem number 14 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Obtained sgoals range = [14-14].

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Getting sgoals range for problem number 16 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Obtained sgoals range = [16-16].

[13-08-2021_16-59-04] DEBUG :: core.Strategies >> Obtained sgoals range = [15-15].

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [15-15]

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [15-15], problem number = 15, increment number = 14

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 15)
	('last_sgoals', 15)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 29, initial = False, final = False, sgoals = [15-15]

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 29

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 29

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [15-15])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-04] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 29...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=29, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 29), range_=None), IncPart(name='plan_module', args=('#inc', 29, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 29, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 29, 15, 15, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0032138000000010436s

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027174s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005699s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2D15040>

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 29)', truth=True, inc_range=IncRange(start=29, end=30, step=1))

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 29). %* None *%
#program plan_module(#inc, 29, false, false). %* None *%
#program optimisation_module(#inc, 29, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 29, 15, 15, sequential, true). %* None *%

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     28 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('state_module', [Number(29), Number(29)]), ('plan_module', [Number(29), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(29), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(29), Number(29), Number(15), Number(15), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('state_module', [Number(30), Number(29)]), ('plan_module', [Number(30), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(29), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(30), Number(29), Number(15), Number(15), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122512s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(15, 29)', truth=True, inc_range=IncRange(start=29, end=30, step=1)), conversion = current_last_sgoals(15,29).

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013796s.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1363077999999991, Incremental time limit = None
Running cumulative time = 0.1363077999999991, Cumulative time limit = 3600

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.122512s, Cumulative Solving = 0.013796s, Cumulative Total = 0.136308s, Calls = 1
Final Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=29, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12251209999999979, solving_time=0.0137956999999993, total_time=0.1363077999999991, clingo_stats={'problem': {'lp': {'atoms': 11287.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26895.0, 'bodies_tr': 26895.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 27.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 265.0, 'rules': 53830.0, 'rules_normal': 53265.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 53826.0, 'rules_tr_normal': 53265.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20864.0, 'eqs_atom': 5666.0, 'eqs_body': 1957.0, 'eqs_other': 13241.0}, 'lpStep': {'atoms': 5645.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24292.0, 'bodies_tr': 24292.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 27.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 265.0, 'rules': 47378.0, 'rules_normal': 46813.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 47374.0, 'rules_tr_normal': 46813.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9090.0, 'eqs_atom': 1373.0, 'eqs_body': 448.0, 'eqs_other': 7269.0}, 'generator': {'vars': 1671.0, 'vars_eliminated': 0.0, 'vars_frozen': 1149.0, 'constraints': 11.0, 'constraints_binary': 254.0, 'constraints_ternary': 17.0, 'acyc_edges': 0.0, 'complexity': 296.0}}, 'solving': {'solvers': {'choices': 325.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 30.0, 'lemmas': 37.0, 'lits_learnt': 37.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 30.0, 'integrated_jumps': 117.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 30.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 30.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.13663291931152344, 'cpu': 0.140625, 'solve': 0.0059833526611328125, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17283058166503906, 'cpu': 0.1875, 'solve': 0.009944915771484375, 'unsat': 0.0, 'sat': 0.0039615631103515625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 325.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 30.0, 'lemmas': 37.0, 'lits_learnt': 37.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 30.0, 'integrated_jumps': 117.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 30.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 30.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12251209999999979, solving_time=0.0137956999999993, total_time=0.1363077999999991, clingo_stats={}))

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 15 was achieved successfully.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.122512s, Solving = 0.013796s, Total = 0.136308s

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.136308s because Manual generator exit.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-04] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.122512s, Cumulative Solving = 0.013796s, Cumulative Total = 0.136308s, Calls = 1
Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29}}

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30}}

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=29, plan_length=30, step_range=range(29, 31)

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=30 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Online planning increment 15 finished.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 17 : Achieved sgoals 3 : Unachieved sgoals 17
Level 1 : Total sgoals 0 : Achieved sgoals 15 : Unachieved sgoals 2

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Getting sgoals range for problem number 16 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Getting sgoals range for problem number 15 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Obtained sgoals range = [15-15].

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Getting sgoals range for problem number 17 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Obtained sgoals range = [17-17].

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Obtained sgoals range = [16-16].

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [16-16]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [16-16], problem number = 16, increment number = 15

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 16)
	('last_sgoals', 16)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 30, initial = False, final = False, sgoals = [16-16]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 30

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 30

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [16-16])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-05] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 30...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=30, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 30), range_=None), IncPart(name='plan_module', args=('#inc', 30, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 30, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 30, 16, 16, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030172999999997785s

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026573s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005772s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2D672C0>

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 30)', truth=True, inc_range=IncRange(start=30, end=31, step=1))

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 30). %* None *%
#program plan_module(#inc, 30, false, false). %* None *%
#program optimisation_module(#inc, 30, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 30, 16, 16, sequential, true). %* None *%

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     29 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('state_module', [Number(30), Number(30)]), ('plan_module', [Number(30), Number(30), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(30), Number(30), Number(16), Number(16), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('state_module', [Number(31), Number(30)]), ('plan_module', [Number(31), Number(30), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(31), Number(30), Number(16), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124633s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(16, 30)', truth=True, inc_range=IncRange(start=30, end=31, step=1)), conversion = current_last_sgoals(16,30).

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017630s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14226250000000107, Incremental time limit = None
Running cumulative time = 0.14226250000000107, Cumulative time limit = 3600

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.124633s, Cumulative Solving = 0.017630s, Cumulative Total = 0.142263s, Calls = 1
Final Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=30, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12463280000000054, solving_time=0.017629700000000526, total_time=0.14226250000000107, clingo_stats={'problem': {'lp': {'atoms': 11276.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28080.0, 'bodies_tr': 28080.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55700.0, 'rules_normal': 55135.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55698.0, 'rules_tr_normal': 55135.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 23508.0, 'eqs_atom': 6363.0, 'eqs_body': 1837.0, 'eqs_other': 15308.0}, 'lpStep': {'atoms': 5634.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25477.0, 'bodies_tr': 25477.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49248.0, 'rules_normal': 48683.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49246.0, 'rules_tr_normal': 48683.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 11734.0, 'eqs_atom': 2070.0, 'eqs_body': 328.0, 'eqs_other': 9336.0}, 'generator': {'vars': 2374.0, 'vars_eliminated': 0.0, 'vars_frozen': 1493.0, 'constraints': 7.0, 'constraints_binary': 261.0, 'constraints_ternary': 20.0, 'acyc_edges': 0.0, 'complexity': 296.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.14263916015625, 'cpu': 0.140625, 'solve': 0.00600433349609375, 'unsat': 0.0, 'sat': 0.0020236968994140625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17856979370117188, 'cpu': 0.171875, 'solve': 0.009992599487304688, 'unsat': 0.0, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12463280000000054, solving_time=0.017629700000000526, total_time=0.14226250000000107, clingo_stats={}))

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 16 was achieved successfully.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.124633s, Solving = 0.017630s, Total = 0.142263s

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.142263s because Manual generator exit.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.124633s, Cumulative Solving = 0.017630s, Cumulative Total = 0.142263s, Calls = 1
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30}}

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31}}

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=30, plan_length=31, step_range=range(30, 32)

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=31 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Online planning increment 16 finished.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 17 : Achieved sgoals 3 : Unachieved sgoals 17
Level 1 : Total sgoals 0 : Achieved sgoals 16 : Unachieved sgoals 1

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Getting sgoals range for problem number 17 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Getting sgoals range for problem number 16 from scenario:
Divided plan : Level = 2, Length = 8, Actions = 8, Refined = True, Expansion = 8.00, Deviation = 0.00
Division points [total=7] : [(Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Obtained sgoals range = [16-16].

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Obtained sgoals range = [17-17].

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [17-17]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [17-17], problem number = 17, increment number = 16

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 17)
	('last_sgoals', 17)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 31, initial = False, final = False, sgoals = [17-17]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 31

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 31

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [17-17])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-05] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 31...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=31, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 31), range_=None), IncPart(name='plan_module', args=('#inc', 31, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 31, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 31, 17, 17, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0031805000000009187s

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025533s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006511s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2BA77C0>

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 31)', truth=True, inc_range=IncRange(start=31, end=32, step=1))

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 31). %* None *%
#program plan_module(#inc, 31, false, false). %* None *%
#program optimisation_module(#inc, 31, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 31, 17, 17, sequential, true). %* None *%

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     30 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('state_module', [Number(31), Number(31)]), ('plan_module', [Number(31), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(31), Number(31), Number(17), Number(17), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('state_module', [Number(32), Number(31)]), ('plan_module', [Number(32), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(32), Number(31), Number(17), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128943s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(17, 31)', truth=True, inc_range=IncRange(start=31, end=32, step=1)), conversion = current_last_sgoals(17,31).

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017621s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14656419999999848, Incremental time limit = None
Running cumulative time = 0.14656419999999848, Cumulative time limit = 3600

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.128943s, Cumulative Solving = 0.017621s, Cumulative Total = 0.146564s, Calls = 1
Final Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=31, end_step=33, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12894329999999954, solving_time=0.01762089999999894, total_time=0.14656419999999848, clingo_stats={'problem': {'lp': {'atoms': 11276.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28119.0, 'bodies_tr': 28119.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55740.0, 'rules_normal': 55175.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55736.0, 'rules_tr_normal': 55175.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23507.0, 'eqs_atom': 6363.0, 'eqs_body': 1837.0, 'eqs_other': 15307.0}, 'lpStep': {'atoms': 5634.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25516.0, 'bodies_tr': 25516.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49288.0, 'rules_normal': 48723.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49284.0, 'rules_tr_normal': 48723.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11733.0, 'eqs_atom': 2070.0, 'eqs_body': 328.0, 'eqs_other': 9335.0}, 'generator': {'vars': 2374.0, 'vars_eliminated': 0.0, 'vars_frozen': 1493.0, 'constraints': 54.0, 'constraints_binary': 551.0, 'constraints_ternary': 48.0, 'acyc_edges': 0.0, 'complexity': 683.0}}, 'solving': {'solvers': {'choices': 375.0, 'conflicts': 10.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 31.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 20.0, 'integrated': 53.0, 'lemmas': 45.0, 'lits_learnt': 65.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 24.0, 'integrated_jumps': 175.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 11.0, 'lemmas_other': 24.0, 'lits_conflict': 10.0, 'lits_loop': 25.0, 'lits_other': 30.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 0.0, 'levels': 10.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.1466064453125, 'cpu': 0.15625, 'solve': 0.0059566497802734375, 'unsat': 0.0, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18253517150878906, 'cpu': 0.203125, 'solve': 0.009969711303710938, 'unsat': 0.0, 'sat': 0.004009246826171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 375.0, 'conflicts': 10.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 20.0, 'integrated': 53.0, 'lemmas': 45.0, 'lits_learnt': 65.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 24.0, 'integrated_jumps': 175.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 11.0, 'lemmas_other': 24.0, 'lits_conflict': 10.0, 'lits_loop': 25.0, 'lits_other': 30.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 0.0, 'levels': 10.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12894329999999954, solving_time=0.01762089999999894, total_time=0.14656419999999848, clingo_stats={}))

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.128943s, Solving = 0.017621s, Total = 0.146564s

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.146564s because Manual generator exit.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.128943s, Cumulative Solving = 0.017621s, Cumulative Total = 0.146564s, Calls = 1
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31}}

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32}}

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=31, plan_length=32, step_range=range(31, 33)

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=32 : level=2 len(self.__actions.get(level, []))=17 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Online planning increment 17 finished.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 17 : Achieved sgoals 3 : Unachieved sgoals 17
Level 1 : Total sgoals 0 : Achieved sgoals 17 : Unachieved sgoals 0

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Getting sgoals range for problem number 4 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Getting sgoals range for problem number 3 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Obtained sgoals range = [3-3].

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Getting sgoals range for problem number 5 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Obtained sgoals range = [5-5].

[13-08-2021_16-59-05] DEBUG :: core.Strategies >> Obtained sgoals range = [4-4].

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [4-4]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [4-4], problem number = 4, increment number = 17

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 4)
	('last_sgoals', 4)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 17, initial = False, final = False, sgoals = [4-4]

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 17

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 17

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [4-4])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-05] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 17...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=17, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 17), range_=None), IncPart(name='plan_module', args=('#inc', 17, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 17, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 17, 4, 4, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0035528999999989708s

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.022127s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004594s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2D716D0>

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 17)', truth=True, inc_range=IncRange(start=17, end=18, step=1))

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 17). %* None *%
#program plan_module(#inc, 17, false, false). %* None *%
#program optimisation_module(#inc, 17, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 17, 4, 4, sequential, true). %* None *%

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     16 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('state_module', [Number(17), Number(17)]), ('plan_module', [Number(17), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(17), Number(17), Number(4), Number(4), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('state_module', [Number(18), Number(17)]), ('plan_module', [Number(18), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(18), Number(17), Number(4), Number(4), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076475s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(4, 17)', truth=True, inc_range=IncRange(start=17, end=18, step=1)), conversion = current_last_sgoals(4,17).

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009512s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08598770000000044, Incremental time limit = None
Running cumulative time = 0.08598770000000044, Cumulative time limit = 3600

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=17, end_step=19, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.07647540000000141, solving_time=0.00951229999999903, total_time=0.08598770000000044, clingo_stats={'problem': {'lp': {'atoms': 7669.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16500.0, 'bodies_tr': 16500.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 33722.0, 'rules_normal': 33379.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33722.0, 'rules_tr_normal': 33379.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 12569.0, 'eqs_atom': 3173.0, 'eqs_body': 1072.0, 'eqs_other': 8324.0}, 'lpStep': {'atoms': 3792.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15324.0, 'bodies_tr': 15324.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 29536.0, 'rules_normal': 29193.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29536.0, 'rules_tr_normal': 29193.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6823.0, 'eqs_atom': 1086.0, 'eqs_body': 307.0, 'eqs_other': 5430.0}, 'generator': {'vars': 1481.0, 'vars_eliminated': 0.0, 'vars_frozen': 1008.0, 'constraints': 20.0, 'constraints_binary': 240.0, 'constraints_ternary': 17.0, 'acyc_edges': 0.0, 'complexity': 299.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 24.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.0857696533203125, 'cpu': 0.078125, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.11666488647460938, 'cpu': 0.109375, 'solve': 0.0049591064453125, 'unsat': 0.001995086669921875, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 32.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07647540000000141, solving_time=0.00951229999999903, total_time=0.08598770000000044, clingo_stats={}))

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('state_module', [Number(19), Number(17)]), ('plan_module', [Number(19), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(19), Number(17), Number(4), Number(4), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060259s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007849s.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.06810760000000116, Incremental time limit = None
Running cumulative time = 0.1540953000000016, Cumulative time limit = 3600

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.136734s, Cumulative Solving = 0.017361s, Cumulative Total = 0.154095s, Calls = 2
Final Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.0602588000000015, solving_time=0.007848799999999656, total_time=0.06810760000000116, clingo_stats={'problem': {'lp': {'atoms': 9353.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29579.0, 'bodies_tr': 29579.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 411.0, 'rules': 59020.0, 'rules_normal': 58517.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 59017.0, 'rules_tr_normal': 58517.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 15269.0, 'eqs_atom': 3828.0, 'eqs_body': 1407.0, 'eqs_other': 10034.0}, 'lpStep': {'atoms': 1684.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13079.0, 'bodies_tr': 13079.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25298.0, 'rules_normal': 25138.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25295.0, 'rules_tr_normal': 25138.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 2700.0, 'eqs_atom': 655.0, 'eqs_body': 335.0, 'eqs_other': 1710.0}, 'generator': {'vars': 1700.0, 'vars_eliminated': 0.0, 'vars_frozen': 1179.0, 'constraints': 73.0, 'constraints_binary': 971.0, 'constraints_ternary': 136.0, 'acyc_edges': 0.0, 'complexity': 1230.0}}, 'solving': {'solvers': {'choices': 192.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 21.0, 'integrated': 13.0, 'lemmas': 19.0, 'lits_learnt': 26.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 15.0, 'lits_loop': 11.0, 'lits_other': 0.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.06881904602050781, 'cpu': 0.0625, 'solve': 0.0049591064453125, 'unsat': 0.0, 'sat': 0.001983642578125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1854839324951172, 'cpu': 0.171875, 'solve': 0.009918212890625, 'unsat': 0.001995086669921875, 'sat': 0.0029544830322265625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 192.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 21.0, 'integrated': 13.0, 'lemmas': 23.0, 'lits_learnt': 30.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 15.0, 'lits_loop': 15.0, 'lits_other': 0.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13673420000000291, solving_time=0.017361099999998686, total_time=0.1540953000000016, clingo_stats={}))

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 4 was achieved successfully.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.076475s, Solving = 0.009512s, Total = 0.085988s
2 : Statistics :: Grounding = 0.060259s, Solving = 0.007849s, Total = 0.068108s

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.154095s because Manual generator exit.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.136734s, Cumulative Solving = 0.017361s, Cumulative Total = 0.154095s, Calls = 2
Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17}}
{2: {1: 7, 2: 9, 3: 17}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32}}

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17}}
{2: {1: 7, 2: 9, 3: 17, 4: 19}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32}}

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=17, plan_length=19, step_range=range(17, 20)

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=32 : level=2 len(self.__actions.get(level, []))=19 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=17, plan_length=19, step_range=range(17, 20)

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=32 : level=2 len(self.__actions.get(level, []))=19 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00.

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> plan_length=2, true_size_bound=1, partial_problems=2

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=2, start_step=17, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=18, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 18, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 18, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Getting sgoals range for problem number 18 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 18, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Getting sgoals range for problem number 19 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 18, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Obtained sgoals range = [19-19].

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Obtained sgoals range = [18-18].

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-18]

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-18], problem number = 18, increment number = 17

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 18)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 32, initial = False, final = False, sgoals = [18-18]

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 32

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 32

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [18-18])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 32...

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=32, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 32), range_=None), IncPart(name='plan_module', args=('#inc', 32, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 32, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 32, 18, 18, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003222299999999123s

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026420s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006405s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB1B04F90>

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 32)', truth=True, inc_range=IncRange(start=32, end=33, step=1))

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 32). %* None *%
#program plan_module(#inc, 32, false, false). %* None *%
#program optimisation_module(#inc, 32, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 32, 18, 18, sequential, true). %* None *%

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     31 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('state_module', [Number(32), Number(32)]), ('plan_module', [Number(32), Number(32), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(32), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(32), Number(32), Number(18), Number(18), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('state_module', [Number(33), Number(32)]), ('plan_module', [Number(33), Number(32), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(32), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(33), Number(32), Number(18), Number(18), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168944s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(18, 32)', truth=True, inc_range=IncRange(start=32, end=33, step=1)), conversion = current_last_sgoals(18,32).

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017222s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1861657000000001, Incremental time limit = None
Running cumulative time = 0.1861657000000001, Cumulative time limit = 3600

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.168944s, Cumulative Solving = 0.017222s, Cumulative Total = 0.186166s, Calls = 1
Final Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=32, end_step=34, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.16894409999999915, solving_time=0.017221600000000947, total_time=0.1861657000000001, clingo_stats={'problem': {'lp': {'atoms': 11276.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28102.0, 'bodies_tr': 28102.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55724.0, 'rules_normal': 55159.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55720.0, 'rules_tr_normal': 55159.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23471.0, 'eqs_atom': 6371.0, 'eqs_body': 1841.0, 'eqs_other': 15259.0}, 'lpStep': {'atoms': 5634.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25499.0, 'bodies_tr': 25499.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49272.0, 'rules_normal': 48707.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49268.0, 'rules_tr_normal': 48707.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11697.0, 'eqs_atom': 2078.0, 'eqs_body': 332.0, 'eqs_other': 9287.0}, 'generator': {'vars': 2350.0, 'vars_eliminated': 0.0, 'vars_frozen': 1469.0, 'constraints': 61.0, 'constraints_binary': 602.0, 'constraints_ternary': 49.0, 'acyc_edges': 0.0, 'complexity': 742.0}}, 'solving': {'solvers': {'choices': 356.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 25.0, 'integrated': 63.0, 'lemmas': 44.0, 'lits_learnt': 63.0, 'lemmas_binary': 10.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 148.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 12.0, 'lemmas_other': 21.0, 'lits_conflict': 11.0, 'lits_loop': 28.0, 'lits_other': 24.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.18616104125976562, 'cpu': 0.1875, 'solve': 0.00501251220703125, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2225799560546875, 'cpu': 0.234375, 'solve': 0.008983612060546875, 'unsat': 0.0, 'sat': 0.002971649169921875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 356.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 25.0, 'integrated': 63.0, 'lemmas': 44.0, 'lits_learnt': 63.0, 'lemmas_binary': 10.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 148.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 12.0, 'lemmas_other': 21.0, 'lits_conflict': 11.0, 'lits_loop': 28.0, 'lits_other': 24.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.16894409999999915, solving_time=0.017221600000000947, total_time=0.1861657000000001, clingo_stats={}))

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved.

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 18 was achieved successfully.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.168944s, Solving = 0.017222s, Total = 0.186166s

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.186166s because Manual generator exit.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.168944s, Cumulative Solving = 0.017222s, Cumulative Total = 0.186166s, Calls = 1
Model :: Total atoms = 4018, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17}}
{2: {1: 7, 2: 9, 3: 17, 4: 19}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32}}

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18}}
{2: {1: 7, 2: 9, 3: 17, 4: 19}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33}}

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=32, plan_length=33, step_range=range(32, 34)

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=33 : level=2 len(self.__actions.get(level, []))=19 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Online planning increment 18 finished.

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 19 : Achieved sgoals 4 : Unachieved sgoals 16
Level 1 : Total sgoals 0 : Achieved sgoals 18 : Unachieved sgoals 1

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 18, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Getting sgoals range for problem number 19 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 18, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Getting sgoals range for problem number 18 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 18, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Obtained sgoals range = [18-18].

[13-08-2021_16-59-06] DEBUG :: core.Strategies >> Obtained sgoals range = [19-19].

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [19-19]

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [19-19], problem number = 19, increment number = 18

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 19)
	('last_sgoals', 19)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 33, initial = False, final = False, sgoals = [19-19]

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 33

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 33

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [19-19])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 33...

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=33, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 33), range_=None), IncPart(name='plan_module', args=('#inc', 33, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 33, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 33, 19, 19, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004026999999998893s

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026913s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005530s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2CD0860>

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 33)', truth=True, inc_range=IncRange(start=33, end=34, step=1))

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 33). %* None *%
#program plan_module(#inc, 33, false, false). %* None *%
#program optimisation_module(#inc, 33, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 33, 19, 19, sequential, true). %* None *%

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     32 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('state_module', [Number(33), Number(33)]), ('plan_module', [Number(33), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(33), Number(33), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('state_module', [Number(34), Number(33)]), ('plan_module', [Number(34), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(34), Number(33), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138915s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(19, 33)', truth=True, inc_range=IncRange(start=33, end=34, step=1)), conversion = current_last_sgoals(19,33).

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014005s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15291930000000065, Incremental time limit = None
Running cumulative time = 0.15291930000000065, Cumulative time limit = 3600

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=33, end_step=35, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.13891450000000027, solving_time=0.014004800000000373, total_time=0.15291930000000065, clingo_stats={'problem': {'lp': {'atoms': 11275.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28044.0, 'bodies_tr': 28044.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55668.0, 'rules_normal': 55103.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55666.0, 'rules_tr_normal': 55103.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 23452.0, 'eqs_atom': 6371.0, 'eqs_body': 1842.0, 'eqs_other': 15239.0}, 'lpStep': {'atoms': 5633.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25441.0, 'bodies_tr': 25441.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49216.0, 'rules_normal': 48651.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49214.0, 'rules_tr_normal': 48651.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 11678.0, 'eqs_atom': 2078.0, 'eqs_body': 333.0, 'eqs_other': 9267.0}, 'generator': {'vars': 2351.0, 'vars_eliminated': 0.0, 'vars_frozen': 1469.0, 'constraints': 10.0, 'constraints_binary': 265.0, 'constraints_ternary': 22.0, 'acyc_edges': 0.0, 'complexity': 311.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 12.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.15246200561523438, 'cpu': 0.15625, 'solve': 0.0020046234130859375, 'unsat': 0.0020046234130859375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1893634796142578, 'cpu': 0.203125, 'solve': 0.00496673583984375, 'unsat': 0.0020046234130859375, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 20.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13891450000000027, solving_time=0.014004800000000373, total_time=0.15291930000000065, clingo_stats={}))

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Reaction at search length 35:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('state_module', [Number(35), Number(33)]), ('plan_module', [Number(35), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(35), Number(33), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082823s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006219s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08904210000000035, Incremental time limit = None
Running cumulative time = 0.241961400000001, Cumulative time limit = 3600

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=35, end_step=36, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.0828231000000006, solving_time=0.0062189999999997525, total_time=0.08904210000000035, clingo_stats={'problem': {'lp': {'atoms': 13070.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49398.0, 'bodies_tr': 49398.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 45.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 728.0, 'rules': 96805.0, 'rules_normal': 96032.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 96799.0, 'rules_tr_normal': 96032.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 26070.0, 'eqs_atom': 6849.0, 'eqs_body': 2138.0, 'eqs_other': 17083.0}, 'lpStep': {'atoms': 1795.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21354.0, 'bodies_tr': 21354.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41137.0, 'rules_normal': 40929.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41133.0, 'rules_tr_normal': 40929.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2618.0, 'eqs_atom': 478.0, 'eqs_body': 296.0, 'eqs_other': 1844.0}, 'generator': {'vars': 2665.0, 'vars_eliminated': 0.0, 'vars_frozen': 1710.0, 'constraints': 85.0, 'constraints_binary': 1965.0, 'constraints_ternary': 189.0, 'acyc_edges': 0.0, 'complexity': 2285.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 32.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.08919334411621094, 'cpu': 0.09375, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.27855682373046875, 'cpu': 0.296875, 'solve': 0.00693511962890625, 'unsat': 0.0039730072021484375, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 52.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.22173760000000087, solving_time=0.020223800000000125, total_time=0.241961400000001, clingo_stats={}))

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Reaction at search length 36:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('state_module', [Number(36), Number(33)]), ('plan_module', [Number(36), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(36), Number(33), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088898s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007473s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09637089999999837, Incremental time limit = None
Running cumulative time = 0.33833229999999936, Cumulative time limit = 3600

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=36, end_step=37, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08889819999999915, solving_time=0.007472699999999222, total_time=0.09637089999999837, clingo_stats={'problem': {'lp': {'atoms': 15613.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71178.0, 'bodies_tr': 71178.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 694.0, 'count_bodies_tr': 694.0, 'sccs': 58.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 948.0, 'rules': 138966.0, 'rules_normal': 137985.0, 'rules_choice': 969.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 138957.0, 'rules_tr_normal': 137985.0, 'rules_tr_choice': 969.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 3.0, 'eqs': 31281.0, 'eqs_atom': 8115.0, 'eqs_body': 2551.0, 'eqs_other': 20615.0}, 'lpStep': {'atoms': 2543.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21780.0, 'bodies_tr': 21780.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 220.0, 'rules': 42161.0, 'rules_normal': 41953.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42158.0, 'rules_tr_normal': 41953.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 5211.0, 'eqs_atom': 1266.0, 'eqs_body': 413.0, 'eqs_other': 3532.0}, 'generator': {'vars': 3266.0, 'vars_eliminated': 0.0, 'vars_frozen': 2127.0, 'constraints': 227.0, 'constraints_binary': 5969.0, 'constraints_ternary': 556.0, 'acyc_edges': 0.0, 'complexity': 6846.0}}, 'solving': {'solvers': {'choices': 7.0, 'conflicts': 15.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 7.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 23.0, 'integrated': 28.0, 'lemmas': 43.0, 'lits_learnt': 79.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 4.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 70.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 28.0, 'lits_conflict': 7.0, 'lits_loop': 16.0, 'lits_other': 56.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 7.0, 'levels': 77.0, 'levels_bounded': 70.0, 'max': 11.0, 'max_executed': 1.0, 'max_bounded': 10.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.09726715087890625, 'cpu': 0.125, 'solve': 0.0019664764404296875, 'unsat': 0.0019664764404296875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.375823974609375, 'cpu': 0.421875, 'solve': 0.008901596069335938, 'unsat': 0.005939483642578125, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 7.0, 'conflicts': 15.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 23.0, 'integrated': 28.0, 'lemmas': 51.0, 'lits_learnt': 87.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 4.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 122.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 16.0, 'lemmas_other': 28.0, 'lits_conflict': 7.0, 'lits_loop': 24.0, 'lits_other': 56.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 7.0, 'levels': 77.0, 'levels_bounded': 70.0, 'max': 11.0, 'max_executed': 1.0, 'max_bounded': 10.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3106358, solving_time=0.027696499999999347, total_time=0.33833229999999936, clingo_stats={}))

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('state_module', [Number(37), Number(33)]), ('plan_module', [Number(37), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(37), Number(33), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095701s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 5630, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016790s.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11249070000000039, Incremental time limit = None
Running cumulative time = 0.45082299999999975, Cumulative time limit = 3600

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.406337s, Cumulative Solving = 0.044486s, Cumulative Total = 0.450823s, Calls = 4
Final Model :: Total atoms = 5630, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.09570100000000004, solving_time=0.01678970000000035, total_time=0.11249070000000039, clingo_stats={'problem': {'lp': {'atoms': 18447.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93656.0, 'bodies_tr': 93656.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 903.0, 'count_bodies_tr': 903.0, 'sccs': 79.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1238.0, 'rules': 181964.0, 'rules_normal': 180775.0, 'rules_choice': 1173.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 181955.0, 'rules_tr_normal': 180775.0, 'rules_tr_choice': 1173.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 7.0, 'eqs': 37685.0, 'eqs_atom': 9501.0, 'eqs_body': 2829.0, 'eqs_other': 25355.0}, 'lpStep': {'atoms': 2834.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22478.0, 'bodies_tr': 22478.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 21.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 290.0, 'rules': 42998.0, 'rules_normal': 42790.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42998.0, 'rules_tr_normal': 42790.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6404.0, 'eqs_atom': 1386.0, 'eqs_body': 278.0, 'eqs_other': 4740.0}, 'generator': {'vars': 4434.0, 'vars_eliminated': 0.0, 'vars_frozen': 2865.0, 'constraints': 487.0, 'constraints_binary': 15785.0, 'constraints_ternary': 1683.0, 'acyc_edges': 0.0, 'complexity': 18122.0}}, 'solving': {'solvers': {'choices': 1131.0, 'conflicts': 73.0, 'conflicts_analyzed': 73.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 63.0, 'models': 1.0, 'models_level': 78.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 68.0, 'distributed_sum_lbd': 75.0, 'integrated': 235.0, 'lemmas': 332.0, 'lits_learnt': 661.0, 'lemmas_binary': 16.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 203.0, 'integrated_jumps': 657.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 68.0, 'lemmas_loop': 29.0, 'lemmas_other': 235.0, 'lits_conflict': 88.0, 'lits_loop': 198.0, 'lits_other': 375.0, 'jumps': {'jumps': 73.0, 'jumps_bounded': 0.0, 'levels': 75.0, 'levels_bounded': 0.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.11426353454589844, 'cpu': 0.109375, 'solve': 0.0079803466796875, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.49008750915527344, 'cpu': 0.53125, 'solve': 0.016881942749023438, 'unsat': 0.005939483642578125, 'sat': 0.0029621124267578125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1138.0, 'conflicts': 88.0, 'conflicts_analyzed': 80.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 70.0, 'models': 2.0, 'models_level': 79.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 83.0, 'distributed_sum_lbd': 98.0, 'integrated': 263.0, 'lemmas': 383.0, 'lits_learnt': 748.0, 'lemmas_binary': 52.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 207.0, 'integrated_jumps': 657.0, 'guiding_paths_lits': 218.0, 'guiding_paths': 29.0, 'splits': 0.0, 'lemmas_conflict': 75.0, 'lemmas_loop': 45.0, 'lemmas_other': 263.0, 'lits_conflict': 95.0, 'lits_loop': 222.0, 'lits_other': 431.0, 'jumps': {'jumps': 80.0, 'jumps_bounded': 7.0, 'levels': 152.0, 'levels_bounded': 70.0, 'max': 11.0, 'max_executed': 2.0, 'max_bounded': 10.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.40633680000000005, solving_time=0.0444861999999997, total_time=0.45082299999999975, clingo_stats={}))

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved.

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 19 was achieved successfully.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.138915s, Solving = 0.014005s, Total = 0.152919s
2 : Statistics :: Grounding = 0.082823s, Solving = 0.006219s, Total = 0.089042s
3 : Statistics :: Grounding = 0.088898s, Solving = 0.007473s, Total = 0.096371s
4 : Statistics :: Grounding = 0.095701s, Solving = 0.016790s, Total = 0.112491s

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.450823s because Manual generator exit.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-06] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.406337s, Cumulative Solving = 0.044486s, Cumulative Total = 0.450823s, Calls = 4
Model :: Total atoms = 5630, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18}}
{2: {1: 7, 2: 9, 3: 17, 4: 19}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33}}

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19}}
{2: {1: 7, 2: 9, 3: 17, 4: 19}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37}}

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 4 :: Actions = 4                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=33, plan_length=37, step_range=range(33, 38)

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=37 : level=2 len(self.__actions.get(level, []))=19 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Online planning increment 19 finished.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 19 : Achieved sgoals 4 : Unachieved sgoals 16
Level 1 : Total sgoals 0 : Achieved sgoals 19 : Unachieved sgoals 0

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Getting sgoals range for problem number 5 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Getting sgoals range for problem number 4 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Obtained sgoals range = [4-4].

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Getting sgoals range for problem number 6 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Obtained sgoals range = [6-6].

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Obtained sgoals range = [5-5].

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [5-5]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [5-5], problem number = 5, increment number = 19

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 5)
	('last_sgoals', 5)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 19, initial = False, final = False, sgoals = [5-5]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 19

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 19

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [5-5])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-07] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 19...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=19, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 19), range_=None), IncPart(name='plan_module', args=('#inc', 19, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 19, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 19, 5, 5, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0029061000000005777s

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021827s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005329s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2D95BD0>

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 19)', truth=True, inc_range=IncRange(start=19, end=20, step=1))

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 19). %* None *%
#program plan_module(#inc, 19, false, false). %* None *%
#program optimisation_module(#inc, 19, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 19, 5, 5, sequential, true). %* None *%

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     18 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('state_module', [Number(19), Number(19)]), ('plan_module', [Number(19), Number(19), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(19), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(19), Number(19), Number(5), Number(5), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('state_module', [Number(20), Number(19)]), ('plan_module', [Number(20), Number(19), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(19), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(20), Number(19), Number(5), Number(5), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080902s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(5, 19)', truth=True, inc_range=IncRange(start=19, end=20, step=1)), conversion = current_last_sgoals(5,19).

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008624s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08952570000000115, Incremental time limit = None
Running cumulative time = 0.08952570000000115, Cumulative time limit = 3600

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=19, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08090190000000064, solving_time=0.008623800000000514, total_time=0.08952570000000115, clingo_stats={'problem': {'lp': {'atoms': 7657.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16465.0, 'bodies_tr': 16465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 33686.0, 'rules_normal': 33343.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33684.0, 'rules_tr_normal': 33343.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 12511.0, 'eqs_atom': 3166.0, 'eqs_body': 1063.0, 'eqs_other': 8282.0}, 'lpStep': {'atoms': 3780.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15289.0, 'bodies_tr': 15289.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 359.0, 'rules': 29500.0, 'rules_normal': 29157.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29498.0, 'rules_tr_normal': 29157.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 6765.0, 'eqs_atom': 1079.0, 'eqs_body': 298.0, 'eqs_other': 5388.0}, 'generator': {'vars': 1491.0, 'vars_eliminated': 0.0, 'vars_frozen': 1018.0, 'constraints': 11.0, 'constraints_binary': 290.0, 'constraints_ternary': 28.0, 'acyc_edges': 0.0, 'complexity': 343.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08976554870605469, 'cpu': 0.09375, 'solve': 0.001972198486328125, 'unsat': 0.001972198486328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1207122802734375, 'cpu': 0.125, 'solve': 0.0059909820556640625, 'unsat': 0.001972198486328125, 'sat': 0.00201416015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 14.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.08090190000000064, solving_time=0.008623800000000514, total_time=0.08952570000000115, clingo_stats={}))

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('state_module', [Number(21), Number(19)]), ('plan_module', [Number(21), Number(19), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(19), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(21), Number(19), Number(5), Number(5), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.071951s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007848s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.0797991999999983, Incremental time limit = None
Running cumulative time = 0.16932489999999945, Cumulative time limit = 3600

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.152853s, Cumulative Solving = 0.016472s, Cumulative Total = 0.169325s, Calls = 2
Final Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.07195099999999854, solving_time=0.00784819999999975, total_time=0.0797991999999983, clingo_stats={'problem': {'lp': {'atoms': 9245.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29593.0, 'bodies_tr': 29593.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 384.0, 'rules': 58935.0, 'rules_normal': 58432.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 58930.0, 'rules_tr_normal': 58432.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 3.0, 'eqs': 15013.0, 'eqs_atom': 3646.0, 'eqs_body': 1390.0, 'eqs_other': 9977.0}, 'lpStep': {'atoms': 1588.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13128.0, 'bodies_tr': 13128.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 3.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25.0, 'rules': 25249.0, 'rules_normal': 25089.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25246.0, 'rules_tr_normal': 25089.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 2502.0, 'eqs_atom': 480.0, 'eqs_body': 327.0, 'eqs_other': 1695.0}, 'generator': {'vars': 1685.0, 'vars_eliminated': 0.0, 'vars_frozen': 1167.0, 'constraints': 39.0, 'constraints_binary': 940.0, 'constraints_ternary': 120.0, 'acyc_edges': 0.0, 'complexity': 1129.0}}, 'solving': {'solvers': {'choices': 321.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 15.0, 'integrated': 18.0, 'lemmas': 33.0, 'lits_learnt': 33.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 129.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 0.0, 'lemmas_other': 18.0, 'lits_conflict': 15.0, 'lits_loop': 0.0, 'lits_other': 18.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.08078193664550781, 'cpu': 0.078125, 'solve': 0.004985809326171875, 'unsat': 0.0, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2014942169189453, 'cpu': 0.203125, 'solve': 0.010976791381835938, 'unsat': 0.001972198486328125, 'sat': 0.003009796142578125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 321.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 15.0, 'integrated': 18.0, 'lemmas': 36.0, 'lits_learnt': 36.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 18.0, 'integrated_jumps': 129.0, 'guiding_paths_lits': 78.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 3.0, 'lemmas_other': 18.0, 'lits_conflict': 15.0, 'lits_loop': 3.0, 'lits_other': 18.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.15285289999999918, solving_time=0.016472000000000264, total_time=0.16932489999999945, clingo_stats={}))

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 5 was achieved successfully.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.080902s, Solving = 0.008624s, Total = 0.089526s
2 : Statistics :: Grounding = 0.071951s, Solving = 0.007848s, Total = 0.079799s

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.169325s because Manual generator exit.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.152853s, Cumulative Solving = 0.016472s, Cumulative Total = 0.169325s, Calls = 2
Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19}}
{2: {1: 7, 2: 9, 3: 17, 4: 19}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37}}

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37}}

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=19, plan_length=21, step_range=range(19, 22)

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=37 : level=2 len(self.__actions.get(level, []))=21 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=19, plan_length=21, step_range=range(19, 22)

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=37 : level=2 len(self.__actions.get(level, []))=21 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00.

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> plan_length=2, true_size_bound=1, partial_problems=2

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=2, start_step=19, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=20, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 20, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 20, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Getting sgoals range for problem number 20 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 20, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Getting sgoals range for problem number 21 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 20, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Obtained sgoals range = [21-21].

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Obtained sgoals range = [20-20].

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [20-20]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [20-20], problem number = 20, increment number = 19

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 20)
	('last_sgoals', 20)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 37, initial = False, final = False, sgoals = [20-20]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 37

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 37

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [20-20])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-07] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 37...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=37, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 37), range_=None), IncPart(name='plan_module', args=('#inc', 37, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 37, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 37, 20, 20, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00322199999999917s

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027411s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015132s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB30117C0>

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 37)', truth=True, inc_range=IncRange(start=37, end=38, step=1))

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 37). %* None *%
#program plan_module(#inc, 37, false, false). %* None *%
#program optimisation_module(#inc, 37, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 37, 20, 20, sequential, true). %* None *%

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     36 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('state_module', [Number(37), Number(37)]), ('plan_module', [Number(37), Number(37), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(37), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(37), Number(37), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('state_module', [Number(38), Number(37)]), ('plan_module', [Number(38), Number(37), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(37), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(38), Number(37), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128013s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(20, 37)', truth=True, inc_range=IncRange(start=37, end=38, step=1)), conversion = current_last_sgoals(20,37).

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016993s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1450055999999993, Incremental time limit = None
Running cumulative time = 0.1450055999999993, Cumulative time limit = 3600

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.128013s, Cumulative Solving = 0.016993s, Cumulative Total = 0.145006s, Calls = 1
Final Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=37, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12801309999999866, solving_time=0.016992500000000632, total_time=0.1450055999999993, clingo_stats={'problem': {'lp': {'atoms': 11263.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28010.0, 'bodies_tr': 28010.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55631.0, 'rules_normal': 55066.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55628.0, 'rules_tr_normal': 55066.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 23345.0, 'eqs_atom': 6370.0, 'eqs_body': 1840.0, 'eqs_other': 15135.0}, 'lpStep': {'atoms': 5621.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25407.0, 'bodies_tr': 25407.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49179.0, 'rules_normal': 48614.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49176.0, 'rules_tr_normal': 48614.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 11571.0, 'eqs_atom': 2077.0, 'eqs_body': 331.0, 'eqs_other': 9163.0}, 'generator': {'vars': 2346.0, 'vars_eliminated': 0.0, 'vars_frozen': 1458.0, 'constraints': 15.0, 'constraints_binary': 396.0, 'constraints_ternary': 34.0, 'acyc_edges': 0.0, 'complexity': 463.0}}, 'solving': {'solvers': {'choices': 333.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 29.0, 'lemmas': 45.0, 'lits_learnt': 45.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 29.0, 'integrated_jumps': 125.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 29.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 29.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.14464759826660156, 'cpu': 0.140625, 'solve': 0.004993438720703125, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.19052696228027344, 'cpu': 0.1875, 'solve': 0.0179595947265625, 'unsat': 0.0, 'sat': 0.0029659271240234375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 333.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 29.0, 'lemmas': 45.0, 'lits_learnt': 45.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 29.0, 'integrated_jumps': 125.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 29.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 29.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12801309999999866, solving_time=0.016992500000000632, total_time=0.1450055999999993, clingo_stats={}))

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 20 was achieved successfully.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.128013s, Solving = 0.016993s, Total = 0.145006s

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.145006s because Manual generator exit.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.128013s, Cumulative Solving = 0.016993s, Cumulative Total = 0.145006s, Calls = 1
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37}}

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38}}

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=37, plan_length=38, step_range=range(37, 39)

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=38 : level=2 len(self.__actions.get(level, []))=21 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Online planning increment 20 finished.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 21 : Achieved sgoals 5 : Unachieved sgoals 15
Level 1 : Total sgoals 0 : Achieved sgoals 20 : Unachieved sgoals 1

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 20, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Getting sgoals range for problem number 21 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 20, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Getting sgoals range for problem number 20 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 20, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Obtained sgoals range = [20-20].

[13-08-2021_16-59-07] DEBUG :: core.Strategies >> Obtained sgoals range = [21-21].

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [21-21]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [21-21], problem number = 21, increment number = 20

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 21)
	('last_sgoals', 21)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 38, initial = False, final = False, sgoals = [21-21]

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 38

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 38

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [21-21])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-07] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-07] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 38...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=38, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 38), range_=None), IncPart(name='plan_module', args=('#inc', 38, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 38, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 38, 21, 21, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003207299999999691s

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027105s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006467s.

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2DE0C20>

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 38)', truth=True, inc_range=IncRange(start=38, end=39, step=1))

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 38). %* None *%
#program plan_module(#inc, 38, false, false). %* None *%
#program optimisation_module(#inc, 38, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 38, 21, 21, sequential, true). %* None *%

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     37 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('state_module', [Number(38), Number(38)]), ('plan_module', [Number(38), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(38), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(38), Number(38), Number(21), Number(21), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('state_module', [Number(39), Number(38)]), ('plan_module', [Number(39), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(38), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(39), Number(38), Number(21), Number(21), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124641s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(21, 38)', truth=True, inc_range=IncRange(start=38, end=39, step=1)), conversion = current_last_sgoals(21,38).

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013455s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13809579999999855, Incremental time limit = None
Running cumulative time = 0.13809579999999855, Cumulative time limit = 3600

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=38, end_step=40, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12464070000000049, solving_time=0.013455099999998055, total_time=0.13809579999999855, clingo_stats={'problem': {'lp': {'atoms': 11263.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27972.0, 'bodies_tr': 27972.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 55593.0, 'rules_normal': 55028.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55591.0, 'rules_tr_normal': 55028.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 23345.0, 'eqs_atom': 6370.0, 'eqs_body': 1840.0, 'eqs_other': 15135.0}, 'lpStep': {'atoms': 5621.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25369.0, 'bodies_tr': 25369.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49141.0, 'rules_normal': 48576.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49139.0, 'rules_tr_normal': 48576.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 11571.0, 'eqs_atom': 2077.0, 'eqs_body': 331.0, 'eqs_other': 9163.0}, 'generator': {'vars': 2346.0, 'vars_eliminated': 0.0, 'vars_frozen': 1458.0, 'constraints': 16.0, 'constraints_binary': 450.0, 'constraints_ternary': 34.0, 'acyc_edges': 0.0, 'complexity': 520.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 18.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.13866233825683594, 'cpu': 0.140625, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17607498168945312, 'cpu': 0.171875, 'solve': 0.006954193115234375, 'unsat': 0.0019969940185546875, 'sat': 0.0019702911376953125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 26.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12464070000000049, solving_time=0.013455099999998055, total_time=0.13809579999999855, clingo_stats={}))

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('state_module', [Number(40), Number(38)]), ('plan_module', [Number(40), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(38), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(40), Number(38), Number(21), Number(21), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089336s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015549s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10488450000000071, Incremental time limit = None
Running cumulative time = 0.24298029999999926, Cumulative time limit = 3600

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.213976s, Cumulative Solving = 0.029004s, Cumulative Total = 0.242980s, Calls = 2
Final Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=40, end_step=41, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.08933550000000068, solving_time=0.015549000000000035, total_time=0.10488450000000071, clingo_stats={'problem': {'lp': {'atoms': 13083.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49431.0, 'bodies_tr': 49431.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 45.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 728.0, 'rules': 96830.0, 'rules_normal': 96057.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 96825.0, 'rules_tr_normal': 96057.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 3.0, 'eqs': 27019.0, 'eqs_atom': 6865.0, 'eqs_body': 2172.0, 'eqs_other': 17982.0}, 'lpStep': {'atoms': 1820.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21459.0, 'bodies_tr': 21459.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41237.0, 'rules_normal': 41029.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41234.0, 'rules_tr_normal': 41029.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 3674.0, 'eqs_atom': 495.0, 'eqs_body': 332.0, 'eqs_other': 2847.0}, 'generator': {'vars': 2762.0, 'vars_eliminated': 0.0, 'vars_frozen': 1765.0, 'constraints': 106.0, 'constraints_binary': 2789.0, 'constraints_ternary': 260.0, 'acyc_edges': 0.0, 'complexity': 3217.0}}, 'solving': {'solvers': {'choices': 424.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 47.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 29.0, 'integrated': 76.0, 'lemmas': 57.0, 'lits_learnt': 63.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 34.0, 'integrated_jumps': 112.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 6.0, 'lemmas_other': 34.0, 'lits_conflict': 17.0, 'lits_loop': 12.0, 'lits_other': 34.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.10571670532226562, 'cpu': 0.125, 'solve': 0.0069789886474609375, 'unsat': 0.0, 'sat': 0.002044677734375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.28179168701171875, 'cpu': 0.296875, 'solve': 0.013933181762695312, 'unsat': 0.0019969940185546875, 'sat': 0.0040149688720703125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 424.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 48.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 29.0, 'integrated': 76.0, 'lemmas': 65.0, 'lits_learnt': 71.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 34.0, 'integrated_jumps': 112.0, 'guiding_paths_lits': 90.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 14.0, 'lemmas_other': 34.0, 'lits_conflict': 17.0, 'lits_loop': 20.0, 'lits_other': 34.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.21397620000000117, solving_time=0.02900409999999809, total_time=0.24298029999999926, clingo_stats={}))

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 21 was achieved successfully.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.124641s, Solving = 0.013455s, Total = 0.138096s
2 : Statistics :: Grounding = 0.089336s, Solving = 0.015549s, Total = 0.104885s

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.242980s because Manual generator exit.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.213976s, Cumulative Solving = 0.029004s, Cumulative Total = 0.242980s, Calls = 2
Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38}}

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40}}

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=38, plan_length=40, step_range=range(38, 41)

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=40 : level=2 len(self.__actions.get(level, []))=21 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Online planning increment 21 finished.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 21 : Achieved sgoals 5 : Unachieved sgoals 15
Level 1 : Total sgoals 0 : Achieved sgoals 21 : Unachieved sgoals 0

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Getting sgoals range for problem number 6 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Getting sgoals range for problem number 5 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Obtained sgoals range = [5-5].

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Getting sgoals range for problem number 7 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Obtained sgoals range = [7-7].

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Obtained sgoals range = [6-6].

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [6-6]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [6-6], problem number = 6, increment number = 21

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 6)
	('last_sgoals', 6)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 21, initial = False, final = False, sgoals = [6-6]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 21

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 21

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [6-6])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-08] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 21...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=21, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 21), range_=None), IncPart(name='plan_module', args=('#inc', 21, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 21, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 21, 6, 6, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0065126999999982615s

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.031380s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005712s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2EFAEF0>

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 21)', truth=True, inc_range=IncRange(start=21, end=22, step=1))

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 21). %* None *%
#program plan_module(#inc, 21, false, false). %* None *%
#program optimisation_module(#inc, 21, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 21, 6, 6, sequential, true). %* None *%

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     20 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('state_module', [Number(21), Number(21)]), ('plan_module', [Number(21), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(21), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(21), Number(21), Number(6), Number(6), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('state_module', [Number(22), Number(21)]), ('plan_module', [Number(22), Number(21), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(21), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(22), Number(21), Number(6), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100772s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(6, 21)', truth=True, inc_range=IncRange(start=21, end=22, step=1)), conversion = current_last_sgoals(6,21).

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020774s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12154609999999977, Incremental time limit = None
Running cumulative time = 0.12154609999999977, Cumulative time limit = 3600

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.100772s, Cumulative Solving = 0.020774s, Cumulative Total = 0.121546s, Calls = 1
Final Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=21, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.1007719999999992, solving_time=0.020774100000000573, total_time=0.12154609999999977, clingo_stats={'problem': {'lp': {'atoms': 7668.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16312.0, 'bodies_tr': 16312.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 340.0, 'rules': 33568.0, 'rules_normal': 33225.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33566.0, 'rules_tr_normal': 33225.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 10457.0, 'eqs_atom': 3192.0, 'eqs_body': 1103.0, 'eqs_other': 6162.0}, 'lpStep': {'atoms': 3791.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15136.0, 'bodies_tr': 15136.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 340.0, 'rules': 29382.0, 'rules_normal': 29039.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29380.0, 'rules_tr_normal': 29039.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 4711.0, 'eqs_atom': 1105.0, 'eqs_body': 338.0, 'eqs_other': 3268.0}, 'generator': {'vars': 1386.0, 'vars_eliminated': 0.0, 'vars_frozen': 960.0, 'constraints': 16.0, 'constraints_binary': 415.0, 'constraints_ternary': 41.0, 'acyc_edges': 0.0, 'complexity': 494.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 12.0, 'integrated_jumps': 80.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.12218666076660156, 'cpu': 0.140625, 'solve': 0.008945465087890625, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.16605758666992188, 'cpu': 0.171875, 'solve': 0.012929916381835938, 'unsat': 0.0, 'sat': 0.003932952880859375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 12.0, 'integrated_jumps': 80.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1007719999999992, solving_time=0.020774100000000573, total_time=0.12154609999999977, clingo_stats={}))

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 6 was achieved successfully.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.100772s, Solving = 0.020774s, Total = 0.121546s

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.121546s because Manual generator exit.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.100772s, Cumulative Solving = 0.020774s, Cumulative Total = 0.121546s, Calls = 1
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40}}

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40}}

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=21, plan_length=22, step_range=range(21, 23)

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=40 : level=2 len(self.__actions.get(level, []))=22 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=21, plan_length=22, step_range=range(21, 23)

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=40 : level=2 len(self.__actions.get(level, []))=22 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=21, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Getting sgoals range for problem number 22 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Obtained sgoals range = [22-22].

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [22-22]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [22-22], problem number = 22, increment number = 21

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 22)
	('last_sgoals', 22)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 40, initial = False, final = False, sgoals = [22-22]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 40

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 40

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [22-22])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-08] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 40...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=40, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 40), range_=None), IncPart(name='plan_module', args=('#inc', 40, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 40, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 40, 22, 22, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0032871999999990464s

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026355s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006874s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2F53180>

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=IncRange(start=40, end=41, step=1))

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 40). %* None *%
#program plan_module(#inc, 40, false, false). %* None *%
#program optimisation_module(#inc, 40, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 40, 22, 22, sequential, true). %* None *%

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     39 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('state_module', [Number(40), Number(40)]), ('plan_module', [Number(40), Number(40), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(40), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(40), Number(40), Number(22), Number(22), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('state_module', [Number(41), Number(40)]), ('plan_module', [Number(41), Number(40), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(40), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(41), Number(40), Number(22), Number(22), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124059s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=IncRange(start=40, end=41, step=1)), conversion = current_last_sgoals(22,40).

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015725s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1397845999999987, Incremental time limit = None
Running cumulative time = 0.1397845999999987, Cumulative time limit = 3600

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.124059s, Cumulative Solving = 0.015725s, Cumulative Total = 0.139785s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=40, end_step=42, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12405929999999898, solving_time=0.01572529999999972, total_time=0.1397845999999987, clingo_stats={'problem': {'lp': {'atoms': 11274.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27777.0, 'bodies_tr': 27777.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 568.0, 'rules': 55471.0, 'rules_normal': 54906.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55469.0, 'rules_tr_normal': 54906.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 19903.0, 'eqs_atom': 6385.0, 'eqs_body': 1878.0, 'eqs_other': 11640.0}, 'lpStep': {'atoms': 5632.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25174.0, 'bodies_tr': 25174.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 568.0, 'rules': 49019.0, 'rules_normal': 48454.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49017.0, 'rules_tr_normal': 48454.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 8129.0, 'eqs_atom': 2092.0, 'eqs_body': 369.0, 'eqs_other': 5668.0}, 'generator': {'vars': 2237.0, 'vars_eliminated': 0.0, 'vars_frozen': 1409.0, 'constraints': 23.0, 'constraints_binary': 552.0, 'constraints_ternary': 50.0, 'acyc_edges': 0.0, 'complexity': 655.0}}, 'solving': {'solvers': {'choices': 371.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 42.0, 'models': 1.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 25.0, 'integrated': 56.0, 'lemmas': 81.0, 'lits_learnt': 89.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 56.0, 'integrated_jumps': 155.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 8.0, 'lemmas_other': 56.0, 'lits_conflict': 25.0, 'lits_loop': 8.0, 'lits_other': 56.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.13962554931640625, 'cpu': 0.140625, 'solve': 0.0059833526611328125, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1765270233154297, 'cpu': 0.171875, 'solve': 0.00997161865234375, 'unsat': 0.0, 'sat': 0.0029888153076171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 371.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 42.0, 'models': 2.0, 'models_level': 34.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 25.0, 'integrated': 56.0, 'lemmas': 81.0, 'lits_learnt': 89.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 56.0, 'integrated_jumps': 155.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 8.0, 'lemmas_other': 56.0, 'lits_conflict': 25.0, 'lits_loop': 8.0, 'lits_other': 56.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12405929999999898, solving_time=0.01572529999999972, total_time=0.1397845999999987, clingo_stats={}))

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 22 was achieved successfully.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.124059s, Solving = 0.015725s, Total = 0.139785s

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.139785s because Manual generator exit.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.124059s, Cumulative Solving = 0.015725s, Cumulative Total = 0.139785s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40}}

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41}}

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=40, plan_length=41, step_range=range(40, 42)

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=41 : level=2 len(self.__actions.get(level, []))=22 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Online planning increment 22 finished.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 22 : Achieved sgoals 6 : Unachieved sgoals 14
Level 1 : Total sgoals 0 : Achieved sgoals 22 : Unachieved sgoals 0

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Getting sgoals range for problem number 7 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Getting sgoals range for problem number 6 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Obtained sgoals range = [6-6].

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Getting sgoals range for problem number 8 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Obtained sgoals range = [8-8].

[13-08-2021_16-59-08] DEBUG :: core.Strategies >> Obtained sgoals range = [7-7].

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [7-7]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [7-7], problem number = 7, increment number = 22

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 7)
	('last_sgoals', 7)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 22, initial = False, final = False, sgoals = [7-7]

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 22

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 22

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [7-7])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-08] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-08] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 22...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=22, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 22), range_=None), IncPart(name='plan_module', args=('#inc', 22, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 22, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 22, 7, 7, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0036302999999975327s

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027796s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005580s.

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2C92220>

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 22)', truth=True, inc_range=IncRange(start=22, end=23, step=1))

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 22). %* None *%
#program plan_module(#inc, 22, false, false). %* None *%
#program optimisation_module(#inc, 22, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 22, 7, 7, sequential, true). %* None *%

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     21 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('state_module', [Number(22), Number(22)]), ('plan_module', [Number(22), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(22), Number(22), Number(7), Number(7), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('state_module', [Number(23), Number(22)]), ('plan_module', [Number(23), Number(22), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(22), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(23), Number(22), Number(7), Number(7), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.078334s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(7, 22)', truth=True, inc_range=IncRange(start=22, end=23, step=1)), conversion = current_last_sgoals(7,22).

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011774s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09010809999999836, Incremental time limit = None
Running cumulative time = 0.09010809999999836, Cumulative time limit = 3600

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.078334s, Cumulative Solving = 0.011774s, Cumulative Total = 0.090108s, Calls = 1
Final Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=22, end_step=24, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.07833420000000046, solving_time=0.011773899999997894, total_time=0.09010809999999836, clingo_stats={'problem': {'lp': {'atoms': 7672.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16658.0, 'bodies_tr': 16658.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 33892.0, 'rules_normal': 33549.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33888.0, 'rules_tr_normal': 33549.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10637.0, 'eqs_atom': 3196.0, 'eqs_body': 1077.0, 'eqs_other': 6364.0}, 'lpStep': {'atoms': 3795.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15482.0, 'bodies_tr': 15482.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 29706.0, 'rules_normal': 29363.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29702.0, 'rules_tr_normal': 29363.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4891.0, 'eqs_atom': 1109.0, 'eqs_body': 312.0, 'eqs_other': 3470.0}, 'generator': {'vars': 1713.0, 'vars_eliminated': 0.0, 'vars_frozen': 1129.0, 'constraints': 18.0, 'constraints_binary': 468.0, 'constraints_ternary': 45.0, 'acyc_edges': 0.0, 'complexity': 553.0}}, 'solving': {'solvers': {'choices': 187.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 24.0, 'lemmas': 34.0, 'lits_learnt': 34.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 24.0, 'integrated_jumps': 59.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 24.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 24.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09076881408691406, 'cpu': 0.09375, 'solve': 0.005970001220703125, 'unsat': 0.0, 'sat': 0.0019702911376953125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12866973876953125, 'cpu': 0.140625, 'solve': 0.00998687744140625, 'unsat': 0.0, 'sat': 0.0029850006103515625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 187.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 24.0, 'lemmas': 34.0, 'lits_learnt': 34.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 24.0, 'integrated_jumps': 59.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 24.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 24.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07833420000000046, solving_time=0.011773899999997894, total_time=0.09010809999999836, clingo_stats={}))

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 7 was achieved successfully.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.078334s, Solving = 0.011774s, Total = 0.090108s

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.090108s because Manual generator exit.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.078334s, Cumulative Solving = 0.011774s, Cumulative Total = 0.090108s, Calls = 1
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41}}

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41}}

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=22, plan_length=23, step_range=range(22, 24)

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=41 : level=2 len(self.__actions.get(level, []))=23 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=22, plan_length=23, step_range=range(22, 24)

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=41 : level=2 len(self.__actions.get(level, []))=23 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=22, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Getting sgoals range for problem number 23 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Obtained sgoals range = [23-23].

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [23-23]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [23-23], problem number = 23, increment number = 22

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 23)
	('last_sgoals', 23)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 41, initial = False, final = False, sgoals = [23-23]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 41

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 41

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [23-23])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-09] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 41...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=41, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 41), range_=None), IncPart(name='plan_module', args=('#inc', 41, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 41, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 41, 23, 23, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003118799999999311s

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027245s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006332s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2E571D0>

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 41)', truth=True, inc_range=IncRange(start=41, end=42, step=1))

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 41). %* None *%
#program plan_module(#inc, 41, false, false). %* None *%
#program optimisation_module(#inc, 41, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 41, 23, 23, sequential, true). %* None *%

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     40 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('state_module', [Number(41), Number(41)]), ('plan_module', [Number(41), Number(41), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(41), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(41), Number(41), Number(23), Number(23), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('state_module', [Number(42), Number(41)]), ('plan_module', [Number(42), Number(41), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(41), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(42), Number(41), Number(23), Number(23), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123927s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(23, 41)', truth=True, inc_range=IncRange(start=41, end=42, step=1)), conversion = current_last_sgoals(23,41).

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016939s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14086610000000022, Incremental time limit = None
Running cumulative time = 0.14086610000000022, Cumulative time limit = 3600

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.123927s, Cumulative Solving = 0.016939s, Cumulative Total = 0.140866s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=41, end_step=43, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12392679999999956, solving_time=0.016939300000000657, total_time=0.14086610000000022, clingo_stats={'problem': {'lp': {'atoms': 11278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28370.0, 'bodies_tr': 28370.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56039.0, 'rules_normal': 55474.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56035.0, 'rules_tr_normal': 55474.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20103.0, 'eqs_atom': 6366.0, 'eqs_body': 1849.0, 'eqs_other': 11888.0}, 'lpStep': {'atoms': 5636.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25767.0, 'bodies_tr': 25767.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49587.0, 'rules_normal': 49022.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49583.0, 'rules_tr_normal': 49022.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8329.0, 'eqs_atom': 2073.0, 'eqs_body': 340.0, 'eqs_other': 5916.0}, 'generator': {'vars': 2614.0, 'vars_eliminated': 0.0, 'vars_frozen': 1549.0, 'constraints': 24.0, 'constraints_binary': 581.0, 'constraints_ternary': 53.0, 'acyc_edges': 0.0, 'complexity': 688.0}}, 'solving': {'solvers': {'choices': 423.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 18.0, 'lemmas': 35.0, 'lits_learnt': 35.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 217.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 8.0, 'lemmas_other': 18.0, 'lits_conflict': 9.0, 'lits_loop': 8.0, 'lits_other': 18.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14162254333496094, 'cpu': 0.140625, 'solve': 0.00595855712890625, 'unsat': 0.0, 'sat': 0.000972747802734375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17949485778808594, 'cpu': 0.1875, 'solve': 0.01091766357421875, 'unsat': 0.0, 'sat': 0.002941131591796875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 423.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 18.0, 'lemmas': 35.0, 'lits_learnt': 35.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 18.0, 'integrated_jumps': 217.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 8.0, 'lemmas_other': 18.0, 'lits_conflict': 9.0, 'lits_loop': 8.0, 'lits_other': 18.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12392679999999956, solving_time=0.016939300000000657, total_time=0.14086610000000022, clingo_stats={}))

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 23 was achieved successfully.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.123927s, Solving = 0.016939s, Total = 0.140866s

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.140866s because Manual generator exit.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.123927s, Cumulative Solving = 0.016939s, Cumulative Total = 0.140866s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41}}

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42}}

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=41, plan_length=42, step_range=range(41, 43)

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=42 : level=2 len(self.__actions.get(level, []))=23 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Online planning increment 23 finished.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 23 : Achieved sgoals 7 : Unachieved sgoals 13
Level 1 : Total sgoals 0 : Achieved sgoals 23 : Unachieved sgoals 0

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Getting sgoals range for problem number 8 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Getting sgoals range for problem number 7 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Obtained sgoals range = [7-7].

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Getting sgoals range for problem number 9 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Obtained sgoals range = [9-9].

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Obtained sgoals range = [8-8].

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [8-8]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [8-8], problem number = 8, increment number = 23

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 8)
	('last_sgoals', 8)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 23, initial = False, final = False, sgoals = [8-8]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 23

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 23

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [8-8])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-09] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 23...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=23, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 23), range_=None), IncPart(name='plan_module', args=('#inc', 23, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 23, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 23, 8, 8, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003179500000001667s

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.022375s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004957s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3486540>

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 23)', truth=True, inc_range=IncRange(start=23, end=24, step=1))

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 23). %* None *%
#program plan_module(#inc, 23, false, false). %* None *%
#program optimisation_module(#inc, 23, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 23, 8, 8, sequential, true). %* None *%

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     22 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('state_module', [Number(23), Number(23)]), ('plan_module', [Number(23), Number(23), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(23), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(23), Number(23), Number(8), Number(8), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('state_module', [Number(24), Number(23)]), ('plan_module', [Number(24), Number(23), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(23), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(24), Number(23), Number(8), Number(8), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.077182s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(8, 23)', truth=True, inc_range=IncRange(start=23, end=24, step=1)), conversion = current_last_sgoals(8,23).

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013242s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09042489999999859, Incremental time limit = None
Running cumulative time = 0.09042489999999859, Cumulative time limit = 3600

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.077182s, Cumulative Solving = 0.013242s, Cumulative Total = 0.090425s, Calls = 1
Final Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=23, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.07718249999999927, solving_time=0.013242399999999321, total_time=0.09042489999999859, clingo_stats={'problem': {'lp': {'atoms': 7661.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16784.0, 'bodies_tr': 16784.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 33984.0, 'rules_normal': 33641.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33980.0, 'rules_tr_normal': 33641.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10647.0, 'eqs_atom': 3171.0, 'eqs_body': 1043.0, 'eqs_other': 6433.0}, 'lpStep': {'atoms': 3784.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15608.0, 'bodies_tr': 15608.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 29798.0, 'rules_normal': 29455.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29794.0, 'rules_tr_normal': 29455.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4901.0, 'eqs_atom': 1084.0, 'eqs_body': 278.0, 'eqs_other': 3539.0}, 'generator': {'vars': 1840.0, 'vars_eliminated': 0.0, 'vars_frozen': 1167.0, 'constraints': 16.0, 'constraints_binary': 515.0, 'constraints_ternary': 35.0, 'acyc_edges': 0.0, 'complexity': 584.0}}, 'solving': {'solvers': {'choices': 190.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08975982666015625, 'cpu': 0.09375, 'solve': 0.004962921142578125, 'unsat': 0.0, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12067794799804688, 'cpu': 0.125, 'solve': 0.007955551147460938, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 190.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07718249999999927, solving_time=0.013242399999999321, total_time=0.09042489999999859, clingo_stats={}))

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 8 was achieved successfully.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.077182s, Solving = 0.013242s, Total = 0.090425s

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.090425s because Manual generator exit.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.077182s, Cumulative Solving = 0.013242s, Cumulative Total = 0.090425s, Calls = 1
Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42}}

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42}}

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=23, plan_length=24, step_range=range(23, 25)

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=42 : level=2 len(self.__actions.get(level, []))=24 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=23, plan_length=24, step_range=range(23, 25)

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=42 : level=2 len(self.__actions.get(level, []))=24 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=23, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Getting sgoals range for problem number 24 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-09] DEBUG :: core.Strategies >> Obtained sgoals range = [24-24].

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [24-24]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [24-24], problem number = 24, increment number = 23

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 24)
	('last_sgoals', 24)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 42, initial = False, final = False, sgoals = [24-24]

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 42

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 42

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [24-24])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-09] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 42...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=42, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 42), range_=None), IncPart(name='plan_module', args=('#inc', 42, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 42, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 42, 24, 24, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0033709999999977924s

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027270s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006495s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2D1DA40>

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 42)', truth=True, inc_range=IncRange(start=42, end=43, step=1))

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 42). %* None *%
#program plan_module(#inc, 42, false, false). %* None *%
#program optimisation_module(#inc, 42, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 42, 24, 24, sequential, true). %* None *%

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     41 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('state_module', [Number(42), Number(42)]), ('plan_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(42), Number(42), Number(24), Number(24), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('state_module', [Number(43), Number(42)]), ('plan_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(43), Number(42), Number(24), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125159s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(24, 42)', truth=True, inc_range=IncRange(start=42, end=43, step=1)), conversion = current_last_sgoals(24,42).

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017928s.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1430870000000013, Incremental time limit = None
Running cumulative time = 0.1430870000000013, Cumulative time limit = 3600

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.125159s, Cumulative Solving = 0.017928s, Cumulative Total = 0.143087s, Calls = 1
Final Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=42, end_step=44, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.1251589000000024, solving_time=0.017928099999998892, total_time=0.1430870000000013, clingo_stats={'problem': {'lp': {'atoms': 11267.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28579.0, 'bodies_tr': 28579.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 40.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56176.0, 'rules_normal': 55611.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56172.0, 'rules_tr_normal': 55611.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20141.0, 'eqs_atom': 6352.0, 'eqs_body': 1815.0, 'eqs_other': 11974.0}, 'lpStep': {'atoms': 5625.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25976.0, 'bodies_tr': 25976.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 40.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49724.0, 'rules_normal': 49159.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49720.0, 'rules_tr_normal': 49159.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8367.0, 'eqs_atom': 2059.0, 'eqs_body': 306.0, 'eqs_other': 6002.0}, 'generator': {'vars': 2745.0, 'vars_eliminated': 0.0, 'vars_frozen': 1575.0, 'constraints': 17.0, 'constraints_binary': 519.0, 'constraints_ternary': 40.0, 'acyc_edges': 0.0, 'complexity': 596.0}}, 'solving': {'solvers': {'choices': 214.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 4.0, 'lemmas': 20.0, 'lits_learnt': 20.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 4.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 4.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 4.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14307403564453125, 'cpu': 0.15625, 'solve': 0.006011962890625, 'unsat': 0.0, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18096542358398438, 'cpu': 0.1875, 'solve': 0.0110015869140625, 'unsat': 0.0, 'sat': 0.0030078887939453125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 214.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 4.0, 'lemmas': 20.0, 'lits_learnt': 20.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 4.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 4.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 4.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1251589000000024, solving_time=0.017928099999998892, total_time=0.1430870000000013, clingo_stats={}))

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 24 was achieved successfully.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.125159s, Solving = 0.017928s, Total = 0.143087s

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.143087s because Manual generator exit.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-09] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.125159s, Cumulative Solving = 0.017928s, Cumulative Total = 0.143087s, Calls = 1
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42}}

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43}}

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=42, plan_length=43, step_range=range(42, 44)

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=43 : level=2 len(self.__actions.get(level, []))=24 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Online planning increment 24 finished.

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 24 : Achieved sgoals 8 : Unachieved sgoals 12
Level 1 : Total sgoals 0 : Achieved sgoals 24 : Unachieved sgoals 0

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Getting sgoals range for problem number 9 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Getting sgoals range for problem number 8 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Obtained sgoals range = [8-8].

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Getting sgoals range for problem number 10 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Obtained sgoals range = [10-10].

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Obtained sgoals range = [9-9].

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-9]

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [9-9], problem number = 9, increment number = 24

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 9)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 24, initial = False, final = False, sgoals = [9-9]

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 24

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 24

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [9-9])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-10] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 24...

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=24, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 24), range_=None), IncPart(name='plan_module', args=('#inc', 24, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 24, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 24, 9, 9, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003132600000000707s

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.022569s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005262s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB34C89F0>

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 24)', truth=True, inc_range=IncRange(start=24, end=25, step=1))

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 24). %* None *%
#program plan_module(#inc, 24, false, false). %* None *%
#program optimisation_module(#inc, 24, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 24, 9, 9, sequential, true). %* None *%

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     23 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('state_module', [Number(24), Number(24)]), ('plan_module', [Number(24), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(24), Number(24), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('state_module', [Number(25), Number(24)]), ('plan_module', [Number(25), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(25), Number(24), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084608s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(9, 24)', truth=True, inc_range=IncRange(start=24, end=25, step=1)), conversion = current_last_sgoals(9,24).

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007718s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09232610000000108, Incremental time limit = None
Running cumulative time = 0.09232610000000108, Cumulative time limit = 3600

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=24, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08460780000000057, solving_time=0.007718300000000511, total_time=0.09232610000000108, clingo_stats={'problem': {'lp': {'atoms': 7650.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16911.0, 'bodies_tr': 16911.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 34078.0, 'rules_normal': 33735.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 34074.0, 'rules_tr_normal': 33735.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10673.0, 'eqs_atom': 3152.0, 'eqs_body': 1016.0, 'eqs_other': 6505.0}, 'lpStep': {'atoms': 3773.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15735.0, 'bodies_tr': 15735.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 29892.0, 'rules_normal': 29549.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29888.0, 'rules_tr_normal': 29549.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4927.0, 'eqs_atom': 1065.0, 'eqs_body': 251.0, 'eqs_other': 3611.0}, 'generator': {'vars': 1966.0, 'vars_eliminated': 0.0, 'vars_frozen': 1202.0, 'constraints': 13.0, 'constraints_binary': 403.0, 'constraints_ternary': 23.0, 'acyc_edges': 0.0, 'complexity': 453.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 12.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09226036071777344, 'cpu': 0.09375, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12317657470703125, 'cpu': 0.125, 'solve': 0.0049571990966796875, 'unsat': 0.0009975433349609375, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 20.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.08460780000000057, solving_time=0.007718300000000511, total_time=0.09232610000000108, clingo_stats={}))

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('state_module', [Number(26), Number(24)]), ('plan_module', [Number(26), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(26), Number(24), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.063430s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005880s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.06930970000000158, Incremental time limit = None
Running cumulative time = 0.16163580000000266, Cumulative time limit = 3600

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.06342950000000158, solving_time=0.005880200000000002, total_time=0.06930970000000158, clingo_stats={'problem': {'lp': {'atoms': 9258.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30172.0, 'bodies_tr': 30172.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 39.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 556.0, 'rules': 59426.0, 'rules_normal': 58923.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 59418.0, 'rules_tr_normal': 58923.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13653.0, 'eqs_atom': 3602.0, 'eqs_body': 1216.0, 'eqs_other': 8835.0}, 'lpStep': {'atoms': 1608.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13261.0, 'bodies_tr': 13261.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 121.0, 'rules': 25348.0, 'rules_normal': 25188.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25344.0, 'rules_tr_normal': 25188.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2980.0, 'eqs_atom': 450.0, 'eqs_body': 200.0, 'eqs_other': 2330.0}, 'generator': {'vars': 2542.0, 'vars_eliminated': 0.0, 'vars_frozen': 1638.0, 'constraints': 158.0, 'constraints_binary': 3787.0, 'constraints_ternary': 337.0, 'acyc_edges': 0.0, 'complexity': 4324.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 24.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.06981277465820312, 'cpu': 0.078125, 'solve': 0.00096893310546875, 'unsat': 0.00096893310546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.19298934936523438, 'cpu': 0.203125, 'solve': 0.0059261322021484375, 'unsat': 0.0019664764404296875, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 44.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14803730000000215, solving_time=0.013598500000000513, total_time=0.16163580000000266, clingo_stats={}))

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('state_module', [Number(27), Number(24)]), ('plan_module', [Number(27), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(27), Number(24), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.064065s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006014s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07007839999999987, Incremental time limit = None
Running cumulative time = 0.23171420000000253, Cumulative time limit = 3600

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=27, end_step=28, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.06406450000000063, solving_time=0.006013899999999239, total_time=0.07007839999999987, clingo_stats={'problem': {'lp': {'atoms': 11055.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 43919.0, 'bodies_tr': 43919.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 597.0, 'count_bodies_tr': 597.0, 'sccs': 53.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 704.0, 'rules': 85356.0, 'rules_normal': 84693.0, 'rules_choice': 651.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 85348.0, 'rules_tr_normal': 84693.0, 'rules_tr_choice': 651.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 17378.0, 'eqs_atom': 4350.0, 'eqs_body': 1409.0, 'eqs_other': 11619.0}, 'lpStep': {'atoms': 1797.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13747.0, 'bodies_tr': 13747.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 14.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 148.0, 'rules': 25930.0, 'rules_normal': 25770.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25930.0, 'rules_tr_normal': 25770.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 3725.0, 'eqs_atom': 748.0, 'eqs_body': 193.0, 'eqs_other': 2784.0}, 'generator': {'vars': 3260.0, 'vars_eliminated': 0.0, 'vars_frozen': 2100.0, 'constraints': 381.0, 'constraints_binary': 8909.0, 'constraints_ternary': 1000.0, 'acyc_edges': 0.0, 'complexity': 10388.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 4.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 70.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.07081222534179688, 'cpu': 0.0625, 'solve': 0.0009708404541015625, 'unsat': 0.0009708404541015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.26380157470703125, 'cpu': 0.265625, 'solve': 0.00689697265625, 'unsat': 0.00293731689453125, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 5.0, 'lits_learnt': 7.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 114.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 5.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 7.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.21210180000000278, solving_time=0.019612399999999752, total_time=0.23171420000000253, clingo_stats={}))

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('state_module', [Number(28), Number(24)]), ('plan_module', [Number(28), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(28), Number(24), Number(9), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.127822s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4791, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020940s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1487622999999978, Incremental time limit = None
Running cumulative time = 0.38047650000000033, Cumulative time limit = 3600

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.339924s, Cumulative Solving = 0.040553s, Cumulative Total = 0.380477s, Calls = 4
Final Model :: Total atoms = 4791, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12782179999999954, solving_time=0.020940499999998252, total_time=0.1487622999999978, clingo_stats={'problem': {'lp': {'atoms': 13151.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 58000.0, 'bodies_tr': 58000.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 780.0, 'count_bodies_tr': 780.0, 'sccs': 69.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 876.0, 'rules': 111834.0, 'rules_normal': 111011.0, 'rules_choice': 807.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 111826.0, 'rules_tr_normal': 111011.0, 'rules_tr_choice': 807.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 21424.0, 'eqs_atom': 5403.0, 'eqs_body': 1625.0, 'eqs_other': 14396.0}, 'lpStep': {'atoms': 2096.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14081.0, 'bodies_tr': 14081.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 16.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 172.0, 'rules': 26478.0, 'rules_normal': 26318.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 26478.0, 'rules_tr_normal': 26318.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4046.0, 'eqs_atom': 1053.0, 'eqs_body': 216.0, 'eqs_other': 2777.0}, 'generator': {'vars': 4127.0, 'vars_eliminated': 0.0, 'vars_frozen': 2653.0, 'constraints': 624.0, 'constraints_binary': 15820.0, 'constraints_ternary': 1918.0, 'acyc_edges': 0.0, 'complexity': 18525.0}}, 'solving': {'solvers': {'choices': 691.0, 'conflicts': 118.0, 'conflicts_analyzed': 118.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 36.0, 'models': 1.0, 'models_level': 51.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 93.0, 'distributed_sum_lbd': 207.0, 'integrated': 518.0, 'lemmas': 785.0, 'lits_learnt': 3238.0, 'lemmas_binary': 246.0, 'lemmas_ternary': 45.0, 'cpu_time': 0.0, 'integrated_imps': 194.0, 'integrated_jumps': 186.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 101.0, 'lemmas_loop': 207.0, 'lemmas_other': 477.0, 'lits_conflict': 496.0, 'lits_loop': 934.0, 'lits_other': 1808.0, 'jumps': {'jumps': 118.0, 'jumps_bounded': 31.0, 'levels': 274.0, 'levels_bounded': 53.0, 'max': 18.0, 'max_executed': 18.0, 'max_bounded': 12.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14960098266601562, 'cpu': 0.078125, 'solve': 0.009973526000976562, 'unsat': 0.0, 'sat': 0.0039882659912109375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4134025573730469, 'cpu': 0.34375, 'solve': 0.016870498657226562, 'unsat': 0.00293731689453125, 'sat': 0.0059528350830078125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 691.0, 'conflicts': 126.0, 'conflicts_analyzed': 118.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 36.0, 'models': 2.0, 'models_level': 52.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 95.0, 'distributed_sum_lbd': 211.0, 'integrated': 518.0, 'lemmas': 790.0, 'lits_learnt': 3245.0, 'lemmas_binary': 248.0, 'lemmas_ternary': 45.0, 'cpu_time': 0.0, 'integrated_imps': 194.0, 'integrated_jumps': 186.0, 'guiding_paths_lits': 198.0, 'guiding_paths': 27.0, 'splits': 0.0, 'lemmas_conflict': 101.0, 'lemmas_loop': 212.0, 'lemmas_other': 477.0, 'lits_conflict': 496.0, 'lits_loop': 941.0, 'lits_other': 1808.0, 'jumps': {'jumps': 118.0, 'jumps_bounded': 31.0, 'levels': 274.0, 'levels_bounded': 53.0, 'max': 18.0, 'max_executed': 18.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3399236000000023, solving_time=0.040552899999998004, total_time=0.38047650000000033, clingo_stats={}))

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved.

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 9 was achieved successfully.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.084608s, Solving = 0.007718s, Total = 0.092326s
2 : Statistics :: Grounding = 0.063430s, Solving = 0.005880s, Total = 0.069310s
3 : Statistics :: Grounding = 0.064065s, Solving = 0.006014s, Total = 0.070078s
4 : Statistics :: Grounding = 0.127822s, Solving = 0.020940s, Total = 0.148762s

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.380477s because Manual generator exit.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.339924s, Cumulative Solving = 0.040553s, Cumulative Total = 0.380477s, Calls = 4
Model :: Total atoms = 4791, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43}}

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43}}

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 4 :: Actions = 4                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=24, plan_length=28, step_range=range(24, 29)

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=43 : level=2 len(self.__actions.get(level, []))=28 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=24, plan_length=28, step_range=range(24, 29)

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=43 : level=2 len(self.__actions.get(level, []))=28 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00.

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> plan_length=4, true_size_bound=1, partial_problems=4

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=4, plan_length=4, start_step=24, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Decided: number_small_problems=4, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=25, blend=Blend(left=0, right=0)), DivisionPoint(index=26, blend=Blend(left=0, right=0)), DivisionPoint(index=27, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Getting sgoals range for problem number 25 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Getting sgoals range for problem number 26 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Obtained sgoals range = [26-26].

[13-08-2021_16-59-10] DEBUG :: core.Strategies >> Obtained sgoals range = [25-25].

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [25-25]

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [25-25], problem number = 25, increment number = 24

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 25)
	('last_sgoals', 25)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 43, initial = False, final = False, sgoals = [25-25]

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 43

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 43

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [25-25])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-10] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 43...

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=43, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 43), range_=None), IncPart(name='plan_module', args=('#inc', 43, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 43, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 43, 25, 25, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0031375999999987414s

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027607s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006439s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3476E50>

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 43)', truth=True, inc_range=IncRange(start=43, end=44, step=1))

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 43). %* None *%
#program plan_module(#inc, 43, false, false). %* None *%
#program optimisation_module(#inc, 43, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 43, 25, 25, sequential, true). %* None *%

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     42 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('state_module', [Number(43), Number(43)]), ('plan_module', [Number(43), Number(43), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(43), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(43), Number(43), Number(25), Number(25), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('state_module', [Number(44), Number(43)]), ('plan_module', [Number(44), Number(43), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(43), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(44), Number(43), Number(25), Number(25), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130006s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(25, 43)', truth=True, inc_range=IncRange(start=43, end=44, step=1)), conversion = current_last_sgoals(25,43).

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017249s.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14725460000000012, Incremental time limit = None
Running cumulative time = 0.14725460000000012, Cumulative time limit = 3600

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.130006s, Cumulative Solving = 0.017249s, Cumulative Total = 0.147255s, Calls = 1
Final Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=43, end_step=45, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.13000579999999928, solving_time=0.01724880000000084, total_time=0.14725460000000012, clingo_stats={'problem': {'lp': {'atoms': 11256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28790.0, 'bodies_tr': 28790.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56315.0, 'rules_normal': 55750.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56311.0, 'rules_tr_normal': 55750.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20196.0, 'eqs_atom': 6344.0, 'eqs_body': 1788.0, 'eqs_other': 12064.0}, 'lpStep': {'atoms': 5614.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26187.0, 'bodies_tr': 26187.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49863.0, 'rules_normal': 49298.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49859.0, 'rules_tr_normal': 49298.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8422.0, 'eqs_atom': 2051.0, 'eqs_body': 279.0, 'eqs_other': 6092.0}, 'generator': {'vars': 2875.0, 'vars_eliminated': 0.0, 'vars_frozen': 1598.0, 'constraints': 10.0, 'constraints_binary': 379.0, 'constraints_ternary': 25.0, 'acyc_edges': 0.0, 'complexity': 424.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14760398864746094, 'cpu': 0.15625, 'solve': 0.005950927734375, 'unsat': 0.0, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1855030059814453, 'cpu': 0.203125, 'solve': 0.010938644409179688, 'unsat': 0.0, 'sat': 0.00395965576171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13000579999999928, solving_time=0.01724880000000084, total_time=0.14725460000000012, clingo_stats={}))

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved.

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 25 was achieved successfully.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.130006s, Solving = 0.017249s, Total = 0.147255s

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.147255s because Manual generator exit.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-10] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.130006s, Cumulative Solving = 0.017249s, Cumulative Total = 0.147255s, Calls = 1
Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43}}

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44}}

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=43, plan_length=44, step_range=range(43, 45)

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=44 : level=2 len(self.__actions.get(level, []))=28 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Online planning increment 25 finished.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 28 : Achieved sgoals 9 : Unachieved sgoals 11
Level 1 : Total sgoals 0 : Achieved sgoals 25 : Unachieved sgoals 3

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Getting sgoals range for problem number 26 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Getting sgoals range for problem number 25 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Obtained sgoals range = [25-25].

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Getting sgoals range for problem number 27 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Obtained sgoals range = [27-27].

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Obtained sgoals range = [26-26].

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [26-26]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [26-26], problem number = 26, increment number = 25

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 26)
	('last_sgoals', 26)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 44, initial = False, final = False, sgoals = [26-26]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 44

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 44

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [26-26])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-11] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 44...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=44, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 44), range_=None), IncPart(name='plan_module', args=('#inc', 44, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 44, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 44, 26, 26, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004216100000000722s

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027492s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005560s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB351C270>

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 44)', truth=True, inc_range=IncRange(start=44, end=45, step=1))

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 44). %* None *%
#program plan_module(#inc, 44, false, false). %* None *%
#program optimisation_module(#inc, 44, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 44, 26, 26, sequential, true). %* None *%

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     43 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('state_module', [Number(44), Number(44)]), ('plan_module', [Number(44), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(44), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(44), Number(44), Number(26), Number(26), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('state_module', [Number(45), Number(44)]), ('plan_module', [Number(45), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(44), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(45), Number(44), Number(26), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125279s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(26, 44)', truth=True, inc_range=IncRange(start=44, end=45, step=1)), conversion = current_last_sgoals(26,44).

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017037s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1423163000000045, Incremental time limit = None
Running cumulative time = 0.1423163000000045, Cumulative time limit = 3600

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.125279s, Cumulative Solving = 0.017037s, Cumulative Total = 0.142316s, Calls = 1
Final Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=44, end_step=46, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12527930000000254, solving_time=0.017037000000001967, total_time=0.1423163000000045, clingo_stats={'problem': {'lp': {'atoms': 11256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28838.0, 'bodies_tr': 28838.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56363.0, 'rules_normal': 55798.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56359.0, 'rules_tr_normal': 55798.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20196.0, 'eqs_atom': 6344.0, 'eqs_body': 1788.0, 'eqs_other': 12064.0}, 'lpStep': {'atoms': 5614.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26235.0, 'bodies_tr': 26235.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49911.0, 'rules_normal': 49346.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49907.0, 'rules_tr_normal': 49346.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8422.0, 'eqs_atom': 2051.0, 'eqs_body': 279.0, 'eqs_other': 6092.0}, 'generator': {'vars': 2875.0, 'vars_eliminated': 0.0, 'vars_frozen': 1598.0, 'constraints': 8.0, 'constraints_binary': 312.0, 'constraints_ternary': 25.0, 'acyc_edges': 0.0, 'complexity': 353.0}}, 'solving': {'solvers': {'choices': 327.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 30.0, 'lemmas': 45.0, 'lits_learnt': 45.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 30.0, 'integrated_jumps': 119.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 30.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 30.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.14261817932128906, 'cpu': 0.140625, 'solve': 0.0059833526611328125, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1795196533203125, 'cpu': 0.1875, 'solve': 0.008975982666015625, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 327.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 30.0, 'lemmas': 45.0, 'lits_learnt': 45.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 30.0, 'integrated_jumps': 119.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 30.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 30.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12527930000000254, solving_time=0.017037000000001967, total_time=0.1423163000000045, clingo_stats={}))

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 26 was achieved successfully.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.125279s, Solving = 0.017037s, Total = 0.142316s

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.142316s because Manual generator exit.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.125279s, Cumulative Solving = 0.017037s, Cumulative Total = 0.142316s, Calls = 1
Model :: Total atoms = 4007, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44}}

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45}}

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=44, plan_length=45, step_range=range(44, 46)

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=45 : level=2 len(self.__actions.get(level, []))=28 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Online planning increment 26 finished.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 28 : Achieved sgoals 9 : Unachieved sgoals 11
Level 1 : Total sgoals 0 : Achieved sgoals 26 : Unachieved sgoals 2

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Getting sgoals range for problem number 27 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Getting sgoals range for problem number 26 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Obtained sgoals range = [26-26].

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Getting sgoals range for problem number 28 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Obtained sgoals range = [28-28].

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Obtained sgoals range = [27-27].

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [27-27]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [27-27], problem number = 27, increment number = 26

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 27)
	('last_sgoals', 27)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 45, initial = False, final = False, sgoals = [27-27]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 45

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 45

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [27-27])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-11] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 45...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=45, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 45), range_=None), IncPart(name='plan_module', args=('#inc', 45, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 45, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 45, 27, 27, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003461600000001397s

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026793s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005894s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3529860>

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(27, 45)', truth=True, inc_range=IncRange(start=45, end=46, step=1))

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 45). %* None *%
#program plan_module(#inc, 45, false, false). %* None *%
#program optimisation_module(#inc, 45, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 45, 27, 27, sequential, true). %* None *%

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     44 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('state_module', [Number(45), Number(45)]), ('plan_module', [Number(45), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(45), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(45), Number(45), Number(27), Number(27), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('state_module', [Number(46), Number(45)]), ('plan_module', [Number(46), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(45), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(46), Number(45), Number(27), Number(27), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.186882s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(27, 45)', truth=True, inc_range=IncRange(start=45, end=46, step=1)), conversion = current_last_sgoals(27,45).

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022830s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.20971259999999958, Incremental time limit = None
Running cumulative time = 0.20971259999999958, Cumulative time limit = 3600

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=45, end_step=47, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.1868824999999994, solving_time=0.022830100000000186, total_time=0.20971259999999958, clingo_stats={'problem': {'lp': {'atoms': 11256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28885.0, 'bodies_tr': 28885.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 56411.0, 'rules_normal': 55846.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56407.0, 'rules_tr_normal': 55846.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20195.0, 'eqs_atom': 6344.0, 'eqs_body': 1788.0, 'eqs_other': 12063.0}, 'lpStep': {'atoms': 5614.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26282.0, 'bodies_tr': 26282.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 49959.0, 'rules_normal': 49394.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49955.0, 'rules_tr_normal': 49394.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8421.0, 'eqs_atom': 2051.0, 'eqs_body': 279.0, 'eqs_other': 6091.0}, 'generator': {'vars': 2875.0, 'vars_eliminated': 0.0, 'vars_frozen': 1598.0, 'constraints': 50.0, 'constraints_binary': 528.0, 'constraints_ternary': 53.0, 'acyc_edges': 0.0, 'complexity': 657.0}}, 'solving': {'solvers': {'choices': 39.0, 'conflicts': 16.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 22.0, 'integrated': 47.0, 'lemmas': 47.0, 'lits_learnt': 65.0, 'lemmas_binary': 18.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 19.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 36.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 8.0, 'lemmas_other': 29.0, 'lits_conflict': 10.0, 'lits_loop': 14.0, 'lits_other': 41.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 10.0, 'levels': 94.0, 'levels_bounded': 60.0, 'max': 13.0, 'max_executed': 7.0, 'max_bounded': 6.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.20949554443359375, 'cpu': 0.234375, 'solve': 0.002960205078125, 'unsat': 0.002960205078125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2463703155517578, 'cpu': 0.28125, 'solve': 0.00691986083984375, 'unsat': 0.002960205078125, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 39.0, 'conflicts': 16.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 22.0, 'integrated': 47.0, 'lemmas': 47.0, 'lits_learnt': 65.0, 'lemmas_binary': 18.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 19.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 44.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 8.0, 'lemmas_other': 29.0, 'lits_conflict': 10.0, 'lits_loop': 14.0, 'lits_other': 41.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 10.0, 'levels': 94.0, 'levels_bounded': 60.0, 'max': 13.0, 'max_executed': 7.0, 'max_bounded': 6.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1868824999999994, solving_time=0.022830100000000186, total_time=0.20971259999999958, clingo_stats={}))

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 47:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('state_module', [Number(47), Number(45)]), ('plan_module', [Number(47), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(45), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(47), Number(45), Number(27), Number(27), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097467s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4535, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010363s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10782950000000113, Incremental time limit = None
Running cumulative time = 0.3175421000000007, Cumulative time limit = 3600

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.284349s, Cumulative Solving = 0.033193s, Cumulative Total = 0.317542s, Calls = 2
Final Model :: Total atoms = 4535, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=47, end_step=48, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.09746690000000058, solving_time=0.010362600000000555, total_time=0.10782950000000113, clingo_stats={'problem': {'lp': {'atoms': 13665.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50274.0, 'bodies_tr': 50274.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 55.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 870.0, 'rules': 97848.0, 'rules_normal': 97075.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 97840.0, 'rules_tr_normal': 97075.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23846.0, 'eqs_atom': 7224.0, 'eqs_body': 2095.0, 'eqs_other': 14527.0}, 'lpStep': {'atoms': 2409.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21389.0, 'bodies_tr': 21389.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 196.0, 'rules': 41437.0, 'rules_normal': 41229.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41433.0, 'rules_tr_normal': 41229.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3651.0, 'eqs_atom': 880.0, 'eqs_body': 307.0, 'eqs_other': 2464.0}, 'generator': {'vars': 3166.0, 'vars_eliminated': 0.0, 'vars_frozen': 1851.0, 'constraints': 125.0, 'constraints_binary': 2132.0, 'constraints_ternary': 167.0, 'acyc_edges': 0.0, 'complexity': 2478.0}}, 'solving': {'solvers': {'choices': 460.0, 'conflicts': 29.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 45.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 35.0, 'distributed_sum_lbd': 42.0, 'integrated': 159.0, 'lemmas': 194.0, 'lits_learnt': 293.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 117.0, 'integrated_jumps': 92.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 21.0, 'lemmas_other': 144.0, 'lits_conflict': 31.0, 'lits_loop': 86.0, 'lits_other': 176.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 8.0, 'levels': 155.0, 'levels_bounded': 64.0, 'max': 22.0, 'max_executed': 19.0, 'max_bounded': 8.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.10870742797851562, 'cpu': 0.109375, 'solve': 0.005954742431640625, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.35507774353027344, 'cpu': 0.390625, 'solve': 0.012874603271484375, 'unsat': 0.002960205078125, 'sat': 0.0039310455322265625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 499.0, 'conflicts': 45.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 46.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 51.0, 'distributed_sum_lbd': 64.0, 'integrated': 206.0, 'lemmas': 241.0, 'lits_learnt': 358.0, 'lemmas_binary': 57.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 136.0, 'integrated_jumps': 97.0, 'guiding_paths_lits': 108.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 39.0, 'lemmas_loop': 29.0, 'lemmas_other': 173.0, 'lits_conflict': 41.0, 'lits_loop': 100.0, 'lits_other': 217.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 18.0, 'levels': 249.0, 'levels_bounded': 124.0, 'max': 22.0, 'max_executed': 19.0, 'max_bounded': 8.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.2843494, solving_time=0.03319270000000074, total_time=0.3175421000000007, clingo_stats={}))

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 27 was achieved successfully.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.186882s, Solving = 0.022830s, Total = 0.209713s
2 : Statistics :: Grounding = 0.097467s, Solving = 0.010363s, Total = 0.107830s

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.317542s because Manual generator exit.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.284349s, Cumulative Solving = 0.033193s, Cumulative Total = 0.317542s, Calls = 2
Model :: Total atoms = 4535, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45}}

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47}}

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=45, plan_length=47, step_range=range(45, 48)

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=47 : level=2 len(self.__actions.get(level, []))=28 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Online planning increment 27 finished.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 28 : Achieved sgoals 9 : Unachieved sgoals 11
Level 1 : Total sgoals 0 : Achieved sgoals 27 : Unachieved sgoals 1

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Getting sgoals range for problem number 28 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Getting sgoals range for problem number 27 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 25, Blend = (Left = 0, Right = 0)), (Index = 26, Blend = (Left = 0, Right = 0)), (Index = 27, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Obtained sgoals range = [27-27].

[13-08-2021_16-59-11] DEBUG :: core.Strategies >> Obtained sgoals range = [28-28].

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [28-28]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [28-28], problem number = 28, increment number = 27

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 28)
	('last_sgoals', 28)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 47, initial = False, final = False, sgoals = [28-28]

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 47

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 47

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [28-28])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-11] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-11] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 47...

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=47, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 47), range_=None), IncPart(name='plan_module', args=('#inc', 47, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 47, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 47, 28, 28, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030368000000002837s

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025245s.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005949s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB350E400>

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(28, 47)', truth=True, inc_range=IncRange(start=47, end=48, step=1))

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 47). %* None *%
#program plan_module(#inc, 47, false, false). %* None *%
#program optimisation_module(#inc, 47, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 47, 28, 28, sequential, true). %* None *%

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     46 : Current =     48
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('state_module', [Number(47), Number(47)]), ('plan_module', [Number(47), Number(47), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(47), Number(47), Number(28), Number(28), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('state_module', [Number(48), Number(47)]), ('plan_module', [Number(48), Number(47), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(48), Number(47), Number(28), Number(28), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129822s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(28, 47)', truth=True, inc_range=IncRange(start=47, end=48, step=1)), conversion = current_last_sgoals(28,47).

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014133s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14395490000000066, Incremental time limit = None
Running cumulative time = 0.14395490000000066, Cumulative time limit = 3600

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=47, end_step=49, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12982200000000077, solving_time=0.014132899999999893, total_time=0.14395490000000066, clingo_stats={'problem': {'lp': {'atoms': 11256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28947.0, 'bodies_tr': 28947.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 56480.0, 'rules_normal': 55915.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56476.0, 'rules_tr_normal': 55915.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20237.0, 'eqs_atom': 6331.0, 'eqs_body': 1780.0, 'eqs_other': 12126.0}, 'lpStep': {'atoms': 5614.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26344.0, 'bodies_tr': 26344.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 50028.0, 'rules_normal': 49463.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 50024.0, 'rules_tr_normal': 49463.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8463.0, 'eqs_atom': 2038.0, 'eqs_body': 271.0, 'eqs_other': 6154.0}, 'generator': {'vars': 2887.0, 'vars_eliminated': 0.0, 'vars_frozen': 1632.0, 'constraints': 45.0, 'constraints_binary': 487.0, 'constraints_ternary': 51.0, 'acyc_edges': 0.0, 'complexity': 609.0}}, 'solving': {'solvers': {'choices': 6.0, 'conflicts': 4.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 1.0, 'integrated': 2.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 30.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 5.0, 'lemmas_other': 2.0, 'lits_conflict': 1.0, 'lits_loop': 5.0, 'lits_other': 2.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 11.0, 'levels_bounded': 6.0, 'max': 11.0, 'max_executed': 5.0, 'max_bounded': 6.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14361572265625, 'cpu': 0.140625, 'solve': 0.001964569091796875, 'unsat': 0.001964569091796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17854690551757812, 'cpu': 0.171875, 'solve': 0.005950927734375, 'unsat': 0.001964569091796875, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6.0, 'conflicts': 4.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 1.0, 'integrated': 2.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 38.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 5.0, 'lemmas_other': 2.0, 'lits_conflict': 1.0, 'lits_loop': 5.0, 'lits_other': 2.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 11.0, 'levels_bounded': 6.0, 'max': 11.0, 'max_executed': 5.0, 'max_bounded': 6.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12982200000000077, solving_time=0.014132899999999893, total_time=0.14395490000000066, clingo_stats={}))

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 49:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('state_module', [Number(49), Number(47)]), ('plan_module', [Number(49), Number(47), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(49), Number(47), Number(28), Number(28), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094196s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005856s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1000526999999991, Incremental time limit = None
Running cumulative time = 0.24400759999999977, Cumulative time limit = 3600

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=49, end_step=50, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09419630000000012, solving_time=0.005856399999998985, total_time=0.1000526999999991, clingo_stats={'problem': {'lp': {'atoms': 13562.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50339.0, 'bodies_tr': 50339.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 54.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 862.0, 'rules': 98015.0, 'rules_normal': 97242.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 98007.0, 'rules_tr_normal': 97242.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24031.0, 'eqs_atom': 7309.0, 'eqs_body': 2088.0, 'eqs_other': 14634.0}, 'lpStep': {'atoms': 2306.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21392.0, 'bodies_tr': 21392.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 12.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 188.0, 'rules': 41535.0, 'rules_normal': 41327.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41531.0, 'rules_tr_normal': 41327.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3794.0, 'eqs_atom': 978.0, 'eqs_body': 308.0, 'eqs_other': 2508.0}, 'generator': {'vars': 3178.0, 'vars_eliminated': 0.0, 'vars_frozen': 1885.0, 'constraints': 127.0, 'constraints_binary': 2097.0, 'constraints_ternary': 184.0, 'acyc_edges': 0.0, 'complexity': 2462.0}}, 'solving': {'solvers': {'choices': 96.0, 'conflicts': 11.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 19.0, 'integrated': 55.0, 'lemmas': 75.0, 'lits_learnt': 179.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 23.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 23.0, 'lemmas_other': 47.0, 'lits_conflict': 5.0, 'lits_loop': 98.0, 'lits_other': 76.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 89.0, 'levels_bounded': 40.0, 'max': 19.0, 'max_executed': 11.0, 'max_bounded': 8.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.10073089599609375, 'cpu': 0.109375, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2792778015136719, 'cpu': 0.28125, 'solve': 0.0069484710693359375, 'unsat': 0.0029621124267578125, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 102.0, 'conflicts': 15.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 20.0, 'integrated': 57.0, 'lemmas': 83.0, 'lits_learnt': 187.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 25.0, 'integrated_jumps': 48.0, 'guiding_paths_lits': 86.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 28.0, 'lemmas_other': 49.0, 'lits_conflict': 6.0, 'lits_loop': 103.0, 'lits_other': 78.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 6.0, 'levels': 100.0, 'levels_bounded': 46.0, 'max': 19.0, 'max_executed': 11.0, 'max_bounded': 8.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.2240183000000009, solving_time=0.019989299999998877, total_time=0.24400759999999977, clingo_stats={}))

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 50:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('state_module', [Number(50), Number(47)]), ('plan_module', [Number(50), Number(47), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(50), Number(47), Number(28), Number(28), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096957s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 5063, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012735s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10969199999999901, Incremental time limit = None
Running cumulative time = 0.3536995999999988, Cumulative time limit = 3600

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.320975s, Cumulative Solving = 0.032725s, Cumulative Total = 0.353700s, Calls = 3
Final Model :: Total atoms = 5063, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=50, end_step=51, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.09695669999999978, solving_time=0.012735299999999228, total_time=0.10969199999999901, clingo_stats={'problem': {'lp': {'atoms': 16124.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 72047.0, 'bodies_tr': 72047.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 694.0, 'count_bodies_tr': 694.0, 'sccs': 67.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1082.0, 'rules': 140032.0, 'rules_normal': 139051.0, 'rules_choice': 969.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 140020.0, 'rules_tr_normal': 139051.0, 'rules_tr_choice': 969.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 29106.0, 'eqs_atom': 8518.0, 'eqs_body': 2572.0, 'eqs_other': 18016.0}, 'lpStep': {'atoms': 2562.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21708.0, 'bodies_tr': 21708.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 220.0, 'rules': 42017.0, 'rules_normal': 41809.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42013.0, 'rules_tr_normal': 41809.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5075.0, 'eqs_atom': 1209.0, 'eqs_body': 484.0, 'eqs_other': 3382.0}, 'generator': {'vars': 3742.0, 'vars_eliminated': 0.0, 'vars_frozen': 2281.0, 'constraints': 219.0, 'constraints_binary': 5670.0, 'constraints_ternary': 458.0, 'acyc_edges': 0.0, 'complexity': 6442.0}}, 'solving': {'solvers': {'choices': 549.0, 'conflicts': 42.0, 'conflicts_analyzed': 42.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 58.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 41.0, 'distributed_sum_lbd': 67.0, 'integrated': 165.0, 'lemmas': 232.0, 'lits_learnt': 669.0, 'lemmas_binary': 57.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 75.0, 'integrated_jumps': 158.0, 'guiding_paths_lits': 80.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 38.0, 'lemmas_loop': 29.0, 'lemmas_other': 165.0, 'lits_conflict': 75.0, 'lits_loop': 164.0, 'lits_other': 430.0, 'jumps': {'jumps': 42.0, 'jumps_bounded': 2.0, 'levels': 99.0, 'levels_bounded': 20.0, 'max': 12.0, 'max_executed': 10.0, 'max_bounded': 10.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1107025146484375, 'cpu': 0.109375, 'solve': 0.0069789886474609375, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3899803161621094, 'cpu': 0.390625, 'solve': 0.013927459716796875, 'unsat': 0.0029621124267578125, 'sat': 0.0039577484130859375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 651.0, 'conflicts': 57.0, 'conflicts_analyzed': 48.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 59.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 54.0, 'distributed_sum_lbd': 87.0, 'integrated': 222.0, 'lemmas': 315.0, 'lits_learnt': 856.0, 'lemmas_binary': 93.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 100.0, 'integrated_jumps': 206.0, 'guiding_paths_lits': 166.0, 'guiding_paths': 27.0, 'splits': 0.0, 'lemmas_conflict': 44.0, 'lemmas_loop': 57.0, 'lemmas_other': 214.0, 'lits_conflict': 81.0, 'lits_loop': 267.0, 'lits_other': 508.0, 'jumps': {'jumps': 48.0, 'jumps_bounded': 8.0, 'levels': 199.0, 'levels_bounded': 66.0, 'max': 19.0, 'max_executed': 11.0, 'max_bounded': 10.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3209750000000007, solving_time=0.032724599999998105, total_time=0.3536995999999988, clingo_stats={}))

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 28 achieved.

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 28 was achieved successfully.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.129822s, Solving = 0.014133s, Total = 0.143955s
2 : Statistics :: Grounding = 0.094196s, Solving = 0.005856s, Total = 0.100053s
3 : Statistics :: Grounding = 0.096957s, Solving = 0.012735s, Total = 0.109692s

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.353700s because Manual generator exit.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.320975s, Cumulative Solving = 0.032725s, Cumulative Total = 0.353700s, Calls = 3
Model :: Total atoms = 5063, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47}}

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50}}

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=47, plan_length=50, step_range=range(47, 51)

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=50 : level=2 len(self.__actions.get(level, []))=28 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Online planning increment 28 finished.

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 28 : Achieved sgoals 9 : Unachieved sgoals 11
Level 1 : Total sgoals 0 : Achieved sgoals 28 : Unachieved sgoals 0

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Getting sgoals range for problem number 10 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Getting sgoals range for problem number 9 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Obtained sgoals range = [9-9].

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Getting sgoals range for problem number 11 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Obtained sgoals range = [11-11].

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Obtained sgoals range = [10-10].

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [10-10]

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [10-10], problem number = 10, increment number = 28

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 10)
	('last_sgoals', 10)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 28, initial = False, final = False, sgoals = [10-10]

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 28

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 28

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [10-10])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-12] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 28...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=28, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 28), range_=None), IncPart(name='plan_module', args=('#inc', 28, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 28, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 28, 10, 10, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0032527000000008854s

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021523s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004850s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB359F4A0>

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 28)', truth=True, inc_range=IncRange(start=28, end=29, step=1))

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 28). %* None *%
#program plan_module(#inc, 28, false, false). %* None *%
#program optimisation_module(#inc, 28, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 28, 10, 10, sequential, true). %* None *%

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     27 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('state_module', [Number(28), Number(28)]), ('plan_module', [Number(28), Number(28), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(28), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(28), Number(28), Number(10), Number(10), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('state_module', [Number(29), Number(28)]), ('plan_module', [Number(29), Number(28), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(28), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(29), Number(28), Number(10), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.077501s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(10, 28)', truth=True, inc_range=IncRange(start=28, end=29, step=1)), conversion = current_last_sgoals(10,28).

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009285s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08678629999999998, Incremental time limit = None
Running cumulative time = 0.08678629999999998, Cumulative time limit = 3600

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=28, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.07750090000000043, solving_time=0.009285399999999555, total_time=0.08678629999999998, clingo_stats={'problem': {'lp': {'atoms': 7650.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16978.0, 'bodies_tr': 16978.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 34152.0, 'rules_normal': 33809.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 34148.0, 'rules_tr_normal': 33809.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10674.0, 'eqs_atom': 3152.0, 'eqs_body': 1016.0, 'eqs_other': 6506.0}, 'lpStep': {'atoms': 3773.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15802.0, 'bodies_tr': 15802.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 29966.0, 'rules_normal': 29623.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29962.0, 'rules_tr_normal': 29623.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4928.0, 'eqs_atom': 1065.0, 'eqs_body': 251.0, 'eqs_other': 3612.0}, 'generator': {'vars': 1958.0, 'vars_eliminated': 0.0, 'vars_frozen': 1206.0, 'constraints': 17.0, 'constraints_binary': 232.0, 'constraints_ternary': 21.0, 'acyc_edges': 0.0, 'complexity': 288.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 12.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08673858642578125, 'cpu': 0.09375, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.11766433715820312, 'cpu': 0.125, 'solve': 0.0059661865234375, 'unsat': 0.0019683837890625, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 20.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07750090000000043, solving_time=0.009285399999999555, total_time=0.08678629999999998, clingo_stats={}))

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('state_module', [Number(30), Number(28)]), ('plan_module', [Number(30), Number(28), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(28), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(30), Number(28), Number(10), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.066195s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3906, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009452s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.07564660000000245, Incremental time limit = None
Running cumulative time = 0.16243290000000243, Cumulative time limit = 3600

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.143696s, Cumulative Solving = 0.018737s, Cumulative Total = 0.162433s, Calls = 2
Final Model :: Total atoms = 3906, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=30, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.06619500000000045, solving_time=0.009451600000002003, total_time=0.07564660000000245, clingo_stats={'problem': {'lp': {'atoms': 9309.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30052.0, 'bodies_tr': 30052.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 487.0, 'rules': 59422.0, 'rules_normal': 58919.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 59414.0, 'rules_tr_normal': 58919.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13284.0, 'eqs_atom': 3790.0, 'eqs_body': 1361.0, 'eqs_other': 8133.0}, 'lpStep': {'atoms': 1659.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13074.0, 'bodies_tr': 13074.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25270.0, 'rules_normal': 25110.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25266.0, 'rules_tr_normal': 25110.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2610.0, 'eqs_atom': 638.0, 'eqs_body': 345.0, 'eqs_other': 1627.0}, 'generator': {'vars': 2150.0, 'vars_eliminated': 0.0, 'vars_frozen': 1358.0, 'constraints': 63.0, 'constraints_binary': 953.0, 'constraints_ternary': 141.0, 'acyc_edges': 0.0, 'complexity': 1203.0}}, 'solving': {'solvers': {'choices': 309.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 25.0, 'integrated': 47.0, 'lemmas': 44.0, 'lits_learnt': 85.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 117.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 13.0, 'lemmas_other': 16.0, 'lits_conflict': 15.0, 'lits_loop': 50.0, 'lits_other': 20.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.07646369934082031, 'cpu': 0.078125, 'solve': 0.006954193115234375, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.19412803649902344, 'cpu': 0.203125, 'solve': 0.012920379638671875, 'unsat': 0.0019683837890625, 'sat': 0.0039691925048828125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 309.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 25.0, 'integrated': 47.0, 'lemmas': 48.0, 'lits_learnt': 89.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 117.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 17.0, 'lemmas_other': 16.0, 'lits_conflict': 15.0, 'lits_loop': 54.0, 'lits_other': 20.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14369590000000088, solving_time=0.018737000000001558, total_time=0.16243290000000243, clingo_stats={}))

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved.

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 10 was achieved successfully.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.077501s, Solving = 0.009285s, Total = 0.086786s
2 : Statistics :: Grounding = 0.066195s, Solving = 0.009452s, Total = 0.075647s

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.162433s because Manual generator exit.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.143696s, Cumulative Solving = 0.018737s, Cumulative Total = 0.162433s, Calls = 2
Model :: Total atoms = 3906, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50}}

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50}}

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=28, plan_length=30, step_range=range(28, 31)

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=50 : level=2 len(self.__actions.get(level, []))=30 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=28, plan_length=30, step_range=range(28, 31)

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=50 : level=2 len(self.__actions.get(level, []))=30 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00.

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> plan_length=2, true_size_bound=1, partial_problems=2

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=2, start_step=28, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=29, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 29, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 29, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Getting sgoals range for problem number 29 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 29, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Getting sgoals range for problem number 30 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 29, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Obtained sgoals range = [30-30].

[13-08-2021_16-59-12] DEBUG :: core.Strategies >> Obtained sgoals range = [29-29].

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [29-29]

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [29-29], problem number = 29, increment number = 28

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 29)
	('last_sgoals', 29)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 50, initial = False, final = False, sgoals = [29-29]

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 50

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 50

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [29-29])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-12] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-12] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 50...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=50, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 50), range_=None), IncPart(name='plan_module', args=('#inc', 50, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 50, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 50, 29, 29, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003310099999996652s

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026244s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006208s.

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB34C1D60>

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(29, 50)', truth=True, inc_range=IncRange(start=50, end=51, step=1))

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 50). %* None *%
#program plan_module(#inc, 50, false, false). %* None *%
#program optimisation_module(#inc, 50, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 50, 29, 29, sequential, true). %* None *%

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     49 : Current =     51
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('state_module', [Number(50), Number(50)]), ('plan_module', [Number(50), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(50), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(50), Number(50), Number(29), Number(29), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('state_module', [Number(51), Number(50)]), ('plan_module', [Number(51), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(50), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(51), Number(50), Number(29), Number(29), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130378s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(29, 50)', truth=True, inc_range=IncRange(start=50, end=51, step=1)), conversion = current_last_sgoals(29,50).

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017413s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1477913000000015, Incremental time limit = None
Running cumulative time = 0.1477913000000015, Cumulative time limit = 3600

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.130378s, Cumulative Solving = 0.017413s, Cumulative Total = 0.147791s, Calls = 1
Final Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=50, end_step=52, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.13037780000000154, solving_time=0.01741349999999997, total_time=0.1477913000000015, clingo_stats={'problem': {'lp': {'atoms': 11256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28984.0, 'bodies_tr': 28984.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 56519.0, 'rules_normal': 55954.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56515.0, 'rules_tr_normal': 55954.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20230.0, 'eqs_atom': 6339.0, 'eqs_body': 1784.0, 'eqs_other': 12107.0}, 'lpStep': {'atoms': 5614.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26381.0, 'bodies_tr': 26381.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 50067.0, 'rules_normal': 49502.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 50063.0, 'rules_tr_normal': 49502.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8456.0, 'eqs_atom': 2046.0, 'eqs_body': 275.0, 'eqs_other': 6135.0}, 'generator': {'vars': 2863.0, 'vars_eliminated': 0.0, 'vars_frozen': 1608.0, 'constraints': 50.0, 'constraints_binary': 526.0, 'constraints_ternary': 53.0, 'acyc_edges': 0.0, 'complexity': 655.0}}, 'solving': {'solvers': {'choices': 557.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 30.0, 'integrated': 92.0, 'lemmas': 63.0, 'lits_learnt': 80.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 36.0, 'integrated_jumps': 349.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 14.0, 'lemmas_other': 38.0, 'lits_conflict': 11.0, 'lits_loop': 29.0, 'lits_other': 40.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.14760589599609375, 'cpu': 0.140625, 'solve': 0.0059566497802734375, 'unsat': 0.0, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18451499938964844, 'cpu': 0.171875, 'solve': 0.010923385620117188, 'unsat': 0.0, 'sat': 0.0029430389404296875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 557.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 30.0, 'integrated': 92.0, 'lemmas': 63.0, 'lits_learnt': 80.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 36.0, 'integrated_jumps': 349.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 14.0, 'lemmas_other': 38.0, 'lits_conflict': 11.0, 'lits_loop': 29.0, 'lits_other': 40.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13037780000000154, solving_time=0.01741349999999997, total_time=0.1477913000000015, clingo_stats={}))

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 29 achieved.

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 29 was achieved successfully.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.130378s, Solving = 0.017413s, Total = 0.147791s

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.147791s because Manual generator exit.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.130378s, Cumulative Solving = 0.017413s, Cumulative Total = 0.147791s, Calls = 1
Model :: Total atoms = 4008, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50}}

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51}}

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=50, plan_length=51, step_range=range(50, 52)

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=51 : level=2 len(self.__actions.get(level, []))=30 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Online planning increment 29 finished.

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 30 : Achieved sgoals 10 : Unachieved sgoals 10
Level 1 : Total sgoals 0 : Achieved sgoals 29 : Unachieved sgoals 1

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 29, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-13] DEBUG :: core.Strategies >> Getting sgoals range for problem number 30 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 29, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-13] DEBUG :: core.Strategies >> Getting sgoals range for problem number 29 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 29, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-13] DEBUG :: core.Strategies >> Obtained sgoals range = [29-29].

[13-08-2021_16-59-13] DEBUG :: core.Strategies >> Obtained sgoals range = [30-30].

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [30-30]

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [30-30], problem number = 30, increment number = 29

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 30)
	('last_sgoals', 30)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 51, initial = False, final = False, sgoals = [30-30]

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 51

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 51

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [30-30])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-13] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 51...

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=51, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 51), range_=None), IncPart(name='plan_module', args=('#inc', 51, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 51, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 51, 30, 30, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00301719999999861s

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026507s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006252s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB362A9F0>

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(30, 51)', truth=True, inc_range=IncRange(start=51, end=52, step=1))

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 51). %* None *%
#program plan_module(#inc, 51, false, false). %* None *%
#program optimisation_module(#inc, 51, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 51, 30, 30, sequential, true). %* None *%

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     50 : Current =     52
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('state_module', [Number(51), Number(51)]), ('plan_module', [Number(51), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(51), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(51), Number(51), Number(30), Number(30), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('state_module', [Number(52), Number(51)]), ('plan_module', [Number(52), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(51), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(52), Number(51), Number(30), Number(30), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.186971s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(30, 51)', truth=True, inc_range=IncRange(start=51, end=52, step=1)), conversion = current_last_sgoals(30,51).

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013045s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2000163999999991, Incremental time limit = None
Running cumulative time = 0.2000163999999991, Cumulative time limit = 3600

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=51, end_step=53, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.18697149999999851, solving_time=0.013044900000000581, total_time=0.2000163999999991, clingo_stats={'problem': {'lp': {'atoms': 11256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28935.0, 'bodies_tr': 28935.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56470.0, 'rules_normal': 55905.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56466.0, 'rules_tr_normal': 55905.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20230.0, 'eqs_atom': 6339.0, 'eqs_body': 1784.0, 'eqs_other': 12107.0}, 'lpStep': {'atoms': 5614.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26332.0, 'bodies_tr': 26332.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 50018.0, 'rules_normal': 49453.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 50014.0, 'rules_tr_normal': 49453.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8456.0, 'eqs_atom': 2046.0, 'eqs_body': 275.0, 'eqs_other': 6135.0}, 'generator': {'vars': 2863.0, 'vars_eliminated': 0.0, 'vars_frozen': 1608.0, 'constraints': 6.0, 'constraints_binary': 252.0, 'constraints_ternary': 25.0, 'acyc_edges': 0.0, 'complexity': 291.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 12.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.19946861267089844, 'cpu': 0.203125, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2353496551513672, 'cpu': 0.234375, 'solve': 0.0059814453125, 'unsat': 0.0019931793212890625, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 20.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.18697149999999851, solving_time=0.013044900000000581, total_time=0.2000163999999991, clingo_stats={}))

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('state_module', [Number(53), Number(51)]), ('plan_module', [Number(53), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(51), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(53), Number(51), Number(30), Number(30), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089938s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006624s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09656140000000235, Incremental time limit = None
Running cumulative time = 0.29657780000000145, Cumulative time limit = 3600

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08993780000000129, solving_time=0.006623600000001062, total_time=0.09656140000000235, clingo_stats={'problem': {'lp': {'atoms': 13048.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50259.0, 'bodies_tr': 50259.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 53.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 804.0, 'rules': 97570.0, 'rules_normal': 96797.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 97562.0, 'rules_tr_normal': 96797.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 22836.0, 'eqs_atom': 6838.0, 'eqs_body': 2088.0, 'eqs_other': 13910.0}, 'lpStep': {'atoms': 1792.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21324.0, 'bodies_tr': 21324.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41100.0, 'rules_normal': 40892.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41096.0, 'rules_tr_normal': 40892.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2606.0, 'eqs_atom': 499.0, 'eqs_body': 304.0, 'eqs_other': 1803.0}, 'generator': {'vars': 3115.0, 'vars_eliminated': 0.0, 'vars_frozen': 1820.0, 'constraints': 67.0, 'constraints_binary': 1783.0, 'constraints_ternary': 117.0, 'acyc_edges': 0.0, 'complexity': 2003.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 16.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.09674072265625, 'cpu': 0.09375, 'solve': 0.00096893310546875, 'unsat': 0.00096893310546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3320903778076172, 'cpu': 0.328125, 'solve': 0.00695037841796875, 'unsat': 0.0029621124267578125, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 36.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.2769092999999998, solving_time=0.019668500000001643, total_time=0.29657780000000145, clingo_stats={}))

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('state_module', [Number(54), Number(51)]), ('plan_module', [Number(54), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(51), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(54), Number(51), Number(30), Number(30), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088891s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007688s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09657929999999837, Incremental time limit = None
Running cumulative time = 0.3931570999999998, Cumulative time limit = 3600

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=54, end_step=55, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08889139999999784, solving_time=0.007687900000000525, total_time=0.09657929999999837, clingo_stats={'problem': {'lp': {'atoms': 15510.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71959.0, 'bodies_tr': 71959.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 694.0, 'count_bodies_tr': 694.0, 'sccs': 66.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1024.0, 'rules': 139591.0, 'rules_normal': 138610.0, 'rules_choice': 969.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 139579.0, 'rules_tr_normal': 138610.0, 'rules_tr_choice': 969.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27701.0, 'eqs_atom': 8020.0, 'eqs_body': 2471.0, 'eqs_other': 17210.0}, 'lpStep': {'atoms': 2462.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21700.0, 'bodies_tr': 21700.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 220.0, 'rules': 42021.0, 'rules_normal': 41813.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42017.0, 'rules_tr_normal': 41813.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4865.0, 'eqs_atom': 1182.0, 'eqs_body': 383.0, 'eqs_other': 3300.0}, 'generator': {'vars': 3619.0, 'vars_eliminated': 0.0, 'vars_frozen': 2200.0, 'constraints': 201.0, 'constraints_binary': 5190.0, 'constraints_ternary': 494.0, 'acyc_edges': 0.0, 'complexity': 5969.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 16.0, 'integrated': 0.0, 'lemmas': 29.0, 'lits_learnt': 205.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 70.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 29.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 205.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.09774017333984375, 'cpu': 0.09375, 'solve': 0.001972198486328125, 'unsat': 0.001972198486328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.42983055114746094, 'cpu': 0.421875, 'solve': 0.008922576904296875, 'unsat': 0.0049343109130859375, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 16.0, 'integrated': 0.0, 'lemmas': 37.0, 'lits_learnt': 213.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 106.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 37.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 213.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.36580069999999765, solving_time=0.027356400000002168, total_time=0.3931570999999998, clingo_stats={}))

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('state_module', [Number(55), Number(51)]), ('plan_module', [Number(55), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(51), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(55), Number(51), Number(30), Number(30), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096473s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011284s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10775770000000051, Incremental time limit = None
Running cumulative time = 0.5009148000000003, Cumulative time limit = 3600

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=55, end_step=56, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.09647340000000071, solving_time=0.011284299999999803, total_time=0.10775770000000051, clingo_stats={'problem': {'lp': {'atoms': 18437.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94374.0, 'bodies_tr': 94374.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 903.0, 'count_bodies_tr': 903.0, 'sccs': 87.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1298.0, 'rules': 182629.0, 'rules_normal': 181440.0, 'rules_choice': 1173.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 182613.0, 'rules_tr_normal': 181440.0, 'rules_tr_choice': 1173.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 34382.0, 'eqs_atom': 9528.0, 'eqs_body': 2859.0, 'eqs_other': 21995.0}, 'lpStep': {'atoms': 2927.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22415.0, 'bodies_tr': 22415.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 21.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 274.0, 'rules': 43038.0, 'rules_normal': 42830.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 43034.0, 'rules_tr_normal': 42830.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6681.0, 'eqs_atom': 1508.0, 'eqs_body': 388.0, 'eqs_other': 4785.0}, 'generator': {'vars': 4695.0, 'vars_eliminated': 0.0, 'vars_frozen': 2880.0, 'constraints': 407.0, 'constraints_binary': 14805.0, 'constraints_ternary': 1327.0, 'acyc_edges': 0.0, 'complexity': 16680.0}}, 'solving': {'solvers': {'choices': 114.0, 'conflicts': 37.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 43.0, 'integrated': 139.0, 'lemmas': 224.0, 'lits_learnt': 859.0, 'lemmas_binary': 22.0, 'lemmas_ternary': 70.0, 'cpu_time': 0.0, 'integrated_imps': 80.0, 'integrated_jumps': 54.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 63.0, 'lemmas_other': 139.0, 'lits_conflict': 128.0, 'lits_loop': 454.0, 'lits_other': 277.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 6.0, 'levels': 95.0, 'levels_bounded': 28.0, 'max': 15.0, 'max_executed': 11.0, 'max_bounded': 12.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.10870933532714844, 'cpu': 0.109375, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5385398864746094, 'cpu': 0.53125, 'solve': 0.011913299560546875, 'unsat': 0.007925033569335938, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 114.0, 'conflicts': 40.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 59.0, 'integrated': 139.0, 'lemmas': 261.0, 'lits_learnt': 1072.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 70.0, 'cpu_time': 0.0, 'integrated_imps': 80.0, 'integrated_jumps': 54.0, 'guiding_paths_lits': 190.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 100.0, 'lemmas_other': 139.0, 'lits_conflict': 128.0, 'lits_loop': 667.0, 'lits_other': 277.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 6.0, 'levels': 95.0, 'levels_bounded': 28.0, 'max': 15.0, 'max_executed': 11.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.46227409999999836, solving_time=0.03864070000000197, total_time=0.5009148000000003, clingo_stats={}))

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 56:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('state_module', [Number(56), Number(51)]), ('plan_module', [Number(56), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(51), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(56), Number(51), Number(30), Number(30), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096905s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 6129, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017232s.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1141370999999971, Incremental time limit = None
Running cumulative time = 0.6150518999999974, Cumulative time limit = 3600

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.559179s, Cumulative Solving = 0.055873s, Cumulative Total = 0.615052s, Calls = 5
Final Model :: Total atoms = 6129, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=56, end_step=57, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.09690519999999836, solving_time=0.017231899999998745, total_time=0.1141370999999971, clingo_stats={'problem': {'lp': {'atoms': 21418.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 116756.0, 'bodies_tr': 116756.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1112.0, 'count_bodies_tr': 1112.0, 'sccs': 108.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1572.0, 'rules': 225642.0, 'rules_normal': 224245.0, 'rules_choice': 1377.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 20.0, 'rules_tr': 225622.0, 'rules_tr_normal': 224245.0, 'rules_tr_choice': 1377.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41256.0, 'eqs_atom': 11097.0, 'eqs_body': 3325.0, 'eqs_other': 26834.0}, 'lpStep': {'atoms': 2981.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22382.0, 'bodies_tr': 22382.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 21.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 274.0, 'rules': 43013.0, 'rules_normal': 42805.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 43009.0, 'rules_tr_normal': 42805.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6874.0, 'eqs_atom': 1569.0, 'eqs_body': 466.0, 'eqs_other': 4839.0}, 'generator': {'vars': 5730.0, 'vars_eliminated': 0.0, 'vars_frozen': 3540.0, 'constraints': 519.0, 'constraints_binary': 14905.0, 'constraints_ternary': 1580.0, 'acyc_edges': 0.0, 'complexity': 17184.0}}, 'solving': {'solvers': {'choices': 749.0, 'conflicts': 78.0, 'conflicts_analyzed': 78.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 94.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 87.0, 'distributed_sum_lbd': 106.0, 'integrated': 205.0, 'lemmas': 331.0, 'lits_learnt': 1409.0, 'lemmas_binary': 47.0, 'lemmas_ternary': 15.0, 'cpu_time': 0.0, 'integrated_imps': 140.0, 'integrated_jumps': 160.0, 'guiding_paths_lits': 98.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 78.0, 'lemmas_loop': 107.0, 'lemmas_other': 146.0, 'lits_conflict': 136.0, 'lits_loop': 854.0, 'lits_other': 419.0, 'jumps': {'jumps': 78.0, 'jumps_bounded': 8.0, 'levels': 147.0, 'levels_bounded': 47.0, 'max': 26.0, 'max_executed': 26.0, 'max_bounded': 14.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11569023132324219, 'cpu': 0.109375, 'solve': 0.007978439331054688, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6542301177978516, 'cpu': 0.640625, 'solve': 0.019891738891601562, 'unsat': 0.007925033569335938, 'sat': 0.0039882659912109375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 863.0, 'conflicts': 118.0, 'conflicts_analyzed': 107.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 95.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 121.0, 'distributed_sum_lbd': 165.0, 'integrated': 344.0, 'lemmas': 592.0, 'lits_learnt': 2481.0, 'lemmas_binary': 77.0, 'lemmas_ternary': 85.0, 'cpu_time': 0.0, 'integrated_imps': 220.0, 'integrated_jumps': 214.0, 'guiding_paths_lits': 288.0, 'guiding_paths': 33.0, 'splits': 0.0, 'lemmas_conflict': 100.0, 'lemmas_loop': 207.0, 'lemmas_other': 285.0, 'lits_conflict': 264.0, 'lits_loop': 1521.0, 'lits_other': 696.0, 'jumps': {'jumps': 107.0, 'jumps_bounded': 14.0, 'levels': 242.0, 'levels_bounded': 75.0, 'max': 26.0, 'max_executed': 26.0, 'max_bounded': 14.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.5591792999999967, solving_time=0.055872600000000716, total_time=0.6150518999999974, clingo_stats={}))

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 30 achieved.

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 30 was achieved successfully.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.186971s, Solving = 0.013045s, Total = 0.200016s
2 : Statistics :: Grounding = 0.089938s, Solving = 0.006624s, Total = 0.096561s
3 : Statistics :: Grounding = 0.088891s, Solving = 0.007688s, Total = 0.096579s
4 : Statistics :: Grounding = 0.096473s, Solving = 0.011284s, Total = 0.107758s
5 : Statistics :: Grounding = 0.096905s, Solving = 0.017232s, Total = 0.114137s

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.615052s because Manual generator exit.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-13] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.559179s, Cumulative Solving = 0.055873s, Cumulative Total = 0.615052s, Calls = 5
Model :: Total atoms = 6129, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51}}

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56}}

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=51, plan_length=56, step_range=range(51, 57)

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=56 : level=2 len(self.__actions.get(level, []))=30 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Online planning increment 30 finished.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 30 : Achieved sgoals 10 : Unachieved sgoals 10
Level 1 : Total sgoals 0 : Achieved sgoals 30 : Unachieved sgoals 0

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 11 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 10 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Obtained sgoals range = [10-10].

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 12 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Obtained sgoals range = [12-12].

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Obtained sgoals range = [11-11].

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-11]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [11-11], problem number = 11, increment number = 30

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 11)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 30, initial = False, final = False, sgoals = [11-11]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 30

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 30

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [11-11])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 30...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=30, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 30), range_=None), IncPart(name='plan_module', args=('#inc', 30, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 30, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 30, 11, 11, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005901200000000273s

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.028119s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005164s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3663D60>

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 30)', truth=True, inc_range=IncRange(start=30, end=31, step=1))

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 30). %* None *%
#program plan_module(#inc, 30, false, false). %* None *%
#program optimisation_module(#inc, 30, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 30, 11, 11, sequential, true). %* None *%

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     29 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('state_module', [Number(30), Number(30)]), ('plan_module', [Number(30), Number(30), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(30), Number(30), Number(11), Number(11), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('state_module', [Number(31), Number(30)]), ('plan_module', [Number(31), Number(30), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(31), Number(30), Number(11), Number(11), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.078737s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(11, 30)', truth=True, inc_range=IncRange(start=30, end=31, step=1)), conversion = current_last_sgoals(11,30).

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009290s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08802670000000035, Incremental time limit = None
Running cumulative time = 0.08802670000000035, Cumulative time limit = 3600

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=30, end_step=32, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.07873670000000033, solving_time=0.00929000000000002, total_time=0.08802670000000035, clingo_stats={'problem': {'lp': {'atoms': 7661.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16899.0, 'bodies_tr': 16899.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 34092.0, 'rules_normal': 33749.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 34088.0, 'rules_tr_normal': 33749.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10720.0, 'eqs_atom': 3169.0, 'eqs_body': 1031.0, 'eqs_other': 6520.0}, 'lpStep': {'atoms': 3784.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15723.0, 'bodies_tr': 15723.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 29906.0, 'rules_normal': 29563.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29902.0, 'rules_tr_normal': 29563.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4974.0, 'eqs_atom': 1082.0, 'eqs_body': 266.0, 'eqs_other': 3626.0}, 'generator': {'vars': 1945.0, 'vars_eliminated': 0.0, 'vars_frozen': 1202.0, 'constraints': 7.0, 'constraints_binary': 201.0, 'constraints_ternary': 22.0, 'acyc_edges': 0.0, 'complexity': 240.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 18.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08776283264160156, 'cpu': 0.109375, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12766456604003906, 'cpu': 0.140625, 'solve': 0.0059642791748046875, 'unsat': 0.0019683837890625, 'sat': 0.001972198486328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 26.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07873670000000033, solving_time=0.00929000000000002, total_time=0.08802670000000035, clingo_stats={}))

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('state_module', [Number(32), Number(30)]), ('plan_module', [Number(32), Number(30), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(30), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(32), Number(30), Number(11), Number(11), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062792s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008074s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.0708658999999976, Incremental time limit = None
Running cumulative time = 0.15889259999999794, Cumulative time limit = 3600

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.141529s, Cumulative Solving = 0.017364s, Cumulative Total = 0.158893s, Calls = 2
Final Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=32, end_step=33, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.06279229999999814, solving_time=0.008073599999999459, total_time=0.0708658999999976, clingo_stats={'problem': {'lp': {'atoms': 9241.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29988.0, 'bodies_tr': 29988.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 460.0, 'rules': 59309.0, 'rules_normal': 58806.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 59301.0, 'rules_tr_normal': 58806.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13213.0, 'eqs_atom': 3638.0, 'eqs_body': 1355.0, 'eqs_other': 8220.0}, 'lpStep': {'atoms': 1580.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13089.0, 'bodies_tr': 13089.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 3.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25.0, 'rules': 25217.0, 'rules_normal': 25057.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25213.0, 'rules_tr_normal': 25057.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2493.0, 'eqs_atom': 469.0, 'eqs_body': 324.0, 'eqs_other': 1700.0}, 'generator': {'vars': 2101.0, 'vars_eliminated': 0.0, 'vars_frozen': 1327.0, 'constraints': 28.0, 'constraints_binary': 634.0, 'constraints_ternary': 93.0, 'acyc_edges': 0.0, 'complexity': 777.0}}, 'solving': {'solvers': {'choices': 203.0, 'conflicts': 14.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 14.0, 'integrated': 6.0, 'lemmas': 20.0, 'lits_learnt': 20.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 6.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 0.0, 'lemmas_other': 6.0, 'lits_conflict': 14.0, 'lits_loop': 0.0, 'lits_other': 6.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 0.0, 'levels': 14.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.07180213928222656, 'cpu': 0.0625, 'solve': 0.0049591064453125, 'unsat': 0.0, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.19946670532226562, 'cpu': 0.203125, 'solve': 0.010923385620117188, 'unsat': 0.0019683837890625, 'sat': 0.002941131591796875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 203.0, 'conflicts': 14.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 14.0, 'integrated': 6.0, 'lemmas': 23.0, 'lits_learnt': 23.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 6.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 90.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 3.0, 'lemmas_other': 6.0, 'lits_conflict': 14.0, 'lits_loop': 3.0, 'lits_other': 6.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 0.0, 'levels': 14.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14152899999999846, solving_time=0.01736359999999948, total_time=0.15889259999999794, clingo_stats={}))

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 11 was achieved successfully.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.078737s, Solving = 0.009290s, Total = 0.088027s
2 : Statistics :: Grounding = 0.062792s, Solving = 0.008074s, Total = 0.070866s

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.158893s because Manual generator exit.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.141529s, Cumulative Solving = 0.017364s, Cumulative Total = 0.158893s, Calls = 2
Model :: Total atoms = 3928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56}}

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56}}

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=30, plan_length=32, step_range=range(30, 33)

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=56 : level=2 len(self.__actions.get(level, []))=32 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=30, plan_length=32, step_range=range(30, 33)

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=56 : level=2 len(self.__actions.get(level, []))=32 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00.

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> plan_length=2, true_size_bound=1, partial_problems=2

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=2, start_step=30, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=31, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 31 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 32 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Obtained sgoals range = [32-32].

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Obtained sgoals range = [31-31].

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [31-31]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [31-31], problem number = 31, increment number = 30

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 31)
	('last_sgoals', 31)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 56, initial = False, final = False, sgoals = [31-31]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 56

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 56

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [31-31])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 56...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=56, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 56), range_=None), IncPart(name='plan_module', args=('#inc', 56, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 56, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 56, 31, 31, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003080299999997038s

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025767s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006260s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2DB49F0>

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(31, 56)', truth=True, inc_range=IncRange(start=56, end=57, step=1))

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 56). %* None *%
#program plan_module(#inc, 56, false, false). %* None *%
#program optimisation_module(#inc, 56, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 56, 31, 31, sequential, true). %* None *%

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     55 : Current =     57
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('state_module', [Number(56), Number(56)]), ('plan_module', [Number(56), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(56), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(56), Number(56), Number(31), Number(31), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('state_module', [Number(57), Number(56)]), ('plan_module', [Number(57), Number(56), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(56), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(57), Number(56), Number(31), Number(31), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122472s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(31, 56)', truth=True, inc_range=IncRange(start=56, end=57, step=1)), conversion = current_last_sgoals(31,56).

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017565s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1400371999999983, Incremental time limit = None
Running cumulative time = 0.1400371999999983, Cumulative time limit = 3600

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.122472s, Cumulative Solving = 0.017565s, Cumulative Total = 0.140037s, Calls = 1
Final Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=56, end_step=58, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12247199999999836, solving_time=0.017565199999999948, total_time=0.1400371999999983, clingo_stats={'problem': {'lp': {'atoms': 11267.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28821.0, 'bodies_tr': 28821.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56415.0, 'rules_normal': 55850.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56411.0, 'rules_tr_normal': 55850.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20218.0, 'eqs_atom': 6350.0, 'eqs_body': 1803.0, 'eqs_other': 12065.0}, 'lpStep': {'atoms': 5625.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26218.0, 'bodies_tr': 26218.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49963.0, 'rules_normal': 49398.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49959.0, 'rules_tr_normal': 49398.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8444.0, 'eqs_atom': 2057.0, 'eqs_body': 294.0, 'eqs_other': 6093.0}, 'generator': {'vars': 2844.0, 'vars_eliminated': 0.0, 'vars_frozen': 1608.0, 'constraints': 11.0, 'constraints_binary': 307.0, 'constraints_ternary': 27.0, 'acyc_edges': 0.0, 'complexity': 359.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.14066505432128906, 'cpu': 0.140625, 'solve': 0.0060253143310546875, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17657089233398438, 'cpu': 0.171875, 'solve': 0.009950637817382812, 'unsat': 0.0, 'sat': 0.0029277801513671875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12247199999999836, solving_time=0.017565199999999948, total_time=0.1400371999999983, clingo_stats={}))

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 31 achieved.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 31 was achieved successfully.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.122472s, Solving = 0.017565s, Total = 0.140037s

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.140037s because Manual generator exit.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.122472s, Cumulative Solving = 0.017565s, Cumulative Total = 0.140037s, Calls = 1
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56}}

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57}}

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=56, plan_length=57, step_range=range(56, 58)

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=57 : level=2 len(self.__actions.get(level, []))=32 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Online planning increment 31 finished.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 32 : Achieved sgoals 11 : Unachieved sgoals 9
Level 1 : Total sgoals 0 : Achieved sgoals 31 : Unachieved sgoals 1

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 32 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 31 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 31, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Obtained sgoals range = [31-31].

[13-08-2021_16-59-14] DEBUG :: core.Strategies >> Obtained sgoals range = [32-32].

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [32-32]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [32-32], problem number = 32, increment number = 31

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 32)
	('last_sgoals', 32)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 57, initial = False, final = False, sgoals = [32-32]

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 57

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 57

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [32-32])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-14] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 57...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=57, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 57), range_=None), IncPart(name='plan_module', args=('#inc', 57, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 57, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 57, 32, 32, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003430900000001458s

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026740s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008085s.

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3156860>

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(32, 57)', truth=True, inc_range=IncRange(start=57, end=58, step=1))

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 57). %* None *%
#program plan_module(#inc, 57, false, false). %* None *%
#program optimisation_module(#inc, 57, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 57, 32, 32, sequential, true). %* None *%

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     56 : Current =     58
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('state_module', [Number(57), Number(57)]), ('plan_module', [Number(57), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(57), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(57), Number(57), Number(32), Number(32), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('state_module', [Number(58), Number(57)]), ('plan_module', [Number(58), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(57), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(58), Number(57), Number(32), Number(32), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.176981s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(32, 57)', truth=True, inc_range=IncRange(start=57, end=58, step=1)), conversion = current_last_sgoals(32,57).

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014746s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.19172769999999772, Incremental time limit = None
Running cumulative time = 0.19172769999999772, Cumulative time limit = 3600

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=57, end_step=59, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.17698139999999896, solving_time=0.014746299999998769, total_time=0.19172769999999772, clingo_stats={'problem': {'lp': {'atoms': 11267.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28778.0, 'bodies_tr': 28778.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56372.0, 'rules_normal': 55807.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56368.0, 'rules_tr_normal': 55807.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20218.0, 'eqs_atom': 6350.0, 'eqs_body': 1803.0, 'eqs_other': 12065.0}, 'lpStep': {'atoms': 5625.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26175.0, 'bodies_tr': 26175.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49920.0, 'rules_normal': 49355.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49916.0, 'rules_tr_normal': 49355.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8444.0, 'eqs_atom': 2057.0, 'eqs_body': 294.0, 'eqs_other': 6093.0}, 'generator': {'vars': 2844.0, 'vars_eliminated': 0.0, 'vars_frozen': 1608.0, 'constraints': 11.0, 'constraints_binary': 313.0, 'constraints_ternary': 28.0, 'acyc_edges': 0.0, 'complexity': 368.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 12.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.19148635864257812, 'cpu': 0.1875, 'solve': 0.001964569091796875, 'unsat': 0.001964569091796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.23035621643066406, 'cpu': 0.234375, 'solve': 0.007951736450195312, 'unsat': 0.001964569091796875, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 20.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.17698139999999896, solving_time=0.014746299999998769, total_time=0.19172769999999772, clingo_stats={}))

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 59:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('state_module', [Number(59), Number(57)]), ('plan_module', [Number(59), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(57), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(59), Number(57), Number(32), Number(32), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083139s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010651s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09379050000000078, Incremental time limit = None
Running cumulative time = 0.2855181999999985, Cumulative time limit = 3600

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.260121s, Cumulative Solving = 0.025397s, Cumulative Total = 0.285518s, Calls = 2
Final Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=59, end_step=60, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.08313930000000269, solving_time=0.010651199999998084, total_time=0.09379050000000078, clingo_stats={'problem': {'lp': {'atoms': 13076.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50180.0, 'bodies_tr': 50180.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 53.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 804.0, 'rules': 97562.0, 'rules_normal': 96789.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 97554.0, 'rules_tr_normal': 96789.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 22987.0, 'eqs_atom': 6838.0, 'eqs_body': 2123.0, 'eqs_other': 14026.0}, 'lpStep': {'atoms': 1809.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21402.0, 'bodies_tr': 21402.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41190.0, 'rules_normal': 40982.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41186.0, 'rules_tr_normal': 40982.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2769.0, 'eqs_atom': 488.0, 'eqs_body': 320.0, 'eqs_other': 1961.0}, 'generator': {'vars': 3210.0, 'vars_eliminated': 0.0, 'vars_frozen': 1882.0, 'constraints': 97.0, 'constraints_binary': 2244.0, 'constraints_ternary': 265.0, 'acyc_edges': 0.0, 'complexity': 2664.0}}, 'solving': {'solvers': {'choices': 403.0, 'conflicts': 16.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 47.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 28.0, 'integrated': 41.0, 'lemmas': 27.0, 'lits_learnt': 33.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 5.0, 'integrated_jumps': 91.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 6.0, 'lemmas_other': 5.0, 'lits_conflict': 16.0, 'lits_loop': 12.0, 'lits_other': 5.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09474754333496094, 'cpu': 0.078125, 'solve': 0.005985260009765625, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.325103759765625, 'cpu': 0.3125, 'solve': 0.013936996459960938, 'unsat': 0.001964569091796875, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 403.0, 'conflicts': 16.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 48.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 28.0, 'integrated': 41.0, 'lemmas': 35.0, 'lits_learnt': 41.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 5.0, 'integrated_jumps': 91.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 14.0, 'lemmas_other': 5.0, 'lits_conflict': 16.0, 'lits_loop': 20.0, 'lits_other': 5.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.26012070000000165, solving_time=0.025397499999996853, total_time=0.2855181999999985, clingo_stats={}))

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 32 achieved.

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 32 was achieved successfully.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.176981s, Solving = 0.014746s, Total = 0.191728s
2 : Statistics :: Grounding = 0.083139s, Solving = 0.010651s, Total = 0.093791s

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.285518s because Manual generator exit.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.260121s, Cumulative Solving = 0.025397s, Cumulative Total = 0.285518s, Calls = 2
Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57}}

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59}}

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=57, plan_length=59, step_range=range(57, 60)

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=59 : level=2 len(self.__actions.get(level, []))=32 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Online planning increment 32 finished.

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 32 : Achieved sgoals 11 : Unachieved sgoals 9
Level 1 : Total sgoals 0 : Achieved sgoals 32 : Unachieved sgoals 0

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Getting sgoals range for problem number 12 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Getting sgoals range for problem number 11 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Obtained sgoals range = [11-11].

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Getting sgoals range for problem number 13 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Obtained sgoals range = [13-13].

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Obtained sgoals range = [12-12].

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [12-12]

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [12-12], problem number = 12, increment number = 32

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 12)
	('last_sgoals', 12)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 32, initial = False, final = False, sgoals = [12-12]

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 32

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 32

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [12-12])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-15] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 32...

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=32, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 32), range_=None), IncPart(name='plan_module', args=('#inc', 32, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 32, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 32, 12, 12, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0029778999999976463s

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021391s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004727s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB317AEA0>

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 32)', truth=True, inc_range=IncRange(start=32, end=33, step=1))

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 32). %* None *%
#program plan_module(#inc, 32, false, false). %* None *%
#program optimisation_module(#inc, 32, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 32, 12, 12, sequential, true). %* None *%

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     31 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('state_module', [Number(32), Number(32)]), ('plan_module', [Number(32), Number(32), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(32), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(32), Number(32), Number(12), Number(12), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('state_module', [Number(33), Number(32)]), ('plan_module', [Number(33), Number(32), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(32), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(33), Number(32), Number(12), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.078492s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(12, 32)', truth=True, inc_range=IncRange(start=32, end=33, step=1)), conversion = current_last_sgoals(12,32).

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008951s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08744230000000286, Incremental time limit = None
Running cumulative time = 0.08744230000000286, Cumulative time limit = 3600

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=32, end_step=34, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.07849170000000072, solving_time=0.00895060000000214, total_time=0.08744230000000286, clingo_stats={'problem': {'lp': {'atoms': 7672.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16831.0, 'bodies_tr': 16831.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 34044.0, 'rules_normal': 33701.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 34040.0, 'rules_tr_normal': 33701.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10765.0, 'eqs_atom': 3186.0, 'eqs_body': 1046.0, 'eqs_other': 6533.0}, 'lpStep': {'atoms': 3795.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15655.0, 'bodies_tr': 15655.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 29858.0, 'rules_normal': 29515.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29854.0, 'rules_tr_normal': 29515.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5019.0, 'eqs_atom': 1099.0, 'eqs_body': 281.0, 'eqs_other': 3639.0}, 'generator': {'vars': 1932.0, 'vars_eliminated': 0.0, 'vars_frozen': 1198.0, 'constraints': 9.0, 'constraints_binary': 227.0, 'constraints_ternary': 23.0, 'acyc_edges': 0.0, 'complexity': 273.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.0877685546875, 'cpu': 0.109375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.11768913269042969, 'cpu': 0.15625, 'solve': 0.0059566497802734375, 'unsat': 0.001995086669921875, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 14.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07849170000000072, solving_time=0.00895060000000214, total_time=0.08744230000000286, clingo_stats={}))

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('state_module', [Number(34), Number(32)]), ('plan_module', [Number(34), Number(32), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(32), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(34), Number(32), Number(12), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062109s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005586s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.06769519999999574, Incremental time limit = None
Running cumulative time = 0.1551374999999986, Cumulative time limit = 3600

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=34, end_step=35, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.06210949999999826, solving_time=0.005585699999997473, total_time=0.06769519999999574, clingo_stats={'problem': {'lp': {'atoms': 9266.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29974.0, 'bodies_tr': 29974.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 460.0, 'rules': 59324.0, 'rules_normal': 58821.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 59316.0, 'rules_tr_normal': 58821.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13007.0, 'eqs_atom': 3664.0, 'eqs_body': 1352.0, 'eqs_other': 7991.0}, 'lpStep': {'atoms': 1594.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13143.0, 'bodies_tr': 13143.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 3.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25.0, 'rules': 25280.0, 'rules_normal': 25120.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25276.0, 'rules_tr_normal': 25120.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2242.0, 'eqs_atom': 478.0, 'eqs_body': 306.0, 'eqs_other': 1458.0}, 'generator': {'vars': 2112.0, 'vars_eliminated': 0.0, 'vars_frozen': 1336.0, 'constraints': 32.0, 'constraints_binary': 798.0, 'constraints_ternary': 127.0, 'acyc_edges': 0.0, 'complexity': 983.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 16.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.06879997253417969, 'cpu': 0.0625, 'solve': 0.0029621124267578125, 'unsat': 0.0029621124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18648910522460938, 'cpu': 0.21875, 'solve': 0.00891876220703125, 'unsat': 0.0049571990966796875, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 30.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14060119999999898, solving_time=0.014536299999999613, total_time=0.1551374999999986, clingo_stats={}))

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 35:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('state_module', [Number(35), Number(32)]), ('plan_module', [Number(35), Number(32), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(32), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(35), Number(32), Number(12), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062549s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005182s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.06773119999999722, Incremental time limit = None
Running cumulative time = 0.2228686999999958, Cumulative time limit = 3600

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=35, end_step=36, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.0625487999999983, solving_time=0.005182399999998921, total_time=0.06773119999999722, clingo_stats={'problem': {'lp': {'atoms': 10995.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 43289.0, 'bodies_tr': 43289.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 597.0, 'count_bodies_tr': 597.0, 'sccs': 37.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 512.0, 'rules': 84858.0, 'rules_normal': 84195.0, 'rules_choice': 651.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 84846.0, 'rules_tr_normal': 84195.0, 'rules_tr_choice': 651.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 15941.0, 'eqs_atom': 4378.0, 'eqs_body': 1645.0, 'eqs_other': 9918.0}, 'lpStep': {'atoms': 1729.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13315.0, 'bodies_tr': 13315.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25534.0, 'rules_normal': 25374.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25530.0, 'rules_tr_normal': 25374.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2934.0, 'eqs_atom': 714.0, 'eqs_body': 293.0, 'eqs_other': 1927.0}, 'generator': {'vars': 2398.0, 'vars_eliminated': 0.0, 'vars_frozen': 1528.0, 'constraints': 102.0, 'constraints_binary': 2270.0, 'constraints_ternary': 369.0, 'acyc_edges': 0.0, 'complexity': 2799.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 50.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.06781959533691406, 'cpu': 0.0625, 'solve': 0.0009670257568359375, 'unsat': 0.0009670257568359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.25430870056152344, 'cpu': 0.28125, 'solve': 0.009885787963867188, 'unsat': 0.005924224853515625, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 80.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.20314999999999728, solving_time=0.019718699999998535, total_time=0.2228686999999958, clingo_stats={}))

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 36:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('state_module', [Number(36), Number(32)]), ('plan_module', [Number(36), Number(32), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(32), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(36), Number(32), Number(12), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.064445s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4879, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012085s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.07653059999999812, Incremental time limit = None
Running cumulative time = 0.29939929999999393, Cumulative time limit = 3600

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.267595s, Cumulative Solving = 0.031804s, Cumulative Total = 0.299399s, Calls = 4
Final Model :: Total atoms = 4879, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.06444519999999798, solving_time=0.012085400000000135, total_time=0.07653059999999812, clingo_stats={'problem': {'lp': {'atoms': 12967.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 56838.0, 'bodies_tr': 56838.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 780.0, 'count_bodies_tr': 780.0, 'sccs': 53.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 628.0, 'rules': 110788.0, 'rules_normal': 109965.0, 'rules_choice': 807.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 110772.0, 'rules_tr_normal': 109965.0, 'rules_tr_choice': 807.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 19919.0, 'eqs_atom': 5297.0, 'eqs_body': 1929.0, 'eqs_other': 12693.0}, 'lpStep': {'atoms': 1972.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13549.0, 'bodies_tr': 13549.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 16.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 116.0, 'rules': 25930.0, 'rules_normal': 25770.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25926.0, 'rules_tr_normal': 25770.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3978.0, 'eqs_atom': 919.0, 'eqs_body': 284.0, 'eqs_other': 2775.0}, 'generator': {'vars': 2983.0, 'vars_eliminated': 0.0, 'vars_frozen': 1921.0, 'constraints': 207.0, 'constraints_binary': 6847.0, 'constraints_ternary': 767.0, 'acyc_edges': 0.0, 'complexity': 7920.0}}, 'solving': {'solvers': {'choices': 831.0, 'conflicts': 41.0, 'conflicts_analyzed': 41.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 51.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 57.0, 'distributed_sum_lbd': 84.0, 'integrated': 261.0, 'lemmas': 296.0, 'lits_learnt': 621.0, 'lemmas_binary': 41.0, 'lemmas_ternary': 95.0, 'cpu_time': 0.0, 'integrated_imps': 135.0, 'integrated_jumps': 451.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 37.0, 'lemmas_loop': 23.0, 'lemmas_other': 236.0, 'lits_conflict': 52.0, 'lits_loop': 66.0, 'lits_other': 503.0, 'jumps': {'jumps': 41.0, 'jumps_bounded': 2.0, 'levels': 161.0, 'levels_bounded': 24.0, 'max': 30.0, 'max_executed': 30.0, 'max_bounded': 12.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.07681846618652344, 'cpu': 0.078125, 'solve': 0.006008148193359375, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3311271667480469, 'cpu': 0.359375, 'solve': 0.015893936157226562, 'unsat': 0.005924224853515625, 'sat': 0.002964019775390625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 831.0, 'conflicts': 47.0, 'conflicts_analyzed': 41.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 52.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 57.0, 'distributed_sum_lbd': 84.0, 'integrated': 261.0, 'lemmas': 299.0, 'lits_learnt': 624.0, 'lemmas_binary': 41.0, 'lemmas_ternary': 95.0, 'cpu_time': 0.03125, 'integrated_imps': 135.0, 'integrated_jumps': 451.0, 'guiding_paths_lits': 176.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 37.0, 'lemmas_loop': 26.0, 'lemmas_other': 236.0, 'lits_conflict': 52.0, 'lits_loop': 69.0, 'lits_other': 503.0, 'jumps': {'jumps': 41.0, 'jumps_bounded': 2.0, 'levels': 161.0, 'levels_bounded': 24.0, 'max': 30.0, 'max_executed': 30.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.26759519999999526, solving_time=0.03180409999999867, total_time=0.29939929999999393, clingo_stats={}))

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved.

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 12 was achieved successfully.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.078492s, Solving = 0.008951s, Total = 0.087442s
2 : Statistics :: Grounding = 0.062109s, Solving = 0.005586s, Total = 0.067695s
3 : Statistics :: Grounding = 0.062549s, Solving = 0.005182s, Total = 0.067731s
4 : Statistics :: Grounding = 0.064445s, Solving = 0.012085s, Total = 0.076531s

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.299399s because Manual generator exit.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.267595s, Cumulative Solving = 0.031804s, Cumulative Total = 0.299399s, Calls = 4
Model :: Total atoms = 4879, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59}}

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59}}

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 4 :: Actions = 4                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=32, plan_length=36, step_range=range(32, 37)

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=59 : level=2 len(self.__actions.get(level, []))=36 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=32, plan_length=36, step_range=range(32, 37)

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=59 : level=2 len(self.__actions.get(level, []))=36 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00.

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> plan_length=4, true_size_bound=1, partial_problems=4

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=4, plan_length=4, start_step=32, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Decided: number_small_problems=4, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=33, blend=Blend(left=0, right=0)), DivisionPoint(index=34, blend=Blend(left=0, right=0)), DivisionPoint(index=35, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Getting sgoals range for problem number 33 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Getting sgoals range for problem number 34 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Obtained sgoals range = [34-34].

[13-08-2021_16-59-15] DEBUG :: core.Strategies >> Obtained sgoals range = [33-33].

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [33-33]

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [33-33], problem number = 33, increment number = 32

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 33)
	('last_sgoals', 33)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 59, initial = False, final = False, sgoals = [33-33]

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 59

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 59

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [33-33])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-15] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-15] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 59...

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=59, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 59), range_=None), IncPart(name='plan_module', args=('#inc', 59, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 59, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 59, 33, 33, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003017499999998563s

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.028097s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006220s.

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3663A40>

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(33, 59)', truth=True, inc_range=IncRange(start=59, end=60, step=1))

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 59). %* None *%
#program plan_module(#inc, 59, false, false). %* None *%
#program optimisation_module(#inc, 59, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 59, 33, 33, sequential, true). %* None *%

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     58 : Current =     60
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('state_module', [Number(59), Number(59)]), ('plan_module', [Number(59), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(59), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(59), Number(59), Number(33), Number(33), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('state_module', [Number(60), Number(59)]), ('plan_module', [Number(60), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(59), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(60), Number(59), Number(33), Number(33), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159877s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(33, 59)', truth=True, inc_range=IncRange(start=59, end=60, step=1)), conversion = current_last_sgoals(33,59).

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017659s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17753560000000235, Incremental time limit = None
Running cumulative time = 0.17753560000000235, Cumulative time limit = 3600

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.159877s, Cumulative Solving = 0.017659s, Cumulative Total = 0.177536s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=59, end_step=61, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.15987680000000282, solving_time=0.01765879999999953, total_time=0.17753560000000235, clingo_stats={'problem': {'lp': {'atoms': 11278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28664.0, 'bodies_tr': 28664.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56315.0, 'rules_normal': 55750.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56311.0, 'rules_tr_normal': 55750.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20236.0, 'eqs_atom': 6356.0, 'eqs_body': 1818.0, 'eqs_other': 12062.0}, 'lpStep': {'atoms': 5636.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26061.0, 'bodies_tr': 26061.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49863.0, 'rules_normal': 49298.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49859.0, 'rules_tr_normal': 49298.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8462.0, 'eqs_atom': 2063.0, 'eqs_body': 309.0, 'eqs_other': 6090.0}, 'generator': {'vars': 2827.0, 'vars_eliminated': 0.0, 'vars_frozen': 1616.0, 'constraints': 16.0, 'constraints_binary': 357.0, 'constraints_ternary': 29.0, 'acyc_edges': 0.0, 'complexity': 424.0}}, 'solving': {'solvers': {'choices': 461.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 32.0, 'lemmas': 49.0, 'lits_learnt': 49.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 32.0, 'integrated_jumps': 253.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 8.0, 'lemmas_other': 32.0, 'lits_conflict': 9.0, 'lits_loop': 8.0, 'lits_other': 32.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.17755126953125, 'cpu': 0.171875, 'solve': 0.0059833526611328125, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.21445274353027344, 'cpu': 0.203125, 'solve': 0.009967803955078125, 'unsat': 0.0, 'sat': 0.0039386749267578125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 461.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 32.0, 'lemmas': 49.0, 'lits_learnt': 49.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 32.0, 'integrated_jumps': 253.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 8.0, 'lemmas_other': 32.0, 'lits_conflict': 9.0, 'lits_loop': 8.0, 'lits_other': 32.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.15987680000000282, solving_time=0.01765879999999953, total_time=0.17753560000000235, clingo_stats={}))

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 33 achieved.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 33 was achieved successfully.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.159877s, Solving = 0.017659s, Total = 0.177536s

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.177536s because Manual generator exit.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.159877s, Cumulative Solving = 0.017659s, Cumulative Total = 0.177536s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59}}

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60}}

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=59, plan_length=60, step_range=range(59, 61)

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=60 : level=2 len(self.__actions.get(level, []))=36 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Online planning increment 33 finished.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 36 : Achieved sgoals 12 : Unachieved sgoals 8
Level 1 : Total sgoals 0 : Achieved sgoals 33 : Unachieved sgoals 3

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Getting sgoals range for problem number 34 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Getting sgoals range for problem number 33 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Obtained sgoals range = [33-33].

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Getting sgoals range for problem number 35 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Obtained sgoals range = [35-35].

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Obtained sgoals range = [34-34].

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [34-34]

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [34-34], problem number = 34, increment number = 33

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 34)
	('last_sgoals', 34)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 60, initial = False, final = False, sgoals = [34-34]

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 60

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 60

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [34-34])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-16] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 60...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=60, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 60), range_=None), IncPart(name='plan_module', args=('#inc', 60, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 60, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 60, 34, 34, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003421100000000621s

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.030425s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006521s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB315F3B0>

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(34, 60)', truth=True, inc_range=IncRange(start=60, end=61, step=1))

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 60). %* None *%
#program plan_module(#inc, 60, false, false). %* None *%
#program optimisation_module(#inc, 60, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 60, 34, 34, sequential, true). %* None *%

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     59 : Current =     61
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('state_module', [Number(60), Number(60)]), ('plan_module', [Number(60), Number(60), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(60), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(60), Number(60), Number(34), Number(34), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('state_module', [Number(61), Number(60)]), ('plan_module', [Number(61), Number(60), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(60), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(61), Number(60), Number(34), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157039s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(34, 60)', truth=True, inc_range=IncRange(start=60, end=61, step=1)), conversion = current_last_sgoals(34,60).

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017272s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17431090000000182, Incremental time limit = None
Running cumulative time = 0.17431090000000182, Cumulative time limit = 3600

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.157039s, Cumulative Solving = 0.017272s, Cumulative Total = 0.174311s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=60, end_step=62, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.1570385000000023, solving_time=0.01727239999999952, total_time=0.17431090000000182, clingo_stats={'problem': {'lp': {'atoms': 11279.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28719.0, 'bodies_tr': 28719.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56369.0, 'rules_normal': 55804.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56365.0, 'rules_tr_normal': 55804.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20244.0, 'eqs_atom': 6356.0, 'eqs_body': 1817.0, 'eqs_other': 12071.0}, 'lpStep': {'atoms': 5637.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26116.0, 'bodies_tr': 26116.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49917.0, 'rules_normal': 49352.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49913.0, 'rules_tr_normal': 49352.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8470.0, 'eqs_atom': 2063.0, 'eqs_body': 308.0, 'eqs_other': 6099.0}, 'generator': {'vars': 2826.0, 'vars_eliminated': 0.0, 'vars_frozen': 1616.0, 'constraints': 11.0, 'constraints_binary': 304.0, 'constraints_ternary': 26.0, 'acyc_edges': 0.0, 'complexity': 355.0}}, 'solving': {'solvers': {'choices': 350.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 28.0, 'lemmas': 44.0, 'lits_learnt': 44.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 28.0, 'integrated_jumps': 142.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 28.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 28.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1742725372314453, 'cpu': 0.1875, 'solve': 0.005950927734375, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.21613693237304688, 'cpu': 0.21875, 'solve': 0.009939193725585938, 'unsat': 0.0, 'sat': 0.00299072265625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 350.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 28.0, 'lemmas': 44.0, 'lits_learnt': 44.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 28.0, 'integrated_jumps': 142.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 28.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 28.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1570385000000023, solving_time=0.01727239999999952, total_time=0.17431090000000182, clingo_stats={}))

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 34 achieved.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 34 was achieved successfully.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.157039s, Solving = 0.017272s, Total = 0.174311s

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.174311s because Manual generator exit.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.157039s, Cumulative Solving = 0.017272s, Cumulative Total = 0.174311s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60}}

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61}}

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=60, plan_length=61, step_range=range(60, 62)

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=61 : level=2 len(self.__actions.get(level, []))=36 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Online planning increment 34 finished.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 36 : Achieved sgoals 12 : Unachieved sgoals 8
Level 1 : Total sgoals 0 : Achieved sgoals 34 : Unachieved sgoals 2

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Getting sgoals range for problem number 35 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Getting sgoals range for problem number 34 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Obtained sgoals range = [34-34].

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Getting sgoals range for problem number 36 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Obtained sgoals range = [36-36].

[13-08-2021_16-59-16] DEBUG :: core.Strategies >> Obtained sgoals range = [35-35].

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [35-35]

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [35-35], problem number = 35, increment number = 34

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 35)
	('last_sgoals', 35)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 61, initial = False, final = False, sgoals = [35-35]

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 61

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 61

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [35-35])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-16] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 61...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=61, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 61), range_=None), IncPart(name='plan_module', args=('#inc', 61, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 61, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 61, 35, 35, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0032159999999983313s

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027760s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006353s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3226130>

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(35, 61)', truth=True, inc_range=IncRange(start=61, end=62, step=1))

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 61). %* None *%
#program plan_module(#inc, 61, false, false). %* None *%
#program optimisation_module(#inc, 61, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 61, 35, 35, sequential, true). %* None *%

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     60 : Current =     62
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('state_module', [Number(61), Number(61)]), ('plan_module', [Number(61), Number(61), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(61), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(61), Number(61), Number(35), Number(35), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('state_module', [Number(62), Number(61)]), ('plan_module', [Number(62), Number(61), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(61), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(62), Number(61), Number(35), Number(35), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125158s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(35, 61)', truth=True, inc_range=IncRange(start=61, end=62, step=1)), conversion = current_last_sgoals(35,61).

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013556s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13871319999999798, Incremental time limit = None
Running cumulative time = 0.13871319999999798, Cumulative time limit = 3600

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=61, end_step=63, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12515759999999787, solving_time=0.013555600000000112, total_time=0.13871319999999798, clingo_stats={'problem': {'lp': {'atoms': 11280.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28773.0, 'bodies_tr': 28773.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 56423.0, 'rules_normal': 55858.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56419.0, 'rules_tr_normal': 55858.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20251.0, 'eqs_atom': 6356.0, 'eqs_body': 1816.0, 'eqs_other': 12079.0}, 'lpStep': {'atoms': 5638.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26170.0, 'bodies_tr': 26170.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 49971.0, 'rules_normal': 49406.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49967.0, 'rules_tr_normal': 49406.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8477.0, 'eqs_atom': 2063.0, 'eqs_body': 307.0, 'eqs_other': 6107.0}, 'generator': {'vars': 2825.0, 'vars_eliminated': 0.0, 'vars_frozen': 1616.0, 'constraints': 72.0, 'constraints_binary': 722.0, 'constraints_ternary': 55.0, 'acyc_edges': 0.0, 'complexity': 883.0}}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 13.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 17.0, 'integrated': 42.0, 'lemmas': 38.0, 'lits_learnt': 57.0, 'lemmas_binary': 19.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 20.0, 'integrated_jumps': 8.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 8.0, 'lemmas_other': 25.0, 'lits_conflict': 5.0, 'lits_loop': 14.0, 'lits_other': 38.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 47.0, 'levels_bounded': 30.0, 'max': 13.0, 'max_executed': 7.0, 'max_bounded': 6.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1386280059814453, 'cpu': 0.125, 'solve': 0.001964569091796875, 'unsat': 0.001964569091796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17652511596679688, 'cpu': 0.15625, 'solve': 0.00594329833984375, 'unsat': 0.001964569091796875, 'sat': 0.0019855499267578125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 13.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 17.0, 'integrated': 42.0, 'lemmas': 38.0, 'lits_learnt': 57.0, 'lemmas_binary': 19.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 20.0, 'integrated_jumps': 8.0, 'guiding_paths_lits': 50.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 8.0, 'lemmas_other': 25.0, 'lits_conflict': 5.0, 'lits_loop': 14.0, 'lits_other': 38.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 47.0, 'levels_bounded': 30.0, 'max': 13.0, 'max_executed': 7.0, 'max_bounded': 6.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12515759999999787, solving_time=0.013555600000000112, total_time=0.13871319999999798, clingo_stats={}))

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 63:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('state_module', [Number(63), Number(61)]), ('plan_module', [Number(63), Number(61), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(61), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(63), Number(61), Number(35), Number(35), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.093680s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4575, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022980s.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11665980000000076, Incremental time limit = None
Running cumulative time = 0.25537299999999874, Cumulative time limit = 3600

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.218837s, Cumulative Solving = 0.036536s, Cumulative Total = 0.255373s, Calls = 2
Final Model :: Total atoms = 4575, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=63, end_step=64, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.0936797000000027, solving_time=0.02298009999999806, total_time=0.11665980000000076, clingo_stats={'problem': {'lp': {'atoms': 13871.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50212.0, 'bodies_tr': 50212.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 55.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 880.0, 'rules': 98126.0, 'rules_normal': 97353.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 98118.0, 'rules_tr_normal': 97353.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24424.0, 'eqs_atom': 7412.0, 'eqs_body': 2102.0, 'eqs_other': 14910.0}, 'lpStep': {'atoms': 2591.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21439.0, 'bodies_tr': 21439.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 206.0, 'rules': 41703.0, 'rules_normal': 41495.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41699.0, 'rules_tr_normal': 41495.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4173.0, 'eqs_atom': 1056.0, 'eqs_body': 286.0, 'eqs_other': 2831.0}, 'generator': {'vars': 3237.0, 'vars_eliminated': 0.0, 'vars_frozen': 1910.0, 'constraints': 183.0, 'constraints_binary': 1833.0, 'constraints_ternary': 339.0, 'acyc_edges': 0.0, 'complexity': 2422.0}}, 'solving': {'solvers': {'choices': 797.0, 'conflicts': 24.0, 'conflicts_analyzed': 24.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 46.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 29.0, 'distributed_sum_lbd': 33.0, 'integrated': 159.0, 'lemmas': 221.0, 'lits_learnt': 418.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 131.0, 'integrated_jumps': 413.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 24.0, 'lemmas_loop': 42.0, 'lemmas_other': 155.0, 'lits_conflict': 24.0, 'lits_loop': 215.0, 'lits_other': 179.0, 'jumps': {'jumps': 24.0, 'jumps_bounded': 9.0, 'levels': 168.0, 'levels_bounded': 72.0, 'max': 21.0, 'max_executed': 13.0, 'max_bounded': 8.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.11768341064453125, 'cpu': 0.109375, 'solve': 0.0189208984375, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2942085266113281, 'cpu': 0.265625, 'solve': 0.02486419677734375, 'unsat': 0.001964569091796875, 'sat': 0.0039520263671875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 822.0, 'conflicts': 37.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 47.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 50.0, 'integrated': 201.0, 'lemmas': 259.0, 'lits_learnt': 475.0, 'lemmas_binary': 47.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 151.0, 'integrated_jumps': 421.0, 'guiding_paths_lits': 114.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 50.0, 'lemmas_other': 180.0, 'lits_conflict': 29.0, 'lits_loop': 229.0, 'lits_other': 217.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 14.0, 'levels': 215.0, 'levels_bounded': 102.0, 'max': 21.0, 'max_executed': 13.0, 'max_bounded': 8.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.21883730000000057, solving_time=0.03653569999999817, total_time=0.25537299999999874, clingo_stats={}))

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 35 achieved.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 35 was achieved successfully.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.125158s, Solving = 0.013556s, Total = 0.138713s
2 : Statistics :: Grounding = 0.093680s, Solving = 0.022980s, Total = 0.116660s

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.255373s because Manual generator exit.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-16] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.218837s, Cumulative Solving = 0.036536s, Cumulative Total = 0.255373s, Calls = 2
Model :: Total atoms = 4575, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61}}

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63}}

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=61, plan_length=63, step_range=range(61, 64)

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=63 : level=2 len(self.__actions.get(level, []))=36 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Online planning increment 35 finished.

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 36 : Achieved sgoals 12 : Unachieved sgoals 8
Level 1 : Total sgoals 0 : Achieved sgoals 35 : Unachieved sgoals 1

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Getting sgoals range for problem number 36 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Getting sgoals range for problem number 35 from scenario:
Divided plan : Level = 2, Length = 4, Actions = 4, Refined = True, Expansion = 4.00, Deviation = 0.00
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0)), (Index = 34, Blend = (Left = 0, Right = 0)), (Index = 35, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Obtained sgoals range = [35-35].

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Obtained sgoals range = [36-36].

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [36-36]

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [36-36], problem number = 36, increment number = 35

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 36)
	('last_sgoals', 36)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 63, initial = False, final = False, sgoals = [36-36]

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 63

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 63

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [36-36])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-17] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 63...

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=63, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 63), range_=None), IncPart(name='plan_module', args=('#inc', 63, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 63, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 63, 36, 36, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030581000000005076s

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032661s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005584s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3136130>

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(36, 63)', truth=True, inc_range=IncRange(start=63, end=64, step=1))

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 63). %* None *%
#program plan_module(#inc, 63, false, false). %* None *%
#program optimisation_module(#inc, 63, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 63, 36, 36, sequential, true). %* None *%

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     62 : Current =     64
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('state_module', [Number(63), Number(63)]), ('plan_module', [Number(63), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(63), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(63), Number(63), Number(36), Number(36), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('state_module', [Number(64), Number(63)]), ('plan_module', [Number(64), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(63), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(64), Number(63), Number(36), Number(36), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130462s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(36, 63)', truth=True, inc_range=IncRange(start=63, end=64, step=1)), conversion = current_last_sgoals(36,63).

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013422s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14388360000000233, Incremental time limit = None
Running cumulative time = 0.14388360000000233, Cumulative time limit = 3600

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=63, end_step=65, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.1304616000000003, solving_time=0.013422000000002043, total_time=0.14388360000000233, clingo_stats={'problem': {'lp': {'atoms': 11280.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28779.0, 'bodies_tr': 28779.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 56408.0, 'rules_normal': 55843.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56404.0, 'rules_tr_normal': 55843.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20287.0, 'eqs_atom': 6343.0, 'eqs_body': 1808.0, 'eqs_other': 12136.0}, 'lpStep': {'atoms': 5638.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26176.0, 'bodies_tr': 26176.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 49956.0, 'rules_normal': 49391.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49952.0, 'rules_tr_normal': 49391.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8513.0, 'eqs_atom': 2050.0, 'eqs_body': 299.0, 'eqs_other': 6164.0}, 'generator': {'vars': 2867.0, 'vars_eliminated': 0.0, 'vars_frozen': 1648.0, 'constraints': 63.0, 'constraints_binary': 657.0, 'constraints_ternary': 55.0, 'acyc_edges': 0.0, 'complexity': 809.0}}, 'solving': {'solvers': {'choices': 10.0, 'conflicts': 4.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 4.0, 'integrated': 2.0, 'lemmas': 10.0, 'lits_learnt': 11.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 18.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 6.0, 'lemmas_other': 2.0, 'lits_conflict': 2.0, 'lits_loop': 7.0, 'lits_other': 2.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 22.0, 'levels_bounded': 12.0, 'max': 11.0, 'max_executed': 5.0, 'max_bounded': 6.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.14458847045898438, 'cpu': 0.140625, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1864757537841797, 'cpu': 0.1875, 'solve': 0.005985260009765625, 'unsat': 0.001995086669921875, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10.0, 'conflicts': 4.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 4.0, 'integrated': 2.0, 'lemmas': 10.0, 'lits_learnt': 11.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 26.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 6.0, 'lemmas_other': 2.0, 'lits_conflict': 2.0, 'lits_loop': 7.0, 'lits_other': 2.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 22.0, 'levels_bounded': 12.0, 'max': 11.0, 'max_executed': 5.0, 'max_bounded': 6.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1304616000000003, solving_time=0.013422000000002043, total_time=0.14388360000000233, clingo_stats={}))

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 65:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('state_module', [Number(65), Number(63)]), ('plan_module', [Number(65), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(63), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(65), Number(63), Number(36), Number(36), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088908s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006452s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09535979999999711, Incremental time limit = None
Running cumulative time = 0.23924339999999944, Cumulative time limit = 3600

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=65, end_step=66, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08890819999999877, solving_time=0.0064515999999983364, total_time=0.09535979999999711, clingo_stats={'problem': {'lp': {'atoms': 13742.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50201.0, 'bodies_tr': 50201.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 54.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 862.0, 'rules': 98097.0, 'rules_normal': 97324.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 98089.0, 'rules_tr_normal': 97324.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24381.0, 'eqs_atom': 7403.0, 'eqs_body': 2096.0, 'eqs_other': 14882.0}, 'lpStep': {'atoms': 2462.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21422.0, 'bodies_tr': 21422.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 12.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 188.0, 'rules': 41689.0, 'rules_normal': 41481.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41685.0, 'rules_tr_normal': 41481.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4094.0, 'eqs_atom': 1060.0, 'eqs_body': 288.0, 'eqs_other': 2746.0}, 'generator': {'vars': 3254.0, 'vars_eliminated': 0.0, 'vars_frozen': 1925.0, 'constraints': 167.0, 'constraints_binary': 1657.0, 'constraints_ternary': 310.0, 'acyc_edges': 0.0, 'complexity': 2200.0}}, 'solving': {'solvers': {'choices': 54.0, 'conflicts': 11.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 15.0, 'integrated': 46.0, 'lemmas': 66.0, 'lits_learnt': 153.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 25.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 17.0, 'lemmas_other': 46.0, 'lits_conflict': 3.0, 'lits_loop': 76.0, 'lits_other': 74.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 62.0, 'levels_bounded': 24.0, 'max': 21.0, 'max_executed': 13.0, 'max_bounded': 8.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.09631156921386719, 'cpu': 0.09375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2827873229980469, 'cpu': 0.28125, 'solve': 0.0079803466796875, 'unsat': 0.00399017333984375, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 64.0, 'conflicts': 15.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 19.0, 'integrated': 48.0, 'lemmas': 76.0, 'lits_learnt': 164.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 27.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 82.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 23.0, 'lemmas_other': 48.0, 'lits_conflict': 5.0, 'lits_loop': 83.0, 'lits_other': 76.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 84.0, 'levels_bounded': 36.0, 'max': 21.0, 'max_executed': 13.0, 'max_bounded': 8.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.21936979999999906, solving_time=0.01987360000000038, total_time=0.23924339999999944, clingo_stats={}))

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 66:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('state_module', [Number(66), Number(63)]), ('plan_module', [Number(66), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(63), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(66), Number(63), Number(36), Number(36), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096571s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 5123, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013474s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1100455000000018, Incremental time limit = None
Running cumulative time = 0.34928890000000123, Cumulative time limit = 3600

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.315941s, Cumulative Solving = 0.033348s, Cumulative Total = 0.349289s, Calls = 3
Final Model :: Total atoms = 5123, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=66, end_step=67, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.09657110000000202, solving_time=0.013474399999999775, total_time=0.1100455000000018, clingo_stats={'problem': {'lp': {'atoms': 16476.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71893.0, 'bodies_tr': 71893.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 694.0, 'count_bodies_tr': 694.0, 'sccs': 67.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1082.0, 'rules': 140278.0, 'rules_normal': 139297.0, 'rules_choice': 969.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 140266.0, 'rules_tr_normal': 139297.0, 'rules_tr_choice': 969.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 29304.0, 'eqs_atom': 8718.0, 'eqs_body': 2370.0, 'eqs_other': 18216.0}, 'lpStep': {'atoms': 2734.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21692.0, 'bodies_tr': 21692.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 220.0, 'rules': 42181.0, 'rules_normal': 41973.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42177.0, 'rules_tr_normal': 41973.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4923.0, 'eqs_atom': 1315.0, 'eqs_body': 274.0, 'eqs_other': 3334.0}, 'generator': {'vars': 3772.0, 'vars_eliminated': 0.0, 'vars_frozen': 2301.0, 'constraints': 291.0, 'constraints_binary': 4276.0, 'constraints_ternary': 748.0, 'acyc_edges': 0.0, 'complexity': 5418.0}}, 'solving': {'solvers': {'choices': 584.0, 'conflicts': 38.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 59.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 33.0, 'distributed_sum_lbd': 46.0, 'integrated': 125.0, 'lemmas': 181.0, 'lits_learnt': 501.0, 'lemmas_binary': 48.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.03125, 'integrated_imps': 71.0, 'integrated_jumps': 122.0, 'guiding_paths_lits': 80.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 33.0, 'lemmas_loop': 23.0, 'lemmas_other': 125.0, 'lits_conflict': 104.0, 'lits_loop': 140.0, 'lits_other': 257.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 0.0, 'levels': 142.0, 'levels_bounded': 0.0, 'max': 24.0, 'max_executed': 24.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11030197143554688, 'cpu': 0.125, 'solve': 0.007045745849609375, 'unsat': 0.0, 'sat': 0.00202178955078125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.39308929443359375, 'cpu': 0.40625, 'solve': 0.015026092529296875, 'unsat': 0.00399017333984375, 'sat': 0.0030193328857421875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 648.0, 'conflicts': 53.0, 'conflicts_analyzed': 43.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 60.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 45.0, 'distributed_sum_lbd': 65.0, 'integrated': 173.0, 'lemmas': 257.0, 'lits_learnt': 665.0, 'lemmas_binary': 83.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.03125, 'integrated_imps': 98.0, 'integrated_jumps': 138.0, 'guiding_paths_lits': 162.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 38.0, 'lemmas_loop': 46.0, 'lemmas_other': 173.0, 'lits_conflict': 109.0, 'lits_loop': 223.0, 'lits_other': 333.0, 'jumps': {'jumps': 43.0, 'jumps_bounded': 5.0, 'levels': 226.0, 'levels_bounded': 36.0, 'max': 24.0, 'max_executed': 24.0, 'max_bounded': 8.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.3159409000000011, solving_time=0.033348000000000155, total_time=0.34928890000000123, clingo_stats={}))

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 36 achieved.

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 36 was achieved successfully.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.130462s, Solving = 0.013422s, Total = 0.143884s
2 : Statistics :: Grounding = 0.088908s, Solving = 0.006452s, Total = 0.095360s
3 : Statistics :: Grounding = 0.096571s, Solving = 0.013474s, Total = 0.110046s

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.349289s because Manual generator exit.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.315941s, Cumulative Solving = 0.033348s, Cumulative Total = 0.349289s, Calls = 3
Model :: Total atoms = 5123, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63}}

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66}}

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=63, plan_length=66, step_range=range(63, 67)

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=66 : level=2 len(self.__actions.get(level, []))=36 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Online planning increment 36 finished.

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 36 : Achieved sgoals 12 : Unachieved sgoals 8
Level 1 : Total sgoals 0 : Achieved sgoals 36 : Unachieved sgoals 0

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Getting sgoals range for problem number 13 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Getting sgoals range for problem number 12 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Obtained sgoals range = [12-12].

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Getting sgoals range for problem number 14 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Obtained sgoals range = [14-14].

[13-08-2021_16-59-17] DEBUG :: core.Strategies >> Obtained sgoals range = [13-13].

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [13-13]

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [13-13], problem number = 13, increment number = 36

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 13)
	('last_sgoals', 13)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 36, initial = False, final = False, sgoals = [13-13]

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 36

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 36

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [13-13])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-17] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 36...

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=36, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 36), range_=None), IncPart(name='plan_module', args=('#inc', 36, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 36, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 36, 13, 13, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0037370999999986054s

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021720s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004742s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB2DB4A40>

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 36)', truth=True, inc_range=IncRange(start=36, end=37, step=1))

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 36). %* None *%
#program plan_module(#inc, 36, false, false). %* None *%
#program optimisation_module(#inc, 36, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 36, 13, 13, sequential, true). %* None *%

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     35 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('state_module', [Number(36), Number(36)]), ('plan_module', [Number(36), Number(36), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(36), Number(36), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('state_module', [Number(37), Number(36)]), ('plan_module', [Number(37), Number(36), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(37), Number(36), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.081262s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(13, 36)', truth=True, inc_range=IncRange(start=36, end=37, step=1)), conversion = current_last_sgoals(13,36).

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008562s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08982359999999545, Incremental time limit = None
Running cumulative time = 0.08982359999999545, Cumulative time limit = 3600

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=36, end_step=38, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08126189999999767, solving_time=0.008561699999997785, total_time=0.08982359999999545, clingo_stats={'problem': {'lp': {'atoms': 7672.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16950.0, 'bodies_tr': 16950.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 34146.0, 'rules_normal': 33803.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 34142.0, 'rules_tr_normal': 33803.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10766.0, 'eqs_atom': 3186.0, 'eqs_body': 1046.0, 'eqs_other': 6534.0}, 'lpStep': {'atoms': 3795.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15774.0, 'bodies_tr': 15774.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 435.0, 'rules': 29960.0, 'rules_normal': 29617.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29956.0, 'rules_tr_normal': 29617.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5020.0, 'eqs_atom': 1099.0, 'eqs_body': 281.0, 'eqs_other': 3640.0}, 'generator': {'vars': 1948.0, 'vars_eliminated': 0.0, 'vars_frozen': 1190.0, 'constraints': 23.0, 'constraints_binary': 288.0, 'constraints_ternary': 23.0, 'acyc_edges': 0.0, 'complexity': 360.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 18.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08976364135742188, 'cpu': 0.09375, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12068557739257812, 'cpu': 0.125, 'solve': 0.0050144195556640625, 'unsat': 0.0009975433349609375, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 26.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.08126189999999767, solving_time=0.008561699999997785, total_time=0.08982359999999545, clingo_stats={}))

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('state_module', [Number(38), Number(36)]), ('plan_module', [Number(38), Number(36), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(36), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(38), Number(36), Number(13), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.061329s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3950, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008406s.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.069735399999999, Incremental time limit = None
Running cumulative time = 0.15955899999999446, Cumulative time limit = 3600

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.142591s, Cumulative Solving = 0.016968s, Cumulative Total = 0.159559s, Calls = 2
Final Model :: Total atoms = 3950, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.0613291000000018, solving_time=0.008406299999997202, total_time=0.069735399999999, clingo_stats={'problem': {'lp': {'atoms': 9381.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30052.0, 'bodies_tr': 30052.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 414.0, 'count_bodies_tr': 414.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 487.0, 'rules': 59486.0, 'rules_normal': 58983.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 59478.0, 'rules_tr_normal': 58983.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13563.0, 'eqs_atom': 3857.0, 'eqs_body': 1350.0, 'eqs_other': 8356.0}, 'lpStep': {'atoms': 1709.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13102.0, 'bodies_tr': 13102.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25340.0, 'rules_normal': 25180.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25336.0, 'rules_tr_normal': 25180.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2797.0, 'eqs_atom': 671.0, 'eqs_body': 304.0, 'eqs_other': 1822.0}, 'generator': {'vars': 2192.0, 'vars_eliminated': 0.0, 'vars_frozen': 1386.0, 'constraints': 85.0, 'constraints_binary': 1072.0, 'constraints_ternary': 145.0, 'acyc_edges': 0.0, 'complexity': 1360.0}}, 'solving': {'solvers': {'choices': 266.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 21.0, 'integrated': 33.0, 'lemmas': 31.0, 'lits_learnt': 38.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 74.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 4.0, 'lemmas_other': 12.0, 'lits_conflict': 15.0, 'lits_loop': 11.0, 'lits_other': 12.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.07079505920410156, 'cpu': 0.125, 'solve': 0.005985260009765625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1914806365966797, 'cpu': 0.25, 'solve': 0.010999679565429688, 'unsat': 0.0009975433349609375, 'sat': 0.00399017333984375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 266.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 21.0, 'integrated': 33.0, 'lemmas': 35.0, 'lits_learnt': 42.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 12.0, 'integrated_jumps': 74.0, 'guiding_paths_lits': 90.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 8.0, 'lemmas_other': 12.0, 'lits_conflict': 15.0, 'lits_loop': 15.0, 'lits_other': 12.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.14259099999999947, solving_time=0.016967999999994987, total_time=0.15955899999999446, clingo_stats={}))

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved.

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 13 was achieved successfully.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.081262s, Solving = 0.008562s, Total = 0.089824s
2 : Statistics :: Grounding = 0.061329s, Solving = 0.008406s, Total = 0.069735s

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.159559s because Manual generator exit.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-17] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.142591s, Cumulative Solving = 0.016968s, Cumulative Total = 0.159559s, Calls = 2
Model :: Total atoms = 3950, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66}}

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66}}

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])
(37, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 37}])
(38, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 38}])

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=36, plan_length=38, step_range=range(36, 39)

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=66 : level=2 len(self.__actions.get(level, []))=38 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=36, plan_length=38, step_range=range(36, 39)

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=66 : level=2 len(self.__actions.get(level, []))=38 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00.

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> plan_length=2, true_size_bound=1, partial_problems=2

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=2, start_step=36, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=37, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 37, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 37, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Getting sgoals range for problem number 37 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 37, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Getting sgoals range for problem number 38 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 37, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Obtained sgoals range = [38-38].

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Obtained sgoals range = [37-37].

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-37]

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-37], problem number = 37, increment number = 36

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 37)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 66, initial = False, final = False, sgoals = [37-37]

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 66

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 66

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [37-37])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-18] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 66...

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=66, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 66), range_=None), IncPart(name='plan_module', args=('#inc', 66, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 66, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 66, 37, 37, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003141700000000469s

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026106s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006627s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3172A40>

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(37, 66)', truth=True, inc_range=IncRange(start=66, end=67, step=1))

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 66). %* None *%
#program plan_module(#inc, 66, false, false). %* None *%
#program optimisation_module(#inc, 66, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 66, 37, 37, sequential, true). %* None *%

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     65 : Current =     67
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('state_module', [Number(66), Number(66)]), ('plan_module', [Number(66), Number(66), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(66), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(66), Number(66), Number(37), Number(37), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('state_module', [Number(67), Number(66)]), ('plan_module', [Number(67), Number(66), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(66), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(67), Number(66), Number(37), Number(37), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136126s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(37, 66)', truth=True, inc_range=IncRange(start=66, end=67, step=1)), conversion = current_last_sgoals(37,66).

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016639s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15276589999999857, Incremental time limit = None
Running cumulative time = 0.15276589999999857, Cumulative time limit = 3600

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.136126s, Cumulative Solving = 0.016639s, Cumulative Total = 0.152766s, Calls = 1
Final Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=66, end_step=68, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.1361264999999996, solving_time=0.01663939999999897, total_time=0.15276589999999857, clingo_stats={'problem': {'lp': {'atoms': 11280.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28732.0, 'bodies_tr': 28732.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 56361.0, 'rules_normal': 55796.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56357.0, 'rules_tr_normal': 55796.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20282.0, 'eqs_atom': 6351.0, 'eqs_body': 1812.0, 'eqs_other': 12119.0}, 'lpStep': {'atoms': 5638.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26129.0, 'bodies_tr': 26129.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 674.0, 'rules': 49909.0, 'rules_normal': 49344.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49905.0, 'rules_tr_normal': 49344.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8508.0, 'eqs_atom': 2058.0, 'eqs_body': 303.0, 'eqs_other': 6147.0}, 'generator': {'vars': 2847.0, 'vars_eliminated': 0.0, 'vars_frozen': 1624.0, 'constraints': 72.0, 'constraints_binary': 720.0, 'constraints_ternary': 55.0, 'acyc_edges': 0.0, 'complexity': 881.0}}, 'solving': {'solvers': {'choices': 403.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 27.0, 'integrated': 69.0, 'lemmas': 45.0, 'lits_learnt': 65.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 18.0, 'integrated_jumps': 195.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 13.0, 'lemmas_other': 21.0, 'lits_conflict': 11.0, 'lits_loop': 30.0, 'lits_other': 24.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.15259170532226562, 'cpu': 0.15625, 'solve': 0.004985809326171875, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18846511840820312, 'cpu': 0.203125, 'solve': 0.008945465087890625, 'unsat': 0.0, 'sat': 0.0029754638671875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 403.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 27.0, 'integrated': 69.0, 'lemmas': 45.0, 'lits_learnt': 65.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 18.0, 'integrated_jumps': 195.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 13.0, 'lemmas_other': 21.0, 'lits_conflict': 11.0, 'lits_loop': 30.0, 'lits_other': 24.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1361264999999996, solving_time=0.01663939999999897, total_time=0.15276589999999857, clingo_stats={}))

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 37 achieved.

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 37 was achieved successfully.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.136126s, Solving = 0.016639s, Total = 0.152766s

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.152766s because Manual generator exit.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.136126s, Cumulative Solving = 0.016639s, Cumulative Total = 0.152766s, Calls = 1
Model :: Total atoms = 4028, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66}}

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67}}

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=66, plan_length=67, step_range=range(66, 68)

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=67 : level=2 len(self.__actions.get(level, []))=38 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Online planning increment 37 finished.

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 38 : Achieved sgoals 13 : Unachieved sgoals 7
Level 1 : Total sgoals 0 : Achieved sgoals 37 : Unachieved sgoals 1

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 37, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Getting sgoals range for problem number 38 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 37, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Getting sgoals range for problem number 37 from scenario:
Divided plan : Level = 2, Length = 2, Actions = 2, Refined = True, Expansion = 2.00, Deviation = 0.00
Division points [total=1] : [(Index = 37, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Obtained sgoals range = [37-37].

[13-08-2021_16-59-18] DEBUG :: core.Strategies >> Obtained sgoals range = [38-38].

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [38-38]

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [38-38], problem number = 38, increment number = 37

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 38)
	('last_sgoals', 38)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 67, initial = False, final = False, sgoals = [38-38]

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 67

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 67

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [38-38])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-18] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 67...

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=67, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 67), range_=None), IncPart(name='plan_module', args=('#inc', 67, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 67, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 67, 38, 38, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030587999999980298s

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027116s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005303s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3299C20>

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(38, 67)', truth=True, inc_range=IncRange(start=67, end=68, step=1))

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 67). %* None *%
#program plan_module(#inc, 67, false, false). %* None *%
#program optimisation_module(#inc, 67, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 67, 38, 38, sequential, true). %* None *%

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     66 : Current =     68
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('state_module', [Number(67), Number(67)]), ('plan_module', [Number(67), Number(67), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(67), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(67), Number(67), Number(38), Number(38), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('state_module', [Number(68), Number(67)]), ('plan_module', [Number(68), Number(67), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(67), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(68), Number(67), Number(38), Number(38), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128808s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(38, 67)', truth=True, inc_range=IncRange(start=67, end=68, step=1)), conversion = current_last_sgoals(38,67).

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013616s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14242319999999964, Incremental time limit = None
Running cumulative time = 0.14242319999999964, Cumulative time limit = 3600

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=67, end_step=69, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12880769999999941, solving_time=0.013615500000000225, total_time=0.14242319999999964, clingo_stats={'problem': {'lp': {'atoms': 11279.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28676.0, 'bodies_tr': 28676.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 56306.0, 'rules_normal': 55741.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 56302.0, 'rules_tr_normal': 55741.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20274.0, 'eqs_atom': 6351.0, 'eqs_body': 1813.0, 'eqs_other': 12110.0}, 'lpStep': {'atoms': 5637.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26073.0, 'bodies_tr': 26073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 666.0, 'rules': 49854.0, 'rules_normal': 49289.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49850.0, 'rules_tr_normal': 49289.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8500.0, 'eqs_atom': 2058.0, 'eqs_body': 304.0, 'eqs_other': 6138.0}, 'generator': {'vars': 2848.0, 'vars_eliminated': 0.0, 'vars_frozen': 1624.0, 'constraints': 10.0, 'constraints_binary': 282.0, 'constraints_ternary': 26.0, 'acyc_edges': 0.0, 'complexity': 332.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 24.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14261817932128906, 'cpu': 0.140625, 'solve': 0.0019664764404296875, 'unsat': 0.0019664764404296875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17852210998535156, 'cpu': 0.171875, 'solve': 0.0049591064453125, 'unsat': 0.0019664764404296875, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 32.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12880769999999941, solving_time=0.013615500000000225, total_time=0.14242319999999964, clingo_stats={}))

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 69:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     68 : Current =     69
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('state_module', [Number(69), Number(67)]), ('plan_module', [Number(69), Number(67), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(67), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(69), Number(67), Number(38), Number(38), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083272s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006089s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08936149999999898, Incremental time limit = None
Running cumulative time = 0.23178469999999862, Cumulative time limit = 3600

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=69, end_step=70, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.08327249999999964, solving_time=0.006088999999999345, total_time=0.08936149999999898, clingo_stats={'problem': {'lp': {'atoms': 13084.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50033.0, 'bodies_tr': 50033.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 53.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 804.0, 'rules': 97463.0, 'rules_normal': 96690.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 97455.0, 'rules_tr_normal': 96690.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 22890.0, 'eqs_atom': 6812.0, 'eqs_body': 2098.0, 'eqs_other': 13980.0}, 'lpStep': {'atoms': 1805.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21357.0, 'bodies_tr': 21357.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41157.0, 'rules_normal': 40949.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41153.0, 'rules_tr_normal': 40949.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2616.0, 'eqs_atom': 461.0, 'eqs_body': 285.0, 'eqs_other': 1870.0}, 'generator': {'vars': 3204.0, 'vars_eliminated': 0.0, 'vars_frozen': 1882.0, 'constraints': 95.0, 'constraints_binary': 1612.0, 'constraints_ternary': 240.0, 'acyc_edges': 0.0, 'complexity': 1995.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 32.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.09075546264648438, 'cpu': 0.09375, 'solve': 0.0019702911376953125, 'unsat': 0.0019702911376953125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.26927757263183594, 'cpu': 0.265625, 'solve': 0.0069293975830078125, 'unsat': 0.003936767578125, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.21208019999999905, solving_time=0.01970449999999957, total_time=0.23178469999999862, clingo_stats={}))

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 70:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('state_module', [Number(70), Number(67)]), ('plan_module', [Number(70), Number(67), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(67), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(70), Number(67), Number(38), Number(38), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.142007s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008579s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1505863000000005, Incremental time limit = None
Running cumulative time = 0.38237099999999913, Cumulative time limit = 3600

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=70, end_step=71, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.1420072000000019, solving_time=0.008579099999998618, total_time=0.1505863000000005, clingo_stats={'problem': {'lp': {'atoms': 15700.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71915.0, 'bodies_tr': 71915.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 694.0, 'count_bodies_tr': 694.0, 'sccs': 74.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1064.0, 'rules': 139802.0, 'rules_normal': 138821.0, 'rules_choice': 969.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 139790.0, 'rules_tr_normal': 138821.0, 'rules_tr_choice': 969.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 28403.0, 'eqs_atom': 8088.0, 'eqs_body': 2467.0, 'eqs_other': 17848.0}, 'lpStep': {'atoms': 2616.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21882.0, 'bodies_tr': 21882.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 21.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 260.0, 'rules': 42339.0, 'rules_normal': 42131.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 42335.0, 'rules_tr_normal': 42131.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5513.0, 'eqs_atom': 1276.0, 'eqs_body': 369.0, 'eqs_other': 3868.0}, 'generator': {'vars': 3967.0, 'vars_eliminated': 0.0, 'vars_frozen': 2439.0, 'constraints': 271.0, 'constraints_binary': 6349.0, 'constraints_ternary': 799.0, 'acyc_edges': 0.0, 'complexity': 7517.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 4.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 10.0, 'lemmas': 8.0, 'lits_learnt': 16.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 70.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 2.0, 'lits_conflict': 0.0, 'lits_loop': 12.0, 'lits_other': 4.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1515941619873047, 'cpu': 0.15625, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4208717346191406, 'cpu': 0.421875, 'solve': 0.008897781372070312, 'unsat': 0.0059051513671875, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 4.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 10.0, 'lemmas': 16.0, 'lits_learnt': 24.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 134.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 14.0, 'lemmas_other': 2.0, 'lits_conflict': 0.0, 'lits_loop': 20.0, 'lits_other': 4.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.35408740000000094, solving_time=0.028283599999998188, total_time=0.38237099999999913, clingo_stats={}))

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 71:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('state_module', [Number(71), Number(67)]), ('plan_module', [Number(71), Number(67), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(67), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(71), Number(67), Number(38), Number(38), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098514s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 5670, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018561s.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11707499999999627, Incremental time limit = None
Running cumulative time = 0.4994459999999954, Cumulative time limit = 3600

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.452601s, Cumulative Solving = 0.046845s, Cumulative Total = 0.499446s, Calls = 4
Final Model :: Total atoms = 5670, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=71, end_step=72, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.09851379999999921, solving_time=0.018561199999997058, total_time=0.11707499999999627, clingo_stats={'problem': {'lp': {'atoms': 18648.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94778.0, 'bodies_tr': 94778.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 903.0, 'count_bodies_tr': 903.0, 'sccs': 99.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1658.0, 'rules': 183258.0, 'rules_normal': 182069.0, 'rules_choice': 1173.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 16.0, 'rules_tr': 183242.0, 'rules_tr_normal': 182069.0, 'rules_tr_choice': 1173.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 34381.0, 'eqs_atom': 9541.0, 'eqs_body': 2762.0, 'eqs_other': 22078.0}, 'lpStep': {'atoms': 2948.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22863.0, 'bodies_tr': 22863.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 43456.0, 'rules_normal': 43248.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 43452.0, 'rules_tr_normal': 43248.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5978.0, 'eqs_atom': 1453.0, 'eqs_body': 295.0, 'eqs_other': 4230.0}, 'generator': {'vars': 5766.0, 'vars_eliminated': 0.0, 'vars_frozen': 3575.0, 'constraints': 821.0, 'constraints_binary': 21105.0, 'constraints_ternary': 2742.0, 'acyc_edges': 0.0, 'complexity': 24855.0}}, 'solving': {'solvers': {'choices': 1151.0, 'conflicts': 79.0, 'conflicts_analyzed': 79.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 77.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 96.0, 'distributed_sum_lbd': 117.0, 'integrated': 320.0, 'lemmas': 459.0, 'lits_learnt': 1057.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 128.0, 'cpu_time': 0.03125, 'integrated_imps': 191.0, 'integrated_jumps': 670.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 78.0, 'lemmas_loop': 61.0, 'lemmas_other': 320.0, 'lits_conflict': 88.0, 'lits_loop': 353.0, 'lits_other': 616.0, 'jumps': {'jumps': 79.0, 'jumps_bounded': 14.0, 'levels': 225.0, 'levels_bounded': 135.0, 'max': 16.0, 'max_executed': 13.0, 'max_bounded': 12.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.11768913269042969, 'cpu': 0.140625, 'solve': 0.00894927978515625, 'unsat': 0.0, 'sat': 0.0029659271240234375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5385608673095703, 'cpu': 0.5625, 'solve': 0.017847061157226562, 'unsat': 0.0059051513671875, 'sat': 0.003963470458984375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1151.0, 'conflicts': 83.0, 'conflicts_analyzed': 79.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 78.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 102.0, 'distributed_sum_lbd': 129.0, 'integrated': 330.0, 'lemmas': 475.0, 'lits_learnt': 1081.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 128.0, 'cpu_time': 0.03125, 'integrated_imps': 193.0, 'integrated_jumps': 670.0, 'guiding_paths_lits': 218.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 78.0, 'lemmas_loop': 75.0, 'lemmas_other': 322.0, 'lits_conflict': 88.0, 'lits_loop': 373.0, 'lits_other': 620.0, 'jumps': {'jumps': 79.0, 'jumps_bounded': 14.0, 'levels': 225.0, 'levels_bounded': 135.0, 'max': 16.0, 'max_executed': 13.0, 'max_bounded': 12.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.45260120000000015, solving_time=0.046844799999995246, total_time=0.4994459999999954, clingo_stats={}))

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 38 achieved.

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 38 was achieved successfully.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.128808s, Solving = 0.013616s, Total = 0.142423s
2 : Statistics :: Grounding = 0.083272s, Solving = 0.006089s, Total = 0.089361s
3 : Statistics :: Grounding = 0.142007s, Solving = 0.008579s, Total = 0.150586s
4 : Statistics :: Grounding = 0.098514s, Solving = 0.018561s, Total = 0.117075s

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.499446s because Manual generator exit.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-18] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.452601s, Cumulative Solving = 0.046845s, Cumulative Total = 0.499446s, Calls = 4
Model :: Total atoms = 5670, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67}}

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71}}

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 4 :: Actions = 4                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=67, plan_length=71, step_range=range(67, 72)

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=71 : level=2 len(self.__actions.get(level, []))=38 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Online planning increment 38 finished.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 38 : Achieved sgoals 13 : Unachieved sgoals 7
Level 1 : Total sgoals 0 : Achieved sgoals 38 : Unachieved sgoals 0

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 14 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 13 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Obtained sgoals range = [13-13].

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 15 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Obtained sgoals range = [15-15].

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Obtained sgoals range = [14-14].

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [14-14]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [14-14], problem number = 14, increment number = 38

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 14)
	('last_sgoals', 14)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 38, initial = False, final = False, sgoals = [14-14]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 38

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 38

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [14-14])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-19] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 38...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=38, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 38), range_=None), IncPart(name='plan_module', args=('#inc', 38, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 38, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 38, 14, 14, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0033980000000006783s

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032206s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007634s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB32DBA40>

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 38)', truth=True, inc_range=IncRange(start=38, end=39, step=1))

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 38). %* None *%
#program plan_module(#inc, 38, false, false). %* None *%
#program optimisation_module(#inc, 38, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 38, 14, 14, sequential, true). %* None *%

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     37 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('state_module', [Number(38), Number(38)]), ('plan_module', [Number(38), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(38), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(38), Number(38), Number(14), Number(14), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('state_module', [Number(39), Number(38)]), ('plan_module', [Number(39), Number(38), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(38), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(39), Number(38), Number(14), Number(14), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084410s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(14, 38)', truth=True, inc_range=IncRange(start=38, end=39, step=1)), conversion = current_last_sgoals(14,38).

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010477s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09488680000000116, Incremental time limit = None
Running cumulative time = 0.09488680000000116, Cumulative time limit = 3600

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.084410s, Cumulative Solving = 0.010477s, Cumulative Total = 0.094887s, Calls = 1
Final Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=38, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.08440960000000075, solving_time=0.010477200000000408, total_time=0.09488680000000116, clingo_stats={'problem': {'lp': {'atoms': 7666.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16601.0, 'bodies_tr': 16601.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 367.0, 'rules': 33824.0, 'rules_normal': 33481.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33820.0, 'rules_tr_normal': 33481.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10534.0, 'eqs_atom': 3171.0, 'eqs_body': 1056.0, 'eqs_other': 6307.0}, 'lpStep': {'atoms': 3789.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15425.0, 'bodies_tr': 15425.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 367.0, 'rules': 29638.0, 'rules_normal': 29295.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29634.0, 'rules_tr_normal': 29295.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4788.0, 'eqs_atom': 1084.0, 'eqs_body': 291.0, 'eqs_other': 3413.0}, 'generator': {'vars': 1674.0, 'vars_eliminated': 0.0, 'vars_frozen': 1072.0, 'constraints': 12.0, 'constraints_binary': 393.0, 'constraints_ternary': 25.0, 'acyc_edges': 0.0, 'complexity': 444.0}}, 'solving': {'solvers': {'choices': 128.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.0947723388671875, 'cpu': 0.09375, 'solve': 0.0039825439453125, 'unsat': 0.0, 'sat': 0.000965118408203125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.13862991333007812, 'cpu': 0.140625, 'solve': 0.009965896606445312, 'unsat': 0.0, 'sat': 0.001964569091796875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 128.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.08440960000000075, solving_time=0.010477200000000408, total_time=0.09488680000000116, clingo_stats={}))

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 14 was achieved successfully.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.084410s, Solving = 0.010477s, Total = 0.094887s

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.094887s because Manual generator exit.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.084410s, Cumulative Solving = 0.010477s, Cumulative Total = 0.094887s, Calls = 1
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71}}

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71}}

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])
(37, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 37}])
(38, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 38}])
(39, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'S': 39}])

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=38, plan_length=39, step_range=range(38, 40)

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=71 : level=2 len(self.__actions.get(level, []))=39 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=38, plan_length=39, step_range=range(38, 40)

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=71 : level=2 len(self.__actions.get(level, []))=39 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=38, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 39 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Obtained sgoals range = [39-39].

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [39-39]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [39-39], problem number = 39, increment number = 38

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 39)
	('last_sgoals', 39)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 71, initial = False, final = False, sgoals = [39-39]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 71

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 71

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [39-39])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-19] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 71...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=71, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 71), range_=None), IncPart(name='plan_module', args=('#inc', 71, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 71, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 71, 39, 39, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003192800000000773s

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025956s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006168s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB36404A0>

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(39, 71)', truth=True, inc_range=IncRange(start=71, end=72, step=1))

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 71). %* None *%
#program plan_module(#inc, 71, false, false). %* None *%
#program optimisation_module(#inc, 71, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 71, 39, 39, sequential, true). %* None *%

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     70 : Current =     72
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('state_module', [Number(71), Number(71)]), ('plan_module', [Number(71), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(71), Number(71), Number(39), Number(39), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('state_module', [Number(72), Number(71)]), ('plan_module', [Number(72), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(72), Number(71), Number(39), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129965s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(39, 71)', truth=True, inc_range=IncRange(start=71, end=72, step=1)), conversion = current_last_sgoals(39,71).

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015837s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14580150000000103, Incremental time limit = None
Running cumulative time = 0.14580150000000103, Cumulative time limit = 3600

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.129965s, Cumulative Solving = 0.015837s, Cumulative Total = 0.145802s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=71, end_step=73, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12996479999999977, solving_time=0.015836700000001258, total_time=0.14580150000000103, clingo_stats={'problem': {'lp': {'atoms': 11273.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28082.0, 'bodies_tr': 28082.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 40.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55737.0, 'rules_normal': 55172.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55733.0, 'rules_tr_normal': 55172.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20005.0, 'eqs_atom': 6365.0, 'eqs_body': 1835.0, 'eqs_other': 11805.0}, 'lpStep': {'atoms': 5631.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25479.0, 'bodies_tr': 25479.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 40.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49285.0, 'rules_normal': 48720.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49281.0, 'rules_tr_normal': 48720.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8231.0, 'eqs_atom': 2072.0, 'eqs_body': 326.0, 'eqs_other': 5833.0}, 'generator': {'vars': 2516.0, 'vars_eliminated': 0.0, 'vars_frozen': 1512.0, 'constraints': 15.0, 'constraints_binary': 453.0, 'constraints_ternary': 31.0, 'acyc_edges': 0.0, 'complexity': 517.0}}, 'solving': {'solvers': {'choices': 267.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 7.0, 'lemmas': 23.0, 'lits_learnt': 23.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 7.0, 'integrated_jumps': 59.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 7.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 7.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1456451416015625, 'cpu': 0.140625, 'solve': 0.005954742431640625, 'unsat': 0.0, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1815509796142578, 'cpu': 0.171875, 'solve': 0.009916305541992188, 'unsat': 0.0, 'sat': 0.0039310455322265625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 267.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 7.0, 'lemmas': 23.0, 'lits_learnt': 23.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 7.0, 'integrated_jumps': 59.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 7.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 7.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12996479999999977, solving_time=0.015836700000001258, total_time=0.14580150000000103, clingo_stats={}))

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 39 achieved.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 39 was achieved successfully.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.129965s, Solving = 0.015837s, Total = 0.145802s

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.145802s because Manual generator exit.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.129965s, Cumulative Solving = 0.015837s, Cumulative Total = 0.145802s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71}}

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72}}

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=71, plan_length=72, step_range=range(71, 73)

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=72 : level=2 len(self.__actions.get(level, []))=39 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Online planning increment 39 finished.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 39 : Achieved sgoals 14 : Unachieved sgoals 6
Level 1 : Total sgoals 0 : Achieved sgoals 39 : Unachieved sgoals 0

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 15 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 14 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Obtained sgoals range = [14-14].

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 16 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Obtained sgoals range = [16-16].

[13-08-2021_16-59-19] DEBUG :: core.Strategies >> Obtained sgoals range = [15-15].

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [15-15]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [15-15], problem number = 15, increment number = 39

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 15)
	('last_sgoals', 15)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 39, initial = False, final = False, sgoals = [15-15]

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 39

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 39

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [15-15])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-19] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 39...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=39, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 39), range_=None), IncPart(name='plan_module', args=('#inc', 39, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 39, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 39, 15, 15, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.002936399999999395s

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.023236s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004473s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB32FB860>

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 39)', truth=True, inc_range=IncRange(start=39, end=40, step=1))

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 39). %* None *%
#program plan_module(#inc, 39, false, false). %* None *%
#program optimisation_module(#inc, 39, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 39, 15, 15, sequential, true). %* None *%

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     38 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('state_module', [Number(39), Number(39)]), ('plan_module', [Number(39), Number(39), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(39), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(39), Number(39), Number(15), Number(15), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('state_module', [Number(40), Number(39)]), ('plan_module', [Number(40), Number(39), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(39), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(40), Number(39), Number(15), Number(15), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080730s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(15, 39)', truth=True, inc_range=IncRange(start=39, end=40, step=1)), conversion = current_last_sgoals(15,39).

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011812s.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09254210000000285, Incremental time limit = None
Running cumulative time = 0.09254210000000285, Cumulative time limit = 3600

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.080730s, Cumulative Solving = 0.011812s, Cumulative Total = 0.092542s, Calls = 1
Final Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=39, end_step=41, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.08072990000000146, solving_time=0.011812200000001383, total_time=0.09254210000000285, clingo_stats={'problem': {'lp': {'atoms': 7655.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16727.0, 'bodies_tr': 16727.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 30.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 375.0, 'rules': 33916.0, 'rules_normal': 33573.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33912.0, 'rules_tr_normal': 33573.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11695.0, 'eqs_atom': 3149.0, 'eqs_body': 1032.0, 'eqs_other': 7514.0}, 'lpStep': {'atoms': 3778.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15551.0, 'bodies_tr': 15551.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 30.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 375.0, 'rules': 29730.0, 'rules_normal': 29387.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29726.0, 'rules_tr_normal': 29387.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5949.0, 'eqs_atom': 1062.0, 'eqs_body': 267.0, 'eqs_other': 4620.0}, 'generator': {'vars': 1895.0, 'vars_eliminated': 0.0, 'vars_frozen': 1128.0, 'constraints': 10.0, 'constraints_binary': 306.0, 'constraints_ternary': 19.0, 'acyc_edges': 0.0, 'complexity': 345.0}}, 'solving': {'solvers': {'choices': 174.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 46.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09275245666503906, 'cpu': 0.078125, 'solve': 0.005985260009765625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12366867065429688, 'cpu': 0.109375, 'solve': 0.008974075317382812, 'unsat': 0.0, 'sat': 0.0029888153076171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 174.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 46.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.08072990000000146, solving_time=0.011812200000001383, total_time=0.09254210000000285, clingo_stats={}))

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 15 was achieved successfully.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.080730s, Solving = 0.011812s, Total = 0.092542s

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.092542s because Manual generator exit.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.080730s, Cumulative Solving = 0.011812s, Cumulative Total = 0.092542s, Calls = 1
Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-19] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72}}

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72}}

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])
(37, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 37}])
(38, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 38}])
(39, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'S': 39}])
(40, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'S': 40}])

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=39, plan_length=40, step_range=range(39, 41)

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=72 : level=2 len(self.__actions.get(level, []))=40 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=39, plan_length=40, step_range=range(39, 41)

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=72 : level=2 len(self.__actions.get(level, []))=40 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=39, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Getting sgoals range for problem number 40 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Obtained sgoals range = [40-40].

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [40-40]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [40-40], problem number = 40, increment number = 39

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 40)
	('last_sgoals', 40)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 72, initial = False, final = False, sgoals = [40-40]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 72

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 72

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [40-40])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-20] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 72...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=72, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 72), range_=None), IncPart(name='plan_module', args=('#inc', 72, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 72, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 72, 40, 40, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030391999999999086s

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027452s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006665s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB317A590>

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(40, 72)', truth=True, inc_range=IncRange(start=72, end=73, step=1))

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 72). %* None *%
#program plan_module(#inc, 72, false, false). %* None *%
#program optimisation_module(#inc, 72, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 72, 40, 40, sequential, true). %* None *%

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     71 : Current =     73
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('state_module', [Number(72), Number(72)]), ('plan_module', [Number(72), Number(72), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(72), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(72), Number(72), Number(40), Number(40), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('state_module', [Number(73), Number(72)]), ('plan_module', [Number(73), Number(72), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(72), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(73), Number(72), Number(40), Number(40), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138619s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(40, 72)', truth=True, inc_range=IncRange(start=72, end=73, step=1)), conversion = current_last_sgoals(40,72).

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012771s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15138999999999925, Incremental time limit = None
Running cumulative time = 0.15138999999999925, Cumulative time limit = 3600

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=72, end_step=74, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.13861929999999845, solving_time=0.0127707000000008, total_time=0.15138999999999925, clingo_stats={'problem': {'lp': {'atoms': 11262.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28281.0, 'bodies_tr': 28281.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 606.0, 'rules': 55864.0, 'rules_normal': 55299.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55860.0, 'rules_tr_normal': 55299.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21887.0, 'eqs_atom': 6354.0, 'eqs_body': 1811.0, 'eqs_other': 13722.0}, 'lpStep': {'atoms': 5620.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25678.0, 'bodies_tr': 25678.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 606.0, 'rules': 49412.0, 'rules_normal': 48847.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49408.0, 'rules_tr_normal': 48847.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10113.0, 'eqs_atom': 2061.0, 'eqs_body': 302.0, 'eqs_other': 7750.0}, 'generator': {'vars': 2741.0, 'vars_eliminated': 0.0, 'vars_frozen': 1556.0, 'constraints': 7.0, 'constraints_binary': 306.0, 'constraints_ternary': 21.0, 'acyc_edges': 0.0, 'complexity': 342.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 12.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1515941619873047, 'cpu': 0.140625, 'solve': 0.0019664764404296875, 'unsat': 0.0019664764404296875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18846702575683594, 'cpu': 0.171875, 'solve': 0.0059566497802734375, 'unsat': 0.0019664764404296875, 'sat': 0.0020084381103515625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 20.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13861929999999845, solving_time=0.0127707000000008, total_time=0.15138999999999925, clingo_stats={}))

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 74:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     73 : Current =     74
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(74)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('state_module', [Number(74), Number(72)]), ('plan_module', [Number(74), Number(72), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(72), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(74), Number(72), Number(40), Number(40), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.087593s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011178s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09877129999999923, Incremental time limit = None
Running cumulative time = 0.2501612999999985, Cumulative time limit = 3600

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.226212s, Cumulative Solving = 0.023949s, Cumulative Total = 0.250161s, Calls = 2
Final Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=74, end_step=75, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.08759279999999947, solving_time=0.011178499999999758, total_time=0.09877129999999923, clingo_stats={'problem': {'lp': {'atoms': 13068.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49620.0, 'bodies_tr': 49620.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 55.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 744.0, 'rules': 96982.0, 'rules_normal': 96209.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 96974.0, 'rules_tr_normal': 96209.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 25634.0, 'eqs_atom': 6857.0, 'eqs_body': 2209.0, 'eqs_other': 16568.0}, 'lpStep': {'atoms': 1806.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21339.0, 'bodies_tr': 21339.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41118.0, 'rules_normal': 40910.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41114.0, 'rules_tr_normal': 40910.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3747.0, 'eqs_atom': 503.0, 'eqs_body': 398.0, 'eqs_other': 2846.0}, 'generator': {'vars': 3132.0, 'vars_eliminated': 0.0, 'vars_frozen': 1852.0, 'constraints': 91.0, 'constraints_binary': 2005.0, 'constraints_ternary': 203.0, 'acyc_edges': 0.0, 'complexity': 2347.0}}, 'solving': {'solvers': {'choices': 312.0, 'conflicts': 26.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 47.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 38.0, 'integrated': 42.0, 'lemmas': 35.0, 'lits_learnt': 50.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 9.0, 'lemmas_other': 0.0, 'lits_conflict': 26.0, 'lits_loop': 24.0, 'lits_other': 0.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 0.0, 'levels': 26.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.09873008728027344, 'cpu': 0.09375, 'solve': 0.00595855712890625, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2871971130371094, 'cpu': 0.265625, 'solve': 0.011915206909179688, 'unsat': 0.0019664764404296875, 'sat': 0.0039768218994140625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 312.0, 'conflicts': 26.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 48.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 38.0, 'integrated': 42.0, 'lemmas': 43.0, 'lits_learnt': 58.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 17.0, 'lemmas_other': 0.0, 'lits_conflict': 26.0, 'lits_loop': 32.0, 'lits_other': 0.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 0.0, 'levels': 26.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.22621209999999792, solving_time=0.02394920000000056, total_time=0.2501612999999985, clingo_stats={}))

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 40 achieved.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 40 was achieved successfully.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.138619s, Solving = 0.012771s, Total = 0.151390s
2 : Statistics :: Grounding = 0.087593s, Solving = 0.011178s, Total = 0.098771s

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.250161s because Manual generator exit.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.226212s, Cumulative Solving = 0.023949s, Cumulative Total = 0.250161s, Calls = 2
Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72}}

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74}}

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])
(73, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 73}])
(74, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 74}])

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=72, plan_length=74, step_range=range(72, 75)

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=74 : level=2 len(self.__actions.get(level, []))=40 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Online planning increment 40 finished.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 40 : Achieved sgoals 15 : Unachieved sgoals 5
Level 1 : Total sgoals 0 : Achieved sgoals 40 : Unachieved sgoals 0

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Getting sgoals range for problem number 16 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Getting sgoals range for problem number 15 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Obtained sgoals range = [15-15].

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Getting sgoals range for problem number 17 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Obtained sgoals range = [17-17].

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Obtained sgoals range = [16-16].

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [16-16]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [16-16], problem number = 16, increment number = 40

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 16)
	('last_sgoals', 16)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 40, initial = False, final = False, sgoals = [16-16]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 40

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 40

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [16-16])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-20] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 40...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=40, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 40), range_=None), IncPart(name='plan_module', args=('#inc', 40, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 40, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 40, 16, 16, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0033343999999999596s

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021787s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005107s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB33970E0>

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 40)', truth=True, inc_range=IncRange(start=40, end=41, step=1))

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 40). %* None *%
#program plan_module(#inc, 40, false, false). %* None *%
#program optimisation_module(#inc, 40, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 40, 16, 16, sequential, true). %* None *%

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     39 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('state_module', [Number(40), Number(40)]), ('plan_module', [Number(40), Number(40), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(40), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(40), Number(40), Number(16), Number(16), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('state_module', [Number(41), Number(40)]), ('plan_module', [Number(41), Number(40), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(40), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(41), Number(40), Number(16), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.075505s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(16, 40)', truth=True, inc_range=IncRange(start=40, end=41, step=1)), conversion = current_last_sgoals(16,40).

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012287s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.08779149999999802, Incremental time limit = None
Running cumulative time = 0.08779149999999802, Cumulative time limit = 3600

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.075505s, Cumulative Solving = 0.012287s, Cumulative Total = 0.087791s, Calls = 1
Final Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=40, end_step=42, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.07550489999999854, solving_time=0.012286599999999481, total_time=0.08779149999999802, clingo_stats={'problem': {'lp': {'atoms': 7666.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16602.0, 'bodies_tr': 16602.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 367.0, 'rules': 33825.0, 'rules_normal': 33482.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33821.0, 'rules_tr_normal': 33482.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11612.0, 'eqs_atom': 3171.0, 'eqs_body': 1052.0, 'eqs_other': 7389.0}, 'lpStep': {'atoms': 3789.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15426.0, 'bodies_tr': 15426.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 28.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 367.0, 'rules': 29639.0, 'rules_normal': 29296.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29635.0, 'rules_tr_normal': 29296.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5866.0, 'eqs_atom': 1084.0, 'eqs_body': 287.0, 'eqs_other': 4495.0}, 'generator': {'vars': 1704.0, 'vars_eliminated': 0.0, 'vars_frozen': 1082.0, 'constraints': 12.0, 'constraints_binary': 329.0, 'constraints_ternary': 21.0, 'acyc_edges': 0.0, 'complexity': 376.0}}, 'solving': {'solvers': {'choices': 152.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 6.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 6.0, 'integrated_jumps': 24.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 6.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 6.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08779716491699219, 'cpu': 0.09375, 'solve': 0.005985260009765625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.11874771118164062, 'cpu': 0.125, 'solve': 0.010036468505859375, 'unsat': 0.0, 'sat': 0.0040493011474609375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 152.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 6.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 6.0, 'integrated_jumps': 24.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 6.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 6.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07550489999999854, solving_time=0.012286599999999481, total_time=0.08779149999999802, clingo_stats={}))

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 16 was achieved successfully.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.075505s, Solving = 0.012287s, Total = 0.087791s

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.087791s because Manual generator exit.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.075505s, Cumulative Solving = 0.012287s, Cumulative Total = 0.087791s, Calls = 1
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74}}

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74}}

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])
(37, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 37}])
(38, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 38}])
(39, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'S': 39}])
(40, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'S': 40}])
(41, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'S': 41}])

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=40, plan_length=41, step_range=range(40, 42)

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=74 : level=2 len(self.__actions.get(level, []))=41 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=40, plan_length=41, step_range=range(40, 42)

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=74 : level=2 len(self.__actions.get(level, []))=41 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=40, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Getting sgoals range for problem number 41 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-20] DEBUG :: core.Strategies >> Obtained sgoals range = [41-41].

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [41-41]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [41-41], problem number = 41, increment number = 40

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 41)
	('last_sgoals', 41)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 74, initial = False, final = False, sgoals = [41-41]

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 74

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 74

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [41-41])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-20] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 74...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=74, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 74), range_=None), IncPart(name='plan_module', args=('#inc', 74, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 74, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 74, 41, 41, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030294000000026244s

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026985s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006283s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3362540>

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(41, 74)', truth=True, inc_range=IncRange(start=74, end=75, step=1))

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 74). %* None *%
#program plan_module(#inc, 74, false, false). %* None *%
#program optimisation_module(#inc, 74, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 74, 41, 41, sequential, true). %* None *%

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     73 : Current =     75
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(75)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('state_module', [Number(74), Number(74)]), ('plan_module', [Number(74), Number(74), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(74), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(74), Number(74), Number(41), Number(41), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('state_module', [Number(75), Number(74)]), ('plan_module', [Number(75), Number(74), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(74), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(75), Number(74), Number(41), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121975s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(41, 74)', truth=True, inc_range=IncRange(start=74, end=75, step=1)), conversion = current_last_sgoals(41,74).

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016523s.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13849860000000191, Incremental time limit = None
Running cumulative time = 0.13849860000000191, Cumulative time limit = 3600

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.121975s, Cumulative Solving = 0.016523s, Cumulative Total = 0.138499s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=74, end_step=76, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12197540000000018, solving_time=0.016523200000001736, total_time=0.13849860000000191, clingo_stats={'problem': {'lp': {'atoms': 11273.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28083.0, 'bodies_tr': 28083.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 55738.0, 'rules_normal': 55173.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55734.0, 'rules_tr_normal': 55173.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21773.0, 'eqs_atom': 6365.0, 'eqs_body': 1831.0, 'eqs_other': 13577.0}, 'lpStep': {'atoms': 5631.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25480.0, 'bodies_tr': 25480.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49286.0, 'rules_normal': 48721.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 49282.0, 'rules_tr_normal': 48721.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9999.0, 'eqs_atom': 2072.0, 'eqs_body': 322.0, 'eqs_other': 7605.0}, 'generator': {'vars': 2546.0, 'vars_eliminated': 0.0, 'vars_frozen': 1522.0, 'constraints': 15.0, 'constraints_binary': 407.0, 'constraints_ternary': 25.0, 'acyc_edges': 0.0, 'complexity': 465.0}}, 'solving': {'solvers': {'choices': 245.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 28.0, 'lemmas': 44.0, 'lits_learnt': 44.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 28.0, 'integrated_jumps': 37.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 28.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 28.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1386280059814453, 'cpu': 0.171875, 'solve': 0.0059566497802734375, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1755352020263672, 'cpu': 0.21875, 'solve': 0.009916305541992188, 'unsat': 0.0, 'sat': 0.003932952880859375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 245.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 28.0, 'lemmas': 44.0, 'lits_learnt': 44.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 28.0, 'integrated_jumps': 37.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 28.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 28.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12197540000000018, solving_time=0.016523200000001736, total_time=0.13849860000000191, clingo_stats={}))

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 41 achieved.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 41 was achieved successfully.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.121975s, Solving = 0.016523s, Total = 0.138499s

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.138499s because Manual generator exit.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.121975s, Cumulative Solving = 0.016523s, Cumulative Total = 0.138499s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-20] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74}}

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75}}

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])
(73, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 73}])
(74, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 74}])
(75, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 75}])

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=74, plan_length=75, step_range=range(74, 76)

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=75 : level=2 len(self.__actions.get(level, []))=41 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Online planning increment 41 finished.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 41 : Achieved sgoals 16 : Unachieved sgoals 4
Level 1 : Total sgoals 0 : Achieved sgoals 41 : Unachieved sgoals 0

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Getting sgoals range for problem number 17 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Getting sgoals range for problem number 16 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Obtained sgoals range = [16-16].

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Getting sgoals range for problem number 18 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Obtained sgoals range = [18-18].

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Obtained sgoals range = [17-17].

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [17-17]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [17-17], problem number = 17, increment number = 41

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 17)
	('last_sgoals', 17)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 41, initial = False, final = False, sgoals = [17-17]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 41

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 41

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [17-17])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-21] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 41...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=41, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 41), range_=None), IncPart(name='plan_module', args=('#inc', 41, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 41, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 41, 17, 17, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003084699999998719s

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.023530s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005788s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB33D0BD0>

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 41)', truth=True, inc_range=IncRange(start=41, end=42, step=1))

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 41). %* None *%
#program plan_module(#inc, 41, false, false). %* None *%
#program optimisation_module(#inc, 41, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 41, 17, 17, sequential, true). %* None *%

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     40 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('state_module', [Number(41), Number(41)]), ('plan_module', [Number(41), Number(41), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(41), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(41), Number(41), Number(17), Number(17), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('state_module', [Number(42), Number(41)]), ('plan_module', [Number(42), Number(41), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(41), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(42), Number(41), Number(17), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105001s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(17, 41)', truth=True, inc_range=IncRange(start=41, end=42, step=1)), conversion = current_last_sgoals(17,41).

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017834s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12283500000000203, Incremental time limit = None
Running cumulative time = 0.12283500000000203, Cumulative time limit = 3600

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.105001s, Cumulative Solving = 0.017834s, Cumulative Total = 0.122835s, Calls = 1
Final Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=41, end_step=43, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.10500060000000033, solving_time=0.017834400000001693, total_time=0.12283500000000203, clingo_stats={'problem': {'lp': {'atoms': 7672.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16317.0, 'bodies_tr': 16317.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 303.0, 'rules': 33563.0, 'rules_normal': 33220.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33559.0, 'rules_tr_normal': 33220.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 12292.0, 'eqs_atom': 3176.0, 'eqs_body': 1082.0, 'eqs_other': 8034.0}, 'lpStep': {'atoms': 3795.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15141.0, 'bodies_tr': 15141.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 303.0, 'rules': 29377.0, 'rules_normal': 29034.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29373.0, 'rules_tr_normal': 29034.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6546.0, 'eqs_atom': 1089.0, 'eqs_body': 317.0, 'eqs_other': 5140.0}, 'generator': {'vars': 1342.0, 'vars_eliminated': 0.0, 'vars_frozen': 936.0, 'constraints': 12.0, 'constraints_binary': 303.0, 'constraints_ternary': 17.0, 'acyc_edges': 0.0, 'complexity': 346.0}}, 'solving': {'solvers': {'choices': 175.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.12323951721191406, 'cpu': 0.109375, 'solve': 0.0059871673583984375, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.15614891052246094, 'cpu': 0.140625, 'solve': 0.0109710693359375, 'unsat': 0.0, 'sat': 0.00395965576171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 175.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.10500060000000033, solving_time=0.017834400000001693, total_time=0.12283500000000203, clingo_stats={}))

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.105001s, Solving = 0.017834s, Total = 0.122835s

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.122835s because Manual generator exit.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.105001s, Cumulative Solving = 0.017834s, Cumulative Total = 0.122835s, Calls = 1
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75}}

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75}}

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])
(37, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 37}])
(38, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 38}])
(39, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'S': 39}])
(40, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'S': 40}])
(41, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'S': 41}])
(42, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'S': 42}])

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=41, plan_length=42, step_range=range(41, 43)

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=75 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=41, plan_length=42, step_range=range(41, 43)

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=75 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=41, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Getting sgoals range for problem number 42 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Obtained sgoals range = [42-42].

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [42-42]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [42-42], problem number = 42, increment number = 41

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 42)
	('last_sgoals', 42)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 75, initial = False, final = False, sgoals = [42-42]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 75

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 75

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [42-42])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-21] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 75...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=75, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 75), range_=None), IncPart(name='plan_module', args=('#inc', 75, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 75, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 75, 42, 42, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0031398000000031345s

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.030404s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020077s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB326A5E0>

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(42, 75)', truth=True, inc_range=IncRange(start=75, end=76, step=1))

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 75). %* None *%
#program plan_module(#inc, 75, false, false). %* None *%
#program optimisation_module(#inc, 75, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 75, 42, 42, sequential, true). %* None *%

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     74 : Current =     76
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(76)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('state_module', [Number(75), Number(75)]), ('plan_module', [Number(75), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(75), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(75), Number(75), Number(42), Number(42), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('state_module', [Number(76), Number(75)]), ('plan_module', [Number(76), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(76), Number(75), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(76), Number(75), Number(42), Number(42), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.126812s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(42, 75)', truth=True, inc_range=IncRange(start=75, end=76, step=1)), conversion = current_last_sgoals(42,75).

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025064s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15187579999999912, Incremental time limit = None
Running cumulative time = 0.15187579999999912, Cumulative time limit = 3600

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.126812s, Cumulative Solving = 0.025064s, Cumulative Total = 0.151876s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=75, end_step=77, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12681200000000104, solving_time=0.025063799999998082, total_time=0.15187579999999912, clingo_stats={'problem': {'lp': {'atoms': 11279.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27591.0, 'bodies_tr': 27591.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 534.0, 'rules': 55272.0, 'rules_normal': 54707.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55268.0, 'rules_tr_normal': 54707.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23051.0, 'eqs_atom': 6389.0, 'eqs_body': 1866.0, 'eqs_other': 14796.0}, 'lpStep': {'atoms': 5637.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24988.0, 'bodies_tr': 24988.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 534.0, 'rules': 48820.0, 'rules_normal': 48255.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 48816.0, 'rules_tr_normal': 48255.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11277.0, 'eqs_atom': 2096.0, 'eqs_body': 357.0, 'eqs_other': 8824.0}, 'generator': {'vars': 2128.0, 'vars_eliminated': 0.0, 'vars_frozen': 1402.0, 'constraints': 15.0, 'constraints_binary': 393.0, 'constraints_ternary': 23.0, 'acyc_edges': 0.0, 'complexity': 449.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1516246795654297, 'cpu': 0.140625, 'solve': 0.008977890014648438, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.20548057556152344, 'cpu': 0.1875, 'solve': 0.026956558227539062, 'unsat': 0.0, 'sat': 0.0039768218994140625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12681200000000104, solving_time=0.025063799999998082, total_time=0.15187579999999912, clingo_stats={}))

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 42 achieved.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 42 was achieved successfully.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.126812s, Solving = 0.025064s, Total = 0.151876s

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.151876s because Manual generator exit.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.126812s, Cumulative Solving = 0.025064s, Cumulative Total = 0.151876s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75}}

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76}}

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])
(73, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 73}])
(74, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 74}])
(75, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 75}])
(76, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 76}])

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=75, plan_length=76, step_range=range(75, 77)

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=76 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Online planning increment 42 finished.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 42 : Achieved sgoals 17 : Unachieved sgoals 3
Level 1 : Total sgoals 0 : Achieved sgoals 42 : Unachieved sgoals 0

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Getting sgoals range for problem number 18 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Getting sgoals range for problem number 17 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Obtained sgoals range = [17-17].

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Getting sgoals range for problem number 19 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Obtained sgoals range = [19-19].

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Obtained sgoals range = [18-18].

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-18]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [18-18], problem number = 18, increment number = 42

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 18)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 42, initial = False, final = False, sgoals = [18-18]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 42

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 42

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [18-18])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-21] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 42...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=42, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 42), range_=None), IncPart(name='plan_module', args=('#inc', 42, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 42, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 42, 18, 18, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0029690000000002215s

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021601s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005312s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3D1E950>

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 42)', truth=True, inc_range=IncRange(start=42, end=43, step=1))

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 42). %* None *%
#program plan_module(#inc, 42, false, false). %* None *%
#program optimisation_module(#inc, 42, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 42, 18, 18, sequential, true). %* None *%

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     41 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('state_module', [Number(42), Number(42)]), ('plan_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(42), Number(42), Number(18), Number(18), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('state_module', [Number(43), Number(42)]), ('plan_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(43), Number(42), Number(18), Number(18), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079949s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(18, 42)', truth=True, inc_range=IncRange(start=42, end=43, step=1)), conversion = current_last_sgoals(18,42).

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010730s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09067920000000029, Incremental time limit = None
Running cumulative time = 0.09067920000000029, Cumulative time limit = 3600

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.079949s, Cumulative Solving = 0.010730s, Cumulative Total = 0.090679s, Calls = 1
Final Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=42, end_step=44, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.0799492000000015, solving_time=0.010729999999998796, total_time=0.09067920000000029, clingo_stats={'problem': {'lp': {'atoms': 7661.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16437.0, 'bodies_tr': 16437.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 30.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 319.0, 'rules': 33649.0, 'rules_normal': 33306.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33645.0, 'rules_tr_normal': 33306.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11446.0, 'eqs_atom': 3148.0, 'eqs_body': 1061.0, 'eqs_other': 7237.0}, 'lpStep': {'atoms': 3784.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15261.0, 'bodies_tr': 15261.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 30.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 319.0, 'rules': 29463.0, 'rules_normal': 29120.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29459.0, 'rules_tr_normal': 29120.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5700.0, 'eqs_atom': 1061.0, 'eqs_body': 296.0, 'eqs_other': 4343.0}, 'generator': {'vars': 1635.0, 'vars_eliminated': 0.0, 'vars_frozen': 1026.0, 'constraints': 10.0, 'constraints_binary': 263.0, 'constraints_ternary': 16.0, 'acyc_edges': 0.0, 'complexity': 299.0}}, 'solving': {'solvers': {'choices': 178.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 50.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09075927734375, 'cpu': 0.09375, 'solve': 0.0049610137939453125, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12067794799804688, 'cpu': 0.125, 'solve': 0.008939743041992188, 'unsat': 0.0, 'sat': 0.003932952880859375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 178.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 22.0, 'lits_learnt': 22.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 50.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 12.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 12.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.0799492000000015, solving_time=0.010729999999998796, total_time=0.09067920000000029, clingo_stats={}))

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 18 was achieved successfully.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.079949s, Solving = 0.010730s, Total = 0.090679s

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.090679s because Manual generator exit.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.079949s, Cumulative Solving = 0.010730s, Cumulative Total = 0.090679s, Calls = 1
Model :: Total atoms = 3475, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76}}

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76}}

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])
(37, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 37}])
(38, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 38}])
(39, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'S': 39}])
(40, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'S': 40}])
(41, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'S': 41}])
(42, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'S': 42}])
(43, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'S': 43}])

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=42, plan_length=43, step_range=range(42, 44)

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=76 : level=2 len(self.__actions.get(level, []))=43 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=42, plan_length=43, step_range=range(42, 44)

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=76 : level=2 len(self.__actions.get(level, []))=43 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=42, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Getting sgoals range for problem number 43 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-21] DEBUG :: core.Strategies >> Obtained sgoals range = [43-43].

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [43-43]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [43-43], problem number = 43, increment number = 42

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 43)
	('last_sgoals', 43)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 76, initial = False, final = False, sgoals = [43-43]

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 76

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 76

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [43-43])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-21] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-21] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 76...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=76, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 76), range_=None), IncPart(name='plan_module', args=('#inc', 76, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 76, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 76, 43, 43, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003670600000003077s

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025736s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006086s.

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB33C89F0>

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(43, 76)', truth=True, inc_range=IncRange(start=76, end=77, step=1))

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 76). %* None *%
#program plan_module(#inc, 76, false, false). %* None *%
#program optimisation_module(#inc, 76, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 76, 43, 43, sequential, true). %* None *%

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     75 : Current =     77
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(77)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('state_module', [Number(76), Number(76)]), ('plan_module', [Number(76), Number(76), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(76), Number(76), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(76), Number(76), Number(43), Number(43), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('state_module', [Number(77), Number(76)]), ('plan_module', [Number(77), Number(76), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(77), Number(76), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(77), Number(76), Number(43), Number(43), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121836s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(43, 76)', truth=True, inc_range=IncRange(start=76, end=77, step=1)), conversion = current_last_sgoals(43,76).

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012014s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13384970000000251, Incremental time limit = None
Running cumulative time = 0.13384970000000251, Cumulative time limit = 3600

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=76, end_step=78, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.12183560000000071, solving_time=0.012014100000001804, total_time=0.13384970000000251, clingo_stats={'problem': {'lp': {'atoms': 11268.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27774.0, 'bodies_tr': 27774.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 550.0, 'rules': 55383.0, 'rules_normal': 54818.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55379.0, 'rules_tr_normal': 54818.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21585.0, 'eqs_atom': 6372.0, 'eqs_body': 1845.0, 'eqs_other': 13368.0}, 'lpStep': {'atoms': 5626.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25171.0, 'bodies_tr': 25171.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 550.0, 'rules': 48931.0, 'rules_normal': 48366.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 48927.0, 'rules_tr_normal': 48366.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9811.0, 'eqs_atom': 2079.0, 'eqs_body': 336.0, 'eqs_other': 7396.0}, 'generator': {'vars': 2425.0, 'vars_eliminated': 0.0, 'vars_frozen': 1480.0, 'constraints': 7.0, 'constraints_binary': 290.0, 'constraints_ternary': 18.0, 'acyc_edges': 0.0, 'complexity': 323.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 12.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.13463973999023438, 'cpu': 0.140625, 'solve': 0.001964569091796875, 'unsat': 0.001964569091796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1715526580810547, 'cpu': 0.171875, 'solve': 0.006931304931640625, 'unsat': 0.001964569091796875, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 20.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12183560000000071, solving_time=0.012014100000001804, total_time=0.13384970000000251, clingo_stats={}))

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 78:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     77 : Current =     78
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(78)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('state_module', [Number(78), Number(76)]), ('plan_module', [Number(78), Number(76), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(78), Number(76), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(78), Number(76), Number(43), Number(43), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084660s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011071s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09573139999999825, Incremental time limit = None
Running cumulative time = 0.22958110000000076, Cumulative time limit = 3600

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.206496s, Cumulative Solving = 0.023085s, Cumulative Total = 0.229581s, Calls = 2
Final Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=78, end_step=79, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.08466029999999947, solving_time=0.01107109999999878, total_time=0.09573139999999825, clingo_stats={'problem': {'lp': {'atoms': 13074.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49103.0, 'bodies_tr': 49103.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 55.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 688.0, 'rules': 96493.0, 'rules_normal': 95720.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 96485.0, 'rules_tr_normal': 95720.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 25215.0, 'eqs_atom': 6869.0, 'eqs_body': 2219.0, 'eqs_other': 16127.0}, 'lpStep': {'atoms': 1806.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21329.0, 'bodies_tr': 21329.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41110.0, 'rules_normal': 40902.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41106.0, 'rules_tr_normal': 40902.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3630.0, 'eqs_atom': 497.0, 'eqs_body': 374.0, 'eqs_other': 2759.0}, 'generator': {'vars': 2800.0, 'vars_eliminated': 0.0, 'vars_frozen': 1763.0, 'constraints': 91.0, 'constraints_binary': 1882.0, 'constraints_ternary': 200.0, 'acyc_edges': 0.0, 'complexity': 2221.0}}, 'solving': {'solvers': {'choices': 312.0, 'conflicts': 26.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 47.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 38.0, 'integrated': 40.0, 'lemmas': 35.0, 'lits_learnt': 50.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 9.0, 'lemmas_other': 0.0, 'lits_conflict': 26.0, 'lits_loop': 24.0, 'lits_other': 0.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 0.0, 'levels': 26.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09633445739746094, 'cpu': 0.09375, 'solve': 0.0059814453125, 'unsat': 0.0, 'sat': 0.0019702911376953125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2678871154785156, 'cpu': 0.265625, 'solve': 0.012912750244140625, 'unsat': 0.001964569091796875, 'sat': 0.0039348602294921875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 312.0, 'conflicts': 26.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 48.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 38.0, 'integrated': 40.0, 'lemmas': 43.0, 'lits_learnt': 58.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 17.0, 'lemmas_other': 0.0, 'lits_conflict': 26.0, 'lits_loop': 32.0, 'lits_other': 0.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 0.0, 'levels': 26.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.20649590000000018, solving_time=0.023085200000000583, total_time=0.22958110000000076, clingo_stats={}))

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 43 achieved.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 43 was achieved successfully.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.121836s, Solving = 0.012014s, Total = 0.133850s
2 : Statistics :: Grounding = 0.084660s, Solving = 0.011071s, Total = 0.095731s

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.229581s because Manual generator exit.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.206496s, Cumulative Solving = 0.023085s, Cumulative Total = 0.229581s, Calls = 2
Model :: Total atoms = 4566, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76}}

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78}}

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])
(73, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 73}])
(74, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 74}])
(75, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 75}])
(76, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 76}])
(77, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 77}])
(78, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 78}])

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=76, plan_length=78, step_range=range(76, 79)

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=78 : level=2 len(self.__actions.get(level, []))=43 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Online planning increment 43 finished.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 43 : Achieved sgoals 18 : Unachieved sgoals 2
Level 1 : Total sgoals 0 : Achieved sgoals 43 : Unachieved sgoals 0

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Getting sgoals range for problem number 19 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Getting sgoals range for problem number 18 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Obtained sgoals range = [18-18].

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Getting sgoals range for problem number 20 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Obtained sgoals range = [20-20].

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Obtained sgoals range = [19-19].

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [19-19]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [19-19], problem number = 19, increment number = 43

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 19)
	('last_sgoals', 19)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 43, initial = False, final = False, sgoals = [19-19]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 43

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 43

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [19-19])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-22] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 43...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=43, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 43), range_=None), IncPart(name='plan_module', args=('#inc', 43, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 43, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 43, 19, 19, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004589599999999194s

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026429s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005364s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3D34310>

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 43)', truth=True, inc_range=IncRange(start=43, end=44, step=1))

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 43). %* None *%
#program plan_module(#inc, 43, false, false). %* None *%
#program optimisation_module(#inc, 43, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 43, 19, 19, sequential, true). %* None *%

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     42 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('state_module', [Number(43), Number(43)]), ('plan_module', [Number(43), Number(43), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(43), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(43), Number(43), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('state_module', [Number(44), Number(43)]), ('plan_module', [Number(44), Number(43), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(43), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(44), Number(43), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079056s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(19, 43)', truth=True, inc_range=IncRange(start=43, end=44, step=1)), conversion = current_last_sgoals(19,43).

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010762s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.08981759999999994, Incremental time limit = None
Running cumulative time = 0.08981759999999994, Cumulative time limit = 3600

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.079056s, Cumulative Solving = 0.010762s, Cumulative Total = 0.089818s, Calls = 1
Final Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=43, end_step=45, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.07905609999999896, solving_time=0.010761500000000979, total_time=0.08981759999999994, clingo_stats={'problem': {'lp': {'atoms': 7672.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16318.0, 'bodies_tr': 16318.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 303.0, 'rules': 33564.0, 'rules_normal': 33221.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33560.0, 'rules_tr_normal': 33221.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 12308.0, 'eqs_atom': 3174.0, 'eqs_body': 1079.0, 'eqs_other': 8055.0}, 'lpStep': {'atoms': 3795.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15142.0, 'bodies_tr': 15142.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 231.0, 'count_bodies_tr': 231.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 303.0, 'rules': 29378.0, 'rules_normal': 29035.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29374.0, 'rules_tr_normal': 29035.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6562.0, 'eqs_atom': 1087.0, 'eqs_body': 314.0, 'eqs_other': 5161.0}, 'generator': {'vars': 1332.0, 'vars_eliminated': 0.0, 'vars_frozen': 934.0, 'constraints': 12.0, 'constraints_binary': 280.0, 'constraints_ternary': 19.0, 'acyc_edges': 0.0, 'complexity': 325.0}}, 'solving': {'solvers': {'choices': 128.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.08978843688964844, 'cpu': 0.09375, 'solve': 0.0049877166748046875, 'unsat': 0.0, 'sat': 0.0019702911376953125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12765884399414062, 'cpu': 0.140625, 'solve': 0.009944915771484375, 'unsat': 0.0, 'sat': 0.0039386749267578125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 128.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07905609999999896, solving_time=0.010761500000000979, total_time=0.08981759999999994, clingo_stats={}))

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 19 was achieved successfully.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.079056s, Solving = 0.010762s, Total = 0.089818s

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.089818s because Manual generator exit.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.079056s, Cumulative Solving = 0.010762s, Cumulative Total = 0.089818s, Calls = 1
Model :: Total atoms = 3486, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78}}

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78}}

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])
(37, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 37}])
(38, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 38}])
(39, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'S': 39}])
(40, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'S': 40}])
(41, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'S': 41}])
(42, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'S': 42}])
(43, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'S': 43}])
(44, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'S': 44}])

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=43, plan_length=44, step_range=range(43, 45)

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=78 : level=2 len(self.__actions.get(level, []))=44 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=43, plan_length=44, step_range=range(43, 45)

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=78 : level=2 len(self.__actions.get(level, []))=44 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00.

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> plan_length=1, true_size_bound=1, partial_problems=1

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=1, plan_length=1, start_step=43, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Division points generated:
[]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Getting sgoals range for problem number 44 from scenario:
Divided plan : Level = 2, Length = 1, Actions = 1, Refined = True, Expansion = 1.00, Deviation = 0.00
Division points [total=0] : []

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Obtained sgoals range = [44-44].

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [44-44]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [44-44], problem number = 44, increment number = 43

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 44)
	('last_sgoals', 44)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 78, initial = False, final = False, sgoals = [44-44]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 78

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 78

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [44-44])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-22] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 78...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=78, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 78), range_=None), IncPart(name='plan_module', args=('#inc', 78, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 78, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 78, 44, 44, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00306049999999658s

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027236s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006185s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3D1E4A0>

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(44, 78)', truth=True, inc_range=IncRange(start=78, end=79, step=1))

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 78). %* None *%
#program plan_module(#inc, 78, false, false). %* None *%
#program optimisation_module(#inc, 78, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 78, 44, 44, sequential, true). %* None *%

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     77 : Current =     79
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(79)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('state_module', [Number(78), Number(78)]), ('plan_module', [Number(78), Number(78), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(78), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(78), Number(78), Number(44), Number(44), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('state_module', [Number(79), Number(78)]), ('plan_module', [Number(79), Number(78), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(79), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(79), Number(78), Number(44), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137452s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(44, 78)', truth=True, inc_range=IncRange(start=78, end=79, step=1)), conversion = current_last_sgoals(44,78).

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019238s.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15668989999999994, Incremental time limit = None
Running cumulative time = 0.15668989999999994, Cumulative time limit = 3600

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.137452s, Cumulative Solving = 0.019238s, Cumulative Total = 0.156690s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=78, end_step=80, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.13745229999999964, solving_time=0.0192376000000003, total_time=0.15668989999999994, clingo_stats={'problem': {'lp': {'atoms': 11279.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27592.0, 'bodies_tr': 27592.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 534.0, 'rules': 55273.0, 'rules_normal': 54708.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 55269.0, 'rules_tr_normal': 54708.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23067.0, 'eqs_atom': 6387.0, 'eqs_body': 1863.0, 'eqs_other': 14817.0}, 'lpStep': {'atoms': 5637.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24989.0, 'bodies_tr': 24989.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 534.0, 'rules': 48821.0, 'rules_normal': 48256.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 48817.0, 'rules_tr_normal': 48256.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11293.0, 'eqs_atom': 2094.0, 'eqs_body': 354.0, 'eqs_other': 8845.0}, 'generator': {'vars': 2118.0, 'vars_eliminated': 0.0, 'vars_frozen': 1400.0, 'constraints': 15.0, 'constraints_binary': 380.0, 'constraints_ternary': 23.0, 'acyc_edges': 0.0, 'complexity': 436.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.1568889617919922, 'cpu': 0.15625, 'solve': 0.006954193115234375, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.19335174560546875, 'cpu': 0.1875, 'solve': 0.010965347290039062, 'unsat': 0.0, 'sat': 0.0039768218994140625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 16.0, 'lits_learnt': 16.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13745229999999964, solving_time=0.0192376000000003, total_time=0.15668989999999994, clingo_stats={}))

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 44 achieved.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 44 was achieved successfully.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.137452s, Solving = 0.019238s, Total = 0.156690s

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.156690s because Manual generator exit.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.137452s, Cumulative Solving = 0.019238s, Cumulative Total = 0.156690s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78}}

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79}}

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])
(73, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 73}])
(74, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 74}])
(75, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 75}])
(76, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 76}])
(77, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 77}])
(78, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 78}])
(79, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'S': 79}])

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=78, plan_length=79, step_range=range(78, 80)

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=79 : level=2 len(self.__actions.get(level, []))=44 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Online planning increment 44 finished.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 44 : Achieved sgoals 19 : Unachieved sgoals 1
Level 1 : Total sgoals 0 : Achieved sgoals 44 : Unachieved sgoals 0

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 2:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Getting sgoals range for problem number 20 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Getting sgoals range for problem number 19 from scenario:
Divided plan : Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00
Division points [total=19] : [(Index = 1, Blend = (Left = 0, Right = 0)), (Index = 2, Blend = (Left = 0, Right = 0)), (Index = 3, Blend = (Left = 0, Right = 0)), (Index = 4, Blend = (Left = 0, Right = 0)), (Index = 5, Blend = (Left = 0, Right = 0)), (Index = 6, Blend = (Left = 0, Right = 0)), (Index = 7, Blend = (Left = 0, Right = 0)), (Index = 8, Blend = (Left = 0, Right = 0)), (Index = 9, Blend = (Left = 0, Right = 0)), (Index = 10, Blend = (Left = 0, Right = 0)), (Index = 11, Blend = (Left = 0, Right = 0)), (Index = 12, Blend = (Left = 0, Right = 0)), (Index = 13, Blend = (Left = 0, Right = 0)), (Index = 14, Blend = (Left = 0, Right = 0)), (Index = 15, Blend = (Left = 0, Right = 0)), (Index = 16, Blend = (Left = 0, Right = 0)), (Index = 17, Blend = (Left = 0, Right = 0)), (Index = 18, Blend = (Left = 0, Right = 0)), (Index = 19, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Obtained sgoals range = [19-19].

[13-08-2021_16-59-22] DEBUG :: core.Strategies >> Obtained sgoals range = [20-20].

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [20-20]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [20-20], problem number = 20, increment number = 44

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 20)
	('last_sgoals', 20)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 44, initial = False, final = True, sgoals = [20-20]

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 44

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 44

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 2
Planning mode = (conformance, achievement = sequential, sgoals = [20-20])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-22] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-22] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 44...

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=44, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 44), range_=None), IncPart(name='plan_module', args=('#inc', 44, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 44, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 44, 20, 20, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 520 rules

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0030672000000002697s

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[2, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021269s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2092, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005400s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3D626D0>

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 44)', truth=True, inc_range=IncRange(start=44, end=45, step=1))

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 44). %* None *%
#program plan_module(#inc, 44, false, false). %* None *%
#program optimisation_module(#inc, 44, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 44, 20, 20, sequential, true). %* None *%

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     43 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('state_module', [Number(44), Number(44)]), ('plan_module', [Number(44), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(44), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(44), Number(44), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('state_module', [Number(45), Number(44)]), ('plan_module', [Number(45), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(44), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(45), Number(44), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.078326s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(20, 44)', truth=True, inc_range=IncRange(start=44, end=45, step=1)), conversion = current_last_sgoals(20,44).

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006418s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08474339999999714, Incremental time limit = None
Running cumulative time = 0.08474339999999714, Cumulative time limit = 3600

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=44, end_step=46, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, increment_statistics=Statistics(grounding_time=0.07832569999999706, solving_time=0.006417700000000082, total_time=0.08474339999999714, clingo_stats={'problem': {'lp': {'atoms': 7660.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16029.0, 'bodies_tr': 16029.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 207.0, 'rules': 33291.0, 'rules_normal': 32948.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 33287.0, 'rules_tr_normal': 32948.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11100.0, 'eqs_atom': 3179.0, 'eqs_body': 1108.0, 'eqs_other': 6813.0}, 'lpStep': {'atoms': 3783.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14853.0, 'bodies_tr': 14853.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 207.0, 'rules': 29105.0, 'rules_normal': 28762.0, 'rules_choice': 339.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 29101.0, 'rules_tr_normal': 28762.0, 'rules_tr_choice': 339.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5354.0, 'eqs_atom': 1092.0, 'eqs_body': 343.0, 'eqs_other': 3919.0}, 'generator': {'vars': 1054.0, 'vars_eliminated': 0.0, 'vars_frozen': 795.0, 'constraints': 11.0, 'constraints_binary': 254.0, 'constraints_ternary': 17.0, 'acyc_edges': 0.0, 'complexity': 296.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 18.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.08428192138671875, 'cpu': 0.078125, 'solve': 0.000995635986328125, 'unsat': 0.000995635986328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.11520004272460938, 'cpu': 0.109375, 'solve': 0.004985809326171875, 'unsat': 0.000995635986328125, 'sat': 0.001003265380859375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 26.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.07832569999999706, solving_time=0.006417700000000082, total_time=0.08474339999999714, clingo_stats={}))

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 46:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('state_module', [Number(46), Number(44)]), ('plan_module', [Number(46), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(44), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(46), Number(44), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060371s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 3950, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008862s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.06923349999999928, Incremental time limit = None
Running cumulative time = 0.15397689999999642, Cumulative time limit = 3600

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.138697s, Cumulative Solving = 0.015280s, Cumulative Total = 0.153977s, Calls = 2
Final Model :: Total atoms = 3950, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=46, end_step=47, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.06037149999999869, solving_time=0.008862000000000592, total_time=0.06923349999999928, clingo_stats={'problem': {'lp': {'atoms': 9259.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29148.0, 'bodies_tr': 29148.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 410.0, 'count_bodies_tr': 410.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 232.0, 'rules': 58540.0, 'rules_normal': 58037.0, 'rules_choice': 495.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 58532.0, 'rules_tr_normal': 58037.0, 'rules_tr_choice': 495.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13762.0, 'eqs_atom': 3641.0, 'eqs_body': 1398.0, 'eqs_other': 8723.0}, 'lpStep': {'atoms': 1599.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13119.0, 'bodies_tr': 13119.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 3.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25.0, 'rules': 25249.0, 'rules_normal': 25089.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25245.0, 'rules_tr_normal': 25089.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2662.0, 'eqs_atom': 462.0, 'eqs_body': 290.0, 'eqs_other': 1910.0}, 'generator': {'vars': 1301.0, 'vars_eliminated': 0.0, 'vars_frozen': 987.0, 'constraints': 47.0, 'constraints_binary': 1050.0, 'constraints_ternary': 142.0, 'acyc_edges': 0.0, 'complexity': 1269.0}}, 'solving': {'solvers': {'choices': 408.0, 'conflicts': 16.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 16.0, 'integrated': 44.0, 'lemmas': 60.0, 'lits_learnt': 60.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 44.0, 'integrated_jumps': 216.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 0.0, 'lemmas_other': 44.0, 'lits_conflict': 16.0, 'lits_loop': 0.0, 'lits_other': 44.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.07031822204589844, 'cpu': 0.078125, 'solve': 0.005985260009765625, 'unsat': 0.0, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1855182647705078, 'cpu': 0.1875, 'solve': 0.0109710693359375, 'unsat': 0.000995635986328125, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 408.0, 'conflicts': 16.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 16.0, 'integrated': 44.0, 'lemmas': 63.0, 'lits_learnt': 63.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 44.0, 'integrated_jumps': 216.0, 'guiding_paths_lits': 90.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 3.0, 'lemmas_other': 44.0, 'lits_conflict': 16.0, 'lits_loop': 3.0, 'lits_other': 44.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13869719999999575, solving_time=0.015279700000000673, total_time=0.15397689999999642, clingo_stats={}))

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(46)', truth=True, inc_range=None)

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 47:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('state_module', [Number(47), Number(44)]), ('plan_module', [Number(47), Number(44), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(44), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(47), Number(44), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.067690s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='seq_achieve_fgoals(46)', truth=True, inc_range=None), conversion = seq_achieve_fgoals(46).

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4429, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009278s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.07696889999999712, Incremental time limit = None
Running cumulative time = 0.23094579999999354, Cumulative time limit = 3600

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative Grounding = 0.206388s, Cumulative Solving = 0.024558s, Cumulative Total = 0.230946s, Calls = 3
Final Model :: Total atoms = 4429, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=47, end_step=48, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.06769040000000004, solving_time=0.00927849999999708, total_time=0.07696889999999712, clingo_stats={'problem': {'lp': {'atoms': 10999.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42405.0, 'bodies_tr': 42405.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 593.0, 'count_bodies_tr': 593.0, 'sccs': 36.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 335.0, 'rules': 83911.0, 'rules_normal': 83248.0, 'rules_choice': 651.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 83899.0, 'rules_tr_normal': 83248.0, 'rules_tr_choice': 651.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 16448.0, 'eqs_atom': 4090.0, 'eqs_body': 1649.0, 'eqs_other': 10709.0}, 'lpStep': {'atoms': 1740.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13257.0, 'bodies_tr': 13257.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 183.0, 'count_bodies_tr': 183.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 103.0, 'rules': 25371.0, 'rules_normal': 25211.0, 'rules_choice': 156.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 25367.0, 'rules_tr_normal': 25211.0, 'rules_tr_choice': 156.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2686.0, 'eqs_atom': 449.0, 'eqs_body': 251.0, 'eqs_other': 1986.0}, 'generator': {'vars': 1734.0, 'vars_eliminated': 0.0, 'vars_frozen': 1315.0, 'constraints': 114.0, 'constraints_binary': 2535.0, 'constraints_ternary': 293.0, 'acyc_edges': 0.0, 'complexity': 2997.0}}, 'solving': {'solvers': {'choices': 262.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 47.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 31.0, 'integrated': 38.0, 'lemmas': 59.0, 'lits_learnt': 151.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 44.0, 'cpu_time': 0.0, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 80.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 10.0, 'lemmas_other': 38.0, 'lits_conflict': 11.0, 'lits_loop': 26.0, 'lits_other': 114.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.08080101013183594, 'cpu': 0.078125, 'solve': 0.004985809326171875, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.26631927490234375, 'cpu': 0.265625, 'solve': 0.015956878662109375, 'unsat': 0.000995635986328125, 'sat': 0.003997802734375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 670.0, 'conflicts': 27.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 80.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 37.0, 'distributed_sum_lbd': 47.0, 'integrated': 82.0, 'lemmas': 122.0, 'lits_learnt': 214.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 44.0, 'cpu_time': 0.015625, 'integrated_imps': 45.0, 'integrated_jumps': 216.0, 'guiding_paths_lits': 170.0, 'guiding_paths': 27.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 13.0, 'lemmas_other': 82.0, 'lits_conflict': 27.0, 'lits_loop': 29.0, 'lits_other': 158.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 0.0, 'levels': 27.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.20638759999999579, solving_time=0.024558199999997754, total_time=0.23094579999999354, clingo_stats={}))

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved.

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 20 was achieved successfully.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.078326s, Solving = 0.006418s, Total = 0.084743s
2 : Statistics :: Grounding = 0.060371s, Solving = 0.008862s, Total = 0.069233s
3 : Statistics :: Grounding = 0.067690s, Solving = 0.009278s, Total = 0.076969s

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.230946s because Manual generator exit.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.206388s, Cumulative Solving = 0.024558s, Cumulative Total = 0.230946s, Calls = 3
Model :: Total atoms = 4429, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79}}

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20, 45: 20, 46: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44, 20: 47}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79}}

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

(1, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 1}])
(2, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 2}])
(3, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'S': 3}])
(4, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'S': 4}])
(5, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'S': 5}])
(6, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 6}])
(7, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 7}])
(8, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 8}])
(9, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'S': 9}])
(10, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 10}])
(11, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 11}])
(12, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 12}])
(13, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 13}])
(14, [{'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'S': 14}])
(15, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'S': 15}])
(16, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 16}])
(17, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 17}])
(18, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 18}])
(19, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'S': 19}])
(20, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 20}])
(21, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'S': 21}])
(22, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'S': 22}])
(23, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'S': 23}])
(24, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'S': 24}])
(25, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 25}])
(26, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 26}])
(27, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 27}])
(28, [{'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'S': 28}])
(29, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 29}])
(30, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'S': 30}])
(31, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 31}])
(32, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'S': 32}])
(33, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'S': 33}])
(34, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'S': 34}])
(35, [{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'S': 35}])
(36, [{'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'S': 36}])
(37, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'S': 37}])
(38, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'S': 38}])
(39, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'S': 39}])
(40, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'S': 40}])
(41, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'S': 41}])
(42, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'S': 42}])
(43, [{'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'S': 43}])
(44, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'S': 44}])
(45, [{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,1))', 'S': 45}])
(46, [{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'S': 46}])
(47, [{'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'S': 47}])

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=44, plan_length=47, step_range=range(44, 48)

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=79 : level=2 len(self.__actions.get(level, []))=47 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=44, plan_length=47, step_range=range(44, 48)

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=79 : level=2 len(self.__actions.get(level, []))=47 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Proactively dividing plan: Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00.

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> plan_length=3, true_size_bound=1, partial_problems=3

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=3, plan_length=3, start_step=44, blend=Blend(left=0.0, right=0.0)

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Decided: number_small_problems=3, number_large_problems=0, small_group_size=1, large_group_size=2

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=45, blend=Blend(left=0, right=0)), DivisionPoint(index=46, blend=Blend(left=0, right=0))]

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Getting sgoals range for problem number 45 from scenario:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Getting sgoals range for problem number 46 from scenario:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Obtained sgoals range = [46-46].

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Obtained sgoals range = [45-45].

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [45-45]

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [45-45], problem number = 45, increment number = 44

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 45)
	('last_sgoals', 45)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 79, initial = False, final = False, sgoals = [45-45]

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 79

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 79

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [45-45])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-23] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 79...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=79, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 79), range_=None), IncPart(name='plan_module', args=('#inc', 79, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 79, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 79, 45, 45, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0031284000000013634s

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027372s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006974s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB32FB090>

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(45, 79)', truth=True, inc_range=IncRange(start=79, end=80, step=1))

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 79). %* None *%
#program plan_module(#inc, 79, false, false). %* None *%
#program optimisation_module(#inc, 79, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 79, 45, 45, sequential, true). %* None *%

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     78 : Current =     80
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(80)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('state_module', [Number(79), Number(79)]), ('plan_module', [Number(79), Number(79), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(79), Number(79), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(79), Number(79), Number(45), Number(45), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('state_module', [Number(80), Number(79)]), ('plan_module', [Number(80), Number(79), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(80), Number(79), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(80), Number(79), Number(45), Number(45), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131783s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(45, 79)', truth=True, inc_range=IncRange(start=79, end=80, step=1)), conversion = current_last_sgoals(45,79).

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014096s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14587969999999117, Incremental time limit = None
Running cumulative time = 0.14587969999999117, Cumulative time limit = 3600

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.131783s, Cumulative Solving = 0.014096s, Cumulative Total = 0.145880s, Calls = 1
Final Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=79, end_step=81, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.13178319999999744, solving_time=0.014096499999993739, total_time=0.14587969999999117, clingo_stats={'problem': {'lp': {'atoms': 11267.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27116.0, 'bodies_tr': 27116.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 439.0, 'rules': 54816.0, 'rules_normal': 54251.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 54812.0, 'rules_tr_normal': 54251.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21192.0, 'eqs_atom': 6410.0, 'eqs_body': 1898.0, 'eqs_other': 12884.0}, 'lpStep': {'atoms': 5625.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24513.0, 'bodies_tr': 24513.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 274.0, 'count_bodies_tr': 274.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 439.0, 'rules': 48364.0, 'rules_normal': 47799.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 48360.0, 'rules_tr_normal': 47799.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9418.0, 'eqs_atom': 2117.0, 'eqs_body': 389.0, 'eqs_other': 6912.0}, 'generator': {'vars': 1767.0, 'vars_eliminated': 0.0, 'vars_frozen': 1273.0, 'constraints': 15.0, 'constraints_binary': 368.0, 'constraints_ternary': 23.0, 'acyc_edges': 0.0, 'complexity': 424.0}}, 'solving': {'solvers': {'choices': 278.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 14.0, 'lemmas': 30.0, 'lits_learnt': 30.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 14.0, 'integrated_jumps': 70.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 14.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 14.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14561080932617188, 'cpu': 0.140625, 'solve': 0.0049571990966796875, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18350982666015625, 'cpu': 0.171875, 'solve': 0.008945465087890625, 'unsat': 0.0, 'sat': 0.0039577484130859375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 278.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 14.0, 'lemmas': 30.0, 'lits_learnt': 30.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 14.0, 'integrated_jumps': 70.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 14.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 14.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.13178319999999744, solving_time=0.014096499999993739, total_time=0.14587969999999117, clingo_stats={}))

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 45 achieved.

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 45 was achieved successfully.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.131783s, Solving = 0.014096s, Total = 0.145880s

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.145880s because Manual generator exit.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.131783s, Cumulative Solving = 0.014096s, Cumulative Total = 0.145880s, Calls = 1
Model :: Total atoms = 4027, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20, 45: 20, 46: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44, 20: 47}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79}}

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20, 45: 20, 46: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44, 79: 45}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44, 20: 47}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79, 45: 80}}

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])
(73, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 73}])
(74, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 74}])
(75, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 75}])
(76, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 76}])
(77, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 77}])
(78, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 78}])
(79, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'S': 79}])
(80, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,1))', 'S': 80}])

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=79, plan_length=80, step_range=range(79, 81)

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=80 : level=2 len(self.__actions.get(level, []))=47 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Online planning increment 45 finished.

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 47 : Achieved sgoals 20 : Unachieved sgoals 0
Level 1 : Total sgoals 0 : Achieved sgoals 45 : Unachieved sgoals 2

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Getting sgoals range for problem number 46 from scenario:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Getting sgoals range for problem number 45 from scenario:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Obtained sgoals range = [45-45].

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Getting sgoals range for problem number 47 from scenario:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Obtained sgoals range = [47-47].

[13-08-2021_16-59-23] DEBUG :: core.Strategies >> Obtained sgoals range = [46-46].

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [46-46]

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [46-46], problem number = 46, increment number = 45

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 46)
	('last_sgoals', 46)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 80, initial = False, final = False, sgoals = [46-46]

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 80

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 80

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [46-46])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-23] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-23] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 80...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=80, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 80), range_=None), IncPart(name='plan_module', args=('#inc', 80, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 80, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 80, 46, 46, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003371399999998914s

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025592s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006361s.

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3DC3630>

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(46, 80)', truth=True, inc_range=IncRange(start=80, end=81, step=1))

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 80). %* None *%
#program plan_module(#inc, 80, false, false). %* None *%
#program optimisation_module(#inc, 80, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 80, 46, 46, sequential, true). %* None *%

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     79 : Current =     81
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(81)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('state_module', [Number(80), Number(80)]), ('plan_module', [Number(80), Number(80), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(80), Number(80), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(80), Number(80), Number(46), Number(46), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('state_module', [Number(81), Number(80)]), ('plan_module', [Number(81), Number(80), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(80), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(81), Number(80), Number(46), Number(46), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.126722s.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(46, 80)', truth=True, inc_range=IncRange(start=80, end=81, step=1)), conversion = current_last_sgoals(46,80).

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014995s.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14171729999999627, Incremental time limit = None
Running cumulative time = 0.14171729999999627, Cumulative time limit = 3600

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.126722s, Cumulative Solving = 0.014995s, Cumulative Total = 0.141717s, Calls = 1
Final Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=80, end_step=82, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.12672179999999855, solving_time=0.014995499999997719, total_time=0.14171729999999627, clingo_stats={'problem': {'lp': {'atoms': 11256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27283.0, 'bodies_tr': 27283.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 54911.0, 'rules_normal': 54346.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 54907.0, 'rules_tr_normal': 54346.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 22800.0, 'eqs_atom': 6392.0, 'eqs_body': 1889.0, 'eqs_other': 14519.0}, 'lpStep': {'atoms': 5614.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24680.0, 'bodies_tr': 24680.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 48459.0, 'rules_normal': 47894.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 48455.0, 'rules_tr_normal': 47894.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11026.0, 'eqs_atom': 2099.0, 'eqs_body': 380.0, 'eqs_other': 8547.0}, 'generator': {'vars': 1944.0, 'vars_eliminated': 0.0, 'vars_frozen': 1349.0, 'constraints': 8.0, 'constraints_binary': 296.0, 'constraints_ternary': 18.0, 'acyc_edges': 0.0, 'complexity': 330.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1416187286376953, 'cpu': 0.1875, 'solve': 0.004985809326171875, 'unsat': 0.0, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1775226593017578, 'cpu': 0.21875, 'solve': 0.008975982666015625, 'unsat': 0.0, 'sat': 0.00299835205078125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.12672179999999855, solving_time=0.014995499999997719, total_time=0.14171729999999627, clingo_stats={}))

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 46 achieved.

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 46 was achieved successfully.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.126722s, Solving = 0.014995s, Total = 0.141717s

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.141717s because Manual generator exit.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.126722s, Cumulative Solving = 0.014995s, Cumulative Total = 0.141717s, Calls = 1
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20, 45: 20, 46: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44, 79: 45}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44, 20: 47}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79, 45: 80}}

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20, 45: 20, 46: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44, 79: 45, 80: 46}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44, 20: 47}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79, 45: 80, 46: 81}}

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])
(73, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 73}])
(74, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 74}])
(75, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 75}])
(76, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 76}])
(77, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 77}])
(78, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 78}])
(79, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'S': 79}])
(80, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,1))', 'S': 80}])
(81, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 81}])

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=80, plan_length=81, step_range=range(80, 82)

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=81 : level=2 len(self.__actions.get(level, []))=47 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Online planning increment 46 finished.

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 47 : Achieved sgoals 20 : Unachieved sgoals 0
Level 1 : Total sgoals 0 : Achieved sgoals 46 : Unachieved sgoals 1

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Using division scenario to proactively divide planning at level 1:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-24] DEBUG :: core.Strategies >> Getting sgoals range for problem number 47 from scenario:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-24] DEBUG :: core.Strategies >> Getting sgoals range for problem number 46 from scenario:
Divided plan : Level = 2, Length = 3, Actions = 3, Refined = True, Expansion = 3.00, Deviation = 0.00
Division points [total=2] : [(Index = 45, Blend = (Left = 0, Right = 0)), (Index = 46, Blend = (Left = 0, Right = 0))]

[13-08-2021_16-59-24] DEBUG :: core.Strategies >> Obtained sgoals range = [46-46].

[13-08-2021_16-59-24] DEBUG :: core.Strategies >> Obtained sgoals range = [47-47].

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [47-47]

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [47-47], problem number = 47, increment number = 46

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning:
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 47)
	('last_sgoals', 47)
	('sequential_yield', True)
	('concurrency', False)
	('save_grounding', False)
	('use_saved_grounding', None)
	('minimum_search_length_bound', 'disable')
	('detect_interleaving', False)
	('reactive_callback', <bound method NaiveProactive.react of <core.Strategies.Hasty object at 0x000001DCAE13B950>>)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_cost', None)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('minimise_actions', None)
	('minimise_length', None)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, VerbosityMode.results, True))

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 81, initial = False, final = True, sgoals = [47-47]

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Guaranteed minimum search length bound: 81

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Predicted minimum search length bound: 0

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Chosen minimum search length bound: 81

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan : Level 1
Planning mode = (conformance, achievement = sequential, sgoals = [47-47])
Problem type = partial
Concurrency = disabled

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Optimisation details:Length minimisation = False
Action minimisation = False
Cost minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[13-08-2021_16-59-24] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Adding start state as state at step 81...

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part conformance_module(step, start, first, last, type, yield).

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new incremental solve call.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=81, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 81), range_=None), IncPart(name='plan_module', args=('#inc', 81, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 81, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 81, 47, 47, 'sequential', 'true'), range_=None)]

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 537 rules

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.002990000000004045s

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=[1, 'refinement']), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027643s.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 2370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008948s.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DCB3E68540>

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(47, 81)', truth=True, inc_range=IncRange(start=81, end=82, step=1))

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 81). %* None *%
#program plan_module(#inc, 81, false, false). %* None *%
#program optimisation_module(#inc, 81, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 81, 47, 47, sequential, true). %* None *%

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     80 : Current =     82
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('state_module', [Number(81), Number(81)]), ('plan_module', [Number(81), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(81), Number(81), Number(47), Number(47), Function('sequential', [], True), Function('true', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('state_module', [Number(82), Number(81)]), ('plan_module', [Number(82), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(82), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(82), Number(81), Number(47), Number(47), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124502s.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='current_last_sgoals(47, 81)', truth=True, inc_range=IncRange(start=81, end=82, step=1)), conversion = current_last_sgoals(47,81).

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019162s.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14366400000000823, Incremental time limit = None
Running cumulative time = 0.14366400000000823, Cumulative time limit = 3600

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative Grounding = 0.124502s, Cumulative Solving = 0.019162s, Cumulative Total = 0.143664s, Calls = 1
Final Model :: Total atoms = 4017, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=81, end_step=83, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.1245016000000021, solving_time=0.01916240000000613, total_time=0.14366400000000823, clingo_stats={'problem': {'lp': {'atoms': 11255.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27239.0, 'bodies_tr': 27239.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 54868.0, 'rules_normal': 54303.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 54864.0, 'rules_tr_normal': 54303.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 22782.0, 'eqs_atom': 6392.0, 'eqs_body': 1890.0, 'eqs_other': 14500.0}, 'lpStep': {'atoms': 5613.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24636.0, 'bodies_tr': 24636.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 276.0, 'count_bodies_tr': 276.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 48416.0, 'rules_normal': 47851.0, 'rules_choice': 561.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 48412.0, 'rules_tr_normal': 47851.0, 'rules_tr_choice': 561.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11008.0, 'eqs_atom': 2099.0, 'eqs_body': 381.0, 'eqs_other': 8528.0}, 'generator': {'vars': 1945.0, 'vars_eliminated': 0.0, 'vars_frozen': 1349.0, 'constraints': 17.0, 'constraints_binary': 539.0, 'constraints_ternary': 32.0, 'acyc_edges': 0.0, 'complexity': 608.0}}, 'solving': {'solvers': {'choices': 274.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 3.0, 'lemmas': 19.0, 'lits_learnt': 19.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 3.0, 'integrated_jumps': 67.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 3.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 3.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14358901977539062, 'cpu': 0.140625, 'solve': 0.0059833526611328125, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.18351364135742188, 'cpu': 0.1875, 'solve': 0.012996673583984375, 'unsat': 0.0, 'sat': 0.00399017333984375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 274.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 3.0, 'lemmas': 19.0, 'lits_learnt': 19.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 3.0, 'integrated_jumps': 67.0, 'guiding_paths_lits': 56.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 3.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 3.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.1245016000000021, solving_time=0.01916240000000613, total_time=0.14366400000000823, clingo_stats={}))

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 47 achieved.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(82)', truth=True, inc_range=None)

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 83:
(Abandon = False, Rationale = None).

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     82 : Current =     83
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('state_module', [Number(83), Number(81)]), ('plan_module', [Number(83), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(83), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(83), Number(81), Number(47), Number(47), Function('sequential', [], True), Function('true', [], True)])]

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084640s.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external: original = External(symbol='seq_achieve_fgoals(82)', truth=True, inc_range=None), conversion = seq_achieve_fgoals(82).

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found:
Model :: Total atoms = 4590, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011886s.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09652650000000307, Incremental time limit = None
Running cumulative time = 0.2401905000000113, Cumulative time limit = 3600

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative Grounding = 0.209142s, Cumulative Solving = 0.031049s, Cumulative Total = 0.240191s, Calls = 2
Final Model :: Total atoms = 4590, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=83, end_step=84, solve_result=<SolveResult.Satisfiable: 'SAT'>, increment_statistics=Statistics(grounding_time=0.08464040000000495, solving_time=0.011886099999998123, total_time=0.09652650000000307, clingo_stats={'problem': {'lp': {'atoms': 13077.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 48650.0, 'bodies_tr': 48650.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 485.0, 'count_bodies_tr': 485.0, 'sccs': 45.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 628.0, 'rules': 96065.0, 'rules_normal': 95292.0, 'rules_choice': 765.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 8.0, 'rules_tr': 96057.0, 'rules_tr_normal': 95292.0, 'rules_tr_choice': 765.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26514.0, 'eqs_atom': 6894.0, 'eqs_body': 2227.0, 'eqs_other': 17393.0}, 'lpStep': {'atoms': 1822.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21411.0, 'bodies_tr': 21411.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 209.0, 'count_bodies_tr': 209.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138.0, 'rules': 41197.0, 'rules_normal': 40989.0, 'rules_choice': 204.0, 'rules_minimize': 0.0, 'rules_acyc': 0.0, 'rules_heuristic': 4.0, 'rules_tr': 41193.0, 'rules_tr_normal': 40989.0, 'rules_tr_choice': 204.0, 'rules_tr_minimize': 0.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3732.0, 'eqs_atom': 502.0, 'eqs_body': 337.0, 'eqs_other': 2893.0}, 'generator': {'vars': 2331.0, 'vars_eliminated': 0.0, 'vars_frozen': 1656.0, 'constraints': 101.0, 'constraints_binary': 2699.0, 'constraints_ternary': 211.0, 'acyc_edges': 0.0, 'complexity': 3074.0}}, 'solving': {'solvers': {'choices': 442.0, 'conflicts': 19.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 66.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 48.0, 'integrated': 44.0, 'lemmas': 83.0, 'lits_learnt': 248.0, 'lemmas_binary': 55.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 20.0, 'lemmas_other': 44.0, 'lits_conflict': 47.0, 'lits_loop': 110.0, 'lits_other': 91.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 0.0, 'levels': 20.0, 'levels_bounded': 0.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.09873390197753906, 'cpu': 0.125, 'solve': 0.00595855712890625, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.28224754333496094, 'cpu': 0.3125, 'solve': 0.018955230712890625, 'unsat': 0.0, 'sat': 0.0059566497802734375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 716.0, 'conflicts': 27.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 99.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 33.0, 'distributed_sum_lbd': 56.0, 'integrated': 47.0, 'lemmas': 102.0, 'lits_learnt': 267.0, 'lemmas_binary': 55.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.046875, 'integrated_imps': 3.0, 'integrated_jumps': 67.0, 'guiding_paths_lits': 120.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 28.0, 'lemmas_other': 47.0, 'lits_conflict': 55.0, 'lits_loop': 118.0, 'lits_other': 94.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 0.0, 'levels': 28.0, 'levels_bounded': 0.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}), cumulative_statistics=Statistics(grounding_time=0.20914200000000704, solving_time=0.031048500000004253, total_time=0.2401905000000113, clingo_stats={}))

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 48 achieved.

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 47 was achieved successfully.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught GeneratorExit:
.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.124502s, Solving = 0.019162s, Total = 0.143664s
2 : Statistics :: Grounding = 0.084640s, Solving = 0.011886s, Total = 0.096527s

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.240191s because Manual generator exit.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	assumptions = []
	context = None
	incrementor = None
	base_parts = []
	inc_parts = []

[13-08-2021_16-59-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed.

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative Grounding = 0.209142s, Cumulative Solving = 0.031049s, Cumulative Total = 0.240191s, Calls = 2
Model :: Total atoms = 4590, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20, 45: 20, 46: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44, 79: 45, 80: 46}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44, 20: 47}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79, 45: 80, 46: 81}}

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 11, 31: 11, 32: 12, 33: 12, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20, 45: 20, 46: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 9, 15: 9, 16: 9, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 13, 25: 13, 26: 13, 27: 13, 28: 14, 29: 15, 30: 16, 31: 17, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 27, 47: 28, 48: 28, 49: 28, 50: 29, 51: 30, 52: 30, 53: 30, 54: 30, 55: 30, 56: 31, 57: 32, 58: 32, 59: 33, 60: 34, 61: 35, 62: 35, 63: 36, 64: 36, 65: 36, 66: 37, 67: 38, 68: 38, 69: 38, 70: 38, 71: 39, 72: 40, 73: 40, 74: 41, 75: 42, 76: 43, 77: 43, 78: 44, 79: 45, 80: 46, 81: 47}}
{2: {1: 7, 2: 9, 3: 17, 4: 19, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 32, 12: 36, 13: 38, 14: 39, 15: 40, 16: 41, 17: 42, 18: 43, 19: 44, 20: 47}, 1: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 18, 10: 19, 11: 21, 12: 22, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 37, 20: 38, 21: 40, 22: 41, 23: 42, 24: 43, 25: 44, 26: 45, 27: 47, 28: 50, 29: 51, 30: 56, 31: 57, 32: 59, 33: 60, 34: 61, 35: 63, 36: 66, 37: 67, 38: 71, 39: 72, 40: 74, 41: 75, 42: 76, 43: 78, 44: 79, 45: 80, 46: 81, 47: 82}}

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 69}])
(70, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 70}])
(71, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 71}])
(72, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 72}])
(73, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 73}])
(74, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 74}])
(75, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 75}])
(76, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 76}])
(77, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 77}])
(78, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 78}])
(79, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'S': 79}])
(80, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,1))', 'S': 80}])
(81, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 81}])
(82, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,4),(block,5))', 'S': 82}])

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=81, plan_length=82, step_range=range(81, 83)

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=82 : level=2 len(self.__actions.get(level, []))=47 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Online planning increment 47 finished.

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, plan_length=20, step_range=range(0, 21)

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=82 : level=2 len(self.__actions.get(level, []))=47 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, plan_length=47, step_range=range(0, 48)

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=82 : level=2 len(self.__actions.get(level, []))=47 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, plan_length=82, step_range=range(0, 83)

[13-08-2021_16-59-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=82 : level=2 len(self.__actions.get(level, []))=47 : level=3 len(self.__actions.get(level, []))=20

[13-08-2021_16-59-24] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

========================================================================================================================
|              Level = 3, Length = 20, Actions = 20, Refined = False, Expansion = 1.00, Deviation = 0.00              |
|               Level = 2, Length = 47, Actions = 47, Refined = True, Expansion = 2.35, Deviation = 2.01               |
|               Level = 1, Length = 82, Actions = 82, Refined = True, Expansion = 1.74, Deviation = 1.33               |
========================================================================================================================

[13-08-2021_16-59-24] INFO :: __main__ >> Total time : Real = 32.607827799999995, Process = 43.109375

[13-08-2021_16-59-24] INFO :: __main__ >> Exiting with code 0

