[04-03-2022_16-21-13] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[04-03-2022_16-21-13] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[04-03-2022_16-21-13] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[04-03-2022_16-21-13] DEBUG :: __main__ >> Command line arguments:
'--config=.\\experiments\\configurations\\test.config'
'-op'
'test'

[04-03-2022_16-21-13] DEBUG :: __main__ >> Configuration file loaded: .\experiments\configurations\test.config

[04-03-2022_16-21-13] DEBUG :: __main__ >> Configuration file arguments:
'./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp'
'./problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'
'-opti'
'5=None'
'4=None'
'3=None'
'2=None'
'1=None'
'-m'
'hcr'
'-t'
'sequential'
'-yield'
'True'
'-min_bound'
'False'
'-conc'
'True'
'-strat'
'hasty'
'-bound'
'5=0.5'
'4=0.5'
'3=0.5'
'2=0.5'
'-method'
'ground-first'
'-preempt_mode'
'optimise'
'-preempt_pos_fgoals'
'True'
'-preempt_neg_fgoals'
'False'
'-order_fgoals'
'True'
'-order_tasks'
'True'
'-tl'
'1800'
'-ll'
'300'
'-ir'
'0'
'-er'
'2'
'-xf'
'-df'
'-ff'
'-op'
'test'

[04-03-2022_16-21-13] DEBUG :: __main__ >> Parsed command line arguments:
('files', ['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'])
('load_schema', None)
('config_file_naming', False)
('plan_file', './solutions/plans/ASH_Plan_2022-03-04_16-21-13.txt')
('log_file', './logs/ASH_Log_2022-03-04_16-21-13.log')
('excel_file', './experiments/results/ASH_Excel_2022-03-04_16-21-13.xlsx')
('data_file', './experiments/results/ASH_Data_2022-03-04_16-21-13.dat')
('data_sep', ' ')
('data_end', '\n')
('figure_file', './experiments/results/ASH_Figure_2022-03-04_16-21-13.png')
('save_schema', './solutions/schemas/ASH_Schema_2022-03-04_16-21-13.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'standard')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_figure', True)
('operation', 'test')
('experimental_runs', 2)
('initial_runs', 0)
('optimum', {5: None, 4: None, 3: None, 2: None, 1: None})
('threads', 8)
('planning_time_limit', 1800)
('search_length_limit', 300)
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', True)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', False)
('make_observable', False)
('problem_space', None)
('problem_space_level', 1)
('top_level', None)
('bottom_level', 1)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('online_method', 'ground-first')
('division_strategy', 'hasty')
('division_strategy_bounds', {5: 0.5, 4: 0.5, 3: 0.5, 2: 0.5})
('bound_type', 'incremental_time')
('save_grounding', False)
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', False)
('divide_tasks_on_final_goal_intermediate_achievement_ordering', True)
('final_goal_intermediate_achievement_ordering_preferences', True)
('positive_final_goal_preemptive_achievement', True)
('negative_final_goal_preemptive_achievement', False)
('final_goal_preemptive_achievement_mode', 'optimise')

[04-03-2022_16-21-14] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp
                ./problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp]

[04-03-2022_16-21-14] DEBUG :: core.Planner >> The domain files ['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'] were loaded successfully, contain all domain program parts, and contain problem program parts: {'static_state': True, 'initial_state': True, 'entities': True, 'goal_state': True}.

[04-03-2022_16-21-14] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 3, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 3, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ 0, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 5.

%% Abstraction types
#const reduc = 4. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(5, tasking). % Classical
model_type(4, reduced).
model_type(3, condensed).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(5, robot).
class(5, armed_robot).
class(5, location).
class(5, room).
class(5, object).
class(5, grounded).
class(5, graspable).
class(5, placeable).
class(5, block).
class(5, surface).
class(5, table).
class(5, colour).

%% Classes deleted by redefinition
class(4, manipulator_arm).
class(4, grasper).

%% Classes deleted by reduction
class(3, door).
class(3, handle).
class(3, configurable).
class(3, extensible).

%% Classes deleted in second condensed model
class(2, zone).
class(2, manipulator_limb).
class(2, manipulator_end).
class(2, side).

%% Classes deleted in first condensed model
class(1, cell).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, zone).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of zones
override_class(room, zone, location).

%% A zone is composed from a set of cells
override_class(zone, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < TL, AL_2 < TL,
                                               model_type(TL, tasking),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= TL, model_type(TL, tasking),
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, placeable, OBJ),
                                                          insta_of(AL, surface, SURFACE),
                                                          AL >= TL, model_type(TL, tasking), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot grasp an object with two graspers simultaneously
:- holds(AL, grasping(DESC_1), OBJ, t),
   holds(AL, grasping(DESC_2), OBJ, t),
   fluent(AL, inertial, grasping(DESC_1), OBJ),
   fluent(AL, inertial, grasping(DESC_2), OBJ),
   DESC_1 != DESC_2,
   desce_of(AL, ROBO, DESC_1),
   desce_of(AL, ROBO, DESC_2),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC_1),
   insta_of(AL, grasper, DESC_2),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
% :- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
%                       fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
%                       insta_of(AL_1, graspable, OBJ) },
%    M = #count { ARM : desce_of(AL_2, ROBO, ARM),
%                       insta_of(AL_2, manipulator_arm, ARM),
%                       al(AL_2), AL_1 >= AL_2 },
%    N > M, block_number(N), block_number(M),
%    insta_of(AL_1, robot, ROBO),
%    AL_1 >= TL, model_type(TL, tasking), sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= TL, model_type(TL, tasking),
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= TL, model_type(TL, tasking),
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Medium Problem Specification :: Version 3                             %%
%%                                                                       %%
%% Nine block setup, with the additional three on the table,             %%
%% and with 3-4 times larger number of cells per room.                   %%
%% This problem has longer manipulation plans at all levels,             %%
%% and longer ground level locomotion plans.                             %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected(((starting_room_1, 1), 5, 1), ((hallway_1, 1), 4, 0))).

is(1, connected(((store_room_1, 1), 5, 1), ((hallway_1, 0), 0, 1))).
is(1, connected(((hallway_1, 2), 8, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected(((hallway_1, 1), 4, 1), ((hallway_2, 1), 4, 0))).

is(1, connected(((store_room_2, 1), 5, 1), ((hallway_2, 0), 0, 1))).
is(1, connected(((hallway_2, 2), 8, 1), ((puzzle_room_2, 0), 0, 1))).

%% Door connection between the hallways, and the; store and puzzle rooms
is(1, connected_by_door(store_room_1_door, ((store_room_1, 1), 5, 1), ((hallway_1, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_1_door, ((hallway_1, 2), 8, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected_by_door(store_room_1_door, ((store_room_2, 1), 5, 1), ((hallway_2, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_1_door, ((hallway_2, 2), 8, 1), ((puzzle_room_2, 0), 0, 1))).

%% The doors' handles are located on either side of it
is(1, in(store_room_1_door_handle_inner, ((store_room_1, 1), 5, 1))).
is(1, in(store_room_1_door_handle_outer, ((hallway_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_inner, ((puzzle_room_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_outer, ((hallway_1, 2), 8, 1))).

is(1, in(store_room_2_door_handle_inner, ((store_room_2, 1), 5, 1))).
is(1, in(store_room_2_door_handle_outer, ((hallway_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_inner, ((puzzle_room_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_outer, ((hallway_2, 2), 8, 1))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N > 9, N <= 12, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 12, N <= 15, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 15, N <= 18, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected(((R, N_1), X_1, Y), ((R, N_2), X_2, Y))) :- insta_of(1, cell, ((R, N_1), X_1, Y)),
                                                            insta_of(1, cell, ((R, N_2), X_2, Y)),
                                                            X_2 = X_1 + 1.
is(1, connected((A, X, Y_1), (A, X, Y_2))) :- insta_of(1, cell, (A, X, Y_1)),
                                              insta_of(1, cell, (A, X, Y_2)),
                                              Y_2 = Y_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), ((starting_room_1, 0), 0, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_1_table), ((puzzle_room_1, 1), 5, 0), 0).
holds(1, in(puzzle_room_2_table), ((puzzle_room_2, 1), 5, 0), 0).

%% The first three blocks are stacked on the puzzle room table:
%%      - This configuration presents the Sussman anomoly.
holds(1, on((block, 1)), puzzle_room_1_table_left, 0).
holds(1, on((block, 2)), puzzle_room_1_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
holds(1, on((block, 10)), puzzle_room_2_table_left, 0).
holds(1, on((block, 11)), puzzle_room_2_table_right, 0).
holds(1, on((block, 12)), (block, 10), 0).

%% The other three blocks are on the floor in the store room:
%%      - Talos will have to make at least two trips to the store room to collect these.
holds(1, in((block, 4)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 5)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 6)), ((store_room_1, 0), 0, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).
holds(1, in((block, 13)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 14)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 15)), ((store_room_2, 0), 0, 0), 0).
holds(1, on((block, 13)), nothing, 0).
holds(1, on((block, 14)), nothing, 0).
holds(1, on((block, 15)), nothing, 0).

%% The additional three blocks are placed with two in the middle of the table and one in the store room:
%%      - Talos will not have to make additional trips to the store room as a result of this.
holds(1, on((block, 7)), puzzle_room_1_table_middle, 0).
holds(1, in((block, 8)), ((store_room_1, 0), 0, 1), 0).
holds(1, on((block, 9)), (block, 7), 0).
holds(1, on((block, 8)), nothing, 0).
holds(1, on((block, 16)), puzzle_room_2_table_middle, 0).
holds(1, in((block, 17)), ((store_room_2, 0), 0, 1), 0).
holds(1, on((block, 18)), (block, 16), 0).
holds(1, on((block, 17)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_1_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_1_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_1_table_middle, true).
final_goal(1, on((block, 12)), puzzle_room_2_table_left, true).
final_goal(1, on((block, 15)), puzzle_room_2_table_right, true).
final_goal(1, on((block, 18)), puzzle_room_2_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal_order(AL, complete_tower(COLOUR, puzzle_room_1_table), true, true, 1) :- insta_of(AL, colour, COLOUR), al(AL).
goal_order(AL, complete_tower(COLOUR, puzzle_room_2_table), true, true, 2) :- insta_of(AL, colour, COLOUR), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..18).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room_1).
entity(room, store_room_1).
entity(room, puzzle_room_1).
entity(room, hallway_1).
entity(room, store_room_2).
entity(room, puzzle_room_2).
entity(room, hallway_2).

%% All the rooms have two cells except the hallway which has three
n(0..9).
size(starting_room_1, 6, 2).
size(store_room_1, 6, 2).
size(hallway_1, 9, 2).
size(puzzle_room_1, 6, 2).
size(store_room_2, 6, 2).
size(hallway_2, 9, 2).
size(puzzle_room_2, 6, 2).

%% Zones with two cell widths
zone_width(3).
entity(zone, (ROOM, N)) :- entity(room, ROOM), size(ROOM, N_MAX, _), N < (N_MAX / W), zone_width(W), n(N).
zone_x((ROOM, N), (N * W) + P) :- P >= 0, P < W, zone_width(W), entity(zone, (ROOM, N)), n(P), n(N).
entity(cell, ((ROOM, N), X, Y)) :- zone_x((ROOM, N), X), entity(room, ROOM), entity(zone, (ROOM, N)), size(ROOM, X_MAX, Y_MAX), X < X_MAX, Y < Y_MAX, n(N), n(X), n(Y).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_1_door).
entity(door, puzzle_room_1_door).
entity(door, store_room_2_door).
entity(door, puzzle_room_2_door).

%% The door has two handles
entity(handle, store_room_1_door_handle_inner).
entity(handle, store_room_1_door_handle_outer).
entity(handle, puzzle_room_1_door_handle_inner).
entity(handle, puzzle_room_1_door_handle_outer).
entity(handle, store_room_2_door_handle_inner).
entity(handle, store_room_2_door_handle_outer).
entity(handle, puzzle_room_2_door_handle_inner).
entity(handle, puzzle_room_2_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_1_table).
entity(table, puzzle_room_2_table).

%% The table has three sides
entity(side, puzzle_room_1_table_left).
entity(side, puzzle_room_1_table_middle).
entity(side, puzzle_room_1_table_right).
entity(side, puzzle_room_2_table_left).
entity(side, puzzle_room_2_table_middle).
entity(side, puzzle_room_2_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, N)) :- entity(room, ROOM), entity(zone, (ROOM, N)), n(N).
ancestry_relation((ROOM, N), ((ROOM, N), X, Y)) :- entity(room, ROOM), entity(zone, (ROOM, N)), entity(cell, ((ROOM, N), X, Y)), n(N), n(X), n(Y).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_1_door, store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door, store_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door, store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door, store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_right).

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 443 rules

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.00425769999999992s

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:642:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:655:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:656:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:660:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:661:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:662:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:666:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:667:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:668:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:672:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:673:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:685:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:686:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:687:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:693:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:694:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:699:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:700:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.012683s.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001187s with result Satisfiable.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[04-03-2022_16-21-14] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.012683s, Solving = 0.001187s, Total = 0.013870s, Memory = (RSS = 105.835938Mb, VMS = 92.695312Mb)
Final Model :: Total atoms = 84, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-21-14] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-5] instantiated successfully

[04-03-2022_16-21-14] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-21-14] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 3, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 3, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ 0, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 5.

%% Abstraction types
#const reduc = 4. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(5, tasking). % Classical
model_type(4, reduced).
model_type(3, condensed).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(5, robot).
class(5, armed_robot).
class(5, location).
class(5, room).
class(5, object).
class(5, grounded).
class(5, graspable).
class(5, placeable).
class(5, block).
class(5, surface).
class(5, table).
class(5, colour).

%% Classes deleted by redefinition
class(4, manipulator_arm).
class(4, grasper).

%% Classes deleted by reduction
class(3, door).
class(3, handle).
class(3, configurable).
class(3, extensible).

%% Classes deleted in second condensed model
class(2, zone).
class(2, manipulator_limb).
class(2, manipulator_end).
class(2, side).

%% Classes deleted in first condensed model
class(1, cell).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, zone).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of zones
override_class(room, zone, location).

%% A zone is composed from a set of cells
override_class(zone, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < TL, AL_2 < TL,
                                               model_type(TL, tasking),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= TL, model_type(TL, tasking),
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, placeable, OBJ),
                                                          insta_of(AL, surface, SURFACE),
                                                          AL >= TL, model_type(TL, tasking), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot grasp an object with two graspers simultaneously
:- holds(AL, grasping(DESC_1), OBJ, t),
   holds(AL, grasping(DESC_2), OBJ, t),
   fluent(AL, inertial, grasping(DESC_1), OBJ),
   fluent(AL, inertial, grasping(DESC_2), OBJ),
   DESC_1 != DESC_2,
   desce_of(AL, ROBO, DESC_1),
   desce_of(AL, ROBO, DESC_2),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC_1),
   insta_of(AL, grasper, DESC_2),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
% :- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
%                       fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
%                       insta_of(AL_1, graspable, OBJ) },
%    M = #count { ARM : desce_of(AL_2, ROBO, ARM),
%                       insta_of(AL_2, manipulator_arm, ARM),
%                       al(AL_2), AL_1 >= AL_2 },
%    N > M, block_number(N), block_number(M),
%    insta_of(AL_1, robot, ROBO),
%    AL_1 >= TL, model_type(TL, tasking), sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= TL, model_type(TL, tasking),
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= TL, model_type(TL, tasking),
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Medium Problem Specification :: Version 3                             %%
%%                                                                       %%
%% Nine block setup, with the additional three on the table,             %%
%% and with 3-4 times larger number of cells per room.                   %%
%% This problem has longer manipulation plans at all levels,             %%
%% and longer ground level locomotion plans.                             %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected(((starting_room_1, 1), 5, 1), ((hallway_1, 1), 4, 0))).

is(1, connected(((store_room_1, 1), 5, 1), ((hallway_1, 0), 0, 1))).
is(1, connected(((hallway_1, 2), 8, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected(((hallway_1, 1), 4, 1), ((hallway_2, 1), 4, 0))).

is(1, connected(((store_room_2, 1), 5, 1), ((hallway_2, 0), 0, 1))).
is(1, connected(((hallway_2, 2), 8, 1), ((puzzle_room_2, 0), 0, 1))).

%% Door connection between the hallways, and the; store and puzzle rooms
is(1, connected_by_door(store_room_1_door, ((store_room_1, 1), 5, 1), ((hallway_1, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_1_door, ((hallway_1, 2), 8, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected_by_door(store_room_1_door, ((store_room_2, 1), 5, 1), ((hallway_2, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_1_door, ((hallway_2, 2), 8, 1), ((puzzle_room_2, 0), 0, 1))).

%% The doors' handles are located on either side of it
is(1, in(store_room_1_door_handle_inner, ((store_room_1, 1), 5, 1))).
is(1, in(store_room_1_door_handle_outer, ((hallway_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_inner, ((puzzle_room_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_outer, ((hallway_1, 2), 8, 1))).

is(1, in(store_room_2_door_handle_inner, ((store_room_2, 1), 5, 1))).
is(1, in(store_room_2_door_handle_outer, ((hallway_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_inner, ((puzzle_room_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_outer, ((hallway_2, 2), 8, 1))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N > 9, N <= 12, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 12, N <= 15, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 15, N <= 18, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected(((R, N_1), X_1, Y), ((R, N_2), X_2, Y))) :- insta_of(1, cell, ((R, N_1), X_1, Y)),
                                                            insta_of(1, cell, ((R, N_2), X_2, Y)),
                                                            X_2 = X_1 + 1.
is(1, connected((A, X, Y_1), (A, X, Y_2))) :- insta_of(1, cell, (A, X, Y_1)),
                                              insta_of(1, cell, (A, X, Y_2)),
                                              Y_2 = Y_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), ((starting_room_1, 0), 0, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_1_table), ((puzzle_room_1, 1), 5, 0), 0).
holds(1, in(puzzle_room_2_table), ((puzzle_room_2, 1), 5, 0), 0).

%% The first three blocks are stacked on the puzzle room table:
%%      - This configuration presents the Sussman anomoly.
holds(1, on((block, 1)), puzzle_room_1_table_left, 0).
holds(1, on((block, 2)), puzzle_room_1_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
holds(1, on((block, 10)), puzzle_room_2_table_left, 0).
holds(1, on((block, 11)), puzzle_room_2_table_right, 0).
holds(1, on((block, 12)), (block, 10), 0).

%% The other three blocks are on the floor in the store room:
%%      - Talos will have to make at least two trips to the store room to collect these.
holds(1, in((block, 4)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 5)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 6)), ((store_room_1, 0), 0, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).
holds(1, in((block, 13)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 14)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 15)), ((store_room_2, 0), 0, 0), 0).
holds(1, on((block, 13)), nothing, 0).
holds(1, on((block, 14)), nothing, 0).
holds(1, on((block, 15)), nothing, 0).

%% The additional three blocks are placed with two in the middle of the table and one in the store room:
%%      - Talos will not have to make additional trips to the store room as a result of this.
holds(1, on((block, 7)), puzzle_room_1_table_middle, 0).
holds(1, in((block, 8)), ((store_room_1, 0), 0, 1), 0).
holds(1, on((block, 9)), (block, 7), 0).
holds(1, on((block, 8)), nothing, 0).
holds(1, on((block, 16)), puzzle_room_2_table_middle, 0).
holds(1, in((block, 17)), ((store_room_2, 0), 0, 1), 0).
holds(1, on((block, 18)), (block, 16), 0).
holds(1, on((block, 17)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_1_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_1_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_1_table_middle, true).
final_goal(1, on((block, 12)), puzzle_room_2_table_left, true).
final_goal(1, on((block, 15)), puzzle_room_2_table_right, true).
final_goal(1, on((block, 18)), puzzle_room_2_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal_order(AL, complete_tower(COLOUR, puzzle_room_1_table), true, true, 1) :- insta_of(AL, colour, COLOUR), al(AL).
goal_order(AL, complete_tower(COLOUR, puzzle_room_2_table), true, true, 2) :- insta_of(AL, colour, COLOUR), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..18).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room_1).
entity(room, store_room_1).
entity(room, puzzle_room_1).
entity(room, hallway_1).
entity(room, store_room_2).
entity(room, puzzle_room_2).
entity(room, hallway_2).

%% All the rooms have two cells except the hallway which has three
n(0..9).
size(starting_room_1, 6, 2).
size(store_room_1, 6, 2).
size(hallway_1, 9, 2).
size(puzzle_room_1, 6, 2).
size(store_room_2, 6, 2).
size(hallway_2, 9, 2).
size(puzzle_room_2, 6, 2).

%% Zones with two cell widths
zone_width(3).
entity(zone, (ROOM, N)) :- entity(room, ROOM), size(ROOM, N_MAX, _), N < (N_MAX / W), zone_width(W), n(N).
zone_x((ROOM, N), (N * W) + P) :- P >= 0, P < W, zone_width(W), entity(zone, (ROOM, N)), n(P), n(N).
entity(cell, ((ROOM, N), X, Y)) :- zone_x((ROOM, N), X), entity(room, ROOM), entity(zone, (ROOM, N)), size(ROOM, X_MAX, Y_MAX), X < X_MAX, Y < Y_MAX, n(N), n(X), n(Y).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_1_door).
entity(door, puzzle_room_1_door).
entity(door, store_room_2_door).
entity(door, puzzle_room_2_door).

%% The door has two handles
entity(handle, store_room_1_door_handle_inner).
entity(handle, store_room_1_door_handle_outer).
entity(handle, puzzle_room_1_door_handle_inner).
entity(handle, puzzle_room_1_door_handle_outer).
entity(handle, store_room_2_door_handle_inner).
entity(handle, store_room_2_door_handle_outer).
entity(handle, puzzle_room_2_door_handle_inner).
entity(handle, puzzle_room_2_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_1_table).
entity(table, puzzle_room_2_table).

%% The table has three sides
entity(side, puzzle_room_1_table_left).
entity(side, puzzle_room_1_table_middle).
entity(side, puzzle_room_1_table_right).
entity(side, puzzle_room_2_table_left).
entity(side, puzzle_room_2_table_middle).
entity(side, puzzle_room_2_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, N)) :- entity(room, ROOM), entity(zone, (ROOM, N)), n(N).
ancestry_relation((ROOM, N), ((ROOM, N), X, Y)) :- entity(room, ROOM), entity(zone, (ROOM, N)), entity(cell, ((ROOM, N), X, Y)), n(N), n(X), n(Y).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_1_door, store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door, store_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door, store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door, store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_right).

[04-03-2022_16-21-14] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[04-03-2022_16-21-14] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-14] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[04-03-2022_16-21-14] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[04-03-2022_16-21-14] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[04-03-2022_16-21-14] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[04-03-2022_16-21-14] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); minimise_actions = true. [1@2,ROBOT,A,step]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M); order_fgoals = true. [(((M+1)-ORDER)*-step)@3,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); order_fgoals = true.
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@1,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@1,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@0,AL,ROBOT,A,F,V,step]
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- step > minimum_search_length_bound; incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 5.
#const reduc = 4.
#const conde = 2.
#const groun = 1.
model_type(5,tasking).
model_type(4,reduced).
model_type(3,condensed).
model_type(2,condensed).
model_type(1,ground).
class(5,robot).
class(5,armed_robot).
class(5,location).
class(5,room).
class(5,object).
class(5,grounded).
class(5,graspable).
class(5,placeable).
class(5,block).
class(5,surface).
class(5,table).
class(5,colour).
class(4,manipulator_arm).
class(4,grasper).
class(3,door).
class(3,handle).
class(3,configurable).
class(3,extensible).
class(2,zone).
class(2,manipulator_limb).
class(2,manipulator_end).
class(2,side).
class(1,cell).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,zone).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,zone,location).
override_class(zone,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1 < TL; AL_2 < TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,transporting(ROBO,OBJ),B) :- insta_of(AL_2,armed_robot,ROBO); insta_of(AL_1,graspable,OBJ); OBJ != nothing; AL_1 >= TL; model_type(TL,tasking); sl(AL_2); sl(AL_1); AL_2 >= AL_1; boolean(B).
fluent(AL,defined,tower_base(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,complete_tower(COLOUR,TABLE),B) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < TL; model_type(TL,tasking); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < TL; model_type(TL,tasking); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,collect(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL >= TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,deposit(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL >= TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,place_upon(OBJ,SURFACE)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
effect(AL,ROBO,collect(OBJ),transporting(ROBO,OBJ),true) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,collect(OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,on(OBJ),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),false); insta_of(RL,armed_robot,ROBO); insta_of(RL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,transporting(ROBO,OBJ),false); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO,collect(OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,collect(OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,collect(OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,collect(OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),true,true) :- OBJ != nothing; action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,SURFACE),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,OBJ_2),on(OBJ_2),nothing,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ_2),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,surface,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
#false :- holds(AL,grasping(DESC_1),OBJ,t); holds(AL,grasping(DESC_2),OBJ,t); fluent(AL,inertial,grasping(DESC_1),OBJ); fluent(AL,inertial,grasping(DESC_2),OBJ); DESC_1 != DESC_2; desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); insta_of(AL,surface,SURFACE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE,TABLE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,complete_tower(COLOUR,TABLE),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; blocks_per_tower(N); holds(AL,unordered_tower(BASE,TABLE),false,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,complete_tower(COLOUR,TABLE),true); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,transporting(ROBO,OBJ),true,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,transporting(ROBO,OBJ),true); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3.
holds(AL_1,transporting(ROBO,OBJ),true,t) :- holds(AL_2,grasping(COMP),OBJ,t); fluent(AL_1,inertial,transporting(ROBO,OBJ),true); fluent(AL_2,inertial,grasping(COMP),OBJ); desce_of(AL_2,ROBO,COMP); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_3,grasper,COMP); insta_of(AL_4,robot,ROBO); AL_1 >= TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,transporting(ROBO,OBJ),false,t) :- 0 = #count { COMP: holds(AL_2,grasping(COMP),OBJ,t), fluent(AL_2,inertial,grasping(COMP),OBJ), desce_of(AL_2,ROBO,COMP), insta_of(AL_3,grasper,COMP), sl(AL_3), AL_3 >= AL_2 }; fluent(AL_1,inertial,transporting(ROBO,OBJ),false); has_desce(AL_2,ROBO,grasper); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_4,robot,ROBO); AL_1 >= TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_4); AL_4 >= AL_1.
#program static_state.
is(1,connected(((starting_room_1,1),5,1),((hallway_1,1),4,0))).
is(1,connected(((store_room_1,1),5,1),((hallway_1,0),0,1))).
is(1,connected(((hallway_1,2),8,1),((puzzle_room_1,0),0,1))).
is(1,connected(((hallway_1,1),4,1),((hallway_2,1),4,0))).
is(1,connected(((store_room_2,1),5,1),((hallway_2,0),0,1))).
is(1,connected(((hallway_2,2),8,1),((puzzle_room_2,0),0,1))).
is(1,connected_by_door(store_room_1_door,((store_room_1,1),5,1),((hallway_1,0),0,1))).
is(1,connected_by_door(puzzle_room_1_door,((hallway_1,2),8,1),((puzzle_room_1,0),0,1))).
is(1,connected_by_door(store_room_1_door,((store_room_2,1),5,1),((hallway_2,0),0,1))).
is(1,connected_by_door(puzzle_room_1_door,((hallway_2,2),8,1),((puzzle_room_2,0),0,1))).
is(1,in(store_room_1_door_handle_inner,((store_room_1,1),5,1))).
is(1,in(store_room_1_door_handle_outer,((hallway_1,0),0,1))).
is(1,in(puzzle_room_1_door_handle_inner,((puzzle_room_1,0),0,1))).
is(1,in(puzzle_room_1_door_handle_outer,((hallway_1,2),8,1))).
is(1,in(store_room_2_door_handle_inner,((store_room_2,1),5,1))).
is(1,in(store_room_2_door_handle_outer,((hallway_2,0),0,1))).
is(1,in(puzzle_room_2_door_handle_inner,((puzzle_room_2,0),0,1))).
is(1,in(puzzle_room_2_door_handle_outer,((hallway_2,2),8,1))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(AL,colour_of((BLOCK,N),yellow)) :- static(AL,colour_of((BLOCK,N),yellow)); insta_of(AL,block,(BLOCK,N)); N > 6; N <= 9; al(AL).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N > 9; N <= 12; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 12; N <= 15; al(AL).
is(AL,colour_of((BLOCK,N),yellow)) :- static(AL,colour_of((BLOCK,N),yellow)); insta_of(AL,block,(BLOCK,N)); N > 15; N <= 18; al(AL).
is(1,connected(((R,N_1),X_1,Y),((R,N_2),X_2,Y))) :- insta_of(1,cell,((R,N_1),X_1,Y)); insta_of(1,cell,((R,N_2),X_2,Y)); X_2 = (X_1+1).
is(1,connected((A,X,Y_1),(A,X,Y_2))) :- insta_of(1,cell,(A,X,Y_1)); insta_of(1,cell,(A,X,Y_2)); Y_2 = (Y_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),((starting_room_1,0),0,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_1_table),((puzzle_room_1,1),5,0),0).
holds(1,in(puzzle_room_2_table),((puzzle_room_2,1),5,0),0).
holds(1,on((block,1)),puzzle_room_1_table_left,0).
holds(1,on((block,2)),puzzle_room_1_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,10)),puzzle_room_2_table_left,0).
holds(1,on((block,11)),puzzle_room_2_table_right,0).
holds(1,on((block,12)),(block,10),0).
holds(1,in((block,4)),((store_room_1,0),0,0),0).
holds(1,in((block,5)),((store_room_1,0),0,0),0).
holds(1,in((block,6)),((store_room_1,0),0,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
holds(1,in((block,13)),((store_room_2,0),0,0),0).
holds(1,in((block,14)),((store_room_2,0),0,0),0).
holds(1,in((block,15)),((store_room_2,0),0,0),0).
holds(1,on((block,13)),nothing,0).
holds(1,on((block,14)),nothing,0).
holds(1,on((block,15)),nothing,0).
holds(1,on((block,7)),puzzle_room_1_table_middle,0).
holds(1,in((block,8)),((store_room_1,0),0,1),0).
holds(1,on((block,9)),(block,7),0).
holds(1,on((block,8)),nothing,0).
holds(1,on((block,16)),puzzle_room_2_table_middle,0).
holds(1,in((block,17)),((store_room_2,0),0,1),0).
holds(1,on((block,18)),(block,16),0).
holds(1,on((block,17)),nothing,0).
#program goal_state.
goal_fluent(AL,complete_tower(COLOUR,TABLE)) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,unordered_tower(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete_tower(COLOUR,TABLE),true,true) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
final_goal(1,on((block,3)),puzzle_room_1_table_left,true).
final_goal(1,on((block,6)),puzzle_room_1_table_right,true).
final_goal(1,on((block,9)),puzzle_room_1_table_middle,true).
final_goal(1,on((block,12)),puzzle_room_2_table_left,true).
final_goal(1,on((block,15)),puzzle_room_2_table_right,true).
final_goal(1,on((block,18)),puzzle_room_2_table_middle,true).
#program entities.
goal_order(AL,complete_tower(COLOUR,puzzle_room_1_table),true,true,1) :- insta_of(AL,colour,COLOUR); al(AL).
goal_order(AL,complete_tower(COLOUR,puzzle_room_2_table),true,true,2) :- insta_of(AL,colour,COLOUR); al(AL).
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..18)).
blocks_per_tower(3).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room_1).
entity(room,store_room_1).
entity(room,puzzle_room_1).
entity(room,hallway_1).
entity(room,store_room_2).
entity(room,puzzle_room_2).
entity(room,hallway_2).
n((0..9)).
size(starting_room_1,6,2).
size(store_room_1,6,2).
size(hallway_1,9,2).
size(puzzle_room_1,6,2).
size(store_room_2,6,2).
size(hallway_2,9,2).
size(puzzle_room_2,6,2).
zone_width(3).
entity(zone,(ROOM,N)) :- entity(room,ROOM); size(ROOM,N_MAX,_); N < (N_MAX/W); zone_width(W); n(N).
zone_x((ROOM,N),((N*W)+P)) :- P >= 0; P < W; zone_width(W); entity(zone,(ROOM,N)); n(P); n(N).
entity(cell,((ROOM,N),X,Y)) :- zone_x((ROOM,N),X); entity(room,ROOM); entity(zone,(ROOM,N)); size(ROOM,X_MAX,Y_MAX); X < X_MAX; Y < Y_MAX; n(N); n(X); n(Y).
entity(door,store_room_1_door).
entity(door,puzzle_room_1_door).
entity(door,store_room_2_door).
entity(door,puzzle_room_2_door).
entity(handle,store_room_1_door_handle_inner).
entity(handle,store_room_1_door_handle_outer).
entity(handle,puzzle_room_1_door_handle_inner).
entity(handle,puzzle_room_1_door_handle_outer).
entity(handle,store_room_2_door_handle_inner).
entity(handle,store_room_2_door_handle_outer).
entity(handle,puzzle_room_2_door_handle_inner).
entity(handle,puzzle_room_2_door_handle_outer).
entity(table,puzzle_room_1_table).
entity(table,puzzle_room_2_table).
entity(side,puzzle_room_1_table_left).
entity(side,puzzle_room_1_table_middle).
entity(side,puzzle_room_1_table_right).
entity(side,puzzle_room_2_table_left).
entity(side,puzzle_room_2_table_middle).
entity(side,puzzle_room_2_table_right).
entity(colour,red).
entity(colour,blue).
entity(colour,yellow).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,N)) :- entity(room,ROOM); entity(zone,(ROOM,N)); n(N).
ancestry_relation((ROOM,N),((ROOM,N),X,Y)) :- entity(room,ROOM); entity(zone,(ROOM,N)); entity(cell,((ROOM,N),X,Y)); n(N); n(X); n(Y).
ancestry_relation(store_room_1_door,store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door,store_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door,puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door,puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door,store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door,store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door,puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door,puzzle_room_2_door_handle_outer).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_right)., ASH #1)

[04-03-2022_16-21-14] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[04-03-2022_16-21-14] INFO :: ASH Planner Main #1 >> Generating initial states...

[04-03-2022_16-21-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[04-03-2022_16-21-14] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 443 rules

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0033978000000001174s

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[04-03-2022_16-21-14] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[04-03-2022_16-21-17] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 3.090346s.

[04-03-2022_16-21-17] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.926172s with result Satisfiable.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 3.090346s, Solving = 0.926172s, Total = 4.016518s, Memory = (RSS = 314.597656Mb, VMS = 312.167969Mb)
Final Model :: Total atoms = 69709, Cost = (), Optimality proven = False, Number = 1, Thread ID = 6, Model type = ModelType.StableModel

[04-03-2022_16-21-18] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 3.090346s, Solving = 0.926172s, Total = 4.016518s, Memory = (RSS = 314.597656Mb, VMS = 312.167969Mb)
Final Model :: Total atoms = 69709, Cost = (), Optimality proven = False, Number = 1, Thread ID = 6, Model type = ModelType.StableModel

[04-03-2022_16-21-18] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 5            
      ================================================      

holds(5, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(5, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(5, complete_tower(red,puzzle_room_1_table), false, 0)
holds(5, complete_tower(red,puzzle_room_2_table), false, 0)
holds(5, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(5, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(5, in((block,1)), puzzle_room_1, 0)
holds(5, in((block,10)), puzzle_room_2, 0)
holds(5, in((block,11)), puzzle_room_2, 0)
holds(5, in((block,12)), puzzle_room_2, 0)
holds(5, in((block,13)), store_room_2, 0)
holds(5, in((block,14)), store_room_2, 0)
holds(5, in((block,15)), store_room_2, 0)
holds(5, in((block,16)), puzzle_room_2, 0)
holds(5, in((block,17)), store_room_2, 0)
holds(5, in((block,18)), puzzle_room_2, 0)
holds(5, in((block,2)), puzzle_room_1, 0)
holds(5, in((block,3)), puzzle_room_1, 0)
holds(5, in((block,4)), store_room_1, 0)
holds(5, in((block,5)), store_room_1, 0)
holds(5, in((block,6)), store_room_1, 0)
holds(5, in((block,7)), puzzle_room_1, 0)
holds(5, in((block,8)), store_room_1, 0)
holds(5, in((block,9)), puzzle_room_1, 0)
holds(5, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(5, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(5, in(talos), starting_room_1, 0)
holds(5, in_tower((block,1),(block,1)), true, 0)
holds(5, in_tower((block,1),(block,10)), false, 0)
holds(5, in_tower((block,1),(block,11)), false, 0)
holds(5, in_tower((block,1),(block,12)), false, 0)
holds(5, in_tower((block,1),(block,13)), false, 0)
holds(5, in_tower((block,1),(block,14)), false, 0)
holds(5, in_tower((block,1),(block,15)), false, 0)
holds(5, in_tower((block,1),(block,16)), false, 0)
holds(5, in_tower((block,1),(block,17)), false, 0)
holds(5, in_tower((block,1),(block,18)), false, 0)
holds(5, in_tower((block,1),(block,2)), false, 0)
holds(5, in_tower((block,1),(block,3)), true, 0)
holds(5, in_tower((block,1),(block,4)), false, 0)
holds(5, in_tower((block,1),(block,5)), false, 0)
holds(5, in_tower((block,1),(block,6)), false, 0)
holds(5, in_tower((block,1),(block,7)), false, 0)
holds(5, in_tower((block,1),(block,8)), false, 0)
holds(5, in_tower((block,1),(block,9)), false, 0)
holds(5, in_tower((block,10),(block,1)), false, 0)
holds(5, in_tower((block,10),(block,10)), true, 0)
holds(5, in_tower((block,10),(block,11)), false, 0)
holds(5, in_tower((block,10),(block,12)), true, 0)
holds(5, in_tower((block,10),(block,13)), false, 0)
holds(5, in_tower((block,10),(block,14)), false, 0)
holds(5, in_tower((block,10),(block,15)), false, 0)
holds(5, in_tower((block,10),(block,16)), false, 0)
holds(5, in_tower((block,10),(block,17)), false, 0)
holds(5, in_tower((block,10),(block,18)), false, 0)
holds(5, in_tower((block,10),(block,2)), false, 0)
holds(5, in_tower((block,10),(block,3)), false, 0)
holds(5, in_tower((block,10),(block,4)), false, 0)
holds(5, in_tower((block,10),(block,5)), false, 0)
holds(5, in_tower((block,10),(block,6)), false, 0)
holds(5, in_tower((block,10),(block,7)), false, 0)
holds(5, in_tower((block,10),(block,8)), false, 0)
holds(5, in_tower((block,10),(block,9)), false, 0)
holds(5, in_tower((block,11),(block,1)), false, 0)
holds(5, in_tower((block,11),(block,10)), false, 0)
holds(5, in_tower((block,11),(block,11)), true, 0)
holds(5, in_tower((block,11),(block,12)), false, 0)
holds(5, in_tower((block,11),(block,13)), false, 0)
holds(5, in_tower((block,11),(block,14)), false, 0)
holds(5, in_tower((block,11),(block,15)), false, 0)
holds(5, in_tower((block,11),(block,16)), false, 0)
holds(5, in_tower((block,11),(block,17)), false, 0)
holds(5, in_tower((block,11),(block,18)), false, 0)
holds(5, in_tower((block,11),(block,2)), false, 0)
holds(5, in_tower((block,11),(block,3)), false, 0)
holds(5, in_tower((block,11),(block,4)), false, 0)
holds(5, in_tower((block,11),(block,5)), false, 0)
holds(5, in_tower((block,11),(block,6)), false, 0)
holds(5, in_tower((block,11),(block,7)), false, 0)
holds(5, in_tower((block,11),(block,8)), false, 0)
holds(5, in_tower((block,11),(block,9)), false, 0)
holds(5, in_tower((block,12),(block,1)), false, 0)
holds(5, in_tower((block,12),(block,10)), false, 0)
holds(5, in_tower((block,12),(block,11)), false, 0)
holds(5, in_tower((block,12),(block,12)), false, 0)
holds(5, in_tower((block,12),(block,13)), false, 0)
holds(5, in_tower((block,12),(block,14)), false, 0)
holds(5, in_tower((block,12),(block,15)), false, 0)
holds(5, in_tower((block,12),(block,16)), false, 0)
holds(5, in_tower((block,12),(block,17)), false, 0)
holds(5, in_tower((block,12),(block,18)), false, 0)
holds(5, in_tower((block,12),(block,2)), false, 0)
holds(5, in_tower((block,12),(block,3)), false, 0)
holds(5, in_tower((block,12),(block,4)), false, 0)
holds(5, in_tower((block,12),(block,5)), false, 0)
holds(5, in_tower((block,12),(block,6)), false, 0)
holds(5, in_tower((block,12),(block,7)), false, 0)
holds(5, in_tower((block,12),(block,8)), false, 0)
holds(5, in_tower((block,12),(block,9)), false, 0)
holds(5, in_tower((block,13),(block,1)), false, 0)
holds(5, in_tower((block,13),(block,10)), false, 0)
holds(5, in_tower((block,13),(block,11)), false, 0)
holds(5, in_tower((block,13),(block,12)), false, 0)
holds(5, in_tower((block,13),(block,13)), false, 0)
holds(5, in_tower((block,13),(block,14)), false, 0)
holds(5, in_tower((block,13),(block,15)), false, 0)
holds(5, in_tower((block,13),(block,16)), false, 0)
holds(5, in_tower((block,13),(block,17)), false, 0)
holds(5, in_tower((block,13),(block,18)), false, 0)
holds(5, in_tower((block,13),(block,2)), false, 0)
holds(5, in_tower((block,13),(block,3)), false, 0)
holds(5, in_tower((block,13),(block,4)), false, 0)
holds(5, in_tower((block,13),(block,5)), false, 0)
holds(5, in_tower((block,13),(block,6)), false, 0)
holds(5, in_tower((block,13),(block,7)), false, 0)
holds(5, in_tower((block,13),(block,8)), false, 0)
holds(5, in_tower((block,13),(block,9)), false, 0)
holds(5, in_tower((block,14),(block,1)), false, 0)
holds(5, in_tower((block,14),(block,10)), false, 0)
holds(5, in_tower((block,14),(block,11)), false, 0)
holds(5, in_tower((block,14),(block,12)), false, 0)
holds(5, in_tower((block,14),(block,13)), false, 0)
holds(5, in_tower((block,14),(block,14)), false, 0)
holds(5, in_tower((block,14),(block,15)), false, 0)
holds(5, in_tower((block,14),(block,16)), false, 0)
holds(5, in_tower((block,14),(block,17)), false, 0)
holds(5, in_tower((block,14),(block,18)), false, 0)
holds(5, in_tower((block,14),(block,2)), false, 0)
holds(5, in_tower((block,14),(block,3)), false, 0)
holds(5, in_tower((block,14),(block,4)), false, 0)
holds(5, in_tower((block,14),(block,5)), false, 0)
holds(5, in_tower((block,14),(block,6)), false, 0)
holds(5, in_tower((block,14),(block,7)), false, 0)
holds(5, in_tower((block,14),(block,8)), false, 0)
holds(5, in_tower((block,14),(block,9)), false, 0)
holds(5, in_tower((block,15),(block,1)), false, 0)
holds(5, in_tower((block,15),(block,10)), false, 0)
holds(5, in_tower((block,15),(block,11)), false, 0)
holds(5, in_tower((block,15),(block,12)), false, 0)
holds(5, in_tower((block,15),(block,13)), false, 0)
holds(5, in_tower((block,15),(block,14)), false, 0)
holds(5, in_tower((block,15),(block,15)), false, 0)
holds(5, in_tower((block,15),(block,16)), false, 0)
holds(5, in_tower((block,15),(block,17)), false, 0)
holds(5, in_tower((block,15),(block,18)), false, 0)
holds(5, in_tower((block,15),(block,2)), false, 0)
holds(5, in_tower((block,15),(block,3)), false, 0)
holds(5, in_tower((block,15),(block,4)), false, 0)
holds(5, in_tower((block,15),(block,5)), false, 0)
holds(5, in_tower((block,15),(block,6)), false, 0)
holds(5, in_tower((block,15),(block,7)), false, 0)
holds(5, in_tower((block,15),(block,8)), false, 0)
holds(5, in_tower((block,15),(block,9)), false, 0)
holds(5, in_tower((block,16),(block,1)), false, 0)
holds(5, in_tower((block,16),(block,10)), false, 0)
holds(5, in_tower((block,16),(block,11)), false, 0)
holds(5, in_tower((block,16),(block,12)), false, 0)
holds(5, in_tower((block,16),(block,13)), false, 0)
holds(5, in_tower((block,16),(block,14)), false, 0)
holds(5, in_tower((block,16),(block,15)), false, 0)
holds(5, in_tower((block,16),(block,16)), true, 0)
holds(5, in_tower((block,16),(block,17)), false, 0)
holds(5, in_tower((block,16),(block,18)), true, 0)
holds(5, in_tower((block,16),(block,2)), false, 0)
holds(5, in_tower((block,16),(block,3)), false, 0)
holds(5, in_tower((block,16),(block,4)), false, 0)
holds(5, in_tower((block,16),(block,5)), false, 0)
holds(5, in_tower((block,16),(block,6)), false, 0)
holds(5, in_tower((block,16),(block,7)), false, 0)
holds(5, in_tower((block,16),(block,8)), false, 0)
holds(5, in_tower((block,16),(block,9)), false, 0)
holds(5, in_tower((block,17),(block,1)), false, 0)
holds(5, in_tower((block,17),(block,10)), false, 0)
holds(5, in_tower((block,17),(block,11)), false, 0)
holds(5, in_tower((block,17),(block,12)), false, 0)
holds(5, in_tower((block,17),(block,13)), false, 0)
holds(5, in_tower((block,17),(block,14)), false, 0)
holds(5, in_tower((block,17),(block,15)), false, 0)
holds(5, in_tower((block,17),(block,16)), false, 0)
holds(5, in_tower((block,17),(block,17)), false, 0)
holds(5, in_tower((block,17),(block,18)), false, 0)
holds(5, in_tower((block,17),(block,2)), false, 0)
holds(5, in_tower((block,17),(block,3)), false, 0)
holds(5, in_tower((block,17),(block,4)), false, 0)
holds(5, in_tower((block,17),(block,5)), false, 0)
holds(5, in_tower((block,17),(block,6)), false, 0)
holds(5, in_tower((block,17),(block,7)), false, 0)
holds(5, in_tower((block,17),(block,8)), false, 0)
holds(5, in_tower((block,17),(block,9)), false, 0)
holds(5, in_tower((block,18),(block,1)), false, 0)
holds(5, in_tower((block,18),(block,10)), false, 0)
holds(5, in_tower((block,18),(block,11)), false, 0)
holds(5, in_tower((block,18),(block,12)), false, 0)
holds(5, in_tower((block,18),(block,13)), false, 0)
holds(5, in_tower((block,18),(block,14)), false, 0)
holds(5, in_tower((block,18),(block,15)), false, 0)
holds(5, in_tower((block,18),(block,16)), false, 0)
holds(5, in_tower((block,18),(block,17)), false, 0)
holds(5, in_tower((block,18),(block,18)), false, 0)
holds(5, in_tower((block,18),(block,2)), false, 0)
holds(5, in_tower((block,18),(block,3)), false, 0)
holds(5, in_tower((block,18),(block,4)), false, 0)
holds(5, in_tower((block,18),(block,5)), false, 0)
holds(5, in_tower((block,18),(block,6)), false, 0)
holds(5, in_tower((block,18),(block,7)), false, 0)
holds(5, in_tower((block,18),(block,8)), false, 0)
holds(5, in_tower((block,18),(block,9)), false, 0)
holds(5, in_tower((block,2),(block,1)), false, 0)
holds(5, in_tower((block,2),(block,10)), false, 0)
holds(5, in_tower((block,2),(block,11)), false, 0)
holds(5, in_tower((block,2),(block,12)), false, 0)
holds(5, in_tower((block,2),(block,13)), false, 0)
holds(5, in_tower((block,2),(block,14)), false, 0)
holds(5, in_tower((block,2),(block,15)), false, 0)
holds(5, in_tower((block,2),(block,16)), false, 0)
holds(5, in_tower((block,2),(block,17)), false, 0)
holds(5, in_tower((block,2),(block,18)), false, 0)
holds(5, in_tower((block,2),(block,2)), true, 0)
holds(5, in_tower((block,2),(block,3)), false, 0)
holds(5, in_tower((block,2),(block,4)), false, 0)
holds(5, in_tower((block,2),(block,5)), false, 0)
holds(5, in_tower((block,2),(block,6)), false, 0)
holds(5, in_tower((block,2),(block,7)), false, 0)
holds(5, in_tower((block,2),(block,8)), false, 0)
holds(5, in_tower((block,2),(block,9)), false, 0)
holds(5, in_tower((block,3),(block,1)), false, 0)
holds(5, in_tower((block,3),(block,10)), false, 0)
holds(5, in_tower((block,3),(block,11)), false, 0)
holds(5, in_tower((block,3),(block,12)), false, 0)
holds(5, in_tower((block,3),(block,13)), false, 0)
holds(5, in_tower((block,3),(block,14)), false, 0)
holds(5, in_tower((block,3),(block,15)), false, 0)
holds(5, in_tower((block,3),(block,16)), false, 0)
holds(5, in_tower((block,3),(block,17)), false, 0)
holds(5, in_tower((block,3),(block,18)), false, 0)
holds(5, in_tower((block,3),(block,2)), false, 0)
holds(5, in_tower((block,3),(block,3)), false, 0)
holds(5, in_tower((block,3),(block,4)), false, 0)
holds(5, in_tower((block,3),(block,5)), false, 0)
holds(5, in_tower((block,3),(block,6)), false, 0)
holds(5, in_tower((block,3),(block,7)), false, 0)
holds(5, in_tower((block,3),(block,8)), false, 0)
holds(5, in_tower((block,3),(block,9)), false, 0)
holds(5, in_tower((block,4),(block,1)), false, 0)
holds(5, in_tower((block,4),(block,10)), false, 0)
holds(5, in_tower((block,4),(block,11)), false, 0)
holds(5, in_tower((block,4),(block,12)), false, 0)
holds(5, in_tower((block,4),(block,13)), false, 0)
holds(5, in_tower((block,4),(block,14)), false, 0)
holds(5, in_tower((block,4),(block,15)), false, 0)
holds(5, in_tower((block,4),(block,16)), false, 0)
holds(5, in_tower((block,4),(block,17)), false, 0)
holds(5, in_tower((block,4),(block,18)), false, 0)
holds(5, in_tower((block,4),(block,2)), false, 0)
holds(5, in_tower((block,4),(block,3)), false, 0)
holds(5, in_tower((block,4),(block,4)), false, 0)
holds(5, in_tower((block,4),(block,5)), false, 0)
holds(5, in_tower((block,4),(block,6)), false, 0)
holds(5, in_tower((block,4),(block,7)), false, 0)
holds(5, in_tower((block,4),(block,8)), false, 0)
holds(5, in_tower((block,4),(block,9)), false, 0)
holds(5, in_tower((block,5),(block,1)), false, 0)
holds(5, in_tower((block,5),(block,10)), false, 0)
holds(5, in_tower((block,5),(block,11)), false, 0)
holds(5, in_tower((block,5),(block,12)), false, 0)
holds(5, in_tower((block,5),(block,13)), false, 0)
holds(5, in_tower((block,5),(block,14)), false, 0)
holds(5, in_tower((block,5),(block,15)), false, 0)
holds(5, in_tower((block,5),(block,16)), false, 0)
holds(5, in_tower((block,5),(block,17)), false, 0)
holds(5, in_tower((block,5),(block,18)), false, 0)
holds(5, in_tower((block,5),(block,2)), false, 0)
holds(5, in_tower((block,5),(block,3)), false, 0)
holds(5, in_tower((block,5),(block,4)), false, 0)
holds(5, in_tower((block,5),(block,5)), false, 0)
holds(5, in_tower((block,5),(block,6)), false, 0)
holds(5, in_tower((block,5),(block,7)), false, 0)
holds(5, in_tower((block,5),(block,8)), false, 0)
holds(5, in_tower((block,5),(block,9)), false, 0)
holds(5, in_tower((block,6),(block,1)), false, 0)
holds(5, in_tower((block,6),(block,10)), false, 0)
holds(5, in_tower((block,6),(block,11)), false, 0)
holds(5, in_tower((block,6),(block,12)), false, 0)
holds(5, in_tower((block,6),(block,13)), false, 0)
holds(5, in_tower((block,6),(block,14)), false, 0)
holds(5, in_tower((block,6),(block,15)), false, 0)
holds(5, in_tower((block,6),(block,16)), false, 0)
holds(5, in_tower((block,6),(block,17)), false, 0)
holds(5, in_tower((block,6),(block,18)), false, 0)
holds(5, in_tower((block,6),(block,2)), false, 0)
holds(5, in_tower((block,6),(block,3)), false, 0)
holds(5, in_tower((block,6),(block,4)), false, 0)
holds(5, in_tower((block,6),(block,5)), false, 0)
holds(5, in_tower((block,6),(block,6)), false, 0)
holds(5, in_tower((block,6),(block,7)), false, 0)
holds(5, in_tower((block,6),(block,8)), false, 0)
holds(5, in_tower((block,6),(block,9)), false, 0)
holds(5, in_tower((block,7),(block,1)), false, 0)
holds(5, in_tower((block,7),(block,10)), false, 0)
holds(5, in_tower((block,7),(block,11)), false, 0)
holds(5, in_tower((block,7),(block,12)), false, 0)
holds(5, in_tower((block,7),(block,13)), false, 0)
holds(5, in_tower((block,7),(block,14)), false, 0)
holds(5, in_tower((block,7),(block,15)), false, 0)
holds(5, in_tower((block,7),(block,16)), false, 0)
holds(5, in_tower((block,7),(block,17)), false, 0)
holds(5, in_tower((block,7),(block,18)), false, 0)
holds(5, in_tower((block,7),(block,2)), false, 0)
holds(5, in_tower((block,7),(block,3)), false, 0)
holds(5, in_tower((block,7),(block,4)), false, 0)
holds(5, in_tower((block,7),(block,5)), false, 0)
holds(5, in_tower((block,7),(block,6)), false, 0)
holds(5, in_tower((block,7),(block,7)), true, 0)
holds(5, in_tower((block,7),(block,8)), false, 0)
holds(5, in_tower((block,7),(block,9)), true, 0)
holds(5, in_tower((block,8),(block,1)), false, 0)
holds(5, in_tower((block,8),(block,10)), false, 0)
holds(5, in_tower((block,8),(block,11)), false, 0)
holds(5, in_tower((block,8),(block,12)), false, 0)
holds(5, in_tower((block,8),(block,13)), false, 0)
holds(5, in_tower((block,8),(block,14)), false, 0)
holds(5, in_tower((block,8),(block,15)), false, 0)
holds(5, in_tower((block,8),(block,16)), false, 0)
holds(5, in_tower((block,8),(block,17)), false, 0)
holds(5, in_tower((block,8),(block,18)), false, 0)
holds(5, in_tower((block,8),(block,2)), false, 0)
holds(5, in_tower((block,8),(block,3)), false, 0)
holds(5, in_tower((block,8),(block,4)), false, 0)
holds(5, in_tower((block,8),(block,5)), false, 0)
holds(5, in_tower((block,8),(block,6)), false, 0)
holds(5, in_tower((block,8),(block,7)), false, 0)
holds(5, in_tower((block,8),(block,8)), false, 0)
holds(5, in_tower((block,8),(block,9)), false, 0)
holds(5, in_tower((block,9),(block,1)), false, 0)
holds(5, in_tower((block,9),(block,10)), false, 0)
holds(5, in_tower((block,9),(block,11)), false, 0)
holds(5, in_tower((block,9),(block,12)), false, 0)
holds(5, in_tower((block,9),(block,13)), false, 0)
holds(5, in_tower((block,9),(block,14)), false, 0)
holds(5, in_tower((block,9),(block,15)), false, 0)
holds(5, in_tower((block,9),(block,16)), false, 0)
holds(5, in_tower((block,9),(block,17)), false, 0)
holds(5, in_tower((block,9),(block,18)), false, 0)
holds(5, in_tower((block,9),(block,2)), false, 0)
holds(5, in_tower((block,9),(block,3)), false, 0)
holds(5, in_tower((block,9),(block,4)), false, 0)
holds(5, in_tower((block,9),(block,5)), false, 0)
holds(5, in_tower((block,9),(block,6)), false, 0)
holds(5, in_tower((block,9),(block,7)), false, 0)
holds(5, in_tower((block,9),(block,8)), false, 0)
holds(5, in_tower((block,9),(block,9)), false, 0)
holds(5, on((block,1)), puzzle_room_1_table, 0)
holds(5, on((block,10)), puzzle_room_2_table, 0)
holds(5, on((block,11)), puzzle_room_2_table, 0)
holds(5, on((block,12)), (block,10), 0)
holds(5, on((block,13)), nothing, 0)
holds(5, on((block,14)), nothing, 0)
holds(5, on((block,15)), nothing, 0)
holds(5, on((block,16)), puzzle_room_2_table, 0)
holds(5, on((block,17)), nothing, 0)
holds(5, on((block,18)), (block,16), 0)
holds(5, on((block,2)), puzzle_room_1_table, 0)
holds(5, on((block,3)), (block,1), 0)
holds(5, on((block,4)), nothing, 0)
holds(5, on((block,5)), nothing, 0)
holds(5, on((block,6)), nothing, 0)
holds(5, on((block,7)), puzzle_room_1_table, 0)
holds(5, on((block,8)), nothing, 0)
holds(5, on((block,9)), (block,7), 0)
holds(5, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(5, transporting(talos,(block,1)), false, 0)
holds(5, transporting(talos,(block,10)), false, 0)
holds(5, transporting(talos,(block,11)), false, 0)
holds(5, transporting(talos,(block,12)), false, 0)
holds(5, transporting(talos,(block,13)), false, 0)
holds(5, transporting(talos,(block,14)), false, 0)
holds(5, transporting(talos,(block,15)), false, 0)
holds(5, transporting(talos,(block,16)), false, 0)
holds(5, transporting(talos,(block,17)), false, 0)
holds(5, transporting(talos,(block,18)), false, 0)
holds(5, transporting(talos,(block,2)), false, 0)
holds(5, transporting(talos,(block,3)), false, 0)
holds(5, transporting(talos,(block,4)), false, 0)
holds(5, transporting(talos,(block,5)), false, 0)
holds(5, transporting(talos,(block,6)), false, 0)
holds(5, transporting(talos,(block,7)), false, 0)
holds(5, transporting(talos,(block,8)), false, 0)
holds(5, transporting(talos,(block,9)), false, 0)
holds(5, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(5, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(5, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(5, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(5, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-21-18] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 4            
      ================================================      

holds(4, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(4, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(4, complete_tower(red,puzzle_room_1_table), false, 0)
holds(4, complete_tower(red,puzzle_room_2_table), false, 0)
holds(4, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(4, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(4, grasping(manipulator_arm_1), nothing, 0)
holds(4, grasping(manipulator_arm_2), nothing, 0)
holds(4, in((block,1)), puzzle_room_1, 0)
holds(4, in((block,10)), puzzle_room_2, 0)
holds(4, in((block,11)), puzzle_room_2, 0)
holds(4, in((block,12)), puzzle_room_2, 0)
holds(4, in((block,13)), store_room_2, 0)
holds(4, in((block,14)), store_room_2, 0)
holds(4, in((block,15)), store_room_2, 0)
holds(4, in((block,16)), puzzle_room_2, 0)
holds(4, in((block,17)), store_room_2, 0)
holds(4, in((block,18)), puzzle_room_2, 0)
holds(4, in((block,2)), puzzle_room_1, 0)
holds(4, in((block,3)), puzzle_room_1, 0)
holds(4, in((block,4)), store_room_1, 0)
holds(4, in((block,5)), store_room_1, 0)
holds(4, in((block,6)), store_room_1, 0)
holds(4, in((block,7)), puzzle_room_1, 0)
holds(4, in((block,8)), store_room_1, 0)
holds(4, in((block,9)), puzzle_room_1, 0)
holds(4, in(manipulator_arm_1), starting_room_1, 0)
holds(4, in(manipulator_arm_2), starting_room_1, 0)
holds(4, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(4, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(4, in(talos), starting_room_1, 0)
holds(4, in_tower((block,1),(block,1)), true, 0)
holds(4, in_tower((block,1),(block,10)), false, 0)
holds(4, in_tower((block,1),(block,11)), false, 0)
holds(4, in_tower((block,1),(block,12)), false, 0)
holds(4, in_tower((block,1),(block,13)), false, 0)
holds(4, in_tower((block,1),(block,14)), false, 0)
holds(4, in_tower((block,1),(block,15)), false, 0)
holds(4, in_tower((block,1),(block,16)), false, 0)
holds(4, in_tower((block,1),(block,17)), false, 0)
holds(4, in_tower((block,1),(block,18)), false, 0)
holds(4, in_tower((block,1),(block,2)), false, 0)
holds(4, in_tower((block,1),(block,3)), true, 0)
holds(4, in_tower((block,1),(block,4)), false, 0)
holds(4, in_tower((block,1),(block,5)), false, 0)
holds(4, in_tower((block,1),(block,6)), false, 0)
holds(4, in_tower((block,1),(block,7)), false, 0)
holds(4, in_tower((block,1),(block,8)), false, 0)
holds(4, in_tower((block,1),(block,9)), false, 0)
holds(4, in_tower((block,10),(block,1)), false, 0)
holds(4, in_tower((block,10),(block,10)), true, 0)
holds(4, in_tower((block,10),(block,11)), false, 0)
holds(4, in_tower((block,10),(block,12)), true, 0)
holds(4, in_tower((block,10),(block,13)), false, 0)
holds(4, in_tower((block,10),(block,14)), false, 0)
holds(4, in_tower((block,10),(block,15)), false, 0)
holds(4, in_tower((block,10),(block,16)), false, 0)
holds(4, in_tower((block,10),(block,17)), false, 0)
holds(4, in_tower((block,10),(block,18)), false, 0)
holds(4, in_tower((block,10),(block,2)), false, 0)
holds(4, in_tower((block,10),(block,3)), false, 0)
holds(4, in_tower((block,10),(block,4)), false, 0)
holds(4, in_tower((block,10),(block,5)), false, 0)
holds(4, in_tower((block,10),(block,6)), false, 0)
holds(4, in_tower((block,10),(block,7)), false, 0)
holds(4, in_tower((block,10),(block,8)), false, 0)
holds(4, in_tower((block,10),(block,9)), false, 0)
holds(4, in_tower((block,11),(block,1)), false, 0)
holds(4, in_tower((block,11),(block,10)), false, 0)
holds(4, in_tower((block,11),(block,11)), true, 0)
holds(4, in_tower((block,11),(block,12)), false, 0)
holds(4, in_tower((block,11),(block,13)), false, 0)
holds(4, in_tower((block,11),(block,14)), false, 0)
holds(4, in_tower((block,11),(block,15)), false, 0)
holds(4, in_tower((block,11),(block,16)), false, 0)
holds(4, in_tower((block,11),(block,17)), false, 0)
holds(4, in_tower((block,11),(block,18)), false, 0)
holds(4, in_tower((block,11),(block,2)), false, 0)
holds(4, in_tower((block,11),(block,3)), false, 0)
holds(4, in_tower((block,11),(block,4)), false, 0)
holds(4, in_tower((block,11),(block,5)), false, 0)
holds(4, in_tower((block,11),(block,6)), false, 0)
holds(4, in_tower((block,11),(block,7)), false, 0)
holds(4, in_tower((block,11),(block,8)), false, 0)
holds(4, in_tower((block,11),(block,9)), false, 0)
holds(4, in_tower((block,12),(block,1)), false, 0)
holds(4, in_tower((block,12),(block,10)), false, 0)
holds(4, in_tower((block,12),(block,11)), false, 0)
holds(4, in_tower((block,12),(block,12)), false, 0)
holds(4, in_tower((block,12),(block,13)), false, 0)
holds(4, in_tower((block,12),(block,14)), false, 0)
holds(4, in_tower((block,12),(block,15)), false, 0)
holds(4, in_tower((block,12),(block,16)), false, 0)
holds(4, in_tower((block,12),(block,17)), false, 0)
holds(4, in_tower((block,12),(block,18)), false, 0)
holds(4, in_tower((block,12),(block,2)), false, 0)
holds(4, in_tower((block,12),(block,3)), false, 0)
holds(4, in_tower((block,12),(block,4)), false, 0)
holds(4, in_tower((block,12),(block,5)), false, 0)
holds(4, in_tower((block,12),(block,6)), false, 0)
holds(4, in_tower((block,12),(block,7)), false, 0)
holds(4, in_tower((block,12),(block,8)), false, 0)
holds(4, in_tower((block,12),(block,9)), false, 0)
holds(4, in_tower((block,13),(block,1)), false, 0)
holds(4, in_tower((block,13),(block,10)), false, 0)
holds(4, in_tower((block,13),(block,11)), false, 0)
holds(4, in_tower((block,13),(block,12)), false, 0)
holds(4, in_tower((block,13),(block,13)), false, 0)
holds(4, in_tower((block,13),(block,14)), false, 0)
holds(4, in_tower((block,13),(block,15)), false, 0)
holds(4, in_tower((block,13),(block,16)), false, 0)
holds(4, in_tower((block,13),(block,17)), false, 0)
holds(4, in_tower((block,13),(block,18)), false, 0)
holds(4, in_tower((block,13),(block,2)), false, 0)
holds(4, in_tower((block,13),(block,3)), false, 0)
holds(4, in_tower((block,13),(block,4)), false, 0)
holds(4, in_tower((block,13),(block,5)), false, 0)
holds(4, in_tower((block,13),(block,6)), false, 0)
holds(4, in_tower((block,13),(block,7)), false, 0)
holds(4, in_tower((block,13),(block,8)), false, 0)
holds(4, in_tower((block,13),(block,9)), false, 0)
holds(4, in_tower((block,14),(block,1)), false, 0)
holds(4, in_tower((block,14),(block,10)), false, 0)
holds(4, in_tower((block,14),(block,11)), false, 0)
holds(4, in_tower((block,14),(block,12)), false, 0)
holds(4, in_tower((block,14),(block,13)), false, 0)
holds(4, in_tower((block,14),(block,14)), false, 0)
holds(4, in_tower((block,14),(block,15)), false, 0)
holds(4, in_tower((block,14),(block,16)), false, 0)
holds(4, in_tower((block,14),(block,17)), false, 0)
holds(4, in_tower((block,14),(block,18)), false, 0)
holds(4, in_tower((block,14),(block,2)), false, 0)
holds(4, in_tower((block,14),(block,3)), false, 0)
holds(4, in_tower((block,14),(block,4)), false, 0)
holds(4, in_tower((block,14),(block,5)), false, 0)
holds(4, in_tower((block,14),(block,6)), false, 0)
holds(4, in_tower((block,14),(block,7)), false, 0)
holds(4, in_tower((block,14),(block,8)), false, 0)
holds(4, in_tower((block,14),(block,9)), false, 0)
holds(4, in_tower((block,15),(block,1)), false, 0)
holds(4, in_tower((block,15),(block,10)), false, 0)
holds(4, in_tower((block,15),(block,11)), false, 0)
holds(4, in_tower((block,15),(block,12)), false, 0)
holds(4, in_tower((block,15),(block,13)), false, 0)
holds(4, in_tower((block,15),(block,14)), false, 0)
holds(4, in_tower((block,15),(block,15)), false, 0)
holds(4, in_tower((block,15),(block,16)), false, 0)
holds(4, in_tower((block,15),(block,17)), false, 0)
holds(4, in_tower((block,15),(block,18)), false, 0)
holds(4, in_tower((block,15),(block,2)), false, 0)
holds(4, in_tower((block,15),(block,3)), false, 0)
holds(4, in_tower((block,15),(block,4)), false, 0)
holds(4, in_tower((block,15),(block,5)), false, 0)
holds(4, in_tower((block,15),(block,6)), false, 0)
holds(4, in_tower((block,15),(block,7)), false, 0)
holds(4, in_tower((block,15),(block,8)), false, 0)
holds(4, in_tower((block,15),(block,9)), false, 0)
holds(4, in_tower((block,16),(block,1)), false, 0)
holds(4, in_tower((block,16),(block,10)), false, 0)
holds(4, in_tower((block,16),(block,11)), false, 0)
holds(4, in_tower((block,16),(block,12)), false, 0)
holds(4, in_tower((block,16),(block,13)), false, 0)
holds(4, in_tower((block,16),(block,14)), false, 0)
holds(4, in_tower((block,16),(block,15)), false, 0)
holds(4, in_tower((block,16),(block,16)), true, 0)
holds(4, in_tower((block,16),(block,17)), false, 0)
holds(4, in_tower((block,16),(block,18)), true, 0)
holds(4, in_tower((block,16),(block,2)), false, 0)
holds(4, in_tower((block,16),(block,3)), false, 0)
holds(4, in_tower((block,16),(block,4)), false, 0)
holds(4, in_tower((block,16),(block,5)), false, 0)
holds(4, in_tower((block,16),(block,6)), false, 0)
holds(4, in_tower((block,16),(block,7)), false, 0)
holds(4, in_tower((block,16),(block,8)), false, 0)
holds(4, in_tower((block,16),(block,9)), false, 0)
holds(4, in_tower((block,17),(block,1)), false, 0)
holds(4, in_tower((block,17),(block,10)), false, 0)
holds(4, in_tower((block,17),(block,11)), false, 0)
holds(4, in_tower((block,17),(block,12)), false, 0)
holds(4, in_tower((block,17),(block,13)), false, 0)
holds(4, in_tower((block,17),(block,14)), false, 0)
holds(4, in_tower((block,17),(block,15)), false, 0)
holds(4, in_tower((block,17),(block,16)), false, 0)
holds(4, in_tower((block,17),(block,17)), false, 0)
holds(4, in_tower((block,17),(block,18)), false, 0)
holds(4, in_tower((block,17),(block,2)), false, 0)
holds(4, in_tower((block,17),(block,3)), false, 0)
holds(4, in_tower((block,17),(block,4)), false, 0)
holds(4, in_tower((block,17),(block,5)), false, 0)
holds(4, in_tower((block,17),(block,6)), false, 0)
holds(4, in_tower((block,17),(block,7)), false, 0)
holds(4, in_tower((block,17),(block,8)), false, 0)
holds(4, in_tower((block,17),(block,9)), false, 0)
holds(4, in_tower((block,18),(block,1)), false, 0)
holds(4, in_tower((block,18),(block,10)), false, 0)
holds(4, in_tower((block,18),(block,11)), false, 0)
holds(4, in_tower((block,18),(block,12)), false, 0)
holds(4, in_tower((block,18),(block,13)), false, 0)
holds(4, in_tower((block,18),(block,14)), false, 0)
holds(4, in_tower((block,18),(block,15)), false, 0)
holds(4, in_tower((block,18),(block,16)), false, 0)
holds(4, in_tower((block,18),(block,17)), false, 0)
holds(4, in_tower((block,18),(block,18)), false, 0)
holds(4, in_tower((block,18),(block,2)), false, 0)
holds(4, in_tower((block,18),(block,3)), false, 0)
holds(4, in_tower((block,18),(block,4)), false, 0)
holds(4, in_tower((block,18),(block,5)), false, 0)
holds(4, in_tower((block,18),(block,6)), false, 0)
holds(4, in_tower((block,18),(block,7)), false, 0)
holds(4, in_tower((block,18),(block,8)), false, 0)
holds(4, in_tower((block,18),(block,9)), false, 0)
holds(4, in_tower((block,2),(block,1)), false, 0)
holds(4, in_tower((block,2),(block,10)), false, 0)
holds(4, in_tower((block,2),(block,11)), false, 0)
holds(4, in_tower((block,2),(block,12)), false, 0)
holds(4, in_tower((block,2),(block,13)), false, 0)
holds(4, in_tower((block,2),(block,14)), false, 0)
holds(4, in_tower((block,2),(block,15)), false, 0)
holds(4, in_tower((block,2),(block,16)), false, 0)
holds(4, in_tower((block,2),(block,17)), false, 0)
holds(4, in_tower((block,2),(block,18)), false, 0)
holds(4, in_tower((block,2),(block,2)), true, 0)
holds(4, in_tower((block,2),(block,3)), false, 0)
holds(4, in_tower((block,2),(block,4)), false, 0)
holds(4, in_tower((block,2),(block,5)), false, 0)
holds(4, in_tower((block,2),(block,6)), false, 0)
holds(4, in_tower((block,2),(block,7)), false, 0)
holds(4, in_tower((block,2),(block,8)), false, 0)
holds(4, in_tower((block,2),(block,9)), false, 0)
holds(4, in_tower((block,3),(block,1)), false, 0)
holds(4, in_tower((block,3),(block,10)), false, 0)
holds(4, in_tower((block,3),(block,11)), false, 0)
holds(4, in_tower((block,3),(block,12)), false, 0)
holds(4, in_tower((block,3),(block,13)), false, 0)
holds(4, in_tower((block,3),(block,14)), false, 0)
holds(4, in_tower((block,3),(block,15)), false, 0)
holds(4, in_tower((block,3),(block,16)), false, 0)
holds(4, in_tower((block,3),(block,17)), false, 0)
holds(4, in_tower((block,3),(block,18)), false, 0)
holds(4, in_tower((block,3),(block,2)), false, 0)
holds(4, in_tower((block,3),(block,3)), false, 0)
holds(4, in_tower((block,3),(block,4)), false, 0)
holds(4, in_tower((block,3),(block,5)), false, 0)
holds(4, in_tower((block,3),(block,6)), false, 0)
holds(4, in_tower((block,3),(block,7)), false, 0)
holds(4, in_tower((block,3),(block,8)), false, 0)
holds(4, in_tower((block,3),(block,9)), false, 0)
holds(4, in_tower((block,4),(block,1)), false, 0)
holds(4, in_tower((block,4),(block,10)), false, 0)
holds(4, in_tower((block,4),(block,11)), false, 0)
holds(4, in_tower((block,4),(block,12)), false, 0)
holds(4, in_tower((block,4),(block,13)), false, 0)
holds(4, in_tower((block,4),(block,14)), false, 0)
holds(4, in_tower((block,4),(block,15)), false, 0)
holds(4, in_tower((block,4),(block,16)), false, 0)
holds(4, in_tower((block,4),(block,17)), false, 0)
holds(4, in_tower((block,4),(block,18)), false, 0)
holds(4, in_tower((block,4),(block,2)), false, 0)
holds(4, in_tower((block,4),(block,3)), false, 0)
holds(4, in_tower((block,4),(block,4)), false, 0)
holds(4, in_tower((block,4),(block,5)), false, 0)
holds(4, in_tower((block,4),(block,6)), false, 0)
holds(4, in_tower((block,4),(block,7)), false, 0)
holds(4, in_tower((block,4),(block,8)), false, 0)
holds(4, in_tower((block,4),(block,9)), false, 0)
holds(4, in_tower((block,5),(block,1)), false, 0)
holds(4, in_tower((block,5),(block,10)), false, 0)
holds(4, in_tower((block,5),(block,11)), false, 0)
holds(4, in_tower((block,5),(block,12)), false, 0)
holds(4, in_tower((block,5),(block,13)), false, 0)
holds(4, in_tower((block,5),(block,14)), false, 0)
holds(4, in_tower((block,5),(block,15)), false, 0)
holds(4, in_tower((block,5),(block,16)), false, 0)
holds(4, in_tower((block,5),(block,17)), false, 0)
holds(4, in_tower((block,5),(block,18)), false, 0)
holds(4, in_tower((block,5),(block,2)), false, 0)
holds(4, in_tower((block,5),(block,3)), false, 0)
holds(4, in_tower((block,5),(block,4)), false, 0)
holds(4, in_tower((block,5),(block,5)), false, 0)
holds(4, in_tower((block,5),(block,6)), false, 0)
holds(4, in_tower((block,5),(block,7)), false, 0)
holds(4, in_tower((block,5),(block,8)), false, 0)
holds(4, in_tower((block,5),(block,9)), false, 0)
holds(4, in_tower((block,6),(block,1)), false, 0)
holds(4, in_tower((block,6),(block,10)), false, 0)
holds(4, in_tower((block,6),(block,11)), false, 0)
holds(4, in_tower((block,6),(block,12)), false, 0)
holds(4, in_tower((block,6),(block,13)), false, 0)
holds(4, in_tower((block,6),(block,14)), false, 0)
holds(4, in_tower((block,6),(block,15)), false, 0)
holds(4, in_tower((block,6),(block,16)), false, 0)
holds(4, in_tower((block,6),(block,17)), false, 0)
holds(4, in_tower((block,6),(block,18)), false, 0)
holds(4, in_tower((block,6),(block,2)), false, 0)
holds(4, in_tower((block,6),(block,3)), false, 0)
holds(4, in_tower((block,6),(block,4)), false, 0)
holds(4, in_tower((block,6),(block,5)), false, 0)
holds(4, in_tower((block,6),(block,6)), false, 0)
holds(4, in_tower((block,6),(block,7)), false, 0)
holds(4, in_tower((block,6),(block,8)), false, 0)
holds(4, in_tower((block,6),(block,9)), false, 0)
holds(4, in_tower((block,7),(block,1)), false, 0)
holds(4, in_tower((block,7),(block,10)), false, 0)
holds(4, in_tower((block,7),(block,11)), false, 0)
holds(4, in_tower((block,7),(block,12)), false, 0)
holds(4, in_tower((block,7),(block,13)), false, 0)
holds(4, in_tower((block,7),(block,14)), false, 0)
holds(4, in_tower((block,7),(block,15)), false, 0)
holds(4, in_tower((block,7),(block,16)), false, 0)
holds(4, in_tower((block,7),(block,17)), false, 0)
holds(4, in_tower((block,7),(block,18)), false, 0)
holds(4, in_tower((block,7),(block,2)), false, 0)
holds(4, in_tower((block,7),(block,3)), false, 0)
holds(4, in_tower((block,7),(block,4)), false, 0)
holds(4, in_tower((block,7),(block,5)), false, 0)
holds(4, in_tower((block,7),(block,6)), false, 0)
holds(4, in_tower((block,7),(block,7)), true, 0)
holds(4, in_tower((block,7),(block,8)), false, 0)
holds(4, in_tower((block,7),(block,9)), true, 0)
holds(4, in_tower((block,8),(block,1)), false, 0)
holds(4, in_tower((block,8),(block,10)), false, 0)
holds(4, in_tower((block,8),(block,11)), false, 0)
holds(4, in_tower((block,8),(block,12)), false, 0)
holds(4, in_tower((block,8),(block,13)), false, 0)
holds(4, in_tower((block,8),(block,14)), false, 0)
holds(4, in_tower((block,8),(block,15)), false, 0)
holds(4, in_tower((block,8),(block,16)), false, 0)
holds(4, in_tower((block,8),(block,17)), false, 0)
holds(4, in_tower((block,8),(block,18)), false, 0)
holds(4, in_tower((block,8),(block,2)), false, 0)
holds(4, in_tower((block,8),(block,3)), false, 0)
holds(4, in_tower((block,8),(block,4)), false, 0)
holds(4, in_tower((block,8),(block,5)), false, 0)
holds(4, in_tower((block,8),(block,6)), false, 0)
holds(4, in_tower((block,8),(block,7)), false, 0)
holds(4, in_tower((block,8),(block,8)), false, 0)
holds(4, in_tower((block,8),(block,9)), false, 0)
holds(4, in_tower((block,9),(block,1)), false, 0)
holds(4, in_tower((block,9),(block,10)), false, 0)
holds(4, in_tower((block,9),(block,11)), false, 0)
holds(4, in_tower((block,9),(block,12)), false, 0)
holds(4, in_tower((block,9),(block,13)), false, 0)
holds(4, in_tower((block,9),(block,14)), false, 0)
holds(4, in_tower((block,9),(block,15)), false, 0)
holds(4, in_tower((block,9),(block,16)), false, 0)
holds(4, in_tower((block,9),(block,17)), false, 0)
holds(4, in_tower((block,9),(block,18)), false, 0)
holds(4, in_tower((block,9),(block,2)), false, 0)
holds(4, in_tower((block,9),(block,3)), false, 0)
holds(4, in_tower((block,9),(block,4)), false, 0)
holds(4, in_tower((block,9),(block,5)), false, 0)
holds(4, in_tower((block,9),(block,6)), false, 0)
holds(4, in_tower((block,9),(block,7)), false, 0)
holds(4, in_tower((block,9),(block,8)), false, 0)
holds(4, in_tower((block,9),(block,9)), false, 0)
holds(4, on((block,1)), puzzle_room_1_table, 0)
holds(4, on((block,10)), puzzle_room_2_table, 0)
holds(4, on((block,11)), puzzle_room_2_table, 0)
holds(4, on((block,12)), (block,10), 0)
holds(4, on((block,13)), nothing, 0)
holds(4, on((block,14)), nothing, 0)
holds(4, on((block,15)), nothing, 0)
holds(4, on((block,16)), puzzle_room_2_table, 0)
holds(4, on((block,17)), nothing, 0)
holds(4, on((block,18)), (block,16), 0)
holds(4, on((block,2)), puzzle_room_1_table, 0)
holds(4, on((block,3)), (block,1), 0)
holds(4, on((block,4)), nothing, 0)
holds(4, on((block,5)), nothing, 0)
holds(4, on((block,6)), nothing, 0)
holds(4, on((block,7)), puzzle_room_1_table, 0)
holds(4, on((block,8)), nothing, 0)
holds(4, on((block,9)), (block,7), 0)
holds(4, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(4, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(4, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(4, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(4, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-21-18] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(3, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(3, complete_tower(red,puzzle_room_1_table), false, 0)
holds(3, complete_tower(red,puzzle_room_2_table), false, 0)
holds(3, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(3, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(3, configuration(manipulator_arm_1), retracted, 0)
holds(3, configuration(manipulator_arm_2), retracted, 0)
holds(3, configuration(puzzle_room_1_door), closed, 0)
holds(3, configuration(puzzle_room_2_door), closed, 0)
holds(3, configuration(store_room_1_door), closed, 0)
holds(3, configuration(store_room_2_door), closed, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room_1, 0)
holds(3, in((block,10)), puzzle_room_2, 0)
holds(3, in((block,11)), puzzle_room_2, 0)
holds(3, in((block,12)), puzzle_room_2, 0)
holds(3, in((block,13)), store_room_2, 0)
holds(3, in((block,14)), store_room_2, 0)
holds(3, in((block,15)), store_room_2, 0)
holds(3, in((block,16)), puzzle_room_2, 0)
holds(3, in((block,17)), store_room_2, 0)
holds(3, in((block,18)), puzzle_room_2, 0)
holds(3, in((block,2)), puzzle_room_1, 0)
holds(3, in((block,3)), puzzle_room_1, 0)
holds(3, in((block,4)), store_room_1, 0)
holds(3, in((block,5)), store_room_1, 0)
holds(3, in((block,6)), store_room_1, 0)
holds(3, in((block,7)), puzzle_room_1, 0)
holds(3, in((block,8)), store_room_1, 0)
holds(3, in((block,9)), puzzle_room_1, 0)
holds(3, in(manipulator_arm_1), starting_room_1, 0)
holds(3, in(manipulator_arm_2), starting_room_1, 0)
holds(3, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(3, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(3, in(talos), starting_room_1, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,10)), false, 0)
holds(3, in_tower((block,1),(block,11)), false, 0)
holds(3, in_tower((block,1),(block,12)), false, 0)
holds(3, in_tower((block,1),(block,13)), false, 0)
holds(3, in_tower((block,1),(block,14)), false, 0)
holds(3, in_tower((block,1),(block,15)), false, 0)
holds(3, in_tower((block,1),(block,16)), false, 0)
holds(3, in_tower((block,1),(block,17)), false, 0)
holds(3, in_tower((block,1),(block,18)), false, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,1),(block,7)), false, 0)
holds(3, in_tower((block,1),(block,8)), false, 0)
holds(3, in_tower((block,1),(block,9)), false, 0)
holds(3, in_tower((block,10),(block,1)), false, 0)
holds(3, in_tower((block,10),(block,10)), true, 0)
holds(3, in_tower((block,10),(block,11)), false, 0)
holds(3, in_tower((block,10),(block,12)), true, 0)
holds(3, in_tower((block,10),(block,13)), false, 0)
holds(3, in_tower((block,10),(block,14)), false, 0)
holds(3, in_tower((block,10),(block,15)), false, 0)
holds(3, in_tower((block,10),(block,16)), false, 0)
holds(3, in_tower((block,10),(block,17)), false, 0)
holds(3, in_tower((block,10),(block,18)), false, 0)
holds(3, in_tower((block,10),(block,2)), false, 0)
holds(3, in_tower((block,10),(block,3)), false, 0)
holds(3, in_tower((block,10),(block,4)), false, 0)
holds(3, in_tower((block,10),(block,5)), false, 0)
holds(3, in_tower((block,10),(block,6)), false, 0)
holds(3, in_tower((block,10),(block,7)), false, 0)
holds(3, in_tower((block,10),(block,8)), false, 0)
holds(3, in_tower((block,10),(block,9)), false, 0)
holds(3, in_tower((block,11),(block,1)), false, 0)
holds(3, in_tower((block,11),(block,10)), false, 0)
holds(3, in_tower((block,11),(block,11)), true, 0)
holds(3, in_tower((block,11),(block,12)), false, 0)
holds(3, in_tower((block,11),(block,13)), false, 0)
holds(3, in_tower((block,11),(block,14)), false, 0)
holds(3, in_tower((block,11),(block,15)), false, 0)
holds(3, in_tower((block,11),(block,16)), false, 0)
holds(3, in_tower((block,11),(block,17)), false, 0)
holds(3, in_tower((block,11),(block,18)), false, 0)
holds(3, in_tower((block,11),(block,2)), false, 0)
holds(3, in_tower((block,11),(block,3)), false, 0)
holds(3, in_tower((block,11),(block,4)), false, 0)
holds(3, in_tower((block,11),(block,5)), false, 0)
holds(3, in_tower((block,11),(block,6)), false, 0)
holds(3, in_tower((block,11),(block,7)), false, 0)
holds(3, in_tower((block,11),(block,8)), false, 0)
holds(3, in_tower((block,11),(block,9)), false, 0)
holds(3, in_tower((block,12),(block,1)), false, 0)
holds(3, in_tower((block,12),(block,10)), false, 0)
holds(3, in_tower((block,12),(block,11)), false, 0)
holds(3, in_tower((block,12),(block,12)), false, 0)
holds(3, in_tower((block,12),(block,13)), false, 0)
holds(3, in_tower((block,12),(block,14)), false, 0)
holds(3, in_tower((block,12),(block,15)), false, 0)
holds(3, in_tower((block,12),(block,16)), false, 0)
holds(3, in_tower((block,12),(block,17)), false, 0)
holds(3, in_tower((block,12),(block,18)), false, 0)
holds(3, in_tower((block,12),(block,2)), false, 0)
holds(3, in_tower((block,12),(block,3)), false, 0)
holds(3, in_tower((block,12),(block,4)), false, 0)
holds(3, in_tower((block,12),(block,5)), false, 0)
holds(3, in_tower((block,12),(block,6)), false, 0)
holds(3, in_tower((block,12),(block,7)), false, 0)
holds(3, in_tower((block,12),(block,8)), false, 0)
holds(3, in_tower((block,12),(block,9)), false, 0)
holds(3, in_tower((block,13),(block,1)), false, 0)
holds(3, in_tower((block,13),(block,10)), false, 0)
holds(3, in_tower((block,13),(block,11)), false, 0)
holds(3, in_tower((block,13),(block,12)), false, 0)
holds(3, in_tower((block,13),(block,13)), false, 0)
holds(3, in_tower((block,13),(block,14)), false, 0)
holds(3, in_tower((block,13),(block,15)), false, 0)
holds(3, in_tower((block,13),(block,16)), false, 0)
holds(3, in_tower((block,13),(block,17)), false, 0)
holds(3, in_tower((block,13),(block,18)), false, 0)
holds(3, in_tower((block,13),(block,2)), false, 0)
holds(3, in_tower((block,13),(block,3)), false, 0)
holds(3, in_tower((block,13),(block,4)), false, 0)
holds(3, in_tower((block,13),(block,5)), false, 0)
holds(3, in_tower((block,13),(block,6)), false, 0)
holds(3, in_tower((block,13),(block,7)), false, 0)
holds(3, in_tower((block,13),(block,8)), false, 0)
holds(3, in_tower((block,13),(block,9)), false, 0)
holds(3, in_tower((block,14),(block,1)), false, 0)
holds(3, in_tower((block,14),(block,10)), false, 0)
holds(3, in_tower((block,14),(block,11)), false, 0)
holds(3, in_tower((block,14),(block,12)), false, 0)
holds(3, in_tower((block,14),(block,13)), false, 0)
holds(3, in_tower((block,14),(block,14)), false, 0)
holds(3, in_tower((block,14),(block,15)), false, 0)
holds(3, in_tower((block,14),(block,16)), false, 0)
holds(3, in_tower((block,14),(block,17)), false, 0)
holds(3, in_tower((block,14),(block,18)), false, 0)
holds(3, in_tower((block,14),(block,2)), false, 0)
holds(3, in_tower((block,14),(block,3)), false, 0)
holds(3, in_tower((block,14),(block,4)), false, 0)
holds(3, in_tower((block,14),(block,5)), false, 0)
holds(3, in_tower((block,14),(block,6)), false, 0)
holds(3, in_tower((block,14),(block,7)), false, 0)
holds(3, in_tower((block,14),(block,8)), false, 0)
holds(3, in_tower((block,14),(block,9)), false, 0)
holds(3, in_tower((block,15),(block,1)), false, 0)
holds(3, in_tower((block,15),(block,10)), false, 0)
holds(3, in_tower((block,15),(block,11)), false, 0)
holds(3, in_tower((block,15),(block,12)), false, 0)
holds(3, in_tower((block,15),(block,13)), false, 0)
holds(3, in_tower((block,15),(block,14)), false, 0)
holds(3, in_tower((block,15),(block,15)), false, 0)
holds(3, in_tower((block,15),(block,16)), false, 0)
holds(3, in_tower((block,15),(block,17)), false, 0)
holds(3, in_tower((block,15),(block,18)), false, 0)
holds(3, in_tower((block,15),(block,2)), false, 0)
holds(3, in_tower((block,15),(block,3)), false, 0)
holds(3, in_tower((block,15),(block,4)), false, 0)
holds(3, in_tower((block,15),(block,5)), false, 0)
holds(3, in_tower((block,15),(block,6)), false, 0)
holds(3, in_tower((block,15),(block,7)), false, 0)
holds(3, in_tower((block,15),(block,8)), false, 0)
holds(3, in_tower((block,15),(block,9)), false, 0)
holds(3, in_tower((block,16),(block,1)), false, 0)
holds(3, in_tower((block,16),(block,10)), false, 0)
holds(3, in_tower((block,16),(block,11)), false, 0)
holds(3, in_tower((block,16),(block,12)), false, 0)
holds(3, in_tower((block,16),(block,13)), false, 0)
holds(3, in_tower((block,16),(block,14)), false, 0)
holds(3, in_tower((block,16),(block,15)), false, 0)
holds(3, in_tower((block,16),(block,16)), true, 0)
holds(3, in_tower((block,16),(block,17)), false, 0)
holds(3, in_tower((block,16),(block,18)), true, 0)
holds(3, in_tower((block,16),(block,2)), false, 0)
holds(3, in_tower((block,16),(block,3)), false, 0)
holds(3, in_tower((block,16),(block,4)), false, 0)
holds(3, in_tower((block,16),(block,5)), false, 0)
holds(3, in_tower((block,16),(block,6)), false, 0)
holds(3, in_tower((block,16),(block,7)), false, 0)
holds(3, in_tower((block,16),(block,8)), false, 0)
holds(3, in_tower((block,16),(block,9)), false, 0)
holds(3, in_tower((block,17),(block,1)), false, 0)
holds(3, in_tower((block,17),(block,10)), false, 0)
holds(3, in_tower((block,17),(block,11)), false, 0)
holds(3, in_tower((block,17),(block,12)), false, 0)
holds(3, in_tower((block,17),(block,13)), false, 0)
holds(3, in_tower((block,17),(block,14)), false, 0)
holds(3, in_tower((block,17),(block,15)), false, 0)
holds(3, in_tower((block,17),(block,16)), false, 0)
holds(3, in_tower((block,17),(block,17)), false, 0)
holds(3, in_tower((block,17),(block,18)), false, 0)
holds(3, in_tower((block,17),(block,2)), false, 0)
holds(3, in_tower((block,17),(block,3)), false, 0)
holds(3, in_tower((block,17),(block,4)), false, 0)
holds(3, in_tower((block,17),(block,5)), false, 0)
holds(3, in_tower((block,17),(block,6)), false, 0)
holds(3, in_tower((block,17),(block,7)), false, 0)
holds(3, in_tower((block,17),(block,8)), false, 0)
holds(3, in_tower((block,17),(block,9)), false, 0)
holds(3, in_tower((block,18),(block,1)), false, 0)
holds(3, in_tower((block,18),(block,10)), false, 0)
holds(3, in_tower((block,18),(block,11)), false, 0)
holds(3, in_tower((block,18),(block,12)), false, 0)
holds(3, in_tower((block,18),(block,13)), false, 0)
holds(3, in_tower((block,18),(block,14)), false, 0)
holds(3, in_tower((block,18),(block,15)), false, 0)
holds(3, in_tower((block,18),(block,16)), false, 0)
holds(3, in_tower((block,18),(block,17)), false, 0)
holds(3, in_tower((block,18),(block,18)), false, 0)
holds(3, in_tower((block,18),(block,2)), false, 0)
holds(3, in_tower((block,18),(block,3)), false, 0)
holds(3, in_tower((block,18),(block,4)), false, 0)
holds(3, in_tower((block,18),(block,5)), false, 0)
holds(3, in_tower((block,18),(block,6)), false, 0)
holds(3, in_tower((block,18),(block,7)), false, 0)
holds(3, in_tower((block,18),(block,8)), false, 0)
holds(3, in_tower((block,18),(block,9)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,10)), false, 0)
holds(3, in_tower((block,2),(block,11)), false, 0)
holds(3, in_tower((block,2),(block,12)), false, 0)
holds(3, in_tower((block,2),(block,13)), false, 0)
holds(3, in_tower((block,2),(block,14)), false, 0)
holds(3, in_tower((block,2),(block,15)), false, 0)
holds(3, in_tower((block,2),(block,16)), false, 0)
holds(3, in_tower((block,2),(block,17)), false, 0)
holds(3, in_tower((block,2),(block,18)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,7)), false, 0)
holds(3, in_tower((block,2),(block,8)), false, 0)
holds(3, in_tower((block,2),(block,9)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,10)), false, 0)
holds(3, in_tower((block,3),(block,11)), false, 0)
holds(3, in_tower((block,3),(block,12)), false, 0)
holds(3, in_tower((block,3),(block,13)), false, 0)
holds(3, in_tower((block,3),(block,14)), false, 0)
holds(3, in_tower((block,3),(block,15)), false, 0)
holds(3, in_tower((block,3),(block,16)), false, 0)
holds(3, in_tower((block,3),(block,17)), false, 0)
holds(3, in_tower((block,3),(block,18)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,7)), false, 0)
holds(3, in_tower((block,3),(block,8)), false, 0)
holds(3, in_tower((block,3),(block,9)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,10)), false, 0)
holds(3, in_tower((block,4),(block,11)), false, 0)
holds(3, in_tower((block,4),(block,12)), false, 0)
holds(3, in_tower((block,4),(block,13)), false, 0)
holds(3, in_tower((block,4),(block,14)), false, 0)
holds(3, in_tower((block,4),(block,15)), false, 0)
holds(3, in_tower((block,4),(block,16)), false, 0)
holds(3, in_tower((block,4),(block,17)), false, 0)
holds(3, in_tower((block,4),(block,18)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,7)), false, 0)
holds(3, in_tower((block,4),(block,8)), false, 0)
holds(3, in_tower((block,4),(block,9)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,10)), false, 0)
holds(3, in_tower((block,5),(block,11)), false, 0)
holds(3, in_tower((block,5),(block,12)), false, 0)
holds(3, in_tower((block,5),(block,13)), false, 0)
holds(3, in_tower((block,5),(block,14)), false, 0)
holds(3, in_tower((block,5),(block,15)), false, 0)
holds(3, in_tower((block,5),(block,16)), false, 0)
holds(3, in_tower((block,5),(block,17)), false, 0)
holds(3, in_tower((block,5),(block,18)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,7)), false, 0)
holds(3, in_tower((block,5),(block,8)), false, 0)
holds(3, in_tower((block,5),(block,9)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,10)), false, 0)
holds(3, in_tower((block,6),(block,11)), false, 0)
holds(3, in_tower((block,6),(block,12)), false, 0)
holds(3, in_tower((block,6),(block,13)), false, 0)
holds(3, in_tower((block,6),(block,14)), false, 0)
holds(3, in_tower((block,6),(block,15)), false, 0)
holds(3, in_tower((block,6),(block,16)), false, 0)
holds(3, in_tower((block,6),(block,17)), false, 0)
holds(3, in_tower((block,6),(block,18)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,7)), false, 0)
holds(3, in_tower((block,6),(block,8)), false, 0)
holds(3, in_tower((block,6),(block,9)), false, 0)
holds(3, in_tower((block,7),(block,1)), false, 0)
holds(3, in_tower((block,7),(block,10)), false, 0)
holds(3, in_tower((block,7),(block,11)), false, 0)
holds(3, in_tower((block,7),(block,12)), false, 0)
holds(3, in_tower((block,7),(block,13)), false, 0)
holds(3, in_tower((block,7),(block,14)), false, 0)
holds(3, in_tower((block,7),(block,15)), false, 0)
holds(3, in_tower((block,7),(block,16)), false, 0)
holds(3, in_tower((block,7),(block,17)), false, 0)
holds(3, in_tower((block,7),(block,18)), false, 0)
holds(3, in_tower((block,7),(block,2)), false, 0)
holds(3, in_tower((block,7),(block,3)), false, 0)
holds(3, in_tower((block,7),(block,4)), false, 0)
holds(3, in_tower((block,7),(block,5)), false, 0)
holds(3, in_tower((block,7),(block,6)), false, 0)
holds(3, in_tower((block,7),(block,7)), true, 0)
holds(3, in_tower((block,7),(block,8)), false, 0)
holds(3, in_tower((block,7),(block,9)), true, 0)
holds(3, in_tower((block,8),(block,1)), false, 0)
holds(3, in_tower((block,8),(block,10)), false, 0)
holds(3, in_tower((block,8),(block,11)), false, 0)
holds(3, in_tower((block,8),(block,12)), false, 0)
holds(3, in_tower((block,8),(block,13)), false, 0)
holds(3, in_tower((block,8),(block,14)), false, 0)
holds(3, in_tower((block,8),(block,15)), false, 0)
holds(3, in_tower((block,8),(block,16)), false, 0)
holds(3, in_tower((block,8),(block,17)), false, 0)
holds(3, in_tower((block,8),(block,18)), false, 0)
holds(3, in_tower((block,8),(block,2)), false, 0)
holds(3, in_tower((block,8),(block,3)), false, 0)
holds(3, in_tower((block,8),(block,4)), false, 0)
holds(3, in_tower((block,8),(block,5)), false, 0)
holds(3, in_tower((block,8),(block,6)), false, 0)
holds(3, in_tower((block,8),(block,7)), false, 0)
holds(3, in_tower((block,8),(block,8)), false, 0)
holds(3, in_tower((block,8),(block,9)), false, 0)
holds(3, in_tower((block,9),(block,1)), false, 0)
holds(3, in_tower((block,9),(block,10)), false, 0)
holds(3, in_tower((block,9),(block,11)), false, 0)
holds(3, in_tower((block,9),(block,12)), false, 0)
holds(3, in_tower((block,9),(block,13)), false, 0)
holds(3, in_tower((block,9),(block,14)), false, 0)
holds(3, in_tower((block,9),(block,15)), false, 0)
holds(3, in_tower((block,9),(block,16)), false, 0)
holds(3, in_tower((block,9),(block,17)), false, 0)
holds(3, in_tower((block,9),(block,18)), false, 0)
holds(3, in_tower((block,9),(block,2)), false, 0)
holds(3, in_tower((block,9),(block,3)), false, 0)
holds(3, in_tower((block,9),(block,4)), false, 0)
holds(3, in_tower((block,9),(block,5)), false, 0)
holds(3, in_tower((block,9),(block,6)), false, 0)
holds(3, in_tower((block,9),(block,7)), false, 0)
holds(3, in_tower((block,9),(block,8)), false, 0)
holds(3, in_tower((block,9),(block,9)), false, 0)
holds(3, on((block,1)), puzzle_room_1_table, 0)
holds(3, on((block,10)), puzzle_room_2_table, 0)
holds(3, on((block,11)), puzzle_room_2_table, 0)
holds(3, on((block,12)), (block,10), 0)
holds(3, on((block,13)), nothing, 0)
holds(3, on((block,14)), nothing, 0)
holds(3, on((block,15)), nothing, 0)
holds(3, on((block,16)), puzzle_room_2_table, 0)
holds(3, on((block,17)), nothing, 0)
holds(3, on((block,18)), (block,16), 0)
holds(3, on((block,2)), puzzle_room_1_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, on((block,7)), puzzle_room_1_table, 0)
holds(3, on((block,8)), nothing, 0)
holds(3, on((block,9)), (block,7), 0)
holds(3, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(3, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(3, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(3, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(3, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-21-18] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(2, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(2, complete_tower(red,puzzle_room_1_table), false, 0)
holds(2, complete_tower(red,puzzle_room_2_table), false, 0)
holds(2, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(2, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(2, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(2, configuration(manipulator_limb_1), retracted, 0)
holds(2, configuration(manipulator_limb_2), retracted, 0)
holds(2, configuration(puzzle_room_1_door), closed, 0)
holds(2, configuration(puzzle_room_2_door), closed, 0)
holds(2, configuration(store_room_1_door), closed, 0)
holds(2, configuration(store_room_2_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, grasping(manipulator_end_1), nothing, 0)
holds(2, grasping(manipulator_end_2), nothing, 0)
holds(2, in((block,1)), (puzzle_room_1,1), 0)
holds(2, in((block,10)), (puzzle_room_2,1), 0)
holds(2, in((block,11)), (puzzle_room_2,1), 0)
holds(2, in((block,12)), (puzzle_room_2,1), 0)
holds(2, in((block,13)), (store_room_2,0), 0)
holds(2, in((block,14)), (store_room_2,0), 0)
holds(2, in((block,15)), (store_room_2,0), 0)
holds(2, in((block,16)), (puzzle_room_2,1), 0)
holds(2, in((block,17)), (store_room_2,0), 0)
holds(2, in((block,18)), (puzzle_room_2,1), 0)
holds(2, in((block,2)), (puzzle_room_1,1), 0)
holds(2, in((block,3)), (puzzle_room_1,1), 0)
holds(2, in((block,4)), (store_room_1,0), 0)
holds(2, in((block,5)), (store_room_1,0), 0)
holds(2, in((block,6)), (store_room_1,0), 0)
holds(2, in((block,7)), (puzzle_room_1,1), 0)
holds(2, in((block,8)), (store_room_1,0), 0)
holds(2, in((block,9)), (puzzle_room_1,1), 0)
holds(2, in(manipulator_arm_1), (starting_room_1,0), 0)
holds(2, in(manipulator_arm_2), (starting_room_1,0), 0)
holds(2, in(manipulator_end_1), (starting_room_1,0), 0)
holds(2, in(manipulator_end_2), (starting_room_1,0), 0)
holds(2, in(manipulator_limb_1), (starting_room_1,0), 0)
holds(2, in(manipulator_limb_2), (starting_room_1,0), 0)
holds(2, in(puzzle_room_1_table), (puzzle_room_1,1), 0)
holds(2, in(puzzle_room_1_table_left), (puzzle_room_1,1), 0)
holds(2, in(puzzle_room_1_table_middle), (puzzle_room_1,1), 0)
holds(2, in(puzzle_room_1_table_right), (puzzle_room_1,1), 0)
holds(2, in(puzzle_room_2_table), (puzzle_room_2,1), 0)
holds(2, in(puzzle_room_2_table_left), (puzzle_room_2,1), 0)
holds(2, in(puzzle_room_2_table_middle), (puzzle_room_2,1), 0)
holds(2, in(puzzle_room_2_table_right), (puzzle_room_2,1), 0)
holds(2, in(talos), (starting_room_1,0), 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,10)), false, 0)
holds(2, in_tower((block,1),(block,11)), false, 0)
holds(2, in_tower((block,1),(block,12)), false, 0)
holds(2, in_tower((block,1),(block,13)), false, 0)
holds(2, in_tower((block,1),(block,14)), false, 0)
holds(2, in_tower((block,1),(block,15)), false, 0)
holds(2, in_tower((block,1),(block,16)), false, 0)
holds(2, in_tower((block,1),(block,17)), false, 0)
holds(2, in_tower((block,1),(block,18)), false, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,1),(block,7)), false, 0)
holds(2, in_tower((block,1),(block,8)), false, 0)
holds(2, in_tower((block,1),(block,9)), false, 0)
holds(2, in_tower((block,10),(block,1)), false, 0)
holds(2, in_tower((block,10),(block,10)), true, 0)
holds(2, in_tower((block,10),(block,11)), false, 0)
holds(2, in_tower((block,10),(block,12)), true, 0)
holds(2, in_tower((block,10),(block,13)), false, 0)
holds(2, in_tower((block,10),(block,14)), false, 0)
holds(2, in_tower((block,10),(block,15)), false, 0)
holds(2, in_tower((block,10),(block,16)), false, 0)
holds(2, in_tower((block,10),(block,17)), false, 0)
holds(2, in_tower((block,10),(block,18)), false, 0)
holds(2, in_tower((block,10),(block,2)), false, 0)
holds(2, in_tower((block,10),(block,3)), false, 0)
holds(2, in_tower((block,10),(block,4)), false, 0)
holds(2, in_tower((block,10),(block,5)), false, 0)
holds(2, in_tower((block,10),(block,6)), false, 0)
holds(2, in_tower((block,10),(block,7)), false, 0)
holds(2, in_tower((block,10),(block,8)), false, 0)
holds(2, in_tower((block,10),(block,9)), false, 0)
holds(2, in_tower((block,11),(block,1)), false, 0)
holds(2, in_tower((block,11),(block,10)), false, 0)
holds(2, in_tower((block,11),(block,11)), true, 0)
holds(2, in_tower((block,11),(block,12)), false, 0)
holds(2, in_tower((block,11),(block,13)), false, 0)
holds(2, in_tower((block,11),(block,14)), false, 0)
holds(2, in_tower((block,11),(block,15)), false, 0)
holds(2, in_tower((block,11),(block,16)), false, 0)
holds(2, in_tower((block,11),(block,17)), false, 0)
holds(2, in_tower((block,11),(block,18)), false, 0)
holds(2, in_tower((block,11),(block,2)), false, 0)
holds(2, in_tower((block,11),(block,3)), false, 0)
holds(2, in_tower((block,11),(block,4)), false, 0)
holds(2, in_tower((block,11),(block,5)), false, 0)
holds(2, in_tower((block,11),(block,6)), false, 0)
holds(2, in_tower((block,11),(block,7)), false, 0)
holds(2, in_tower((block,11),(block,8)), false, 0)
holds(2, in_tower((block,11),(block,9)), false, 0)
holds(2, in_tower((block,12),(block,1)), false, 0)
holds(2, in_tower((block,12),(block,10)), false, 0)
holds(2, in_tower((block,12),(block,11)), false, 0)
holds(2, in_tower((block,12),(block,12)), false, 0)
holds(2, in_tower((block,12),(block,13)), false, 0)
holds(2, in_tower((block,12),(block,14)), false, 0)
holds(2, in_tower((block,12),(block,15)), false, 0)
holds(2, in_tower((block,12),(block,16)), false, 0)
holds(2, in_tower((block,12),(block,17)), false, 0)
holds(2, in_tower((block,12),(block,18)), false, 0)
holds(2, in_tower((block,12),(block,2)), false, 0)
holds(2, in_tower((block,12),(block,3)), false, 0)
holds(2, in_tower((block,12),(block,4)), false, 0)
holds(2, in_tower((block,12),(block,5)), false, 0)
holds(2, in_tower((block,12),(block,6)), false, 0)
holds(2, in_tower((block,12),(block,7)), false, 0)
holds(2, in_tower((block,12),(block,8)), false, 0)
holds(2, in_tower((block,12),(block,9)), false, 0)
holds(2, in_tower((block,13),(block,1)), false, 0)
holds(2, in_tower((block,13),(block,10)), false, 0)
holds(2, in_tower((block,13),(block,11)), false, 0)
holds(2, in_tower((block,13),(block,12)), false, 0)
holds(2, in_tower((block,13),(block,13)), false, 0)
holds(2, in_tower((block,13),(block,14)), false, 0)
holds(2, in_tower((block,13),(block,15)), false, 0)
holds(2, in_tower((block,13),(block,16)), false, 0)
holds(2, in_tower((block,13),(block,17)), false, 0)
holds(2, in_tower((block,13),(block,18)), false, 0)
holds(2, in_tower((block,13),(block,2)), false, 0)
holds(2, in_tower((block,13),(block,3)), false, 0)
holds(2, in_tower((block,13),(block,4)), false, 0)
holds(2, in_tower((block,13),(block,5)), false, 0)
holds(2, in_tower((block,13),(block,6)), false, 0)
holds(2, in_tower((block,13),(block,7)), false, 0)
holds(2, in_tower((block,13),(block,8)), false, 0)
holds(2, in_tower((block,13),(block,9)), false, 0)
holds(2, in_tower((block,14),(block,1)), false, 0)
holds(2, in_tower((block,14),(block,10)), false, 0)
holds(2, in_tower((block,14),(block,11)), false, 0)
holds(2, in_tower((block,14),(block,12)), false, 0)
holds(2, in_tower((block,14),(block,13)), false, 0)
holds(2, in_tower((block,14),(block,14)), false, 0)
holds(2, in_tower((block,14),(block,15)), false, 0)
holds(2, in_tower((block,14),(block,16)), false, 0)
holds(2, in_tower((block,14),(block,17)), false, 0)
holds(2, in_tower((block,14),(block,18)), false, 0)
holds(2, in_tower((block,14),(block,2)), false, 0)
holds(2, in_tower((block,14),(block,3)), false, 0)
holds(2, in_tower((block,14),(block,4)), false, 0)
holds(2, in_tower((block,14),(block,5)), false, 0)
holds(2, in_tower((block,14),(block,6)), false, 0)
holds(2, in_tower((block,14),(block,7)), false, 0)
holds(2, in_tower((block,14),(block,8)), false, 0)
holds(2, in_tower((block,14),(block,9)), false, 0)
holds(2, in_tower((block,15),(block,1)), false, 0)
holds(2, in_tower((block,15),(block,10)), false, 0)
holds(2, in_tower((block,15),(block,11)), false, 0)
holds(2, in_tower((block,15),(block,12)), false, 0)
holds(2, in_tower((block,15),(block,13)), false, 0)
holds(2, in_tower((block,15),(block,14)), false, 0)
holds(2, in_tower((block,15),(block,15)), false, 0)
holds(2, in_tower((block,15),(block,16)), false, 0)
holds(2, in_tower((block,15),(block,17)), false, 0)
holds(2, in_tower((block,15),(block,18)), false, 0)
holds(2, in_tower((block,15),(block,2)), false, 0)
holds(2, in_tower((block,15),(block,3)), false, 0)
holds(2, in_tower((block,15),(block,4)), false, 0)
holds(2, in_tower((block,15),(block,5)), false, 0)
holds(2, in_tower((block,15),(block,6)), false, 0)
holds(2, in_tower((block,15),(block,7)), false, 0)
holds(2, in_tower((block,15),(block,8)), false, 0)
holds(2, in_tower((block,15),(block,9)), false, 0)
holds(2, in_tower((block,16),(block,1)), false, 0)
holds(2, in_tower((block,16),(block,10)), false, 0)
holds(2, in_tower((block,16),(block,11)), false, 0)
holds(2, in_tower((block,16),(block,12)), false, 0)
holds(2, in_tower((block,16),(block,13)), false, 0)
holds(2, in_tower((block,16),(block,14)), false, 0)
holds(2, in_tower((block,16),(block,15)), false, 0)
holds(2, in_tower((block,16),(block,16)), true, 0)
holds(2, in_tower((block,16),(block,17)), false, 0)
holds(2, in_tower((block,16),(block,18)), true, 0)
holds(2, in_tower((block,16),(block,2)), false, 0)
holds(2, in_tower((block,16),(block,3)), false, 0)
holds(2, in_tower((block,16),(block,4)), false, 0)
holds(2, in_tower((block,16),(block,5)), false, 0)
holds(2, in_tower((block,16),(block,6)), false, 0)
holds(2, in_tower((block,16),(block,7)), false, 0)
holds(2, in_tower((block,16),(block,8)), false, 0)
holds(2, in_tower((block,16),(block,9)), false, 0)
holds(2, in_tower((block,17),(block,1)), false, 0)
holds(2, in_tower((block,17),(block,10)), false, 0)
holds(2, in_tower((block,17),(block,11)), false, 0)
holds(2, in_tower((block,17),(block,12)), false, 0)
holds(2, in_tower((block,17),(block,13)), false, 0)
holds(2, in_tower((block,17),(block,14)), false, 0)
holds(2, in_tower((block,17),(block,15)), false, 0)
holds(2, in_tower((block,17),(block,16)), false, 0)
holds(2, in_tower((block,17),(block,17)), false, 0)
holds(2, in_tower((block,17),(block,18)), false, 0)
holds(2, in_tower((block,17),(block,2)), false, 0)
holds(2, in_tower((block,17),(block,3)), false, 0)
holds(2, in_tower((block,17),(block,4)), false, 0)
holds(2, in_tower((block,17),(block,5)), false, 0)
holds(2, in_tower((block,17),(block,6)), false, 0)
holds(2, in_tower((block,17),(block,7)), false, 0)
holds(2, in_tower((block,17),(block,8)), false, 0)
holds(2, in_tower((block,17),(block,9)), false, 0)
holds(2, in_tower((block,18),(block,1)), false, 0)
holds(2, in_tower((block,18),(block,10)), false, 0)
holds(2, in_tower((block,18),(block,11)), false, 0)
holds(2, in_tower((block,18),(block,12)), false, 0)
holds(2, in_tower((block,18),(block,13)), false, 0)
holds(2, in_tower((block,18),(block,14)), false, 0)
holds(2, in_tower((block,18),(block,15)), false, 0)
holds(2, in_tower((block,18),(block,16)), false, 0)
holds(2, in_tower((block,18),(block,17)), false, 0)
holds(2, in_tower((block,18),(block,18)), false, 0)
holds(2, in_tower((block,18),(block,2)), false, 0)
holds(2, in_tower((block,18),(block,3)), false, 0)
holds(2, in_tower((block,18),(block,4)), false, 0)
holds(2, in_tower((block,18),(block,5)), false, 0)
holds(2, in_tower((block,18),(block,6)), false, 0)
holds(2, in_tower((block,18),(block,7)), false, 0)
holds(2, in_tower((block,18),(block,8)), false, 0)
holds(2, in_tower((block,18),(block,9)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,10)), false, 0)
holds(2, in_tower((block,2),(block,11)), false, 0)
holds(2, in_tower((block,2),(block,12)), false, 0)
holds(2, in_tower((block,2),(block,13)), false, 0)
holds(2, in_tower((block,2),(block,14)), false, 0)
holds(2, in_tower((block,2),(block,15)), false, 0)
holds(2, in_tower((block,2),(block,16)), false, 0)
holds(2, in_tower((block,2),(block,17)), false, 0)
holds(2, in_tower((block,2),(block,18)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,7)), false, 0)
holds(2, in_tower((block,2),(block,8)), false, 0)
holds(2, in_tower((block,2),(block,9)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,10)), false, 0)
holds(2, in_tower((block,3),(block,11)), false, 0)
holds(2, in_tower((block,3),(block,12)), false, 0)
holds(2, in_tower((block,3),(block,13)), false, 0)
holds(2, in_tower((block,3),(block,14)), false, 0)
holds(2, in_tower((block,3),(block,15)), false, 0)
holds(2, in_tower((block,3),(block,16)), false, 0)
holds(2, in_tower((block,3),(block,17)), false, 0)
holds(2, in_tower((block,3),(block,18)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,7)), false, 0)
holds(2, in_tower((block,3),(block,8)), false, 0)
holds(2, in_tower((block,3),(block,9)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,10)), false, 0)
holds(2, in_tower((block,4),(block,11)), false, 0)
holds(2, in_tower((block,4),(block,12)), false, 0)
holds(2, in_tower((block,4),(block,13)), false, 0)
holds(2, in_tower((block,4),(block,14)), false, 0)
holds(2, in_tower((block,4),(block,15)), false, 0)
holds(2, in_tower((block,4),(block,16)), false, 0)
holds(2, in_tower((block,4),(block,17)), false, 0)
holds(2, in_tower((block,4),(block,18)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,7)), false, 0)
holds(2, in_tower((block,4),(block,8)), false, 0)
holds(2, in_tower((block,4),(block,9)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,10)), false, 0)
holds(2, in_tower((block,5),(block,11)), false, 0)
holds(2, in_tower((block,5),(block,12)), false, 0)
holds(2, in_tower((block,5),(block,13)), false, 0)
holds(2, in_tower((block,5),(block,14)), false, 0)
holds(2, in_tower((block,5),(block,15)), false, 0)
holds(2, in_tower((block,5),(block,16)), false, 0)
holds(2, in_tower((block,5),(block,17)), false, 0)
holds(2, in_tower((block,5),(block,18)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,7)), false, 0)
holds(2, in_tower((block,5),(block,8)), false, 0)
holds(2, in_tower((block,5),(block,9)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,10)), false, 0)
holds(2, in_tower((block,6),(block,11)), false, 0)
holds(2, in_tower((block,6),(block,12)), false, 0)
holds(2, in_tower((block,6),(block,13)), false, 0)
holds(2, in_tower((block,6),(block,14)), false, 0)
holds(2, in_tower((block,6),(block,15)), false, 0)
holds(2, in_tower((block,6),(block,16)), false, 0)
holds(2, in_tower((block,6),(block,17)), false, 0)
holds(2, in_tower((block,6),(block,18)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,7)), false, 0)
holds(2, in_tower((block,6),(block,8)), false, 0)
holds(2, in_tower((block,6),(block,9)), false, 0)
holds(2, in_tower((block,7),(block,1)), false, 0)
holds(2, in_tower((block,7),(block,10)), false, 0)
holds(2, in_tower((block,7),(block,11)), false, 0)
holds(2, in_tower((block,7),(block,12)), false, 0)
holds(2, in_tower((block,7),(block,13)), false, 0)
holds(2, in_tower((block,7),(block,14)), false, 0)
holds(2, in_tower((block,7),(block,15)), false, 0)
holds(2, in_tower((block,7),(block,16)), false, 0)
holds(2, in_tower((block,7),(block,17)), false, 0)
holds(2, in_tower((block,7),(block,18)), false, 0)
holds(2, in_tower((block,7),(block,2)), false, 0)
holds(2, in_tower((block,7),(block,3)), false, 0)
holds(2, in_tower((block,7),(block,4)), false, 0)
holds(2, in_tower((block,7),(block,5)), false, 0)
holds(2, in_tower((block,7),(block,6)), false, 0)
holds(2, in_tower((block,7),(block,7)), true, 0)
holds(2, in_tower((block,7),(block,8)), false, 0)
holds(2, in_tower((block,7),(block,9)), true, 0)
holds(2, in_tower((block,8),(block,1)), false, 0)
holds(2, in_tower((block,8),(block,10)), false, 0)
holds(2, in_tower((block,8),(block,11)), false, 0)
holds(2, in_tower((block,8),(block,12)), false, 0)
holds(2, in_tower((block,8),(block,13)), false, 0)
holds(2, in_tower((block,8),(block,14)), false, 0)
holds(2, in_tower((block,8),(block,15)), false, 0)
holds(2, in_tower((block,8),(block,16)), false, 0)
holds(2, in_tower((block,8),(block,17)), false, 0)
holds(2, in_tower((block,8),(block,18)), false, 0)
holds(2, in_tower((block,8),(block,2)), false, 0)
holds(2, in_tower((block,8),(block,3)), false, 0)
holds(2, in_tower((block,8),(block,4)), false, 0)
holds(2, in_tower((block,8),(block,5)), false, 0)
holds(2, in_tower((block,8),(block,6)), false, 0)
holds(2, in_tower((block,8),(block,7)), false, 0)
holds(2, in_tower((block,8),(block,8)), false, 0)
holds(2, in_tower((block,8),(block,9)), false, 0)
holds(2, in_tower((block,9),(block,1)), false, 0)
holds(2, in_tower((block,9),(block,10)), false, 0)
holds(2, in_tower((block,9),(block,11)), false, 0)
holds(2, in_tower((block,9),(block,12)), false, 0)
holds(2, in_tower((block,9),(block,13)), false, 0)
holds(2, in_tower((block,9),(block,14)), false, 0)
holds(2, in_tower((block,9),(block,15)), false, 0)
holds(2, in_tower((block,9),(block,16)), false, 0)
holds(2, in_tower((block,9),(block,17)), false, 0)
holds(2, in_tower((block,9),(block,18)), false, 0)
holds(2, in_tower((block,9),(block,2)), false, 0)
holds(2, in_tower((block,9),(block,3)), false, 0)
holds(2, in_tower((block,9),(block,4)), false, 0)
holds(2, in_tower((block,9),(block,5)), false, 0)
holds(2, in_tower((block,9),(block,6)), false, 0)
holds(2, in_tower((block,9),(block,7)), false, 0)
holds(2, in_tower((block,9),(block,8)), false, 0)
holds(2, in_tower((block,9),(block,9)), false, 0)
holds(2, on((block,1)), puzzle_room_1_table_left, 0)
holds(2, on((block,10)), puzzle_room_2_table_left, 0)
holds(2, on((block,11)), puzzle_room_2_table_right, 0)
holds(2, on((block,12)), (block,10), 0)
holds(2, on((block,13)), nothing, 0)
holds(2, on((block,14)), nothing, 0)
holds(2, on((block,15)), nothing, 0)
holds(2, on((block,16)), puzzle_room_2_table_middle, 0)
holds(2, on((block,17)), nothing, 0)
holds(2, on((block,18)), (block,16), 0)
holds(2, on((block,2)), puzzle_room_1_table_right, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, on((block,7)), puzzle_room_1_table_middle, 0)
holds(2, on((block,8)), nothing, 0)
holds(2, on((block,9)), (block,7), 0)
holds(2, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(2, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(2, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(2, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(2, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-21-18] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(1, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(1, complete_tower(red,puzzle_room_1_table), false, 0)
holds(1, complete_tower(red,puzzle_room_2_table), false, 0)
holds(1, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(1, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_1_door), closed, 0)
holds(1, configuration(puzzle_room_2_door), closed, 0)
holds(1, configuration(store_room_1_door), closed, 0)
holds(1, configuration(store_room_2_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), ((puzzle_room_1,1),5,0), 0)
holds(1, in((block,10)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,11)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,12)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,13)), ((store_room_2,0),0,0), 0)
holds(1, in((block,14)), ((store_room_2,0),0,0), 0)
holds(1, in((block,15)), ((store_room_2,0),0,0), 0)
holds(1, in((block,16)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,17)), ((store_room_2,0),0,1), 0)
holds(1, in((block,18)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,2)), ((puzzle_room_1,1),5,0), 0)
holds(1, in((block,3)), ((puzzle_room_1,1),5,0), 0)
holds(1, in((block,4)), ((store_room_1,0),0,0), 0)
holds(1, in((block,5)), ((store_room_1,0),0,0), 0)
holds(1, in((block,6)), ((store_room_1,0),0,0), 0)
holds(1, in((block,7)), ((puzzle_room_1,1),5,0), 0)
holds(1, in((block,8)), ((store_room_1,0),0,1), 0)
holds(1, in((block,9)), ((puzzle_room_1,1),5,0), 0)
holds(1, in(manipulator_arm_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_arm_2), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_end_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_end_2), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_limb_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_limb_2), ((starting_room_1,0),0,0), 0)
holds(1, in(puzzle_room_1_table), ((puzzle_room_1,1),5,0), 0)
holds(1, in(puzzle_room_1_table_left), ((puzzle_room_1,1),5,0), 0)
holds(1, in(puzzle_room_1_table_middle), ((puzzle_room_1,1),5,0), 0)
holds(1, in(puzzle_room_1_table_right), ((puzzle_room_1,1),5,0), 0)
holds(1, in(puzzle_room_2_table), ((puzzle_room_2,1),5,0), 0)
holds(1, in(puzzle_room_2_table_left), ((puzzle_room_2,1),5,0), 0)
holds(1, in(puzzle_room_2_table_middle), ((puzzle_room_2,1),5,0), 0)
holds(1, in(puzzle_room_2_table_right), ((puzzle_room_2,1),5,0), 0)
holds(1, in(talos), ((starting_room_1,0),0,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,10)), false, 0)
holds(1, in_tower((block,1),(block,11)), false, 0)
holds(1, in_tower((block,1),(block,12)), false, 0)
holds(1, in_tower((block,1),(block,13)), false, 0)
holds(1, in_tower((block,1),(block,14)), false, 0)
holds(1, in_tower((block,1),(block,15)), false, 0)
holds(1, in_tower((block,1),(block,16)), false, 0)
holds(1, in_tower((block,1),(block,17)), false, 0)
holds(1, in_tower((block,1),(block,18)), false, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,1),(block,7)), false, 0)
holds(1, in_tower((block,1),(block,8)), false, 0)
holds(1, in_tower((block,1),(block,9)), false, 0)
holds(1, in_tower((block,10),(block,1)), false, 0)
holds(1, in_tower((block,10),(block,10)), true, 0)
holds(1, in_tower((block,10),(block,11)), false, 0)
holds(1, in_tower((block,10),(block,12)), true, 0)
holds(1, in_tower((block,10),(block,13)), false, 0)
holds(1, in_tower((block,10),(block,14)), false, 0)
holds(1, in_tower((block,10),(block,15)), false, 0)
holds(1, in_tower((block,10),(block,16)), false, 0)
holds(1, in_tower((block,10),(block,17)), false, 0)
holds(1, in_tower((block,10),(block,18)), false, 0)
holds(1, in_tower((block,10),(block,2)), false, 0)
holds(1, in_tower((block,10),(block,3)), false, 0)
holds(1, in_tower((block,10),(block,4)), false, 0)
holds(1, in_tower((block,10),(block,5)), false, 0)
holds(1, in_tower((block,10),(block,6)), false, 0)
holds(1, in_tower((block,10),(block,7)), false, 0)
holds(1, in_tower((block,10),(block,8)), false, 0)
holds(1, in_tower((block,10),(block,9)), false, 0)
holds(1, in_tower((block,11),(block,1)), false, 0)
holds(1, in_tower((block,11),(block,10)), false, 0)
holds(1, in_tower((block,11),(block,11)), true, 0)
holds(1, in_tower((block,11),(block,12)), false, 0)
holds(1, in_tower((block,11),(block,13)), false, 0)
holds(1, in_tower((block,11),(block,14)), false, 0)
holds(1, in_tower((block,11),(block,15)), false, 0)
holds(1, in_tower((block,11),(block,16)), false, 0)
holds(1, in_tower((block,11),(block,17)), false, 0)
holds(1, in_tower((block,11),(block,18)), false, 0)
holds(1, in_tower((block,11),(block,2)), false, 0)
holds(1, in_tower((block,11),(block,3)), false, 0)
holds(1, in_tower((block,11),(block,4)), false, 0)
holds(1, in_tower((block,11),(block,5)), false, 0)
holds(1, in_tower((block,11),(block,6)), false, 0)
holds(1, in_tower((block,11),(block,7)), false, 0)
holds(1, in_tower((block,11),(block,8)), false, 0)
holds(1, in_tower((block,11),(block,9)), false, 0)
holds(1, in_tower((block,12),(block,1)), false, 0)
holds(1, in_tower((block,12),(block,10)), false, 0)
holds(1, in_tower((block,12),(block,11)), false, 0)
holds(1, in_tower((block,12),(block,12)), false, 0)
holds(1, in_tower((block,12),(block,13)), false, 0)
holds(1, in_tower((block,12),(block,14)), false, 0)
holds(1, in_tower((block,12),(block,15)), false, 0)
holds(1, in_tower((block,12),(block,16)), false, 0)
holds(1, in_tower((block,12),(block,17)), false, 0)
holds(1, in_tower((block,12),(block,18)), false, 0)
holds(1, in_tower((block,12),(block,2)), false, 0)
holds(1, in_tower((block,12),(block,3)), false, 0)
holds(1, in_tower((block,12),(block,4)), false, 0)
holds(1, in_tower((block,12),(block,5)), false, 0)
holds(1, in_tower((block,12),(block,6)), false, 0)
holds(1, in_tower((block,12),(block,7)), false, 0)
holds(1, in_tower((block,12),(block,8)), false, 0)
holds(1, in_tower((block,12),(block,9)), false, 0)
holds(1, in_tower((block,13),(block,1)), false, 0)
holds(1, in_tower((block,13),(block,10)), false, 0)
holds(1, in_tower((block,13),(block,11)), false, 0)
holds(1, in_tower((block,13),(block,12)), false, 0)
holds(1, in_tower((block,13),(block,13)), false, 0)
holds(1, in_tower((block,13),(block,14)), false, 0)
holds(1, in_tower((block,13),(block,15)), false, 0)
holds(1, in_tower((block,13),(block,16)), false, 0)
holds(1, in_tower((block,13),(block,17)), false, 0)
holds(1, in_tower((block,13),(block,18)), false, 0)
holds(1, in_tower((block,13),(block,2)), false, 0)
holds(1, in_tower((block,13),(block,3)), false, 0)
holds(1, in_tower((block,13),(block,4)), false, 0)
holds(1, in_tower((block,13),(block,5)), false, 0)
holds(1, in_tower((block,13),(block,6)), false, 0)
holds(1, in_tower((block,13),(block,7)), false, 0)
holds(1, in_tower((block,13),(block,8)), false, 0)
holds(1, in_tower((block,13),(block,9)), false, 0)
holds(1, in_tower((block,14),(block,1)), false, 0)
holds(1, in_tower((block,14),(block,10)), false, 0)
holds(1, in_tower((block,14),(block,11)), false, 0)
holds(1, in_tower((block,14),(block,12)), false, 0)
holds(1, in_tower((block,14),(block,13)), false, 0)
holds(1, in_tower((block,14),(block,14)), false, 0)
holds(1, in_tower((block,14),(block,15)), false, 0)
holds(1, in_tower((block,14),(block,16)), false, 0)
holds(1, in_tower((block,14),(block,17)), false, 0)
holds(1, in_tower((block,14),(block,18)), false, 0)
holds(1, in_tower((block,14),(block,2)), false, 0)
holds(1, in_tower((block,14),(block,3)), false, 0)
holds(1, in_tower((block,14),(block,4)), false, 0)
holds(1, in_tower((block,14),(block,5)), false, 0)
holds(1, in_tower((block,14),(block,6)), false, 0)
holds(1, in_tower((block,14),(block,7)), false, 0)
holds(1, in_tower((block,14),(block,8)), false, 0)
holds(1, in_tower((block,14),(block,9)), false, 0)
holds(1, in_tower((block,15),(block,1)), false, 0)
holds(1, in_tower((block,15),(block,10)), false, 0)
holds(1, in_tower((block,15),(block,11)), false, 0)
holds(1, in_tower((block,15),(block,12)), false, 0)
holds(1, in_tower((block,15),(block,13)), false, 0)
holds(1, in_tower((block,15),(block,14)), false, 0)
holds(1, in_tower((block,15),(block,15)), false, 0)
holds(1, in_tower((block,15),(block,16)), false, 0)
holds(1, in_tower((block,15),(block,17)), false, 0)
holds(1, in_tower((block,15),(block,18)), false, 0)
holds(1, in_tower((block,15),(block,2)), false, 0)
holds(1, in_tower((block,15),(block,3)), false, 0)
holds(1, in_tower((block,15),(block,4)), false, 0)
holds(1, in_tower((block,15),(block,5)), false, 0)
holds(1, in_tower((block,15),(block,6)), false, 0)
holds(1, in_tower((block,15),(block,7)), false, 0)
holds(1, in_tower((block,15),(block,8)), false, 0)
holds(1, in_tower((block,15),(block,9)), false, 0)
holds(1, in_tower((block,16),(block,1)), false, 0)
holds(1, in_tower((block,16),(block,10)), false, 0)
holds(1, in_tower((block,16),(block,11)), false, 0)
holds(1, in_tower((block,16),(block,12)), false, 0)
holds(1, in_tower((block,16),(block,13)), false, 0)
holds(1, in_tower((block,16),(block,14)), false, 0)
holds(1, in_tower((block,16),(block,15)), false, 0)
holds(1, in_tower((block,16),(block,16)), true, 0)
holds(1, in_tower((block,16),(block,17)), false, 0)
holds(1, in_tower((block,16),(block,18)), true, 0)
holds(1, in_tower((block,16),(block,2)), false, 0)
holds(1, in_tower((block,16),(block,3)), false, 0)
holds(1, in_tower((block,16),(block,4)), false, 0)
holds(1, in_tower((block,16),(block,5)), false, 0)
holds(1, in_tower((block,16),(block,6)), false, 0)
holds(1, in_tower((block,16),(block,7)), false, 0)
holds(1, in_tower((block,16),(block,8)), false, 0)
holds(1, in_tower((block,16),(block,9)), false, 0)
holds(1, in_tower((block,17),(block,1)), false, 0)
holds(1, in_tower((block,17),(block,10)), false, 0)
holds(1, in_tower((block,17),(block,11)), false, 0)
holds(1, in_tower((block,17),(block,12)), false, 0)
holds(1, in_tower((block,17),(block,13)), false, 0)
holds(1, in_tower((block,17),(block,14)), false, 0)
holds(1, in_tower((block,17),(block,15)), false, 0)
holds(1, in_tower((block,17),(block,16)), false, 0)
holds(1, in_tower((block,17),(block,17)), false, 0)
holds(1, in_tower((block,17),(block,18)), false, 0)
holds(1, in_tower((block,17),(block,2)), false, 0)
holds(1, in_tower((block,17),(block,3)), false, 0)
holds(1, in_tower((block,17),(block,4)), false, 0)
holds(1, in_tower((block,17),(block,5)), false, 0)
holds(1, in_tower((block,17),(block,6)), false, 0)
holds(1, in_tower((block,17),(block,7)), false, 0)
holds(1, in_tower((block,17),(block,8)), false, 0)
holds(1, in_tower((block,17),(block,9)), false, 0)
holds(1, in_tower((block,18),(block,1)), false, 0)
holds(1, in_tower((block,18),(block,10)), false, 0)
holds(1, in_tower((block,18),(block,11)), false, 0)
holds(1, in_tower((block,18),(block,12)), false, 0)
holds(1, in_tower((block,18),(block,13)), false, 0)
holds(1, in_tower((block,18),(block,14)), false, 0)
holds(1, in_tower((block,18),(block,15)), false, 0)
holds(1, in_tower((block,18),(block,16)), false, 0)
holds(1, in_tower((block,18),(block,17)), false, 0)
holds(1, in_tower((block,18),(block,18)), false, 0)
holds(1, in_tower((block,18),(block,2)), false, 0)
holds(1, in_tower((block,18),(block,3)), false, 0)
holds(1, in_tower((block,18),(block,4)), false, 0)
holds(1, in_tower((block,18),(block,5)), false, 0)
holds(1, in_tower((block,18),(block,6)), false, 0)
holds(1, in_tower((block,18),(block,7)), false, 0)
holds(1, in_tower((block,18),(block,8)), false, 0)
holds(1, in_tower((block,18),(block,9)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,10)), false, 0)
holds(1, in_tower((block,2),(block,11)), false, 0)
holds(1, in_tower((block,2),(block,12)), false, 0)
holds(1, in_tower((block,2),(block,13)), false, 0)
holds(1, in_tower((block,2),(block,14)), false, 0)
holds(1, in_tower((block,2),(block,15)), false, 0)
holds(1, in_tower((block,2),(block,16)), false, 0)
holds(1, in_tower((block,2),(block,17)), false, 0)
holds(1, in_tower((block,2),(block,18)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,7)), false, 0)
holds(1, in_tower((block,2),(block,8)), false, 0)
holds(1, in_tower((block,2),(block,9)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,10)), false, 0)
holds(1, in_tower((block,3),(block,11)), false, 0)
holds(1, in_tower((block,3),(block,12)), false, 0)
holds(1, in_tower((block,3),(block,13)), false, 0)
holds(1, in_tower((block,3),(block,14)), false, 0)
holds(1, in_tower((block,3),(block,15)), false, 0)
holds(1, in_tower((block,3),(block,16)), false, 0)
holds(1, in_tower((block,3),(block,17)), false, 0)
holds(1, in_tower((block,3),(block,18)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,7)), false, 0)
holds(1, in_tower((block,3),(block,8)), false, 0)
holds(1, in_tower((block,3),(block,9)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,10)), false, 0)
holds(1, in_tower((block,4),(block,11)), false, 0)
holds(1, in_tower((block,4),(block,12)), false, 0)
holds(1, in_tower((block,4),(block,13)), false, 0)
holds(1, in_tower((block,4),(block,14)), false, 0)
holds(1, in_tower((block,4),(block,15)), false, 0)
holds(1, in_tower((block,4),(block,16)), false, 0)
holds(1, in_tower((block,4),(block,17)), false, 0)
holds(1, in_tower((block,4),(block,18)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,7)), false, 0)
holds(1, in_tower((block,4),(block,8)), false, 0)
holds(1, in_tower((block,4),(block,9)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,10)), false, 0)
holds(1, in_tower((block,5),(block,11)), false, 0)
holds(1, in_tower((block,5),(block,12)), false, 0)
holds(1, in_tower((block,5),(block,13)), false, 0)
holds(1, in_tower((block,5),(block,14)), false, 0)
holds(1, in_tower((block,5),(block,15)), false, 0)
holds(1, in_tower((block,5),(block,16)), false, 0)
holds(1, in_tower((block,5),(block,17)), false, 0)
holds(1, in_tower((block,5),(block,18)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,7)), false, 0)
holds(1, in_tower((block,5),(block,8)), false, 0)
holds(1, in_tower((block,5),(block,9)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,10)), false, 0)
holds(1, in_tower((block,6),(block,11)), false, 0)
holds(1, in_tower((block,6),(block,12)), false, 0)
holds(1, in_tower((block,6),(block,13)), false, 0)
holds(1, in_tower((block,6),(block,14)), false, 0)
holds(1, in_tower((block,6),(block,15)), false, 0)
holds(1, in_tower((block,6),(block,16)), false, 0)
holds(1, in_tower((block,6),(block,17)), false, 0)
holds(1, in_tower((block,6),(block,18)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,7)), false, 0)
holds(1, in_tower((block,6),(block,8)), false, 0)
holds(1, in_tower((block,6),(block,9)), false, 0)
holds(1, in_tower((block,7),(block,1)), false, 0)
holds(1, in_tower((block,7),(block,10)), false, 0)
holds(1, in_tower((block,7),(block,11)), false, 0)
holds(1, in_tower((block,7),(block,12)), false, 0)
holds(1, in_tower((block,7),(block,13)), false, 0)
holds(1, in_tower((block,7),(block,14)), false, 0)
holds(1, in_tower((block,7),(block,15)), false, 0)
holds(1, in_tower((block,7),(block,16)), false, 0)
holds(1, in_tower((block,7),(block,17)), false, 0)
holds(1, in_tower((block,7),(block,18)), false, 0)
holds(1, in_tower((block,7),(block,2)), false, 0)
holds(1, in_tower((block,7),(block,3)), false, 0)
holds(1, in_tower((block,7),(block,4)), false, 0)
holds(1, in_tower((block,7),(block,5)), false, 0)
holds(1, in_tower((block,7),(block,6)), false, 0)
holds(1, in_tower((block,7),(block,7)), true, 0)
holds(1, in_tower((block,7),(block,8)), false, 0)
holds(1, in_tower((block,7),(block,9)), true, 0)
holds(1, in_tower((block,8),(block,1)), false, 0)
holds(1, in_tower((block,8),(block,10)), false, 0)
holds(1, in_tower((block,8),(block,11)), false, 0)
holds(1, in_tower((block,8),(block,12)), false, 0)
holds(1, in_tower((block,8),(block,13)), false, 0)
holds(1, in_tower((block,8),(block,14)), false, 0)
holds(1, in_tower((block,8),(block,15)), false, 0)
holds(1, in_tower((block,8),(block,16)), false, 0)
holds(1, in_tower((block,8),(block,17)), false, 0)
holds(1, in_tower((block,8),(block,18)), false, 0)
holds(1, in_tower((block,8),(block,2)), false, 0)
holds(1, in_tower((block,8),(block,3)), false, 0)
holds(1, in_tower((block,8),(block,4)), false, 0)
holds(1, in_tower((block,8),(block,5)), false, 0)
holds(1, in_tower((block,8),(block,6)), false, 0)
holds(1, in_tower((block,8),(block,7)), false, 0)
holds(1, in_tower((block,8),(block,8)), false, 0)
holds(1, in_tower((block,8),(block,9)), false, 0)
holds(1, in_tower((block,9),(block,1)), false, 0)
holds(1, in_tower((block,9),(block,10)), false, 0)
holds(1, in_tower((block,9),(block,11)), false, 0)
holds(1, in_tower((block,9),(block,12)), false, 0)
holds(1, in_tower((block,9),(block,13)), false, 0)
holds(1, in_tower((block,9),(block,14)), false, 0)
holds(1, in_tower((block,9),(block,15)), false, 0)
holds(1, in_tower((block,9),(block,16)), false, 0)
holds(1, in_tower((block,9),(block,17)), false, 0)
holds(1, in_tower((block,9),(block,18)), false, 0)
holds(1, in_tower((block,9),(block,2)), false, 0)
holds(1, in_tower((block,9),(block,3)), false, 0)
holds(1, in_tower((block,9),(block,4)), false, 0)
holds(1, in_tower((block,9),(block,5)), false, 0)
holds(1, in_tower((block,9),(block,6)), false, 0)
holds(1, in_tower((block,9),(block,7)), false, 0)
holds(1, in_tower((block,9),(block,8)), false, 0)
holds(1, in_tower((block,9),(block,9)), false, 0)
holds(1, on((block,1)), puzzle_room_1_table_left, 0)
holds(1, on((block,10)), puzzle_room_2_table_left, 0)
holds(1, on((block,11)), puzzle_room_2_table_right, 0)
holds(1, on((block,12)), (block,10), 0)
holds(1, on((block,13)), nothing, 0)
holds(1, on((block,14)), nothing, 0)
holds(1, on((block,15)), nothing, 0)
holds(1, on((block,16)), puzzle_room_2_table_middle, 0)
holds(1, on((block,17)), nothing, 0)
holds(1, on((block,18)), (block,16), 0)
holds(1, on((block,2)), puzzle_room_1_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, on((block,7)), puzzle_room_1_table_middle, 0)
holds(1, on((block,8)), nothing, 0)
holds(1, on((block,9)), (block,7), 0)
holds(1, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(1, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(1, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(1, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(1, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-21-18] INFO :: ASH Planner Main #1 >> Generating final-goals...

[04-03-2022_16-21-18] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[04-03-2022_16-21-18] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 443 rules

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.0031864000000005888s

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[04-03-2022_16-21-18] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[04-03-2022_16-21-19] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 1.118278s.

[04-03-2022_16-21-19] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 3.314547s with result Satisfiable.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 1.118278s, Solving = 3.314547s, Total = 4.432824s, Memory = (RSS = 282.777344Mb, VMS = 274.718750Mb)
Final Model :: Total atoms = 77606, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 1.118278s, Solving = 3.314547s, Total = 4.432824s, Memory = (RSS = 282.777344Mb, VMS = 274.718750Mb)
Final Model :: Total atoms = 77606, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 5         
      ================================================      

final_goal(5, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(5, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(5, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(5, in_tower((block,1),(block,1)), false, true)
final_goal(5, in_tower((block,1),(block,10)), false, true)
final_goal(5, in_tower((block,1),(block,11)), false, true)
final_goal(5, in_tower((block,1),(block,12)), false, true)
final_goal(5, in_tower((block,1),(block,13)), false, true)
final_goal(5, in_tower((block,1),(block,14)), false, true)
final_goal(5, in_tower((block,1),(block,15)), false, true)
final_goal(5, in_tower((block,1),(block,16)), false, true)
final_goal(5, in_tower((block,1),(block,17)), false, true)
final_goal(5, in_tower((block,1),(block,18)), false, true)
final_goal(5, in_tower((block,1),(block,2)), false, true)
final_goal(5, in_tower((block,1),(block,3)), false, true)
final_goal(5, in_tower((block,1),(block,4)), false, true)
final_goal(5, in_tower((block,1),(block,5)), false, true)
final_goal(5, in_tower((block,1),(block,6)), false, true)
final_goal(5, in_tower((block,1),(block,7)), false, true)
final_goal(5, in_tower((block,1),(block,8)), false, true)
final_goal(5, in_tower((block,1),(block,9)), false, true)
final_goal(5, in_tower((block,10),(block,1)), false, true)
final_goal(5, in_tower((block,10),(block,10)), false, true)
final_goal(5, in_tower((block,10),(block,11)), false, true)
final_goal(5, in_tower((block,10),(block,12)), false, true)
final_goal(5, in_tower((block,10),(block,13)), false, true)
final_goal(5, in_tower((block,10),(block,14)), false, true)
final_goal(5, in_tower((block,10),(block,15)), false, true)
final_goal(5, in_tower((block,10),(block,16)), false, true)
final_goal(5, in_tower((block,10),(block,17)), false, true)
final_goal(5, in_tower((block,10),(block,18)), false, true)
final_goal(5, in_tower((block,10),(block,2)), false, true)
final_goal(5, in_tower((block,10),(block,3)), false, true)
final_goal(5, in_tower((block,10),(block,4)), false, true)
final_goal(5, in_tower((block,10),(block,5)), false, true)
final_goal(5, in_tower((block,10),(block,6)), false, true)
final_goal(5, in_tower((block,10),(block,7)), false, true)
final_goal(5, in_tower((block,10),(block,8)), false, true)
final_goal(5, in_tower((block,10),(block,9)), false, true)
final_goal(5, in_tower((block,11),(block,1)), false, true)
final_goal(5, in_tower((block,11),(block,10)), false, true)
final_goal(5, in_tower((block,11),(block,11)), false, true)
final_goal(5, in_tower((block,11),(block,12)), false, true)
final_goal(5, in_tower((block,11),(block,13)), false, true)
final_goal(5, in_tower((block,11),(block,14)), false, true)
final_goal(5, in_tower((block,11),(block,15)), false, true)
final_goal(5, in_tower((block,11),(block,16)), false, true)
final_goal(5, in_tower((block,11),(block,17)), false, true)
final_goal(5, in_tower((block,11),(block,18)), false, true)
final_goal(5, in_tower((block,11),(block,2)), false, true)
final_goal(5, in_tower((block,11),(block,3)), false, true)
final_goal(5, in_tower((block,11),(block,4)), false, true)
final_goal(5, in_tower((block,11),(block,5)), false, true)
final_goal(5, in_tower((block,11),(block,6)), false, true)
final_goal(5, in_tower((block,11),(block,7)), false, true)
final_goal(5, in_tower((block,11),(block,8)), false, true)
final_goal(5, in_tower((block,11),(block,9)), false, true)
final_goal(5, in_tower((block,12),(block,1)), false, true)
final_goal(5, in_tower((block,12),(block,10)), true, true)
final_goal(5, in_tower((block,12),(block,11)), true, true)
final_goal(5, in_tower((block,12),(block,12)), true, true)
final_goal(5, in_tower((block,12),(block,13)), false, true)
final_goal(5, in_tower((block,12),(block,14)), false, true)
final_goal(5, in_tower((block,12),(block,15)), false, true)
final_goal(5, in_tower((block,12),(block,16)), false, true)
final_goal(5, in_tower((block,12),(block,17)), false, true)
final_goal(5, in_tower((block,12),(block,18)), false, true)
final_goal(5, in_tower((block,12),(block,2)), false, true)
final_goal(5, in_tower((block,12),(block,3)), false, true)
final_goal(5, in_tower((block,12),(block,4)), false, true)
final_goal(5, in_tower((block,12),(block,5)), false, true)
final_goal(5, in_tower((block,12),(block,6)), false, true)
final_goal(5, in_tower((block,12),(block,7)), false, true)
final_goal(5, in_tower((block,12),(block,8)), false, true)
final_goal(5, in_tower((block,12),(block,9)), false, true)
final_goal(5, in_tower((block,13),(block,1)), false, true)
final_goal(5, in_tower((block,13),(block,10)), false, true)
final_goal(5, in_tower((block,13),(block,11)), false, true)
final_goal(5, in_tower((block,13),(block,12)), false, true)
final_goal(5, in_tower((block,13),(block,13)), false, true)
final_goal(5, in_tower((block,13),(block,14)), false, true)
final_goal(5, in_tower((block,13),(block,15)), false, true)
final_goal(5, in_tower((block,13),(block,16)), false, true)
final_goal(5, in_tower((block,13),(block,17)), false, true)
final_goal(5, in_tower((block,13),(block,18)), false, true)
final_goal(5, in_tower((block,13),(block,2)), false, true)
final_goal(5, in_tower((block,13),(block,3)), false, true)
final_goal(5, in_tower((block,13),(block,4)), false, true)
final_goal(5, in_tower((block,13),(block,5)), false, true)
final_goal(5, in_tower((block,13),(block,6)), false, true)
final_goal(5, in_tower((block,13),(block,7)), false, true)
final_goal(5, in_tower((block,13),(block,8)), false, true)
final_goal(5, in_tower((block,13),(block,9)), false, true)
final_goal(5, in_tower((block,14),(block,1)), false, true)
final_goal(5, in_tower((block,14),(block,10)), false, true)
final_goal(5, in_tower((block,14),(block,11)), false, true)
final_goal(5, in_tower((block,14),(block,12)), false, true)
final_goal(5, in_tower((block,14),(block,13)), false, true)
final_goal(5, in_tower((block,14),(block,14)), false, true)
final_goal(5, in_tower((block,14),(block,15)), false, true)
final_goal(5, in_tower((block,14),(block,16)), false, true)
final_goal(5, in_tower((block,14),(block,17)), false, true)
final_goal(5, in_tower((block,14),(block,18)), false, true)
final_goal(5, in_tower((block,14),(block,2)), false, true)
final_goal(5, in_tower((block,14),(block,3)), false, true)
final_goal(5, in_tower((block,14),(block,4)), false, true)
final_goal(5, in_tower((block,14),(block,5)), false, true)
final_goal(5, in_tower((block,14),(block,6)), false, true)
final_goal(5, in_tower((block,14),(block,7)), false, true)
final_goal(5, in_tower((block,14),(block,8)), false, true)
final_goal(5, in_tower((block,14),(block,9)), false, true)
final_goal(5, in_tower((block,15),(block,1)), false, true)
final_goal(5, in_tower((block,15),(block,10)), false, true)
final_goal(5, in_tower((block,15),(block,11)), false, true)
final_goal(5, in_tower((block,15),(block,12)), false, true)
final_goal(5, in_tower((block,15),(block,13)), true, true)
final_goal(5, in_tower((block,15),(block,14)), true, true)
final_goal(5, in_tower((block,15),(block,15)), true, true)
final_goal(5, in_tower((block,15),(block,16)), false, true)
final_goal(5, in_tower((block,15),(block,17)), false, true)
final_goal(5, in_tower((block,15),(block,18)), false, true)
final_goal(5, in_tower((block,15),(block,2)), false, true)
final_goal(5, in_tower((block,15),(block,3)), false, true)
final_goal(5, in_tower((block,15),(block,4)), false, true)
final_goal(5, in_tower((block,15),(block,5)), false, true)
final_goal(5, in_tower((block,15),(block,6)), false, true)
final_goal(5, in_tower((block,15),(block,7)), false, true)
final_goal(5, in_tower((block,15),(block,8)), false, true)
final_goal(5, in_tower((block,15),(block,9)), false, true)
final_goal(5, in_tower((block,16),(block,1)), false, true)
final_goal(5, in_tower((block,16),(block,10)), false, true)
final_goal(5, in_tower((block,16),(block,11)), false, true)
final_goal(5, in_tower((block,16),(block,12)), false, true)
final_goal(5, in_tower((block,16),(block,13)), false, true)
final_goal(5, in_tower((block,16),(block,14)), false, true)
final_goal(5, in_tower((block,16),(block,15)), false, true)
final_goal(5, in_tower((block,16),(block,16)), false, true)
final_goal(5, in_tower((block,16),(block,17)), false, true)
final_goal(5, in_tower((block,16),(block,18)), false, true)
final_goal(5, in_tower((block,16),(block,2)), false, true)
final_goal(5, in_tower((block,16),(block,3)), false, true)
final_goal(5, in_tower((block,16),(block,4)), false, true)
final_goal(5, in_tower((block,16),(block,5)), false, true)
final_goal(5, in_tower((block,16),(block,6)), false, true)
final_goal(5, in_tower((block,16),(block,7)), false, true)
final_goal(5, in_tower((block,16),(block,8)), false, true)
final_goal(5, in_tower((block,16),(block,9)), false, true)
final_goal(5, in_tower((block,17),(block,1)), false, true)
final_goal(5, in_tower((block,17),(block,10)), false, true)
final_goal(5, in_tower((block,17),(block,11)), false, true)
final_goal(5, in_tower((block,17),(block,12)), false, true)
final_goal(5, in_tower((block,17),(block,13)), false, true)
final_goal(5, in_tower((block,17),(block,14)), false, true)
final_goal(5, in_tower((block,17),(block,15)), false, true)
final_goal(5, in_tower((block,17),(block,16)), false, true)
final_goal(5, in_tower((block,17),(block,17)), false, true)
final_goal(5, in_tower((block,17),(block,18)), false, true)
final_goal(5, in_tower((block,17),(block,2)), false, true)
final_goal(5, in_tower((block,17),(block,3)), false, true)
final_goal(5, in_tower((block,17),(block,4)), false, true)
final_goal(5, in_tower((block,17),(block,5)), false, true)
final_goal(5, in_tower((block,17),(block,6)), false, true)
final_goal(5, in_tower((block,17),(block,7)), false, true)
final_goal(5, in_tower((block,17),(block,8)), false, true)
final_goal(5, in_tower((block,17),(block,9)), false, true)
final_goal(5, in_tower((block,18),(block,1)), false, true)
final_goal(5, in_tower((block,18),(block,10)), false, true)
final_goal(5, in_tower((block,18),(block,11)), false, true)
final_goal(5, in_tower((block,18),(block,12)), false, true)
final_goal(5, in_tower((block,18),(block,13)), false, true)
final_goal(5, in_tower((block,18),(block,14)), false, true)
final_goal(5, in_tower((block,18),(block,15)), false, true)
final_goal(5, in_tower((block,18),(block,16)), true, true)
final_goal(5, in_tower((block,18),(block,17)), true, true)
final_goal(5, in_tower((block,18),(block,18)), true, true)
final_goal(5, in_tower((block,18),(block,2)), false, true)
final_goal(5, in_tower((block,18),(block,3)), false, true)
final_goal(5, in_tower((block,18),(block,4)), false, true)
final_goal(5, in_tower((block,18),(block,5)), false, true)
final_goal(5, in_tower((block,18),(block,6)), false, true)
final_goal(5, in_tower((block,18),(block,7)), false, true)
final_goal(5, in_tower((block,18),(block,8)), false, true)
final_goal(5, in_tower((block,18),(block,9)), false, true)
final_goal(5, in_tower((block,2),(block,1)), false, true)
final_goal(5, in_tower((block,2),(block,10)), false, true)
final_goal(5, in_tower((block,2),(block,11)), false, true)
final_goal(5, in_tower((block,2),(block,12)), false, true)
final_goal(5, in_tower((block,2),(block,13)), false, true)
final_goal(5, in_tower((block,2),(block,14)), false, true)
final_goal(5, in_tower((block,2),(block,15)), false, true)
final_goal(5, in_tower((block,2),(block,16)), false, true)
final_goal(5, in_tower((block,2),(block,17)), false, true)
final_goal(5, in_tower((block,2),(block,18)), false, true)
final_goal(5, in_tower((block,2),(block,2)), false, true)
final_goal(5, in_tower((block,2),(block,3)), false, true)
final_goal(5, in_tower((block,2),(block,4)), false, true)
final_goal(5, in_tower((block,2),(block,5)), false, true)
final_goal(5, in_tower((block,2),(block,6)), false, true)
final_goal(5, in_tower((block,2),(block,7)), false, true)
final_goal(5, in_tower((block,2),(block,8)), false, true)
final_goal(5, in_tower((block,2),(block,9)), false, true)
final_goal(5, in_tower((block,3),(block,1)), true, true)
final_goal(5, in_tower((block,3),(block,10)), false, true)
final_goal(5, in_tower((block,3),(block,11)), false, true)
final_goal(5, in_tower((block,3),(block,12)), false, true)
final_goal(5, in_tower((block,3),(block,13)), false, true)
final_goal(5, in_tower((block,3),(block,14)), false, true)
final_goal(5, in_tower((block,3),(block,15)), false, true)
final_goal(5, in_tower((block,3),(block,16)), false, true)
final_goal(5, in_tower((block,3),(block,17)), false, true)
final_goal(5, in_tower((block,3),(block,18)), false, true)
final_goal(5, in_tower((block,3),(block,2)), true, true)
final_goal(5, in_tower((block,3),(block,3)), true, true)
final_goal(5, in_tower((block,3),(block,4)), false, true)
final_goal(5, in_tower((block,3),(block,5)), false, true)
final_goal(5, in_tower((block,3),(block,6)), false, true)
final_goal(5, in_tower((block,3),(block,7)), false, true)
final_goal(5, in_tower((block,3),(block,8)), false, true)
final_goal(5, in_tower((block,3),(block,9)), false, true)
final_goal(5, in_tower((block,4),(block,1)), false, true)
final_goal(5, in_tower((block,4),(block,10)), false, true)
final_goal(5, in_tower((block,4),(block,11)), false, true)
final_goal(5, in_tower((block,4),(block,12)), false, true)
final_goal(5, in_tower((block,4),(block,13)), false, true)
final_goal(5, in_tower((block,4),(block,14)), false, true)
final_goal(5, in_tower((block,4),(block,15)), false, true)
final_goal(5, in_tower((block,4),(block,16)), false, true)
final_goal(5, in_tower((block,4),(block,17)), false, true)
final_goal(5, in_tower((block,4),(block,18)), false, true)
final_goal(5, in_tower((block,4),(block,2)), false, true)
final_goal(5, in_tower((block,4),(block,3)), false, true)
final_goal(5, in_tower((block,4),(block,4)), false, true)
final_goal(5, in_tower((block,4),(block,5)), false, true)
final_goal(5, in_tower((block,4),(block,6)), false, true)
final_goal(5, in_tower((block,4),(block,7)), false, true)
final_goal(5, in_tower((block,4),(block,8)), false, true)
final_goal(5, in_tower((block,4),(block,9)), false, true)
final_goal(5, in_tower((block,5),(block,1)), false, true)
final_goal(5, in_tower((block,5),(block,10)), false, true)
final_goal(5, in_tower((block,5),(block,11)), false, true)
final_goal(5, in_tower((block,5),(block,12)), false, true)
final_goal(5, in_tower((block,5),(block,13)), false, true)
final_goal(5, in_tower((block,5),(block,14)), false, true)
final_goal(5, in_tower((block,5),(block,15)), false, true)
final_goal(5, in_tower((block,5),(block,16)), false, true)
final_goal(5, in_tower((block,5),(block,17)), false, true)
final_goal(5, in_tower((block,5),(block,18)), false, true)
final_goal(5, in_tower((block,5),(block,2)), false, true)
final_goal(5, in_tower((block,5),(block,3)), false, true)
final_goal(5, in_tower((block,5),(block,4)), false, true)
final_goal(5, in_tower((block,5),(block,5)), false, true)
final_goal(5, in_tower((block,5),(block,6)), false, true)
final_goal(5, in_tower((block,5),(block,7)), false, true)
final_goal(5, in_tower((block,5),(block,8)), false, true)
final_goal(5, in_tower((block,5),(block,9)), false, true)
final_goal(5, in_tower((block,6),(block,1)), false, true)
final_goal(5, in_tower((block,6),(block,10)), false, true)
final_goal(5, in_tower((block,6),(block,11)), false, true)
final_goal(5, in_tower((block,6),(block,12)), false, true)
final_goal(5, in_tower((block,6),(block,13)), false, true)
final_goal(5, in_tower((block,6),(block,14)), false, true)
final_goal(5, in_tower((block,6),(block,15)), false, true)
final_goal(5, in_tower((block,6),(block,16)), false, true)
final_goal(5, in_tower((block,6),(block,17)), false, true)
final_goal(5, in_tower((block,6),(block,18)), false, true)
final_goal(5, in_tower((block,6),(block,2)), false, true)
final_goal(5, in_tower((block,6),(block,3)), false, true)
final_goal(5, in_tower((block,6),(block,4)), true, true)
final_goal(5, in_tower((block,6),(block,5)), true, true)
final_goal(5, in_tower((block,6),(block,6)), true, true)
final_goal(5, in_tower((block,6),(block,7)), false, true)
final_goal(5, in_tower((block,6),(block,8)), false, true)
final_goal(5, in_tower((block,6),(block,9)), false, true)
final_goal(5, in_tower((block,7),(block,1)), false, true)
final_goal(5, in_tower((block,7),(block,10)), false, true)
final_goal(5, in_tower((block,7),(block,11)), false, true)
final_goal(5, in_tower((block,7),(block,12)), false, true)
final_goal(5, in_tower((block,7),(block,13)), false, true)
final_goal(5, in_tower((block,7),(block,14)), false, true)
final_goal(5, in_tower((block,7),(block,15)), false, true)
final_goal(5, in_tower((block,7),(block,16)), false, true)
final_goal(5, in_tower((block,7),(block,17)), false, true)
final_goal(5, in_tower((block,7),(block,18)), false, true)
final_goal(5, in_tower((block,7),(block,2)), false, true)
final_goal(5, in_tower((block,7),(block,3)), false, true)
final_goal(5, in_tower((block,7),(block,4)), false, true)
final_goal(5, in_tower((block,7),(block,5)), false, true)
final_goal(5, in_tower((block,7),(block,6)), false, true)
final_goal(5, in_tower((block,7),(block,7)), false, true)
final_goal(5, in_tower((block,7),(block,8)), false, true)
final_goal(5, in_tower((block,7),(block,9)), false, true)
final_goal(5, in_tower((block,8),(block,1)), false, true)
final_goal(5, in_tower((block,8),(block,10)), false, true)
final_goal(5, in_tower((block,8),(block,11)), false, true)
final_goal(5, in_tower((block,8),(block,12)), false, true)
final_goal(5, in_tower((block,8),(block,13)), false, true)
final_goal(5, in_tower((block,8),(block,14)), false, true)
final_goal(5, in_tower((block,8),(block,15)), false, true)
final_goal(5, in_tower((block,8),(block,16)), false, true)
final_goal(5, in_tower((block,8),(block,17)), false, true)
final_goal(5, in_tower((block,8),(block,18)), false, true)
final_goal(5, in_tower((block,8),(block,2)), false, true)
final_goal(5, in_tower((block,8),(block,3)), false, true)
final_goal(5, in_tower((block,8),(block,4)), false, true)
final_goal(5, in_tower((block,8),(block,5)), false, true)
final_goal(5, in_tower((block,8),(block,6)), false, true)
final_goal(5, in_tower((block,8),(block,7)), false, true)
final_goal(5, in_tower((block,8),(block,8)), false, true)
final_goal(5, in_tower((block,8),(block,9)), false, true)
final_goal(5, in_tower((block,9),(block,1)), false, true)
final_goal(5, in_tower((block,9),(block,10)), false, true)
final_goal(5, in_tower((block,9),(block,11)), false, true)
final_goal(5, in_tower((block,9),(block,12)), false, true)
final_goal(5, in_tower((block,9),(block,13)), false, true)
final_goal(5, in_tower((block,9),(block,14)), false, true)
final_goal(5, in_tower((block,9),(block,15)), false, true)
final_goal(5, in_tower((block,9),(block,16)), false, true)
final_goal(5, in_tower((block,9),(block,17)), false, true)
final_goal(5, in_tower((block,9),(block,18)), false, true)
final_goal(5, in_tower((block,9),(block,2)), false, true)
final_goal(5, in_tower((block,9),(block,3)), false, true)
final_goal(5, in_tower((block,9),(block,4)), false, true)
final_goal(5, in_tower((block,9),(block,5)), false, true)
final_goal(5, in_tower((block,9),(block,6)), false, true)
final_goal(5, in_tower((block,9),(block,7)), true, true)
final_goal(5, in_tower((block,9),(block,8)), true, true)
final_goal(5, in_tower((block,9),(block,9)), true, true)
final_goal(5, on((block,1)), (block,2), true)
final_goal(5, on((block,10)), (block,11), true)
final_goal(5, on((block,11)), (block,12), true)
final_goal(5, on((block,12)), puzzle_room_2_table, true)
final_goal(5, on((block,13)), (block,14), true)
final_goal(5, on((block,14)), (block,15), true)
final_goal(5, on((block,15)), puzzle_room_2_table, true)
final_goal(5, on((block,16)), (block,17), true)
final_goal(5, on((block,17)), (block,18), true)
final_goal(5, on((block,18)), puzzle_room_2_table, true)
final_goal(5, on((block,2)), (block,3), true)
final_goal(5, on((block,3)), puzzle_room_1_table, true)
final_goal(5, on((block,4)), (block,5), true)
final_goal(5, on((block,5)), (block,6), true)
final_goal(5, on((block,6)), puzzle_room_1_table, true)
final_goal(5, on((block,7)), (block,8), true)
final_goal(5, on((block,8)), (block,9), true)
final_goal(5, on((block,9)), puzzle_room_1_table, true)
final_goal(5, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 5         
      ================================================      

final_goal(5, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(5, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(5, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(5, in_tower((block,1),(block,1)), true, false)
final_goal(5, in_tower((block,1),(block,10)), true, false)
final_goal(5, in_tower((block,1),(block,11)), true, false)
final_goal(5, in_tower((block,1),(block,12)), true, false)
final_goal(5, in_tower((block,1),(block,13)), true, false)
final_goal(5, in_tower((block,1),(block,14)), true, false)
final_goal(5, in_tower((block,1),(block,15)), true, false)
final_goal(5, in_tower((block,1),(block,16)), true, false)
final_goal(5, in_tower((block,1),(block,17)), true, false)
final_goal(5, in_tower((block,1),(block,18)), true, false)
final_goal(5, in_tower((block,1),(block,2)), true, false)
final_goal(5, in_tower((block,1),(block,3)), true, false)
final_goal(5, in_tower((block,1),(block,4)), true, false)
final_goal(5, in_tower((block,1),(block,5)), true, false)
final_goal(5, in_tower((block,1),(block,6)), true, false)
final_goal(5, in_tower((block,1),(block,7)), true, false)
final_goal(5, in_tower((block,1),(block,8)), true, false)
final_goal(5, in_tower((block,1),(block,9)), true, false)
final_goal(5, in_tower((block,10),(block,1)), true, false)
final_goal(5, in_tower((block,10),(block,10)), true, false)
final_goal(5, in_tower((block,10),(block,11)), true, false)
final_goal(5, in_tower((block,10),(block,12)), true, false)
final_goal(5, in_tower((block,10),(block,13)), true, false)
final_goal(5, in_tower((block,10),(block,14)), true, false)
final_goal(5, in_tower((block,10),(block,15)), true, false)
final_goal(5, in_tower((block,10),(block,16)), true, false)
final_goal(5, in_tower((block,10),(block,17)), true, false)
final_goal(5, in_tower((block,10),(block,18)), true, false)
final_goal(5, in_tower((block,10),(block,2)), true, false)
final_goal(5, in_tower((block,10),(block,3)), true, false)
final_goal(5, in_tower((block,10),(block,4)), true, false)
final_goal(5, in_tower((block,10),(block,5)), true, false)
final_goal(5, in_tower((block,10),(block,6)), true, false)
final_goal(5, in_tower((block,10),(block,7)), true, false)
final_goal(5, in_tower((block,10),(block,8)), true, false)
final_goal(5, in_tower((block,10),(block,9)), true, false)
final_goal(5, in_tower((block,11),(block,1)), true, false)
final_goal(5, in_tower((block,11),(block,10)), true, false)
final_goal(5, in_tower((block,11),(block,11)), true, false)
final_goal(5, in_tower((block,11),(block,12)), true, false)
final_goal(5, in_tower((block,11),(block,13)), true, false)
final_goal(5, in_tower((block,11),(block,14)), true, false)
final_goal(5, in_tower((block,11),(block,15)), true, false)
final_goal(5, in_tower((block,11),(block,16)), true, false)
final_goal(5, in_tower((block,11),(block,17)), true, false)
final_goal(5, in_tower((block,11),(block,18)), true, false)
final_goal(5, in_tower((block,11),(block,2)), true, false)
final_goal(5, in_tower((block,11),(block,3)), true, false)
final_goal(5, in_tower((block,11),(block,4)), true, false)
final_goal(5, in_tower((block,11),(block,5)), true, false)
final_goal(5, in_tower((block,11),(block,6)), true, false)
final_goal(5, in_tower((block,11),(block,7)), true, false)
final_goal(5, in_tower((block,11),(block,8)), true, false)
final_goal(5, in_tower((block,11),(block,9)), true, false)
final_goal(5, in_tower((block,12),(block,1)), true, false)
final_goal(5, in_tower((block,12),(block,10)), false, false)
final_goal(5, in_tower((block,12),(block,11)), false, false)
final_goal(5, in_tower((block,12),(block,12)), false, false)
final_goal(5, in_tower((block,12),(block,13)), true, false)
final_goal(5, in_tower((block,12),(block,14)), true, false)
final_goal(5, in_tower((block,12),(block,15)), true, false)
final_goal(5, in_tower((block,12),(block,16)), true, false)
final_goal(5, in_tower((block,12),(block,17)), true, false)
final_goal(5, in_tower((block,12),(block,18)), true, false)
final_goal(5, in_tower((block,12),(block,2)), true, false)
final_goal(5, in_tower((block,12),(block,3)), true, false)
final_goal(5, in_tower((block,12),(block,4)), true, false)
final_goal(5, in_tower((block,12),(block,5)), true, false)
final_goal(5, in_tower((block,12),(block,6)), true, false)
final_goal(5, in_tower((block,12),(block,7)), true, false)
final_goal(5, in_tower((block,12),(block,8)), true, false)
final_goal(5, in_tower((block,12),(block,9)), true, false)
final_goal(5, in_tower((block,13),(block,1)), true, false)
final_goal(5, in_tower((block,13),(block,10)), true, false)
final_goal(5, in_tower((block,13),(block,11)), true, false)
final_goal(5, in_tower((block,13),(block,12)), true, false)
final_goal(5, in_tower((block,13),(block,13)), true, false)
final_goal(5, in_tower((block,13),(block,14)), true, false)
final_goal(5, in_tower((block,13),(block,15)), true, false)
final_goal(5, in_tower((block,13),(block,16)), true, false)
final_goal(5, in_tower((block,13),(block,17)), true, false)
final_goal(5, in_tower((block,13),(block,18)), true, false)
final_goal(5, in_tower((block,13),(block,2)), true, false)
final_goal(5, in_tower((block,13),(block,3)), true, false)
final_goal(5, in_tower((block,13),(block,4)), true, false)
final_goal(5, in_tower((block,13),(block,5)), true, false)
final_goal(5, in_tower((block,13),(block,6)), true, false)
final_goal(5, in_tower((block,13),(block,7)), true, false)
final_goal(5, in_tower((block,13),(block,8)), true, false)
final_goal(5, in_tower((block,13),(block,9)), true, false)
final_goal(5, in_tower((block,14),(block,1)), true, false)
final_goal(5, in_tower((block,14),(block,10)), true, false)
final_goal(5, in_tower((block,14),(block,11)), true, false)
final_goal(5, in_tower((block,14),(block,12)), true, false)
final_goal(5, in_tower((block,14),(block,13)), true, false)
final_goal(5, in_tower((block,14),(block,14)), true, false)
final_goal(5, in_tower((block,14),(block,15)), true, false)
final_goal(5, in_tower((block,14),(block,16)), true, false)
final_goal(5, in_tower((block,14),(block,17)), true, false)
final_goal(5, in_tower((block,14),(block,18)), true, false)
final_goal(5, in_tower((block,14),(block,2)), true, false)
final_goal(5, in_tower((block,14),(block,3)), true, false)
final_goal(5, in_tower((block,14),(block,4)), true, false)
final_goal(5, in_tower((block,14),(block,5)), true, false)
final_goal(5, in_tower((block,14),(block,6)), true, false)
final_goal(5, in_tower((block,14),(block,7)), true, false)
final_goal(5, in_tower((block,14),(block,8)), true, false)
final_goal(5, in_tower((block,14),(block,9)), true, false)
final_goal(5, in_tower((block,15),(block,1)), true, false)
final_goal(5, in_tower((block,15),(block,10)), true, false)
final_goal(5, in_tower((block,15),(block,11)), true, false)
final_goal(5, in_tower((block,15),(block,12)), true, false)
final_goal(5, in_tower((block,15),(block,13)), false, false)
final_goal(5, in_tower((block,15),(block,14)), false, false)
final_goal(5, in_tower((block,15),(block,15)), false, false)
final_goal(5, in_tower((block,15),(block,16)), true, false)
final_goal(5, in_tower((block,15),(block,17)), true, false)
final_goal(5, in_tower((block,15),(block,18)), true, false)
final_goal(5, in_tower((block,15),(block,2)), true, false)
final_goal(5, in_tower((block,15),(block,3)), true, false)
final_goal(5, in_tower((block,15),(block,4)), true, false)
final_goal(5, in_tower((block,15),(block,5)), true, false)
final_goal(5, in_tower((block,15),(block,6)), true, false)
final_goal(5, in_tower((block,15),(block,7)), true, false)
final_goal(5, in_tower((block,15),(block,8)), true, false)
final_goal(5, in_tower((block,15),(block,9)), true, false)
final_goal(5, in_tower((block,16),(block,1)), true, false)
final_goal(5, in_tower((block,16),(block,10)), true, false)
final_goal(5, in_tower((block,16),(block,11)), true, false)
final_goal(5, in_tower((block,16),(block,12)), true, false)
final_goal(5, in_tower((block,16),(block,13)), true, false)
final_goal(5, in_tower((block,16),(block,14)), true, false)
final_goal(5, in_tower((block,16),(block,15)), true, false)
final_goal(5, in_tower((block,16),(block,16)), true, false)
final_goal(5, in_tower((block,16),(block,17)), true, false)
final_goal(5, in_tower((block,16),(block,18)), true, false)
final_goal(5, in_tower((block,16),(block,2)), true, false)
final_goal(5, in_tower((block,16),(block,3)), true, false)
final_goal(5, in_tower((block,16),(block,4)), true, false)
final_goal(5, in_tower((block,16),(block,5)), true, false)
final_goal(5, in_tower((block,16),(block,6)), true, false)
final_goal(5, in_tower((block,16),(block,7)), true, false)
final_goal(5, in_tower((block,16),(block,8)), true, false)
final_goal(5, in_tower((block,16),(block,9)), true, false)
final_goal(5, in_tower((block,17),(block,1)), true, false)
final_goal(5, in_tower((block,17),(block,10)), true, false)
final_goal(5, in_tower((block,17),(block,11)), true, false)
final_goal(5, in_tower((block,17),(block,12)), true, false)
final_goal(5, in_tower((block,17),(block,13)), true, false)
final_goal(5, in_tower((block,17),(block,14)), true, false)
final_goal(5, in_tower((block,17),(block,15)), true, false)
final_goal(5, in_tower((block,17),(block,16)), true, false)
final_goal(5, in_tower((block,17),(block,17)), true, false)
final_goal(5, in_tower((block,17),(block,18)), true, false)
final_goal(5, in_tower((block,17),(block,2)), true, false)
final_goal(5, in_tower((block,17),(block,3)), true, false)
final_goal(5, in_tower((block,17),(block,4)), true, false)
final_goal(5, in_tower((block,17),(block,5)), true, false)
final_goal(5, in_tower((block,17),(block,6)), true, false)
final_goal(5, in_tower((block,17),(block,7)), true, false)
final_goal(5, in_tower((block,17),(block,8)), true, false)
final_goal(5, in_tower((block,17),(block,9)), true, false)
final_goal(5, in_tower((block,18),(block,1)), true, false)
final_goal(5, in_tower((block,18),(block,10)), true, false)
final_goal(5, in_tower((block,18),(block,11)), true, false)
final_goal(5, in_tower((block,18),(block,12)), true, false)
final_goal(5, in_tower((block,18),(block,13)), true, false)
final_goal(5, in_tower((block,18),(block,14)), true, false)
final_goal(5, in_tower((block,18),(block,15)), true, false)
final_goal(5, in_tower((block,18),(block,16)), false, false)
final_goal(5, in_tower((block,18),(block,17)), false, false)
final_goal(5, in_tower((block,18),(block,18)), false, false)
final_goal(5, in_tower((block,18),(block,2)), true, false)
final_goal(5, in_tower((block,18),(block,3)), true, false)
final_goal(5, in_tower((block,18),(block,4)), true, false)
final_goal(5, in_tower((block,18),(block,5)), true, false)
final_goal(5, in_tower((block,18),(block,6)), true, false)
final_goal(5, in_tower((block,18),(block,7)), true, false)
final_goal(5, in_tower((block,18),(block,8)), true, false)
final_goal(5, in_tower((block,18),(block,9)), true, false)
final_goal(5, in_tower((block,2),(block,1)), true, false)
final_goal(5, in_tower((block,2),(block,10)), true, false)
final_goal(5, in_tower((block,2),(block,11)), true, false)
final_goal(5, in_tower((block,2),(block,12)), true, false)
final_goal(5, in_tower((block,2),(block,13)), true, false)
final_goal(5, in_tower((block,2),(block,14)), true, false)
final_goal(5, in_tower((block,2),(block,15)), true, false)
final_goal(5, in_tower((block,2),(block,16)), true, false)
final_goal(5, in_tower((block,2),(block,17)), true, false)
final_goal(5, in_tower((block,2),(block,18)), true, false)
final_goal(5, in_tower((block,2),(block,2)), true, false)
final_goal(5, in_tower((block,2),(block,3)), true, false)
final_goal(5, in_tower((block,2),(block,4)), true, false)
final_goal(5, in_tower((block,2),(block,5)), true, false)
final_goal(5, in_tower((block,2),(block,6)), true, false)
final_goal(5, in_tower((block,2),(block,7)), true, false)
final_goal(5, in_tower((block,2),(block,8)), true, false)
final_goal(5, in_tower((block,2),(block,9)), true, false)
final_goal(5, in_tower((block,3),(block,1)), false, false)
final_goal(5, in_tower((block,3),(block,10)), true, false)
final_goal(5, in_tower((block,3),(block,11)), true, false)
final_goal(5, in_tower((block,3),(block,12)), true, false)
final_goal(5, in_tower((block,3),(block,13)), true, false)
final_goal(5, in_tower((block,3),(block,14)), true, false)
final_goal(5, in_tower((block,3),(block,15)), true, false)
final_goal(5, in_tower((block,3),(block,16)), true, false)
final_goal(5, in_tower((block,3),(block,17)), true, false)
final_goal(5, in_tower((block,3),(block,18)), true, false)
final_goal(5, in_tower((block,3),(block,2)), false, false)
final_goal(5, in_tower((block,3),(block,3)), false, false)
final_goal(5, in_tower((block,3),(block,4)), true, false)
final_goal(5, in_tower((block,3),(block,5)), true, false)
final_goal(5, in_tower((block,3),(block,6)), true, false)
final_goal(5, in_tower((block,3),(block,7)), true, false)
final_goal(5, in_tower((block,3),(block,8)), true, false)
final_goal(5, in_tower((block,3),(block,9)), true, false)
final_goal(5, in_tower((block,4),(block,1)), true, false)
final_goal(5, in_tower((block,4),(block,10)), true, false)
final_goal(5, in_tower((block,4),(block,11)), true, false)
final_goal(5, in_tower((block,4),(block,12)), true, false)
final_goal(5, in_tower((block,4),(block,13)), true, false)
final_goal(5, in_tower((block,4),(block,14)), true, false)
final_goal(5, in_tower((block,4),(block,15)), true, false)
final_goal(5, in_tower((block,4),(block,16)), true, false)
final_goal(5, in_tower((block,4),(block,17)), true, false)
final_goal(5, in_tower((block,4),(block,18)), true, false)
final_goal(5, in_tower((block,4),(block,2)), true, false)
final_goal(5, in_tower((block,4),(block,3)), true, false)
final_goal(5, in_tower((block,4),(block,4)), true, false)
final_goal(5, in_tower((block,4),(block,5)), true, false)
final_goal(5, in_tower((block,4),(block,6)), true, false)
final_goal(5, in_tower((block,4),(block,7)), true, false)
final_goal(5, in_tower((block,4),(block,8)), true, false)
final_goal(5, in_tower((block,4),(block,9)), true, false)
final_goal(5, in_tower((block,5),(block,1)), true, false)
final_goal(5, in_tower((block,5),(block,10)), true, false)
final_goal(5, in_tower((block,5),(block,11)), true, false)
final_goal(5, in_tower((block,5),(block,12)), true, false)
final_goal(5, in_tower((block,5),(block,13)), true, false)
final_goal(5, in_tower((block,5),(block,14)), true, false)
final_goal(5, in_tower((block,5),(block,15)), true, false)
final_goal(5, in_tower((block,5),(block,16)), true, false)
final_goal(5, in_tower((block,5),(block,17)), true, false)
final_goal(5, in_tower((block,5),(block,18)), true, false)
final_goal(5, in_tower((block,5),(block,2)), true, false)
final_goal(5, in_tower((block,5),(block,3)), true, false)
final_goal(5, in_tower((block,5),(block,4)), true, false)
final_goal(5, in_tower((block,5),(block,5)), true, false)
final_goal(5, in_tower((block,5),(block,6)), true, false)
final_goal(5, in_tower((block,5),(block,7)), true, false)
final_goal(5, in_tower((block,5),(block,8)), true, false)
final_goal(5, in_tower((block,5),(block,9)), true, false)
final_goal(5, in_tower((block,6),(block,1)), true, false)
final_goal(5, in_tower((block,6),(block,10)), true, false)
final_goal(5, in_tower((block,6),(block,11)), true, false)
final_goal(5, in_tower((block,6),(block,12)), true, false)
final_goal(5, in_tower((block,6),(block,13)), true, false)
final_goal(5, in_tower((block,6),(block,14)), true, false)
final_goal(5, in_tower((block,6),(block,15)), true, false)
final_goal(5, in_tower((block,6),(block,16)), true, false)
final_goal(5, in_tower((block,6),(block,17)), true, false)
final_goal(5, in_tower((block,6),(block,18)), true, false)
final_goal(5, in_tower((block,6),(block,2)), true, false)
final_goal(5, in_tower((block,6),(block,3)), true, false)
final_goal(5, in_tower((block,6),(block,4)), false, false)
final_goal(5, in_tower((block,6),(block,5)), false, false)
final_goal(5, in_tower((block,6),(block,6)), false, false)
final_goal(5, in_tower((block,6),(block,7)), true, false)
final_goal(5, in_tower((block,6),(block,8)), true, false)
final_goal(5, in_tower((block,6),(block,9)), true, false)
final_goal(5, in_tower((block,7),(block,1)), true, false)
final_goal(5, in_tower((block,7),(block,10)), true, false)
final_goal(5, in_tower((block,7),(block,11)), true, false)
final_goal(5, in_tower((block,7),(block,12)), true, false)
final_goal(5, in_tower((block,7),(block,13)), true, false)
final_goal(5, in_tower((block,7),(block,14)), true, false)
final_goal(5, in_tower((block,7),(block,15)), true, false)
final_goal(5, in_tower((block,7),(block,16)), true, false)
final_goal(5, in_tower((block,7),(block,17)), true, false)
final_goal(5, in_tower((block,7),(block,18)), true, false)
final_goal(5, in_tower((block,7),(block,2)), true, false)
final_goal(5, in_tower((block,7),(block,3)), true, false)
final_goal(5, in_tower((block,7),(block,4)), true, false)
final_goal(5, in_tower((block,7),(block,5)), true, false)
final_goal(5, in_tower((block,7),(block,6)), true, false)
final_goal(5, in_tower((block,7),(block,7)), true, false)
final_goal(5, in_tower((block,7),(block,8)), true, false)
final_goal(5, in_tower((block,7),(block,9)), true, false)
final_goal(5, in_tower((block,8),(block,1)), true, false)
final_goal(5, in_tower((block,8),(block,10)), true, false)
final_goal(5, in_tower((block,8),(block,11)), true, false)
final_goal(5, in_tower((block,8),(block,12)), true, false)
final_goal(5, in_tower((block,8),(block,13)), true, false)
final_goal(5, in_tower((block,8),(block,14)), true, false)
final_goal(5, in_tower((block,8),(block,15)), true, false)
final_goal(5, in_tower((block,8),(block,16)), true, false)
final_goal(5, in_tower((block,8),(block,17)), true, false)
final_goal(5, in_tower((block,8),(block,18)), true, false)
final_goal(5, in_tower((block,8),(block,2)), true, false)
final_goal(5, in_tower((block,8),(block,3)), true, false)
final_goal(5, in_tower((block,8),(block,4)), true, false)
final_goal(5, in_tower((block,8),(block,5)), true, false)
final_goal(5, in_tower((block,8),(block,6)), true, false)
final_goal(5, in_tower((block,8),(block,7)), true, false)
final_goal(5, in_tower((block,8),(block,8)), true, false)
final_goal(5, in_tower((block,8),(block,9)), true, false)
final_goal(5, in_tower((block,9),(block,1)), true, false)
final_goal(5, in_tower((block,9),(block,10)), true, false)
final_goal(5, in_tower((block,9),(block,11)), true, false)
final_goal(5, in_tower((block,9),(block,12)), true, false)
final_goal(5, in_tower((block,9),(block,13)), true, false)
final_goal(5, in_tower((block,9),(block,14)), true, false)
final_goal(5, in_tower((block,9),(block,15)), true, false)
final_goal(5, in_tower((block,9),(block,16)), true, false)
final_goal(5, in_tower((block,9),(block,17)), true, false)
final_goal(5, in_tower((block,9),(block,18)), true, false)
final_goal(5, in_tower((block,9),(block,2)), true, false)
final_goal(5, in_tower((block,9),(block,3)), true, false)
final_goal(5, in_tower((block,9),(block,4)), true, false)
final_goal(5, in_tower((block,9),(block,5)), true, false)
final_goal(5, in_tower((block,9),(block,6)), true, false)
final_goal(5, in_tower((block,9),(block,7)), false, false)
final_goal(5, in_tower((block,9),(block,8)), false, false)
final_goal(5, in_tower((block,9),(block,9)), false, false)
final_goal(5, on((block,1)), (block,10), false)
final_goal(5, on((block,1)), (block,11), false)
final_goal(5, on((block,1)), (block,12), false)
final_goal(5, on((block,1)), (block,13), false)
final_goal(5, on((block,1)), (block,14), false)
final_goal(5, on((block,1)), (block,15), false)
final_goal(5, on((block,1)), (block,16), false)
final_goal(5, on((block,1)), (block,17), false)
final_goal(5, on((block,1)), (block,18), false)
final_goal(5, on((block,1)), (block,3), false)
final_goal(5, on((block,1)), (block,4), false)
final_goal(5, on((block,1)), (block,5), false)
final_goal(5, on((block,1)), (block,6), false)
final_goal(5, on((block,1)), (block,7), false)
final_goal(5, on((block,1)), (block,8), false)
final_goal(5, on((block,1)), (block,9), false)
final_goal(5, on((block,1)), nothing, false)
final_goal(5, on((block,1)), puzzle_room_1_table, false)
final_goal(5, on((block,1)), puzzle_room_2_table, false)
final_goal(5, on((block,10)), (block,1), false)
final_goal(5, on((block,10)), (block,12), false)
final_goal(5, on((block,10)), (block,13), false)
final_goal(5, on((block,10)), (block,14), false)
final_goal(5, on((block,10)), (block,15), false)
final_goal(5, on((block,10)), (block,16), false)
final_goal(5, on((block,10)), (block,17), false)
final_goal(5, on((block,10)), (block,18), false)
final_goal(5, on((block,10)), (block,2), false)
final_goal(5, on((block,10)), (block,3), false)
final_goal(5, on((block,10)), (block,4), false)
final_goal(5, on((block,10)), (block,5), false)
final_goal(5, on((block,10)), (block,6), false)
final_goal(5, on((block,10)), (block,7), false)
final_goal(5, on((block,10)), (block,8), false)
final_goal(5, on((block,10)), (block,9), false)
final_goal(5, on((block,10)), nothing, false)
final_goal(5, on((block,10)), puzzle_room_1_table, false)
final_goal(5, on((block,10)), puzzle_room_2_table, false)
final_goal(5, on((block,11)), (block,1), false)
final_goal(5, on((block,11)), (block,10), false)
final_goal(5, on((block,11)), (block,13), false)
final_goal(5, on((block,11)), (block,14), false)
final_goal(5, on((block,11)), (block,15), false)
final_goal(5, on((block,11)), (block,16), false)
final_goal(5, on((block,11)), (block,17), false)
final_goal(5, on((block,11)), (block,18), false)
final_goal(5, on((block,11)), (block,2), false)
final_goal(5, on((block,11)), (block,3), false)
final_goal(5, on((block,11)), (block,4), false)
final_goal(5, on((block,11)), (block,5), false)
final_goal(5, on((block,11)), (block,6), false)
final_goal(5, on((block,11)), (block,7), false)
final_goal(5, on((block,11)), (block,8), false)
final_goal(5, on((block,11)), (block,9), false)
final_goal(5, on((block,11)), nothing, false)
final_goal(5, on((block,11)), puzzle_room_1_table, false)
final_goal(5, on((block,11)), puzzle_room_2_table, false)
final_goal(5, on((block,12)), (block,1), false)
final_goal(5, on((block,12)), (block,10), false)
final_goal(5, on((block,12)), (block,11), false)
final_goal(5, on((block,12)), (block,13), false)
final_goal(5, on((block,12)), (block,14), false)
final_goal(5, on((block,12)), (block,15), false)
final_goal(5, on((block,12)), (block,16), false)
final_goal(5, on((block,12)), (block,17), false)
final_goal(5, on((block,12)), (block,18), false)
final_goal(5, on((block,12)), (block,2), false)
final_goal(5, on((block,12)), (block,3), false)
final_goal(5, on((block,12)), (block,4), false)
final_goal(5, on((block,12)), (block,5), false)
final_goal(5, on((block,12)), (block,6), false)
final_goal(5, on((block,12)), (block,7), false)
final_goal(5, on((block,12)), (block,8), false)
final_goal(5, on((block,12)), (block,9), false)
final_goal(5, on((block,12)), nothing, false)
final_goal(5, on((block,12)), puzzle_room_1_table, false)
final_goal(5, on((block,13)), (block,1), false)
final_goal(5, on((block,13)), (block,10), false)
final_goal(5, on((block,13)), (block,11), false)
final_goal(5, on((block,13)), (block,12), false)
final_goal(5, on((block,13)), (block,15), false)
final_goal(5, on((block,13)), (block,16), false)
final_goal(5, on((block,13)), (block,17), false)
final_goal(5, on((block,13)), (block,18), false)
final_goal(5, on((block,13)), (block,2), false)
final_goal(5, on((block,13)), (block,3), false)
final_goal(5, on((block,13)), (block,4), false)
final_goal(5, on((block,13)), (block,5), false)
final_goal(5, on((block,13)), (block,6), false)
final_goal(5, on((block,13)), (block,7), false)
final_goal(5, on((block,13)), (block,8), false)
final_goal(5, on((block,13)), (block,9), false)
final_goal(5, on((block,13)), nothing, false)
final_goal(5, on((block,13)), puzzle_room_1_table, false)
final_goal(5, on((block,13)), puzzle_room_2_table, false)
final_goal(5, on((block,14)), (block,1), false)
final_goal(5, on((block,14)), (block,10), false)
final_goal(5, on((block,14)), (block,11), false)
final_goal(5, on((block,14)), (block,12), false)
final_goal(5, on((block,14)), (block,13), false)
final_goal(5, on((block,14)), (block,16), false)
final_goal(5, on((block,14)), (block,17), false)
final_goal(5, on((block,14)), (block,18), false)
final_goal(5, on((block,14)), (block,2), false)
final_goal(5, on((block,14)), (block,3), false)
final_goal(5, on((block,14)), (block,4), false)
final_goal(5, on((block,14)), (block,5), false)
final_goal(5, on((block,14)), (block,6), false)
final_goal(5, on((block,14)), (block,7), false)
final_goal(5, on((block,14)), (block,8), false)
final_goal(5, on((block,14)), (block,9), false)
final_goal(5, on((block,14)), nothing, false)
final_goal(5, on((block,14)), puzzle_room_1_table, false)
final_goal(5, on((block,14)), puzzle_room_2_table, false)
final_goal(5, on((block,15)), (block,1), false)
final_goal(5, on((block,15)), (block,10), false)
final_goal(5, on((block,15)), (block,11), false)
final_goal(5, on((block,15)), (block,12), false)
final_goal(5, on((block,15)), (block,13), false)
final_goal(5, on((block,15)), (block,14), false)
final_goal(5, on((block,15)), (block,16), false)
final_goal(5, on((block,15)), (block,17), false)
final_goal(5, on((block,15)), (block,18), false)
final_goal(5, on((block,15)), (block,2), false)
final_goal(5, on((block,15)), (block,3), false)
final_goal(5, on((block,15)), (block,4), false)
final_goal(5, on((block,15)), (block,5), false)
final_goal(5, on((block,15)), (block,6), false)
final_goal(5, on((block,15)), (block,7), false)
final_goal(5, on((block,15)), (block,8), false)
final_goal(5, on((block,15)), (block,9), false)
final_goal(5, on((block,15)), nothing, false)
final_goal(5, on((block,15)), puzzle_room_1_table, false)
final_goal(5, on((block,16)), (block,1), false)
final_goal(5, on((block,16)), (block,10), false)
final_goal(5, on((block,16)), (block,11), false)
final_goal(5, on((block,16)), (block,12), false)
final_goal(5, on((block,16)), (block,13), false)
final_goal(5, on((block,16)), (block,14), false)
final_goal(5, on((block,16)), (block,15), false)
final_goal(5, on((block,16)), (block,18), false)
final_goal(5, on((block,16)), (block,2), false)
final_goal(5, on((block,16)), (block,3), false)
final_goal(5, on((block,16)), (block,4), false)
final_goal(5, on((block,16)), (block,5), false)
final_goal(5, on((block,16)), (block,6), false)
final_goal(5, on((block,16)), (block,7), false)
final_goal(5, on((block,16)), (block,8), false)
final_goal(5, on((block,16)), (block,9), false)
final_goal(5, on((block,16)), nothing, false)
final_goal(5, on((block,16)), puzzle_room_1_table, false)
final_goal(5, on((block,16)), puzzle_room_2_table, false)
final_goal(5, on((block,17)), (block,1), false)
final_goal(5, on((block,17)), (block,10), false)
final_goal(5, on((block,17)), (block,11), false)
final_goal(5, on((block,17)), (block,12), false)
final_goal(5, on((block,17)), (block,13), false)
final_goal(5, on((block,17)), (block,14), false)
final_goal(5, on((block,17)), (block,15), false)
final_goal(5, on((block,17)), (block,16), false)
final_goal(5, on((block,17)), (block,2), false)
final_goal(5, on((block,17)), (block,3), false)
final_goal(5, on((block,17)), (block,4), false)
final_goal(5, on((block,17)), (block,5), false)
final_goal(5, on((block,17)), (block,6), false)
final_goal(5, on((block,17)), (block,7), false)
final_goal(5, on((block,17)), (block,8), false)
final_goal(5, on((block,17)), (block,9), false)
final_goal(5, on((block,17)), nothing, false)
final_goal(5, on((block,17)), puzzle_room_1_table, false)
final_goal(5, on((block,17)), puzzle_room_2_table, false)
final_goal(5, on((block,18)), (block,1), false)
final_goal(5, on((block,18)), (block,10), false)
final_goal(5, on((block,18)), (block,11), false)
final_goal(5, on((block,18)), (block,12), false)
final_goal(5, on((block,18)), (block,13), false)
final_goal(5, on((block,18)), (block,14), false)
final_goal(5, on((block,18)), (block,15), false)
final_goal(5, on((block,18)), (block,16), false)
final_goal(5, on((block,18)), (block,17), false)
final_goal(5, on((block,18)), (block,2), false)
final_goal(5, on((block,18)), (block,3), false)
final_goal(5, on((block,18)), (block,4), false)
final_goal(5, on((block,18)), (block,5), false)
final_goal(5, on((block,18)), (block,6), false)
final_goal(5, on((block,18)), (block,7), false)
final_goal(5, on((block,18)), (block,8), false)
final_goal(5, on((block,18)), (block,9), false)
final_goal(5, on((block,18)), nothing, false)
final_goal(5, on((block,18)), puzzle_room_1_table, false)
final_goal(5, on((block,2)), (block,1), false)
final_goal(5, on((block,2)), (block,10), false)
final_goal(5, on((block,2)), (block,11), false)
final_goal(5, on((block,2)), (block,12), false)
final_goal(5, on((block,2)), (block,13), false)
final_goal(5, on((block,2)), (block,14), false)
final_goal(5, on((block,2)), (block,15), false)
final_goal(5, on((block,2)), (block,16), false)
final_goal(5, on((block,2)), (block,17), false)
final_goal(5, on((block,2)), (block,18), false)
final_goal(5, on((block,2)), (block,4), false)
final_goal(5, on((block,2)), (block,5), false)
final_goal(5, on((block,2)), (block,6), false)
final_goal(5, on((block,2)), (block,7), false)
final_goal(5, on((block,2)), (block,8), false)
final_goal(5, on((block,2)), (block,9), false)
final_goal(5, on((block,2)), nothing, false)
final_goal(5, on((block,2)), puzzle_room_1_table, false)
final_goal(5, on((block,2)), puzzle_room_2_table, false)
final_goal(5, on((block,3)), (block,1), false)
final_goal(5, on((block,3)), (block,10), false)
final_goal(5, on((block,3)), (block,11), false)
final_goal(5, on((block,3)), (block,12), false)
final_goal(5, on((block,3)), (block,13), false)
final_goal(5, on((block,3)), (block,14), false)
final_goal(5, on((block,3)), (block,15), false)
final_goal(5, on((block,3)), (block,16), false)
final_goal(5, on((block,3)), (block,17), false)
final_goal(5, on((block,3)), (block,18), false)
final_goal(5, on((block,3)), (block,2), false)
final_goal(5, on((block,3)), (block,4), false)
final_goal(5, on((block,3)), (block,5), false)
final_goal(5, on((block,3)), (block,6), false)
final_goal(5, on((block,3)), (block,7), false)
final_goal(5, on((block,3)), (block,8), false)
final_goal(5, on((block,3)), (block,9), false)
final_goal(5, on((block,3)), nothing, false)
final_goal(5, on((block,3)), puzzle_room_2_table, false)
final_goal(5, on((block,4)), (block,1), false)
final_goal(5, on((block,4)), (block,10), false)
final_goal(5, on((block,4)), (block,11), false)
final_goal(5, on((block,4)), (block,12), false)
final_goal(5, on((block,4)), (block,13), false)
final_goal(5, on((block,4)), (block,14), false)
final_goal(5, on((block,4)), (block,15), false)
final_goal(5, on((block,4)), (block,16), false)
final_goal(5, on((block,4)), (block,17), false)
final_goal(5, on((block,4)), (block,18), false)
final_goal(5, on((block,4)), (block,2), false)
final_goal(5, on((block,4)), (block,3), false)
final_goal(5, on((block,4)), (block,6), false)
final_goal(5, on((block,4)), (block,7), false)
final_goal(5, on((block,4)), (block,8), false)
final_goal(5, on((block,4)), (block,9), false)
final_goal(5, on((block,4)), nothing, false)
final_goal(5, on((block,4)), puzzle_room_1_table, false)
final_goal(5, on((block,4)), puzzle_room_2_table, false)
final_goal(5, on((block,5)), (block,1), false)
final_goal(5, on((block,5)), (block,10), false)
final_goal(5, on((block,5)), (block,11), false)
final_goal(5, on((block,5)), (block,12), false)
final_goal(5, on((block,5)), (block,13), false)
final_goal(5, on((block,5)), (block,14), false)
final_goal(5, on((block,5)), (block,15), false)
final_goal(5, on((block,5)), (block,16), false)
final_goal(5, on((block,5)), (block,17), false)
final_goal(5, on((block,5)), (block,18), false)
final_goal(5, on((block,5)), (block,2), false)
final_goal(5, on((block,5)), (block,3), false)
final_goal(5, on((block,5)), (block,4), false)
final_goal(5, on((block,5)), (block,7), false)
final_goal(5, on((block,5)), (block,8), false)
final_goal(5, on((block,5)), (block,9), false)
final_goal(5, on((block,5)), nothing, false)
final_goal(5, on((block,5)), puzzle_room_1_table, false)
final_goal(5, on((block,5)), puzzle_room_2_table, false)
final_goal(5, on((block,6)), (block,1), false)
final_goal(5, on((block,6)), (block,10), false)
final_goal(5, on((block,6)), (block,11), false)
final_goal(5, on((block,6)), (block,12), false)
final_goal(5, on((block,6)), (block,13), false)
final_goal(5, on((block,6)), (block,14), false)
final_goal(5, on((block,6)), (block,15), false)
final_goal(5, on((block,6)), (block,16), false)
final_goal(5, on((block,6)), (block,17), false)
final_goal(5, on((block,6)), (block,18), false)
final_goal(5, on((block,6)), (block,2), false)
final_goal(5, on((block,6)), (block,3), false)
final_goal(5, on((block,6)), (block,4), false)
final_goal(5, on((block,6)), (block,5), false)
final_goal(5, on((block,6)), (block,7), false)
final_goal(5, on((block,6)), (block,8), false)
final_goal(5, on((block,6)), (block,9), false)
final_goal(5, on((block,6)), nothing, false)
final_goal(5, on((block,6)), puzzle_room_2_table, false)
final_goal(5, on((block,7)), (block,1), false)
final_goal(5, on((block,7)), (block,10), false)
final_goal(5, on((block,7)), (block,11), false)
final_goal(5, on((block,7)), (block,12), false)
final_goal(5, on((block,7)), (block,13), false)
final_goal(5, on((block,7)), (block,14), false)
final_goal(5, on((block,7)), (block,15), false)
final_goal(5, on((block,7)), (block,16), false)
final_goal(5, on((block,7)), (block,17), false)
final_goal(5, on((block,7)), (block,18), false)
final_goal(5, on((block,7)), (block,2), false)
final_goal(5, on((block,7)), (block,3), false)
final_goal(5, on((block,7)), (block,4), false)
final_goal(5, on((block,7)), (block,5), false)
final_goal(5, on((block,7)), (block,6), false)
final_goal(5, on((block,7)), (block,9), false)
final_goal(5, on((block,7)), nothing, false)
final_goal(5, on((block,7)), puzzle_room_1_table, false)
final_goal(5, on((block,7)), puzzle_room_2_table, false)
final_goal(5, on((block,8)), (block,1), false)
final_goal(5, on((block,8)), (block,10), false)
final_goal(5, on((block,8)), (block,11), false)
final_goal(5, on((block,8)), (block,12), false)
final_goal(5, on((block,8)), (block,13), false)
final_goal(5, on((block,8)), (block,14), false)
final_goal(5, on((block,8)), (block,15), false)
final_goal(5, on((block,8)), (block,16), false)
final_goal(5, on((block,8)), (block,17), false)
final_goal(5, on((block,8)), (block,18), false)
final_goal(5, on((block,8)), (block,2), false)
final_goal(5, on((block,8)), (block,3), false)
final_goal(5, on((block,8)), (block,4), false)
final_goal(5, on((block,8)), (block,5), false)
final_goal(5, on((block,8)), (block,6), false)
final_goal(5, on((block,8)), (block,7), false)
final_goal(5, on((block,8)), nothing, false)
final_goal(5, on((block,8)), puzzle_room_1_table, false)
final_goal(5, on((block,8)), puzzle_room_2_table, false)
final_goal(5, on((block,9)), (block,1), false)
final_goal(5, on((block,9)), (block,10), false)
final_goal(5, on((block,9)), (block,11), false)
final_goal(5, on((block,9)), (block,12), false)
final_goal(5, on((block,9)), (block,13), false)
final_goal(5, on((block,9)), (block,14), false)
final_goal(5, on((block,9)), (block,15), false)
final_goal(5, on((block,9)), (block,16), false)
final_goal(5, on((block,9)), (block,17), false)
final_goal(5, on((block,9)), (block,18), false)
final_goal(5, on((block,9)), (block,2), false)
final_goal(5, on((block,9)), (block,3), false)
final_goal(5, on((block,9)), (block,4), false)
final_goal(5, on((block,9)), (block,5), false)
final_goal(5, on((block,9)), (block,6), false)
final_goal(5, on((block,9)), (block,7), false)
final_goal(5, on((block,9)), (block,8), false)
final_goal(5, on((block,9)), nothing, false)
final_goal(5, on((block,9)), puzzle_room_2_table, false)
final_goal(5, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(4, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(4, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(4, in_tower((block,1),(block,1)), false, true)
final_goal(4, in_tower((block,1),(block,10)), false, true)
final_goal(4, in_tower((block,1),(block,11)), false, true)
final_goal(4, in_tower((block,1),(block,12)), false, true)
final_goal(4, in_tower((block,1),(block,13)), false, true)
final_goal(4, in_tower((block,1),(block,14)), false, true)
final_goal(4, in_tower((block,1),(block,15)), false, true)
final_goal(4, in_tower((block,1),(block,16)), false, true)
final_goal(4, in_tower((block,1),(block,17)), false, true)
final_goal(4, in_tower((block,1),(block,18)), false, true)
final_goal(4, in_tower((block,1),(block,2)), false, true)
final_goal(4, in_tower((block,1),(block,3)), false, true)
final_goal(4, in_tower((block,1),(block,4)), false, true)
final_goal(4, in_tower((block,1),(block,5)), false, true)
final_goal(4, in_tower((block,1),(block,6)), false, true)
final_goal(4, in_tower((block,1),(block,7)), false, true)
final_goal(4, in_tower((block,1),(block,8)), false, true)
final_goal(4, in_tower((block,1),(block,9)), false, true)
final_goal(4, in_tower((block,10),(block,1)), false, true)
final_goal(4, in_tower((block,10),(block,10)), false, true)
final_goal(4, in_tower((block,10),(block,11)), false, true)
final_goal(4, in_tower((block,10),(block,12)), false, true)
final_goal(4, in_tower((block,10),(block,13)), false, true)
final_goal(4, in_tower((block,10),(block,14)), false, true)
final_goal(4, in_tower((block,10),(block,15)), false, true)
final_goal(4, in_tower((block,10),(block,16)), false, true)
final_goal(4, in_tower((block,10),(block,17)), false, true)
final_goal(4, in_tower((block,10),(block,18)), false, true)
final_goal(4, in_tower((block,10),(block,2)), false, true)
final_goal(4, in_tower((block,10),(block,3)), false, true)
final_goal(4, in_tower((block,10),(block,4)), false, true)
final_goal(4, in_tower((block,10),(block,5)), false, true)
final_goal(4, in_tower((block,10),(block,6)), false, true)
final_goal(4, in_tower((block,10),(block,7)), false, true)
final_goal(4, in_tower((block,10),(block,8)), false, true)
final_goal(4, in_tower((block,10),(block,9)), false, true)
final_goal(4, in_tower((block,11),(block,1)), false, true)
final_goal(4, in_tower((block,11),(block,10)), false, true)
final_goal(4, in_tower((block,11),(block,11)), false, true)
final_goal(4, in_tower((block,11),(block,12)), false, true)
final_goal(4, in_tower((block,11),(block,13)), false, true)
final_goal(4, in_tower((block,11),(block,14)), false, true)
final_goal(4, in_tower((block,11),(block,15)), false, true)
final_goal(4, in_tower((block,11),(block,16)), false, true)
final_goal(4, in_tower((block,11),(block,17)), false, true)
final_goal(4, in_tower((block,11),(block,18)), false, true)
final_goal(4, in_tower((block,11),(block,2)), false, true)
final_goal(4, in_tower((block,11),(block,3)), false, true)
final_goal(4, in_tower((block,11),(block,4)), false, true)
final_goal(4, in_tower((block,11),(block,5)), false, true)
final_goal(4, in_tower((block,11),(block,6)), false, true)
final_goal(4, in_tower((block,11),(block,7)), false, true)
final_goal(4, in_tower((block,11),(block,8)), false, true)
final_goal(4, in_tower((block,11),(block,9)), false, true)
final_goal(4, in_tower((block,12),(block,1)), false, true)
final_goal(4, in_tower((block,12),(block,10)), true, true)
final_goal(4, in_tower((block,12),(block,11)), true, true)
final_goal(4, in_tower((block,12),(block,12)), true, true)
final_goal(4, in_tower((block,12),(block,13)), false, true)
final_goal(4, in_tower((block,12),(block,14)), false, true)
final_goal(4, in_tower((block,12),(block,15)), false, true)
final_goal(4, in_tower((block,12),(block,16)), false, true)
final_goal(4, in_tower((block,12),(block,17)), false, true)
final_goal(4, in_tower((block,12),(block,18)), false, true)
final_goal(4, in_tower((block,12),(block,2)), false, true)
final_goal(4, in_tower((block,12),(block,3)), false, true)
final_goal(4, in_tower((block,12),(block,4)), false, true)
final_goal(4, in_tower((block,12),(block,5)), false, true)
final_goal(4, in_tower((block,12),(block,6)), false, true)
final_goal(4, in_tower((block,12),(block,7)), false, true)
final_goal(4, in_tower((block,12),(block,8)), false, true)
final_goal(4, in_tower((block,12),(block,9)), false, true)
final_goal(4, in_tower((block,13),(block,1)), false, true)
final_goal(4, in_tower((block,13),(block,10)), false, true)
final_goal(4, in_tower((block,13),(block,11)), false, true)
final_goal(4, in_tower((block,13),(block,12)), false, true)
final_goal(4, in_tower((block,13),(block,13)), false, true)
final_goal(4, in_tower((block,13),(block,14)), false, true)
final_goal(4, in_tower((block,13),(block,15)), false, true)
final_goal(4, in_tower((block,13),(block,16)), false, true)
final_goal(4, in_tower((block,13),(block,17)), false, true)
final_goal(4, in_tower((block,13),(block,18)), false, true)
final_goal(4, in_tower((block,13),(block,2)), false, true)
final_goal(4, in_tower((block,13),(block,3)), false, true)
final_goal(4, in_tower((block,13),(block,4)), false, true)
final_goal(4, in_tower((block,13),(block,5)), false, true)
final_goal(4, in_tower((block,13),(block,6)), false, true)
final_goal(4, in_tower((block,13),(block,7)), false, true)
final_goal(4, in_tower((block,13),(block,8)), false, true)
final_goal(4, in_tower((block,13),(block,9)), false, true)
final_goal(4, in_tower((block,14),(block,1)), false, true)
final_goal(4, in_tower((block,14),(block,10)), false, true)
final_goal(4, in_tower((block,14),(block,11)), false, true)
final_goal(4, in_tower((block,14),(block,12)), false, true)
final_goal(4, in_tower((block,14),(block,13)), false, true)
final_goal(4, in_tower((block,14),(block,14)), false, true)
final_goal(4, in_tower((block,14),(block,15)), false, true)
final_goal(4, in_tower((block,14),(block,16)), false, true)
final_goal(4, in_tower((block,14),(block,17)), false, true)
final_goal(4, in_tower((block,14),(block,18)), false, true)
final_goal(4, in_tower((block,14),(block,2)), false, true)
final_goal(4, in_tower((block,14),(block,3)), false, true)
final_goal(4, in_tower((block,14),(block,4)), false, true)
final_goal(4, in_tower((block,14),(block,5)), false, true)
final_goal(4, in_tower((block,14),(block,6)), false, true)
final_goal(4, in_tower((block,14),(block,7)), false, true)
final_goal(4, in_tower((block,14),(block,8)), false, true)
final_goal(4, in_tower((block,14),(block,9)), false, true)
final_goal(4, in_tower((block,15),(block,1)), false, true)
final_goal(4, in_tower((block,15),(block,10)), false, true)
final_goal(4, in_tower((block,15),(block,11)), false, true)
final_goal(4, in_tower((block,15),(block,12)), false, true)
final_goal(4, in_tower((block,15),(block,13)), true, true)
final_goal(4, in_tower((block,15),(block,14)), true, true)
final_goal(4, in_tower((block,15),(block,15)), true, true)
final_goal(4, in_tower((block,15),(block,16)), false, true)
final_goal(4, in_tower((block,15),(block,17)), false, true)
final_goal(4, in_tower((block,15),(block,18)), false, true)
final_goal(4, in_tower((block,15),(block,2)), false, true)
final_goal(4, in_tower((block,15),(block,3)), false, true)
final_goal(4, in_tower((block,15),(block,4)), false, true)
final_goal(4, in_tower((block,15),(block,5)), false, true)
final_goal(4, in_tower((block,15),(block,6)), false, true)
final_goal(4, in_tower((block,15),(block,7)), false, true)
final_goal(4, in_tower((block,15),(block,8)), false, true)
final_goal(4, in_tower((block,15),(block,9)), false, true)
final_goal(4, in_tower((block,16),(block,1)), false, true)
final_goal(4, in_tower((block,16),(block,10)), false, true)
final_goal(4, in_tower((block,16),(block,11)), false, true)
final_goal(4, in_tower((block,16),(block,12)), false, true)
final_goal(4, in_tower((block,16),(block,13)), false, true)
final_goal(4, in_tower((block,16),(block,14)), false, true)
final_goal(4, in_tower((block,16),(block,15)), false, true)
final_goal(4, in_tower((block,16),(block,16)), false, true)
final_goal(4, in_tower((block,16),(block,17)), false, true)
final_goal(4, in_tower((block,16),(block,18)), false, true)
final_goal(4, in_tower((block,16),(block,2)), false, true)
final_goal(4, in_tower((block,16),(block,3)), false, true)
final_goal(4, in_tower((block,16),(block,4)), false, true)
final_goal(4, in_tower((block,16),(block,5)), false, true)
final_goal(4, in_tower((block,16),(block,6)), false, true)
final_goal(4, in_tower((block,16),(block,7)), false, true)
final_goal(4, in_tower((block,16),(block,8)), false, true)
final_goal(4, in_tower((block,16),(block,9)), false, true)
final_goal(4, in_tower((block,17),(block,1)), false, true)
final_goal(4, in_tower((block,17),(block,10)), false, true)
final_goal(4, in_tower((block,17),(block,11)), false, true)
final_goal(4, in_tower((block,17),(block,12)), false, true)
final_goal(4, in_tower((block,17),(block,13)), false, true)
final_goal(4, in_tower((block,17),(block,14)), false, true)
final_goal(4, in_tower((block,17),(block,15)), false, true)
final_goal(4, in_tower((block,17),(block,16)), false, true)
final_goal(4, in_tower((block,17),(block,17)), false, true)
final_goal(4, in_tower((block,17),(block,18)), false, true)
final_goal(4, in_tower((block,17),(block,2)), false, true)
final_goal(4, in_tower((block,17),(block,3)), false, true)
final_goal(4, in_tower((block,17),(block,4)), false, true)
final_goal(4, in_tower((block,17),(block,5)), false, true)
final_goal(4, in_tower((block,17),(block,6)), false, true)
final_goal(4, in_tower((block,17),(block,7)), false, true)
final_goal(4, in_tower((block,17),(block,8)), false, true)
final_goal(4, in_tower((block,17),(block,9)), false, true)
final_goal(4, in_tower((block,18),(block,1)), false, true)
final_goal(4, in_tower((block,18),(block,10)), false, true)
final_goal(4, in_tower((block,18),(block,11)), false, true)
final_goal(4, in_tower((block,18),(block,12)), false, true)
final_goal(4, in_tower((block,18),(block,13)), false, true)
final_goal(4, in_tower((block,18),(block,14)), false, true)
final_goal(4, in_tower((block,18),(block,15)), false, true)
final_goal(4, in_tower((block,18),(block,16)), true, true)
final_goal(4, in_tower((block,18),(block,17)), true, true)
final_goal(4, in_tower((block,18),(block,18)), true, true)
final_goal(4, in_tower((block,18),(block,2)), false, true)
final_goal(4, in_tower((block,18),(block,3)), false, true)
final_goal(4, in_tower((block,18),(block,4)), false, true)
final_goal(4, in_tower((block,18),(block,5)), false, true)
final_goal(4, in_tower((block,18),(block,6)), false, true)
final_goal(4, in_tower((block,18),(block,7)), false, true)
final_goal(4, in_tower((block,18),(block,8)), false, true)
final_goal(4, in_tower((block,18),(block,9)), false, true)
final_goal(4, in_tower((block,2),(block,1)), false, true)
final_goal(4, in_tower((block,2),(block,10)), false, true)
final_goal(4, in_tower((block,2),(block,11)), false, true)
final_goal(4, in_tower((block,2),(block,12)), false, true)
final_goal(4, in_tower((block,2),(block,13)), false, true)
final_goal(4, in_tower((block,2),(block,14)), false, true)
final_goal(4, in_tower((block,2),(block,15)), false, true)
final_goal(4, in_tower((block,2),(block,16)), false, true)
final_goal(4, in_tower((block,2),(block,17)), false, true)
final_goal(4, in_tower((block,2),(block,18)), false, true)
final_goal(4, in_tower((block,2),(block,2)), false, true)
final_goal(4, in_tower((block,2),(block,3)), false, true)
final_goal(4, in_tower((block,2),(block,4)), false, true)
final_goal(4, in_tower((block,2),(block,5)), false, true)
final_goal(4, in_tower((block,2),(block,6)), false, true)
final_goal(4, in_tower((block,2),(block,7)), false, true)
final_goal(4, in_tower((block,2),(block,8)), false, true)
final_goal(4, in_tower((block,2),(block,9)), false, true)
final_goal(4, in_tower((block,3),(block,1)), true, true)
final_goal(4, in_tower((block,3),(block,10)), false, true)
final_goal(4, in_tower((block,3),(block,11)), false, true)
final_goal(4, in_tower((block,3),(block,12)), false, true)
final_goal(4, in_tower((block,3),(block,13)), false, true)
final_goal(4, in_tower((block,3),(block,14)), false, true)
final_goal(4, in_tower((block,3),(block,15)), false, true)
final_goal(4, in_tower((block,3),(block,16)), false, true)
final_goal(4, in_tower((block,3),(block,17)), false, true)
final_goal(4, in_tower((block,3),(block,18)), false, true)
final_goal(4, in_tower((block,3),(block,2)), true, true)
final_goal(4, in_tower((block,3),(block,3)), true, true)
final_goal(4, in_tower((block,3),(block,4)), false, true)
final_goal(4, in_tower((block,3),(block,5)), false, true)
final_goal(4, in_tower((block,3),(block,6)), false, true)
final_goal(4, in_tower((block,3),(block,7)), false, true)
final_goal(4, in_tower((block,3),(block,8)), false, true)
final_goal(4, in_tower((block,3),(block,9)), false, true)
final_goal(4, in_tower((block,4),(block,1)), false, true)
final_goal(4, in_tower((block,4),(block,10)), false, true)
final_goal(4, in_tower((block,4),(block,11)), false, true)
final_goal(4, in_tower((block,4),(block,12)), false, true)
final_goal(4, in_tower((block,4),(block,13)), false, true)
final_goal(4, in_tower((block,4),(block,14)), false, true)
final_goal(4, in_tower((block,4),(block,15)), false, true)
final_goal(4, in_tower((block,4),(block,16)), false, true)
final_goal(4, in_tower((block,4),(block,17)), false, true)
final_goal(4, in_tower((block,4),(block,18)), false, true)
final_goal(4, in_tower((block,4),(block,2)), false, true)
final_goal(4, in_tower((block,4),(block,3)), false, true)
final_goal(4, in_tower((block,4),(block,4)), false, true)
final_goal(4, in_tower((block,4),(block,5)), false, true)
final_goal(4, in_tower((block,4),(block,6)), false, true)
final_goal(4, in_tower((block,4),(block,7)), false, true)
final_goal(4, in_tower((block,4),(block,8)), false, true)
final_goal(4, in_tower((block,4),(block,9)), false, true)
final_goal(4, in_tower((block,5),(block,1)), false, true)
final_goal(4, in_tower((block,5),(block,10)), false, true)
final_goal(4, in_tower((block,5),(block,11)), false, true)
final_goal(4, in_tower((block,5),(block,12)), false, true)
final_goal(4, in_tower((block,5),(block,13)), false, true)
final_goal(4, in_tower((block,5),(block,14)), false, true)
final_goal(4, in_tower((block,5),(block,15)), false, true)
final_goal(4, in_tower((block,5),(block,16)), false, true)
final_goal(4, in_tower((block,5),(block,17)), false, true)
final_goal(4, in_tower((block,5),(block,18)), false, true)
final_goal(4, in_tower((block,5),(block,2)), false, true)
final_goal(4, in_tower((block,5),(block,3)), false, true)
final_goal(4, in_tower((block,5),(block,4)), false, true)
final_goal(4, in_tower((block,5),(block,5)), false, true)
final_goal(4, in_tower((block,5),(block,6)), false, true)
final_goal(4, in_tower((block,5),(block,7)), false, true)
final_goal(4, in_tower((block,5),(block,8)), false, true)
final_goal(4, in_tower((block,5),(block,9)), false, true)
final_goal(4, in_tower((block,6),(block,1)), false, true)
final_goal(4, in_tower((block,6),(block,10)), false, true)
final_goal(4, in_tower((block,6),(block,11)), false, true)
final_goal(4, in_tower((block,6),(block,12)), false, true)
final_goal(4, in_tower((block,6),(block,13)), false, true)
final_goal(4, in_tower((block,6),(block,14)), false, true)
final_goal(4, in_tower((block,6),(block,15)), false, true)
final_goal(4, in_tower((block,6),(block,16)), false, true)
final_goal(4, in_tower((block,6),(block,17)), false, true)
final_goal(4, in_tower((block,6),(block,18)), false, true)
final_goal(4, in_tower((block,6),(block,2)), false, true)
final_goal(4, in_tower((block,6),(block,3)), false, true)
final_goal(4, in_tower((block,6),(block,4)), true, true)
final_goal(4, in_tower((block,6),(block,5)), true, true)
final_goal(4, in_tower((block,6),(block,6)), true, true)
final_goal(4, in_tower((block,6),(block,7)), false, true)
final_goal(4, in_tower((block,6),(block,8)), false, true)
final_goal(4, in_tower((block,6),(block,9)), false, true)
final_goal(4, in_tower((block,7),(block,1)), false, true)
final_goal(4, in_tower((block,7),(block,10)), false, true)
final_goal(4, in_tower((block,7),(block,11)), false, true)
final_goal(4, in_tower((block,7),(block,12)), false, true)
final_goal(4, in_tower((block,7),(block,13)), false, true)
final_goal(4, in_tower((block,7),(block,14)), false, true)
final_goal(4, in_tower((block,7),(block,15)), false, true)
final_goal(4, in_tower((block,7),(block,16)), false, true)
final_goal(4, in_tower((block,7),(block,17)), false, true)
final_goal(4, in_tower((block,7),(block,18)), false, true)
final_goal(4, in_tower((block,7),(block,2)), false, true)
final_goal(4, in_tower((block,7),(block,3)), false, true)
final_goal(4, in_tower((block,7),(block,4)), false, true)
final_goal(4, in_tower((block,7),(block,5)), false, true)
final_goal(4, in_tower((block,7),(block,6)), false, true)
final_goal(4, in_tower((block,7),(block,7)), false, true)
final_goal(4, in_tower((block,7),(block,8)), false, true)
final_goal(4, in_tower((block,7),(block,9)), false, true)
final_goal(4, in_tower((block,8),(block,1)), false, true)
final_goal(4, in_tower((block,8),(block,10)), false, true)
final_goal(4, in_tower((block,8),(block,11)), false, true)
final_goal(4, in_tower((block,8),(block,12)), false, true)
final_goal(4, in_tower((block,8),(block,13)), false, true)
final_goal(4, in_tower((block,8),(block,14)), false, true)
final_goal(4, in_tower((block,8),(block,15)), false, true)
final_goal(4, in_tower((block,8),(block,16)), false, true)
final_goal(4, in_tower((block,8),(block,17)), false, true)
final_goal(4, in_tower((block,8),(block,18)), false, true)
final_goal(4, in_tower((block,8),(block,2)), false, true)
final_goal(4, in_tower((block,8),(block,3)), false, true)
final_goal(4, in_tower((block,8),(block,4)), false, true)
final_goal(4, in_tower((block,8),(block,5)), false, true)
final_goal(4, in_tower((block,8),(block,6)), false, true)
final_goal(4, in_tower((block,8),(block,7)), false, true)
final_goal(4, in_tower((block,8),(block,8)), false, true)
final_goal(4, in_tower((block,8),(block,9)), false, true)
final_goal(4, in_tower((block,9),(block,1)), false, true)
final_goal(4, in_tower((block,9),(block,10)), false, true)
final_goal(4, in_tower((block,9),(block,11)), false, true)
final_goal(4, in_tower((block,9),(block,12)), false, true)
final_goal(4, in_tower((block,9),(block,13)), false, true)
final_goal(4, in_tower((block,9),(block,14)), false, true)
final_goal(4, in_tower((block,9),(block,15)), false, true)
final_goal(4, in_tower((block,9),(block,16)), false, true)
final_goal(4, in_tower((block,9),(block,17)), false, true)
final_goal(4, in_tower((block,9),(block,18)), false, true)
final_goal(4, in_tower((block,9),(block,2)), false, true)
final_goal(4, in_tower((block,9),(block,3)), false, true)
final_goal(4, in_tower((block,9),(block,4)), false, true)
final_goal(4, in_tower((block,9),(block,5)), false, true)
final_goal(4, in_tower((block,9),(block,6)), false, true)
final_goal(4, in_tower((block,9),(block,7)), true, true)
final_goal(4, in_tower((block,9),(block,8)), true, true)
final_goal(4, in_tower((block,9),(block,9)), true, true)
final_goal(4, on((block,1)), (block,2), true)
final_goal(4, on((block,10)), (block,11), true)
final_goal(4, on((block,11)), (block,12), true)
final_goal(4, on((block,12)), puzzle_room_2_table, true)
final_goal(4, on((block,13)), (block,14), true)
final_goal(4, on((block,14)), (block,15), true)
final_goal(4, on((block,15)), puzzle_room_2_table, true)
final_goal(4, on((block,16)), (block,17), true)
final_goal(4, on((block,17)), (block,18), true)
final_goal(4, on((block,18)), puzzle_room_2_table, true)
final_goal(4, on((block,2)), (block,3), true)
final_goal(4, on((block,3)), puzzle_room_1_table, true)
final_goal(4, on((block,4)), (block,5), true)
final_goal(4, on((block,5)), (block,6), true)
final_goal(4, on((block,6)), puzzle_room_1_table, true)
final_goal(4, on((block,7)), (block,8), true)
final_goal(4, on((block,8)), (block,9), true)
final_goal(4, on((block,9)), puzzle_room_1_table, true)
final_goal(4, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(4, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(4, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(4, in_tower((block,1),(block,1)), true, false)
final_goal(4, in_tower((block,1),(block,10)), true, false)
final_goal(4, in_tower((block,1),(block,11)), true, false)
final_goal(4, in_tower((block,1),(block,12)), true, false)
final_goal(4, in_tower((block,1),(block,13)), true, false)
final_goal(4, in_tower((block,1),(block,14)), true, false)
final_goal(4, in_tower((block,1),(block,15)), true, false)
final_goal(4, in_tower((block,1),(block,16)), true, false)
final_goal(4, in_tower((block,1),(block,17)), true, false)
final_goal(4, in_tower((block,1),(block,18)), true, false)
final_goal(4, in_tower((block,1),(block,2)), true, false)
final_goal(4, in_tower((block,1),(block,3)), true, false)
final_goal(4, in_tower((block,1),(block,4)), true, false)
final_goal(4, in_tower((block,1),(block,5)), true, false)
final_goal(4, in_tower((block,1),(block,6)), true, false)
final_goal(4, in_tower((block,1),(block,7)), true, false)
final_goal(4, in_tower((block,1),(block,8)), true, false)
final_goal(4, in_tower((block,1),(block,9)), true, false)
final_goal(4, in_tower((block,10),(block,1)), true, false)
final_goal(4, in_tower((block,10),(block,10)), true, false)
final_goal(4, in_tower((block,10),(block,11)), true, false)
final_goal(4, in_tower((block,10),(block,12)), true, false)
final_goal(4, in_tower((block,10),(block,13)), true, false)
final_goal(4, in_tower((block,10),(block,14)), true, false)
final_goal(4, in_tower((block,10),(block,15)), true, false)
final_goal(4, in_tower((block,10),(block,16)), true, false)
final_goal(4, in_tower((block,10),(block,17)), true, false)
final_goal(4, in_tower((block,10),(block,18)), true, false)
final_goal(4, in_tower((block,10),(block,2)), true, false)
final_goal(4, in_tower((block,10),(block,3)), true, false)
final_goal(4, in_tower((block,10),(block,4)), true, false)
final_goal(4, in_tower((block,10),(block,5)), true, false)
final_goal(4, in_tower((block,10),(block,6)), true, false)
final_goal(4, in_tower((block,10),(block,7)), true, false)
final_goal(4, in_tower((block,10),(block,8)), true, false)
final_goal(4, in_tower((block,10),(block,9)), true, false)
final_goal(4, in_tower((block,11),(block,1)), true, false)
final_goal(4, in_tower((block,11),(block,10)), true, false)
final_goal(4, in_tower((block,11),(block,11)), true, false)
final_goal(4, in_tower((block,11),(block,12)), true, false)
final_goal(4, in_tower((block,11),(block,13)), true, false)
final_goal(4, in_tower((block,11),(block,14)), true, false)
final_goal(4, in_tower((block,11),(block,15)), true, false)
final_goal(4, in_tower((block,11),(block,16)), true, false)
final_goal(4, in_tower((block,11),(block,17)), true, false)
final_goal(4, in_tower((block,11),(block,18)), true, false)
final_goal(4, in_tower((block,11),(block,2)), true, false)
final_goal(4, in_tower((block,11),(block,3)), true, false)
final_goal(4, in_tower((block,11),(block,4)), true, false)
final_goal(4, in_tower((block,11),(block,5)), true, false)
final_goal(4, in_tower((block,11),(block,6)), true, false)
final_goal(4, in_tower((block,11),(block,7)), true, false)
final_goal(4, in_tower((block,11),(block,8)), true, false)
final_goal(4, in_tower((block,11),(block,9)), true, false)
final_goal(4, in_tower((block,12),(block,1)), true, false)
final_goal(4, in_tower((block,12),(block,10)), false, false)
final_goal(4, in_tower((block,12),(block,11)), false, false)
final_goal(4, in_tower((block,12),(block,12)), false, false)
final_goal(4, in_tower((block,12),(block,13)), true, false)
final_goal(4, in_tower((block,12),(block,14)), true, false)
final_goal(4, in_tower((block,12),(block,15)), true, false)
final_goal(4, in_tower((block,12),(block,16)), true, false)
final_goal(4, in_tower((block,12),(block,17)), true, false)
final_goal(4, in_tower((block,12),(block,18)), true, false)
final_goal(4, in_tower((block,12),(block,2)), true, false)
final_goal(4, in_tower((block,12),(block,3)), true, false)
final_goal(4, in_tower((block,12),(block,4)), true, false)
final_goal(4, in_tower((block,12),(block,5)), true, false)
final_goal(4, in_tower((block,12),(block,6)), true, false)
final_goal(4, in_tower((block,12),(block,7)), true, false)
final_goal(4, in_tower((block,12),(block,8)), true, false)
final_goal(4, in_tower((block,12),(block,9)), true, false)
final_goal(4, in_tower((block,13),(block,1)), true, false)
final_goal(4, in_tower((block,13),(block,10)), true, false)
final_goal(4, in_tower((block,13),(block,11)), true, false)
final_goal(4, in_tower((block,13),(block,12)), true, false)
final_goal(4, in_tower((block,13),(block,13)), true, false)
final_goal(4, in_tower((block,13),(block,14)), true, false)
final_goal(4, in_tower((block,13),(block,15)), true, false)
final_goal(4, in_tower((block,13),(block,16)), true, false)
final_goal(4, in_tower((block,13),(block,17)), true, false)
final_goal(4, in_tower((block,13),(block,18)), true, false)
final_goal(4, in_tower((block,13),(block,2)), true, false)
final_goal(4, in_tower((block,13),(block,3)), true, false)
final_goal(4, in_tower((block,13),(block,4)), true, false)
final_goal(4, in_tower((block,13),(block,5)), true, false)
final_goal(4, in_tower((block,13),(block,6)), true, false)
final_goal(4, in_tower((block,13),(block,7)), true, false)
final_goal(4, in_tower((block,13),(block,8)), true, false)
final_goal(4, in_tower((block,13),(block,9)), true, false)
final_goal(4, in_tower((block,14),(block,1)), true, false)
final_goal(4, in_tower((block,14),(block,10)), true, false)
final_goal(4, in_tower((block,14),(block,11)), true, false)
final_goal(4, in_tower((block,14),(block,12)), true, false)
final_goal(4, in_tower((block,14),(block,13)), true, false)
final_goal(4, in_tower((block,14),(block,14)), true, false)
final_goal(4, in_tower((block,14),(block,15)), true, false)
final_goal(4, in_tower((block,14),(block,16)), true, false)
final_goal(4, in_tower((block,14),(block,17)), true, false)
final_goal(4, in_tower((block,14),(block,18)), true, false)
final_goal(4, in_tower((block,14),(block,2)), true, false)
final_goal(4, in_tower((block,14),(block,3)), true, false)
final_goal(4, in_tower((block,14),(block,4)), true, false)
final_goal(4, in_tower((block,14),(block,5)), true, false)
final_goal(4, in_tower((block,14),(block,6)), true, false)
final_goal(4, in_tower((block,14),(block,7)), true, false)
final_goal(4, in_tower((block,14),(block,8)), true, false)
final_goal(4, in_tower((block,14),(block,9)), true, false)
final_goal(4, in_tower((block,15),(block,1)), true, false)
final_goal(4, in_tower((block,15),(block,10)), true, false)
final_goal(4, in_tower((block,15),(block,11)), true, false)
final_goal(4, in_tower((block,15),(block,12)), true, false)
final_goal(4, in_tower((block,15),(block,13)), false, false)
final_goal(4, in_tower((block,15),(block,14)), false, false)
final_goal(4, in_tower((block,15),(block,15)), false, false)
final_goal(4, in_tower((block,15),(block,16)), true, false)
final_goal(4, in_tower((block,15),(block,17)), true, false)
final_goal(4, in_tower((block,15),(block,18)), true, false)
final_goal(4, in_tower((block,15),(block,2)), true, false)
final_goal(4, in_tower((block,15),(block,3)), true, false)
final_goal(4, in_tower((block,15),(block,4)), true, false)
final_goal(4, in_tower((block,15),(block,5)), true, false)
final_goal(4, in_tower((block,15),(block,6)), true, false)
final_goal(4, in_tower((block,15),(block,7)), true, false)
final_goal(4, in_tower((block,15),(block,8)), true, false)
final_goal(4, in_tower((block,15),(block,9)), true, false)
final_goal(4, in_tower((block,16),(block,1)), true, false)
final_goal(4, in_tower((block,16),(block,10)), true, false)
final_goal(4, in_tower((block,16),(block,11)), true, false)
final_goal(4, in_tower((block,16),(block,12)), true, false)
final_goal(4, in_tower((block,16),(block,13)), true, false)
final_goal(4, in_tower((block,16),(block,14)), true, false)
final_goal(4, in_tower((block,16),(block,15)), true, false)
final_goal(4, in_tower((block,16),(block,16)), true, false)
final_goal(4, in_tower((block,16),(block,17)), true, false)
final_goal(4, in_tower((block,16),(block,18)), true, false)
final_goal(4, in_tower((block,16),(block,2)), true, false)
final_goal(4, in_tower((block,16),(block,3)), true, false)
final_goal(4, in_tower((block,16),(block,4)), true, false)
final_goal(4, in_tower((block,16),(block,5)), true, false)
final_goal(4, in_tower((block,16),(block,6)), true, false)
final_goal(4, in_tower((block,16),(block,7)), true, false)
final_goal(4, in_tower((block,16),(block,8)), true, false)
final_goal(4, in_tower((block,16),(block,9)), true, false)
final_goal(4, in_tower((block,17),(block,1)), true, false)
final_goal(4, in_tower((block,17),(block,10)), true, false)
final_goal(4, in_tower((block,17),(block,11)), true, false)
final_goal(4, in_tower((block,17),(block,12)), true, false)
final_goal(4, in_tower((block,17),(block,13)), true, false)
final_goal(4, in_tower((block,17),(block,14)), true, false)
final_goal(4, in_tower((block,17),(block,15)), true, false)
final_goal(4, in_tower((block,17),(block,16)), true, false)
final_goal(4, in_tower((block,17),(block,17)), true, false)
final_goal(4, in_tower((block,17),(block,18)), true, false)
final_goal(4, in_tower((block,17),(block,2)), true, false)
final_goal(4, in_tower((block,17),(block,3)), true, false)
final_goal(4, in_tower((block,17),(block,4)), true, false)
final_goal(4, in_tower((block,17),(block,5)), true, false)
final_goal(4, in_tower((block,17),(block,6)), true, false)
final_goal(4, in_tower((block,17),(block,7)), true, false)
final_goal(4, in_tower((block,17),(block,8)), true, false)
final_goal(4, in_tower((block,17),(block,9)), true, false)
final_goal(4, in_tower((block,18),(block,1)), true, false)
final_goal(4, in_tower((block,18),(block,10)), true, false)
final_goal(4, in_tower((block,18),(block,11)), true, false)
final_goal(4, in_tower((block,18),(block,12)), true, false)
final_goal(4, in_tower((block,18),(block,13)), true, false)
final_goal(4, in_tower((block,18),(block,14)), true, false)
final_goal(4, in_tower((block,18),(block,15)), true, false)
final_goal(4, in_tower((block,18),(block,16)), false, false)
final_goal(4, in_tower((block,18),(block,17)), false, false)
final_goal(4, in_tower((block,18),(block,18)), false, false)
final_goal(4, in_tower((block,18),(block,2)), true, false)
final_goal(4, in_tower((block,18),(block,3)), true, false)
final_goal(4, in_tower((block,18),(block,4)), true, false)
final_goal(4, in_tower((block,18),(block,5)), true, false)
final_goal(4, in_tower((block,18),(block,6)), true, false)
final_goal(4, in_tower((block,18),(block,7)), true, false)
final_goal(4, in_tower((block,18),(block,8)), true, false)
final_goal(4, in_tower((block,18),(block,9)), true, false)
final_goal(4, in_tower((block,2),(block,1)), true, false)
final_goal(4, in_tower((block,2),(block,10)), true, false)
final_goal(4, in_tower((block,2),(block,11)), true, false)
final_goal(4, in_tower((block,2),(block,12)), true, false)
final_goal(4, in_tower((block,2),(block,13)), true, false)
final_goal(4, in_tower((block,2),(block,14)), true, false)
final_goal(4, in_tower((block,2),(block,15)), true, false)
final_goal(4, in_tower((block,2),(block,16)), true, false)
final_goal(4, in_tower((block,2),(block,17)), true, false)
final_goal(4, in_tower((block,2),(block,18)), true, false)
final_goal(4, in_tower((block,2),(block,2)), true, false)
final_goal(4, in_tower((block,2),(block,3)), true, false)
final_goal(4, in_tower((block,2),(block,4)), true, false)
final_goal(4, in_tower((block,2),(block,5)), true, false)
final_goal(4, in_tower((block,2),(block,6)), true, false)
final_goal(4, in_tower((block,2),(block,7)), true, false)
final_goal(4, in_tower((block,2),(block,8)), true, false)
final_goal(4, in_tower((block,2),(block,9)), true, false)
final_goal(4, in_tower((block,3),(block,1)), false, false)
final_goal(4, in_tower((block,3),(block,10)), true, false)
final_goal(4, in_tower((block,3),(block,11)), true, false)
final_goal(4, in_tower((block,3),(block,12)), true, false)
final_goal(4, in_tower((block,3),(block,13)), true, false)
final_goal(4, in_tower((block,3),(block,14)), true, false)
final_goal(4, in_tower((block,3),(block,15)), true, false)
final_goal(4, in_tower((block,3),(block,16)), true, false)
final_goal(4, in_tower((block,3),(block,17)), true, false)
final_goal(4, in_tower((block,3),(block,18)), true, false)
final_goal(4, in_tower((block,3),(block,2)), false, false)
final_goal(4, in_tower((block,3),(block,3)), false, false)
final_goal(4, in_tower((block,3),(block,4)), true, false)
final_goal(4, in_tower((block,3),(block,5)), true, false)
final_goal(4, in_tower((block,3),(block,6)), true, false)
final_goal(4, in_tower((block,3),(block,7)), true, false)
final_goal(4, in_tower((block,3),(block,8)), true, false)
final_goal(4, in_tower((block,3),(block,9)), true, false)
final_goal(4, in_tower((block,4),(block,1)), true, false)
final_goal(4, in_tower((block,4),(block,10)), true, false)
final_goal(4, in_tower((block,4),(block,11)), true, false)
final_goal(4, in_tower((block,4),(block,12)), true, false)
final_goal(4, in_tower((block,4),(block,13)), true, false)
final_goal(4, in_tower((block,4),(block,14)), true, false)
final_goal(4, in_tower((block,4),(block,15)), true, false)
final_goal(4, in_tower((block,4),(block,16)), true, false)
final_goal(4, in_tower((block,4),(block,17)), true, false)
final_goal(4, in_tower((block,4),(block,18)), true, false)
final_goal(4, in_tower((block,4),(block,2)), true, false)
final_goal(4, in_tower((block,4),(block,3)), true, false)
final_goal(4, in_tower((block,4),(block,4)), true, false)
final_goal(4, in_tower((block,4),(block,5)), true, false)
final_goal(4, in_tower((block,4),(block,6)), true, false)
final_goal(4, in_tower((block,4),(block,7)), true, false)
final_goal(4, in_tower((block,4),(block,8)), true, false)
final_goal(4, in_tower((block,4),(block,9)), true, false)
final_goal(4, in_tower((block,5),(block,1)), true, false)
final_goal(4, in_tower((block,5),(block,10)), true, false)
final_goal(4, in_tower((block,5),(block,11)), true, false)
final_goal(4, in_tower((block,5),(block,12)), true, false)
final_goal(4, in_tower((block,5),(block,13)), true, false)
final_goal(4, in_tower((block,5),(block,14)), true, false)
final_goal(4, in_tower((block,5),(block,15)), true, false)
final_goal(4, in_tower((block,5),(block,16)), true, false)
final_goal(4, in_tower((block,5),(block,17)), true, false)
final_goal(4, in_tower((block,5),(block,18)), true, false)
final_goal(4, in_tower((block,5),(block,2)), true, false)
final_goal(4, in_tower((block,5),(block,3)), true, false)
final_goal(4, in_tower((block,5),(block,4)), true, false)
final_goal(4, in_tower((block,5),(block,5)), true, false)
final_goal(4, in_tower((block,5),(block,6)), true, false)
final_goal(4, in_tower((block,5),(block,7)), true, false)
final_goal(4, in_tower((block,5),(block,8)), true, false)
final_goal(4, in_tower((block,5),(block,9)), true, false)
final_goal(4, in_tower((block,6),(block,1)), true, false)
final_goal(4, in_tower((block,6),(block,10)), true, false)
final_goal(4, in_tower((block,6),(block,11)), true, false)
final_goal(4, in_tower((block,6),(block,12)), true, false)
final_goal(4, in_tower((block,6),(block,13)), true, false)
final_goal(4, in_tower((block,6),(block,14)), true, false)
final_goal(4, in_tower((block,6),(block,15)), true, false)
final_goal(4, in_tower((block,6),(block,16)), true, false)
final_goal(4, in_tower((block,6),(block,17)), true, false)
final_goal(4, in_tower((block,6),(block,18)), true, false)
final_goal(4, in_tower((block,6),(block,2)), true, false)
final_goal(4, in_tower((block,6),(block,3)), true, false)
final_goal(4, in_tower((block,6),(block,4)), false, false)
final_goal(4, in_tower((block,6),(block,5)), false, false)
final_goal(4, in_tower((block,6),(block,6)), false, false)
final_goal(4, in_tower((block,6),(block,7)), true, false)
final_goal(4, in_tower((block,6),(block,8)), true, false)
final_goal(4, in_tower((block,6),(block,9)), true, false)
final_goal(4, in_tower((block,7),(block,1)), true, false)
final_goal(4, in_tower((block,7),(block,10)), true, false)
final_goal(4, in_tower((block,7),(block,11)), true, false)
final_goal(4, in_tower((block,7),(block,12)), true, false)
final_goal(4, in_tower((block,7),(block,13)), true, false)
final_goal(4, in_tower((block,7),(block,14)), true, false)
final_goal(4, in_tower((block,7),(block,15)), true, false)
final_goal(4, in_tower((block,7),(block,16)), true, false)
final_goal(4, in_tower((block,7),(block,17)), true, false)
final_goal(4, in_tower((block,7),(block,18)), true, false)
final_goal(4, in_tower((block,7),(block,2)), true, false)
final_goal(4, in_tower((block,7),(block,3)), true, false)
final_goal(4, in_tower((block,7),(block,4)), true, false)
final_goal(4, in_tower((block,7),(block,5)), true, false)
final_goal(4, in_tower((block,7),(block,6)), true, false)
final_goal(4, in_tower((block,7),(block,7)), true, false)
final_goal(4, in_tower((block,7),(block,8)), true, false)
final_goal(4, in_tower((block,7),(block,9)), true, false)
final_goal(4, in_tower((block,8),(block,1)), true, false)
final_goal(4, in_tower((block,8),(block,10)), true, false)
final_goal(4, in_tower((block,8),(block,11)), true, false)
final_goal(4, in_tower((block,8),(block,12)), true, false)
final_goal(4, in_tower((block,8),(block,13)), true, false)
final_goal(4, in_tower((block,8),(block,14)), true, false)
final_goal(4, in_tower((block,8),(block,15)), true, false)
final_goal(4, in_tower((block,8),(block,16)), true, false)
final_goal(4, in_tower((block,8),(block,17)), true, false)
final_goal(4, in_tower((block,8),(block,18)), true, false)
final_goal(4, in_tower((block,8),(block,2)), true, false)
final_goal(4, in_tower((block,8),(block,3)), true, false)
final_goal(4, in_tower((block,8),(block,4)), true, false)
final_goal(4, in_tower((block,8),(block,5)), true, false)
final_goal(4, in_tower((block,8),(block,6)), true, false)
final_goal(4, in_tower((block,8),(block,7)), true, false)
final_goal(4, in_tower((block,8),(block,8)), true, false)
final_goal(4, in_tower((block,8),(block,9)), true, false)
final_goal(4, in_tower((block,9),(block,1)), true, false)
final_goal(4, in_tower((block,9),(block,10)), true, false)
final_goal(4, in_tower((block,9),(block,11)), true, false)
final_goal(4, in_tower((block,9),(block,12)), true, false)
final_goal(4, in_tower((block,9),(block,13)), true, false)
final_goal(4, in_tower((block,9),(block,14)), true, false)
final_goal(4, in_tower((block,9),(block,15)), true, false)
final_goal(4, in_tower((block,9),(block,16)), true, false)
final_goal(4, in_tower((block,9),(block,17)), true, false)
final_goal(4, in_tower((block,9),(block,18)), true, false)
final_goal(4, in_tower((block,9),(block,2)), true, false)
final_goal(4, in_tower((block,9),(block,3)), true, false)
final_goal(4, in_tower((block,9),(block,4)), true, false)
final_goal(4, in_tower((block,9),(block,5)), true, false)
final_goal(4, in_tower((block,9),(block,6)), true, false)
final_goal(4, in_tower((block,9),(block,7)), false, false)
final_goal(4, in_tower((block,9),(block,8)), false, false)
final_goal(4, in_tower((block,9),(block,9)), false, false)
final_goal(4, on((block,1)), (block,10), false)
final_goal(4, on((block,1)), (block,11), false)
final_goal(4, on((block,1)), (block,12), false)
final_goal(4, on((block,1)), (block,13), false)
final_goal(4, on((block,1)), (block,14), false)
final_goal(4, on((block,1)), (block,15), false)
final_goal(4, on((block,1)), (block,16), false)
final_goal(4, on((block,1)), (block,17), false)
final_goal(4, on((block,1)), (block,18), false)
final_goal(4, on((block,1)), (block,3), false)
final_goal(4, on((block,1)), (block,4), false)
final_goal(4, on((block,1)), (block,5), false)
final_goal(4, on((block,1)), (block,6), false)
final_goal(4, on((block,1)), (block,7), false)
final_goal(4, on((block,1)), (block,8), false)
final_goal(4, on((block,1)), (block,9), false)
final_goal(4, on((block,1)), nothing, false)
final_goal(4, on((block,1)), puzzle_room_1_table, false)
final_goal(4, on((block,1)), puzzle_room_2_table, false)
final_goal(4, on((block,10)), (block,1), false)
final_goal(4, on((block,10)), (block,12), false)
final_goal(4, on((block,10)), (block,13), false)
final_goal(4, on((block,10)), (block,14), false)
final_goal(4, on((block,10)), (block,15), false)
final_goal(4, on((block,10)), (block,16), false)
final_goal(4, on((block,10)), (block,17), false)
final_goal(4, on((block,10)), (block,18), false)
final_goal(4, on((block,10)), (block,2), false)
final_goal(4, on((block,10)), (block,3), false)
final_goal(4, on((block,10)), (block,4), false)
final_goal(4, on((block,10)), (block,5), false)
final_goal(4, on((block,10)), (block,6), false)
final_goal(4, on((block,10)), (block,7), false)
final_goal(4, on((block,10)), (block,8), false)
final_goal(4, on((block,10)), (block,9), false)
final_goal(4, on((block,10)), nothing, false)
final_goal(4, on((block,10)), puzzle_room_1_table, false)
final_goal(4, on((block,10)), puzzle_room_2_table, false)
final_goal(4, on((block,11)), (block,1), false)
final_goal(4, on((block,11)), (block,10), false)
final_goal(4, on((block,11)), (block,13), false)
final_goal(4, on((block,11)), (block,14), false)
final_goal(4, on((block,11)), (block,15), false)
final_goal(4, on((block,11)), (block,16), false)
final_goal(4, on((block,11)), (block,17), false)
final_goal(4, on((block,11)), (block,18), false)
final_goal(4, on((block,11)), (block,2), false)
final_goal(4, on((block,11)), (block,3), false)
final_goal(4, on((block,11)), (block,4), false)
final_goal(4, on((block,11)), (block,5), false)
final_goal(4, on((block,11)), (block,6), false)
final_goal(4, on((block,11)), (block,7), false)
final_goal(4, on((block,11)), (block,8), false)
final_goal(4, on((block,11)), (block,9), false)
final_goal(4, on((block,11)), nothing, false)
final_goal(4, on((block,11)), puzzle_room_1_table, false)
final_goal(4, on((block,11)), puzzle_room_2_table, false)
final_goal(4, on((block,12)), (block,1), false)
final_goal(4, on((block,12)), (block,10), false)
final_goal(4, on((block,12)), (block,11), false)
final_goal(4, on((block,12)), (block,13), false)
final_goal(4, on((block,12)), (block,14), false)
final_goal(4, on((block,12)), (block,15), false)
final_goal(4, on((block,12)), (block,16), false)
final_goal(4, on((block,12)), (block,17), false)
final_goal(4, on((block,12)), (block,18), false)
final_goal(4, on((block,12)), (block,2), false)
final_goal(4, on((block,12)), (block,3), false)
final_goal(4, on((block,12)), (block,4), false)
final_goal(4, on((block,12)), (block,5), false)
final_goal(4, on((block,12)), (block,6), false)
final_goal(4, on((block,12)), (block,7), false)
final_goal(4, on((block,12)), (block,8), false)
final_goal(4, on((block,12)), (block,9), false)
final_goal(4, on((block,12)), nothing, false)
final_goal(4, on((block,12)), puzzle_room_1_table, false)
final_goal(4, on((block,13)), (block,1), false)
final_goal(4, on((block,13)), (block,10), false)
final_goal(4, on((block,13)), (block,11), false)
final_goal(4, on((block,13)), (block,12), false)
final_goal(4, on((block,13)), (block,15), false)
final_goal(4, on((block,13)), (block,16), false)
final_goal(4, on((block,13)), (block,17), false)
final_goal(4, on((block,13)), (block,18), false)
final_goal(4, on((block,13)), (block,2), false)
final_goal(4, on((block,13)), (block,3), false)
final_goal(4, on((block,13)), (block,4), false)
final_goal(4, on((block,13)), (block,5), false)
final_goal(4, on((block,13)), (block,6), false)
final_goal(4, on((block,13)), (block,7), false)
final_goal(4, on((block,13)), (block,8), false)
final_goal(4, on((block,13)), (block,9), false)
final_goal(4, on((block,13)), nothing, false)
final_goal(4, on((block,13)), puzzle_room_1_table, false)
final_goal(4, on((block,13)), puzzle_room_2_table, false)
final_goal(4, on((block,14)), (block,1), false)
final_goal(4, on((block,14)), (block,10), false)
final_goal(4, on((block,14)), (block,11), false)
final_goal(4, on((block,14)), (block,12), false)
final_goal(4, on((block,14)), (block,13), false)
final_goal(4, on((block,14)), (block,16), false)
final_goal(4, on((block,14)), (block,17), false)
final_goal(4, on((block,14)), (block,18), false)
final_goal(4, on((block,14)), (block,2), false)
final_goal(4, on((block,14)), (block,3), false)
final_goal(4, on((block,14)), (block,4), false)
final_goal(4, on((block,14)), (block,5), false)
final_goal(4, on((block,14)), (block,6), false)
final_goal(4, on((block,14)), (block,7), false)
final_goal(4, on((block,14)), (block,8), false)
final_goal(4, on((block,14)), (block,9), false)
final_goal(4, on((block,14)), nothing, false)
final_goal(4, on((block,14)), puzzle_room_1_table, false)
final_goal(4, on((block,14)), puzzle_room_2_table, false)
final_goal(4, on((block,15)), (block,1), false)
final_goal(4, on((block,15)), (block,10), false)
final_goal(4, on((block,15)), (block,11), false)
final_goal(4, on((block,15)), (block,12), false)
final_goal(4, on((block,15)), (block,13), false)
final_goal(4, on((block,15)), (block,14), false)
final_goal(4, on((block,15)), (block,16), false)
final_goal(4, on((block,15)), (block,17), false)
final_goal(4, on((block,15)), (block,18), false)
final_goal(4, on((block,15)), (block,2), false)
final_goal(4, on((block,15)), (block,3), false)
final_goal(4, on((block,15)), (block,4), false)
final_goal(4, on((block,15)), (block,5), false)
final_goal(4, on((block,15)), (block,6), false)
final_goal(4, on((block,15)), (block,7), false)
final_goal(4, on((block,15)), (block,8), false)
final_goal(4, on((block,15)), (block,9), false)
final_goal(4, on((block,15)), nothing, false)
final_goal(4, on((block,15)), puzzle_room_1_table, false)
final_goal(4, on((block,16)), (block,1), false)
final_goal(4, on((block,16)), (block,10), false)
final_goal(4, on((block,16)), (block,11), false)
final_goal(4, on((block,16)), (block,12), false)
final_goal(4, on((block,16)), (block,13), false)
final_goal(4, on((block,16)), (block,14), false)
final_goal(4, on((block,16)), (block,15), false)
final_goal(4, on((block,16)), (block,18), false)
final_goal(4, on((block,16)), (block,2), false)
final_goal(4, on((block,16)), (block,3), false)
final_goal(4, on((block,16)), (block,4), false)
final_goal(4, on((block,16)), (block,5), false)
final_goal(4, on((block,16)), (block,6), false)
final_goal(4, on((block,16)), (block,7), false)
final_goal(4, on((block,16)), (block,8), false)
final_goal(4, on((block,16)), (block,9), false)
final_goal(4, on((block,16)), nothing, false)
final_goal(4, on((block,16)), puzzle_room_1_table, false)
final_goal(4, on((block,16)), puzzle_room_2_table, false)
final_goal(4, on((block,17)), (block,1), false)
final_goal(4, on((block,17)), (block,10), false)
final_goal(4, on((block,17)), (block,11), false)
final_goal(4, on((block,17)), (block,12), false)
final_goal(4, on((block,17)), (block,13), false)
final_goal(4, on((block,17)), (block,14), false)
final_goal(4, on((block,17)), (block,15), false)
final_goal(4, on((block,17)), (block,16), false)
final_goal(4, on((block,17)), (block,2), false)
final_goal(4, on((block,17)), (block,3), false)
final_goal(4, on((block,17)), (block,4), false)
final_goal(4, on((block,17)), (block,5), false)
final_goal(4, on((block,17)), (block,6), false)
final_goal(4, on((block,17)), (block,7), false)
final_goal(4, on((block,17)), (block,8), false)
final_goal(4, on((block,17)), (block,9), false)
final_goal(4, on((block,17)), nothing, false)
final_goal(4, on((block,17)), puzzle_room_1_table, false)
final_goal(4, on((block,17)), puzzle_room_2_table, false)
final_goal(4, on((block,18)), (block,1), false)
final_goal(4, on((block,18)), (block,10), false)
final_goal(4, on((block,18)), (block,11), false)
final_goal(4, on((block,18)), (block,12), false)
final_goal(4, on((block,18)), (block,13), false)
final_goal(4, on((block,18)), (block,14), false)
final_goal(4, on((block,18)), (block,15), false)
final_goal(4, on((block,18)), (block,16), false)
final_goal(4, on((block,18)), (block,17), false)
final_goal(4, on((block,18)), (block,2), false)
final_goal(4, on((block,18)), (block,3), false)
final_goal(4, on((block,18)), (block,4), false)
final_goal(4, on((block,18)), (block,5), false)
final_goal(4, on((block,18)), (block,6), false)
final_goal(4, on((block,18)), (block,7), false)
final_goal(4, on((block,18)), (block,8), false)
final_goal(4, on((block,18)), (block,9), false)
final_goal(4, on((block,18)), nothing, false)
final_goal(4, on((block,18)), puzzle_room_1_table, false)
final_goal(4, on((block,2)), (block,1), false)
final_goal(4, on((block,2)), (block,10), false)
final_goal(4, on((block,2)), (block,11), false)
final_goal(4, on((block,2)), (block,12), false)
final_goal(4, on((block,2)), (block,13), false)
final_goal(4, on((block,2)), (block,14), false)
final_goal(4, on((block,2)), (block,15), false)
final_goal(4, on((block,2)), (block,16), false)
final_goal(4, on((block,2)), (block,17), false)
final_goal(4, on((block,2)), (block,18), false)
final_goal(4, on((block,2)), (block,4), false)
final_goal(4, on((block,2)), (block,5), false)
final_goal(4, on((block,2)), (block,6), false)
final_goal(4, on((block,2)), (block,7), false)
final_goal(4, on((block,2)), (block,8), false)
final_goal(4, on((block,2)), (block,9), false)
final_goal(4, on((block,2)), nothing, false)
final_goal(4, on((block,2)), puzzle_room_1_table, false)
final_goal(4, on((block,2)), puzzle_room_2_table, false)
final_goal(4, on((block,3)), (block,1), false)
final_goal(4, on((block,3)), (block,10), false)
final_goal(4, on((block,3)), (block,11), false)
final_goal(4, on((block,3)), (block,12), false)
final_goal(4, on((block,3)), (block,13), false)
final_goal(4, on((block,3)), (block,14), false)
final_goal(4, on((block,3)), (block,15), false)
final_goal(4, on((block,3)), (block,16), false)
final_goal(4, on((block,3)), (block,17), false)
final_goal(4, on((block,3)), (block,18), false)
final_goal(4, on((block,3)), (block,2), false)
final_goal(4, on((block,3)), (block,4), false)
final_goal(4, on((block,3)), (block,5), false)
final_goal(4, on((block,3)), (block,6), false)
final_goal(4, on((block,3)), (block,7), false)
final_goal(4, on((block,3)), (block,8), false)
final_goal(4, on((block,3)), (block,9), false)
final_goal(4, on((block,3)), nothing, false)
final_goal(4, on((block,3)), puzzle_room_2_table, false)
final_goal(4, on((block,4)), (block,1), false)
final_goal(4, on((block,4)), (block,10), false)
final_goal(4, on((block,4)), (block,11), false)
final_goal(4, on((block,4)), (block,12), false)
final_goal(4, on((block,4)), (block,13), false)
final_goal(4, on((block,4)), (block,14), false)
final_goal(4, on((block,4)), (block,15), false)
final_goal(4, on((block,4)), (block,16), false)
final_goal(4, on((block,4)), (block,17), false)
final_goal(4, on((block,4)), (block,18), false)
final_goal(4, on((block,4)), (block,2), false)
final_goal(4, on((block,4)), (block,3), false)
final_goal(4, on((block,4)), (block,6), false)
final_goal(4, on((block,4)), (block,7), false)
final_goal(4, on((block,4)), (block,8), false)
final_goal(4, on((block,4)), (block,9), false)
final_goal(4, on((block,4)), nothing, false)
final_goal(4, on((block,4)), puzzle_room_1_table, false)
final_goal(4, on((block,4)), puzzle_room_2_table, false)
final_goal(4, on((block,5)), (block,1), false)
final_goal(4, on((block,5)), (block,10), false)
final_goal(4, on((block,5)), (block,11), false)
final_goal(4, on((block,5)), (block,12), false)
final_goal(4, on((block,5)), (block,13), false)
final_goal(4, on((block,5)), (block,14), false)
final_goal(4, on((block,5)), (block,15), false)
final_goal(4, on((block,5)), (block,16), false)
final_goal(4, on((block,5)), (block,17), false)
final_goal(4, on((block,5)), (block,18), false)
final_goal(4, on((block,5)), (block,2), false)
final_goal(4, on((block,5)), (block,3), false)
final_goal(4, on((block,5)), (block,4), false)
final_goal(4, on((block,5)), (block,7), false)
final_goal(4, on((block,5)), (block,8), false)
final_goal(4, on((block,5)), (block,9), false)
final_goal(4, on((block,5)), nothing, false)
final_goal(4, on((block,5)), puzzle_room_1_table, false)
final_goal(4, on((block,5)), puzzle_room_2_table, false)
final_goal(4, on((block,6)), (block,1), false)
final_goal(4, on((block,6)), (block,10), false)
final_goal(4, on((block,6)), (block,11), false)
final_goal(4, on((block,6)), (block,12), false)
final_goal(4, on((block,6)), (block,13), false)
final_goal(4, on((block,6)), (block,14), false)
final_goal(4, on((block,6)), (block,15), false)
final_goal(4, on((block,6)), (block,16), false)
final_goal(4, on((block,6)), (block,17), false)
final_goal(4, on((block,6)), (block,18), false)
final_goal(4, on((block,6)), (block,2), false)
final_goal(4, on((block,6)), (block,3), false)
final_goal(4, on((block,6)), (block,4), false)
final_goal(4, on((block,6)), (block,5), false)
final_goal(4, on((block,6)), (block,7), false)
final_goal(4, on((block,6)), (block,8), false)
final_goal(4, on((block,6)), (block,9), false)
final_goal(4, on((block,6)), nothing, false)
final_goal(4, on((block,6)), puzzle_room_2_table, false)
final_goal(4, on((block,7)), (block,1), false)
final_goal(4, on((block,7)), (block,10), false)
final_goal(4, on((block,7)), (block,11), false)
final_goal(4, on((block,7)), (block,12), false)
final_goal(4, on((block,7)), (block,13), false)
final_goal(4, on((block,7)), (block,14), false)
final_goal(4, on((block,7)), (block,15), false)
final_goal(4, on((block,7)), (block,16), false)
final_goal(4, on((block,7)), (block,17), false)
final_goal(4, on((block,7)), (block,18), false)
final_goal(4, on((block,7)), (block,2), false)
final_goal(4, on((block,7)), (block,3), false)
final_goal(4, on((block,7)), (block,4), false)
final_goal(4, on((block,7)), (block,5), false)
final_goal(4, on((block,7)), (block,6), false)
final_goal(4, on((block,7)), (block,9), false)
final_goal(4, on((block,7)), nothing, false)
final_goal(4, on((block,7)), puzzle_room_1_table, false)
final_goal(4, on((block,7)), puzzle_room_2_table, false)
final_goal(4, on((block,8)), (block,1), false)
final_goal(4, on((block,8)), (block,10), false)
final_goal(4, on((block,8)), (block,11), false)
final_goal(4, on((block,8)), (block,12), false)
final_goal(4, on((block,8)), (block,13), false)
final_goal(4, on((block,8)), (block,14), false)
final_goal(4, on((block,8)), (block,15), false)
final_goal(4, on((block,8)), (block,16), false)
final_goal(4, on((block,8)), (block,17), false)
final_goal(4, on((block,8)), (block,18), false)
final_goal(4, on((block,8)), (block,2), false)
final_goal(4, on((block,8)), (block,3), false)
final_goal(4, on((block,8)), (block,4), false)
final_goal(4, on((block,8)), (block,5), false)
final_goal(4, on((block,8)), (block,6), false)
final_goal(4, on((block,8)), (block,7), false)
final_goal(4, on((block,8)), nothing, false)
final_goal(4, on((block,8)), puzzle_room_1_table, false)
final_goal(4, on((block,8)), puzzle_room_2_table, false)
final_goal(4, on((block,9)), (block,1), false)
final_goal(4, on((block,9)), (block,10), false)
final_goal(4, on((block,9)), (block,11), false)
final_goal(4, on((block,9)), (block,12), false)
final_goal(4, on((block,9)), (block,13), false)
final_goal(4, on((block,9)), (block,14), false)
final_goal(4, on((block,9)), (block,15), false)
final_goal(4, on((block,9)), (block,16), false)
final_goal(4, on((block,9)), (block,17), false)
final_goal(4, on((block,9)), (block,18), false)
final_goal(4, on((block,9)), (block,2), false)
final_goal(4, on((block,9)), (block,3), false)
final_goal(4, on((block,9)), (block,4), false)
final_goal(4, on((block,9)), (block,5), false)
final_goal(4, on((block,9)), (block,6), false)
final_goal(4, on((block,9)), (block,7), false)
final_goal(4, on((block,9)), (block,8), false)
final_goal(4, on((block,9)), nothing, false)
final_goal(4, on((block,9)), puzzle_room_2_table, false)
final_goal(4, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(3, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(3, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,10)), false, true)
final_goal(3, in_tower((block,1),(block,11)), false, true)
final_goal(3, in_tower((block,1),(block,12)), false, true)
final_goal(3, in_tower((block,1),(block,13)), false, true)
final_goal(3, in_tower((block,1),(block,14)), false, true)
final_goal(3, in_tower((block,1),(block,15)), false, true)
final_goal(3, in_tower((block,1),(block,16)), false, true)
final_goal(3, in_tower((block,1),(block,17)), false, true)
final_goal(3, in_tower((block,1),(block,18)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,1),(block,7)), false, true)
final_goal(3, in_tower((block,1),(block,8)), false, true)
final_goal(3, in_tower((block,1),(block,9)), false, true)
final_goal(3, in_tower((block,10),(block,1)), false, true)
final_goal(3, in_tower((block,10),(block,10)), false, true)
final_goal(3, in_tower((block,10),(block,11)), false, true)
final_goal(3, in_tower((block,10),(block,12)), false, true)
final_goal(3, in_tower((block,10),(block,13)), false, true)
final_goal(3, in_tower((block,10),(block,14)), false, true)
final_goal(3, in_tower((block,10),(block,15)), false, true)
final_goal(3, in_tower((block,10),(block,16)), false, true)
final_goal(3, in_tower((block,10),(block,17)), false, true)
final_goal(3, in_tower((block,10),(block,18)), false, true)
final_goal(3, in_tower((block,10),(block,2)), false, true)
final_goal(3, in_tower((block,10),(block,3)), false, true)
final_goal(3, in_tower((block,10),(block,4)), false, true)
final_goal(3, in_tower((block,10),(block,5)), false, true)
final_goal(3, in_tower((block,10),(block,6)), false, true)
final_goal(3, in_tower((block,10),(block,7)), false, true)
final_goal(3, in_tower((block,10),(block,8)), false, true)
final_goal(3, in_tower((block,10),(block,9)), false, true)
final_goal(3, in_tower((block,11),(block,1)), false, true)
final_goal(3, in_tower((block,11),(block,10)), false, true)
final_goal(3, in_tower((block,11),(block,11)), false, true)
final_goal(3, in_tower((block,11),(block,12)), false, true)
final_goal(3, in_tower((block,11),(block,13)), false, true)
final_goal(3, in_tower((block,11),(block,14)), false, true)
final_goal(3, in_tower((block,11),(block,15)), false, true)
final_goal(3, in_tower((block,11),(block,16)), false, true)
final_goal(3, in_tower((block,11),(block,17)), false, true)
final_goal(3, in_tower((block,11),(block,18)), false, true)
final_goal(3, in_tower((block,11),(block,2)), false, true)
final_goal(3, in_tower((block,11),(block,3)), false, true)
final_goal(3, in_tower((block,11),(block,4)), false, true)
final_goal(3, in_tower((block,11),(block,5)), false, true)
final_goal(3, in_tower((block,11),(block,6)), false, true)
final_goal(3, in_tower((block,11),(block,7)), false, true)
final_goal(3, in_tower((block,11),(block,8)), false, true)
final_goal(3, in_tower((block,11),(block,9)), false, true)
final_goal(3, in_tower((block,12),(block,1)), false, true)
final_goal(3, in_tower((block,12),(block,10)), true, true)
final_goal(3, in_tower((block,12),(block,11)), true, true)
final_goal(3, in_tower((block,12),(block,12)), true, true)
final_goal(3, in_tower((block,12),(block,13)), false, true)
final_goal(3, in_tower((block,12),(block,14)), false, true)
final_goal(3, in_tower((block,12),(block,15)), false, true)
final_goal(3, in_tower((block,12),(block,16)), false, true)
final_goal(3, in_tower((block,12),(block,17)), false, true)
final_goal(3, in_tower((block,12),(block,18)), false, true)
final_goal(3, in_tower((block,12),(block,2)), false, true)
final_goal(3, in_tower((block,12),(block,3)), false, true)
final_goal(3, in_tower((block,12),(block,4)), false, true)
final_goal(3, in_tower((block,12),(block,5)), false, true)
final_goal(3, in_tower((block,12),(block,6)), false, true)
final_goal(3, in_tower((block,12),(block,7)), false, true)
final_goal(3, in_tower((block,12),(block,8)), false, true)
final_goal(3, in_tower((block,12),(block,9)), false, true)
final_goal(3, in_tower((block,13),(block,1)), false, true)
final_goal(3, in_tower((block,13),(block,10)), false, true)
final_goal(3, in_tower((block,13),(block,11)), false, true)
final_goal(3, in_tower((block,13),(block,12)), false, true)
final_goal(3, in_tower((block,13),(block,13)), false, true)
final_goal(3, in_tower((block,13),(block,14)), false, true)
final_goal(3, in_tower((block,13),(block,15)), false, true)
final_goal(3, in_tower((block,13),(block,16)), false, true)
final_goal(3, in_tower((block,13),(block,17)), false, true)
final_goal(3, in_tower((block,13),(block,18)), false, true)
final_goal(3, in_tower((block,13),(block,2)), false, true)
final_goal(3, in_tower((block,13),(block,3)), false, true)
final_goal(3, in_tower((block,13),(block,4)), false, true)
final_goal(3, in_tower((block,13),(block,5)), false, true)
final_goal(3, in_tower((block,13),(block,6)), false, true)
final_goal(3, in_tower((block,13),(block,7)), false, true)
final_goal(3, in_tower((block,13),(block,8)), false, true)
final_goal(3, in_tower((block,13),(block,9)), false, true)
final_goal(3, in_tower((block,14),(block,1)), false, true)
final_goal(3, in_tower((block,14),(block,10)), false, true)
final_goal(3, in_tower((block,14),(block,11)), false, true)
final_goal(3, in_tower((block,14),(block,12)), false, true)
final_goal(3, in_tower((block,14),(block,13)), false, true)
final_goal(3, in_tower((block,14),(block,14)), false, true)
final_goal(3, in_tower((block,14),(block,15)), false, true)
final_goal(3, in_tower((block,14),(block,16)), false, true)
final_goal(3, in_tower((block,14),(block,17)), false, true)
final_goal(3, in_tower((block,14),(block,18)), false, true)
final_goal(3, in_tower((block,14),(block,2)), false, true)
final_goal(3, in_tower((block,14),(block,3)), false, true)
final_goal(3, in_tower((block,14),(block,4)), false, true)
final_goal(3, in_tower((block,14),(block,5)), false, true)
final_goal(3, in_tower((block,14),(block,6)), false, true)
final_goal(3, in_tower((block,14),(block,7)), false, true)
final_goal(3, in_tower((block,14),(block,8)), false, true)
final_goal(3, in_tower((block,14),(block,9)), false, true)
final_goal(3, in_tower((block,15),(block,1)), false, true)
final_goal(3, in_tower((block,15),(block,10)), false, true)
final_goal(3, in_tower((block,15),(block,11)), false, true)
final_goal(3, in_tower((block,15),(block,12)), false, true)
final_goal(3, in_tower((block,15),(block,13)), true, true)
final_goal(3, in_tower((block,15),(block,14)), true, true)
final_goal(3, in_tower((block,15),(block,15)), true, true)
final_goal(3, in_tower((block,15),(block,16)), false, true)
final_goal(3, in_tower((block,15),(block,17)), false, true)
final_goal(3, in_tower((block,15),(block,18)), false, true)
final_goal(3, in_tower((block,15),(block,2)), false, true)
final_goal(3, in_tower((block,15),(block,3)), false, true)
final_goal(3, in_tower((block,15),(block,4)), false, true)
final_goal(3, in_tower((block,15),(block,5)), false, true)
final_goal(3, in_tower((block,15),(block,6)), false, true)
final_goal(3, in_tower((block,15),(block,7)), false, true)
final_goal(3, in_tower((block,15),(block,8)), false, true)
final_goal(3, in_tower((block,15),(block,9)), false, true)
final_goal(3, in_tower((block,16),(block,1)), false, true)
final_goal(3, in_tower((block,16),(block,10)), false, true)
final_goal(3, in_tower((block,16),(block,11)), false, true)
final_goal(3, in_tower((block,16),(block,12)), false, true)
final_goal(3, in_tower((block,16),(block,13)), false, true)
final_goal(3, in_tower((block,16),(block,14)), false, true)
final_goal(3, in_tower((block,16),(block,15)), false, true)
final_goal(3, in_tower((block,16),(block,16)), false, true)
final_goal(3, in_tower((block,16),(block,17)), false, true)
final_goal(3, in_tower((block,16),(block,18)), false, true)
final_goal(3, in_tower((block,16),(block,2)), false, true)
final_goal(3, in_tower((block,16),(block,3)), false, true)
final_goal(3, in_tower((block,16),(block,4)), false, true)
final_goal(3, in_tower((block,16),(block,5)), false, true)
final_goal(3, in_tower((block,16),(block,6)), false, true)
final_goal(3, in_tower((block,16),(block,7)), false, true)
final_goal(3, in_tower((block,16),(block,8)), false, true)
final_goal(3, in_tower((block,16),(block,9)), false, true)
final_goal(3, in_tower((block,17),(block,1)), false, true)
final_goal(3, in_tower((block,17),(block,10)), false, true)
final_goal(3, in_tower((block,17),(block,11)), false, true)
final_goal(3, in_tower((block,17),(block,12)), false, true)
final_goal(3, in_tower((block,17),(block,13)), false, true)
final_goal(3, in_tower((block,17),(block,14)), false, true)
final_goal(3, in_tower((block,17),(block,15)), false, true)
final_goal(3, in_tower((block,17),(block,16)), false, true)
final_goal(3, in_tower((block,17),(block,17)), false, true)
final_goal(3, in_tower((block,17),(block,18)), false, true)
final_goal(3, in_tower((block,17),(block,2)), false, true)
final_goal(3, in_tower((block,17),(block,3)), false, true)
final_goal(3, in_tower((block,17),(block,4)), false, true)
final_goal(3, in_tower((block,17),(block,5)), false, true)
final_goal(3, in_tower((block,17),(block,6)), false, true)
final_goal(3, in_tower((block,17),(block,7)), false, true)
final_goal(3, in_tower((block,17),(block,8)), false, true)
final_goal(3, in_tower((block,17),(block,9)), false, true)
final_goal(3, in_tower((block,18),(block,1)), false, true)
final_goal(3, in_tower((block,18),(block,10)), false, true)
final_goal(3, in_tower((block,18),(block,11)), false, true)
final_goal(3, in_tower((block,18),(block,12)), false, true)
final_goal(3, in_tower((block,18),(block,13)), false, true)
final_goal(3, in_tower((block,18),(block,14)), false, true)
final_goal(3, in_tower((block,18),(block,15)), false, true)
final_goal(3, in_tower((block,18),(block,16)), true, true)
final_goal(3, in_tower((block,18),(block,17)), true, true)
final_goal(3, in_tower((block,18),(block,18)), true, true)
final_goal(3, in_tower((block,18),(block,2)), false, true)
final_goal(3, in_tower((block,18),(block,3)), false, true)
final_goal(3, in_tower((block,18),(block,4)), false, true)
final_goal(3, in_tower((block,18),(block,5)), false, true)
final_goal(3, in_tower((block,18),(block,6)), false, true)
final_goal(3, in_tower((block,18),(block,7)), false, true)
final_goal(3, in_tower((block,18),(block,8)), false, true)
final_goal(3, in_tower((block,18),(block,9)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,10)), false, true)
final_goal(3, in_tower((block,2),(block,11)), false, true)
final_goal(3, in_tower((block,2),(block,12)), false, true)
final_goal(3, in_tower((block,2),(block,13)), false, true)
final_goal(3, in_tower((block,2),(block,14)), false, true)
final_goal(3, in_tower((block,2),(block,15)), false, true)
final_goal(3, in_tower((block,2),(block,16)), false, true)
final_goal(3, in_tower((block,2),(block,17)), false, true)
final_goal(3, in_tower((block,2),(block,18)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,7)), false, true)
final_goal(3, in_tower((block,2),(block,8)), false, true)
final_goal(3, in_tower((block,2),(block,9)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,10)), false, true)
final_goal(3, in_tower((block,3),(block,11)), false, true)
final_goal(3, in_tower((block,3),(block,12)), false, true)
final_goal(3, in_tower((block,3),(block,13)), false, true)
final_goal(3, in_tower((block,3),(block,14)), false, true)
final_goal(3, in_tower((block,3),(block,15)), false, true)
final_goal(3, in_tower((block,3),(block,16)), false, true)
final_goal(3, in_tower((block,3),(block,17)), false, true)
final_goal(3, in_tower((block,3),(block,18)), false, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,7)), false, true)
final_goal(3, in_tower((block,3),(block,8)), false, true)
final_goal(3, in_tower((block,3),(block,9)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,10)), false, true)
final_goal(3, in_tower((block,4),(block,11)), false, true)
final_goal(3, in_tower((block,4),(block,12)), false, true)
final_goal(3, in_tower((block,4),(block,13)), false, true)
final_goal(3, in_tower((block,4),(block,14)), false, true)
final_goal(3, in_tower((block,4),(block,15)), false, true)
final_goal(3, in_tower((block,4),(block,16)), false, true)
final_goal(3, in_tower((block,4),(block,17)), false, true)
final_goal(3, in_tower((block,4),(block,18)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,7)), false, true)
final_goal(3, in_tower((block,4),(block,8)), false, true)
final_goal(3, in_tower((block,4),(block,9)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,10)), false, true)
final_goal(3, in_tower((block,5),(block,11)), false, true)
final_goal(3, in_tower((block,5),(block,12)), false, true)
final_goal(3, in_tower((block,5),(block,13)), false, true)
final_goal(3, in_tower((block,5),(block,14)), false, true)
final_goal(3, in_tower((block,5),(block,15)), false, true)
final_goal(3, in_tower((block,5),(block,16)), false, true)
final_goal(3, in_tower((block,5),(block,17)), false, true)
final_goal(3, in_tower((block,5),(block,18)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,7)), false, true)
final_goal(3, in_tower((block,5),(block,8)), false, true)
final_goal(3, in_tower((block,5),(block,9)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,10)), false, true)
final_goal(3, in_tower((block,6),(block,11)), false, true)
final_goal(3, in_tower((block,6),(block,12)), false, true)
final_goal(3, in_tower((block,6),(block,13)), false, true)
final_goal(3, in_tower((block,6),(block,14)), false, true)
final_goal(3, in_tower((block,6),(block,15)), false, true)
final_goal(3, in_tower((block,6),(block,16)), false, true)
final_goal(3, in_tower((block,6),(block,17)), false, true)
final_goal(3, in_tower((block,6),(block,18)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, in_tower((block,6),(block,7)), false, true)
final_goal(3, in_tower((block,6),(block,8)), false, true)
final_goal(3, in_tower((block,6),(block,9)), false, true)
final_goal(3, in_tower((block,7),(block,1)), false, true)
final_goal(3, in_tower((block,7),(block,10)), false, true)
final_goal(3, in_tower((block,7),(block,11)), false, true)
final_goal(3, in_tower((block,7),(block,12)), false, true)
final_goal(3, in_tower((block,7),(block,13)), false, true)
final_goal(3, in_tower((block,7),(block,14)), false, true)
final_goal(3, in_tower((block,7),(block,15)), false, true)
final_goal(3, in_tower((block,7),(block,16)), false, true)
final_goal(3, in_tower((block,7),(block,17)), false, true)
final_goal(3, in_tower((block,7),(block,18)), false, true)
final_goal(3, in_tower((block,7),(block,2)), false, true)
final_goal(3, in_tower((block,7),(block,3)), false, true)
final_goal(3, in_tower((block,7),(block,4)), false, true)
final_goal(3, in_tower((block,7),(block,5)), false, true)
final_goal(3, in_tower((block,7),(block,6)), false, true)
final_goal(3, in_tower((block,7),(block,7)), false, true)
final_goal(3, in_tower((block,7),(block,8)), false, true)
final_goal(3, in_tower((block,7),(block,9)), false, true)
final_goal(3, in_tower((block,8),(block,1)), false, true)
final_goal(3, in_tower((block,8),(block,10)), false, true)
final_goal(3, in_tower((block,8),(block,11)), false, true)
final_goal(3, in_tower((block,8),(block,12)), false, true)
final_goal(3, in_tower((block,8),(block,13)), false, true)
final_goal(3, in_tower((block,8),(block,14)), false, true)
final_goal(3, in_tower((block,8),(block,15)), false, true)
final_goal(3, in_tower((block,8),(block,16)), false, true)
final_goal(3, in_tower((block,8),(block,17)), false, true)
final_goal(3, in_tower((block,8),(block,18)), false, true)
final_goal(3, in_tower((block,8),(block,2)), false, true)
final_goal(3, in_tower((block,8),(block,3)), false, true)
final_goal(3, in_tower((block,8),(block,4)), false, true)
final_goal(3, in_tower((block,8),(block,5)), false, true)
final_goal(3, in_tower((block,8),(block,6)), false, true)
final_goal(3, in_tower((block,8),(block,7)), false, true)
final_goal(3, in_tower((block,8),(block,8)), false, true)
final_goal(3, in_tower((block,8),(block,9)), false, true)
final_goal(3, in_tower((block,9),(block,1)), false, true)
final_goal(3, in_tower((block,9),(block,10)), false, true)
final_goal(3, in_tower((block,9),(block,11)), false, true)
final_goal(3, in_tower((block,9),(block,12)), false, true)
final_goal(3, in_tower((block,9),(block,13)), false, true)
final_goal(3, in_tower((block,9),(block,14)), false, true)
final_goal(3, in_tower((block,9),(block,15)), false, true)
final_goal(3, in_tower((block,9),(block,16)), false, true)
final_goal(3, in_tower((block,9),(block,17)), false, true)
final_goal(3, in_tower((block,9),(block,18)), false, true)
final_goal(3, in_tower((block,9),(block,2)), false, true)
final_goal(3, in_tower((block,9),(block,3)), false, true)
final_goal(3, in_tower((block,9),(block,4)), false, true)
final_goal(3, in_tower((block,9),(block,5)), false, true)
final_goal(3, in_tower((block,9),(block,6)), false, true)
final_goal(3, in_tower((block,9),(block,7)), true, true)
final_goal(3, in_tower((block,9),(block,8)), true, true)
final_goal(3, in_tower((block,9),(block,9)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,10)), (block,11), true)
final_goal(3, on((block,11)), (block,12), true)
final_goal(3, on((block,12)), puzzle_room_2_table, true)
final_goal(3, on((block,13)), (block,14), true)
final_goal(3, on((block,14)), (block,15), true)
final_goal(3, on((block,15)), puzzle_room_2_table, true)
final_goal(3, on((block,16)), (block,17), true)
final_goal(3, on((block,17)), (block,18), true)
final_goal(3, on((block,18)), puzzle_room_2_table, true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_1_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_1_table, true)
final_goal(3, on((block,7)), (block,8), true)
final_goal(3, on((block,8)), (block,9), true)
final_goal(3, on((block,9)), puzzle_room_1_table, true)
final_goal(3, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(3, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(3, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,10)), true, false)
final_goal(3, in_tower((block,1),(block,11)), true, false)
final_goal(3, in_tower((block,1),(block,12)), true, false)
final_goal(3, in_tower((block,1),(block,13)), true, false)
final_goal(3, in_tower((block,1),(block,14)), true, false)
final_goal(3, in_tower((block,1),(block,15)), true, false)
final_goal(3, in_tower((block,1),(block,16)), true, false)
final_goal(3, in_tower((block,1),(block,17)), true, false)
final_goal(3, in_tower((block,1),(block,18)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,1),(block,7)), true, false)
final_goal(3, in_tower((block,1),(block,8)), true, false)
final_goal(3, in_tower((block,1),(block,9)), true, false)
final_goal(3, in_tower((block,10),(block,1)), true, false)
final_goal(3, in_tower((block,10),(block,10)), true, false)
final_goal(3, in_tower((block,10),(block,11)), true, false)
final_goal(3, in_tower((block,10),(block,12)), true, false)
final_goal(3, in_tower((block,10),(block,13)), true, false)
final_goal(3, in_tower((block,10),(block,14)), true, false)
final_goal(3, in_tower((block,10),(block,15)), true, false)
final_goal(3, in_tower((block,10),(block,16)), true, false)
final_goal(3, in_tower((block,10),(block,17)), true, false)
final_goal(3, in_tower((block,10),(block,18)), true, false)
final_goal(3, in_tower((block,10),(block,2)), true, false)
final_goal(3, in_tower((block,10),(block,3)), true, false)
final_goal(3, in_tower((block,10),(block,4)), true, false)
final_goal(3, in_tower((block,10),(block,5)), true, false)
final_goal(3, in_tower((block,10),(block,6)), true, false)
final_goal(3, in_tower((block,10),(block,7)), true, false)
final_goal(3, in_tower((block,10),(block,8)), true, false)
final_goal(3, in_tower((block,10),(block,9)), true, false)
final_goal(3, in_tower((block,11),(block,1)), true, false)
final_goal(3, in_tower((block,11),(block,10)), true, false)
final_goal(3, in_tower((block,11),(block,11)), true, false)
final_goal(3, in_tower((block,11),(block,12)), true, false)
final_goal(3, in_tower((block,11),(block,13)), true, false)
final_goal(3, in_tower((block,11),(block,14)), true, false)
final_goal(3, in_tower((block,11),(block,15)), true, false)
final_goal(3, in_tower((block,11),(block,16)), true, false)
final_goal(3, in_tower((block,11),(block,17)), true, false)
final_goal(3, in_tower((block,11),(block,18)), true, false)
final_goal(3, in_tower((block,11),(block,2)), true, false)
final_goal(3, in_tower((block,11),(block,3)), true, false)
final_goal(3, in_tower((block,11),(block,4)), true, false)
final_goal(3, in_tower((block,11),(block,5)), true, false)
final_goal(3, in_tower((block,11),(block,6)), true, false)
final_goal(3, in_tower((block,11),(block,7)), true, false)
final_goal(3, in_tower((block,11),(block,8)), true, false)
final_goal(3, in_tower((block,11),(block,9)), true, false)
final_goal(3, in_tower((block,12),(block,1)), true, false)
final_goal(3, in_tower((block,12),(block,10)), false, false)
final_goal(3, in_tower((block,12),(block,11)), false, false)
final_goal(3, in_tower((block,12),(block,12)), false, false)
final_goal(3, in_tower((block,12),(block,13)), true, false)
final_goal(3, in_tower((block,12),(block,14)), true, false)
final_goal(3, in_tower((block,12),(block,15)), true, false)
final_goal(3, in_tower((block,12),(block,16)), true, false)
final_goal(3, in_tower((block,12),(block,17)), true, false)
final_goal(3, in_tower((block,12),(block,18)), true, false)
final_goal(3, in_tower((block,12),(block,2)), true, false)
final_goal(3, in_tower((block,12),(block,3)), true, false)
final_goal(3, in_tower((block,12),(block,4)), true, false)
final_goal(3, in_tower((block,12),(block,5)), true, false)
final_goal(3, in_tower((block,12),(block,6)), true, false)
final_goal(3, in_tower((block,12),(block,7)), true, false)
final_goal(3, in_tower((block,12),(block,8)), true, false)
final_goal(3, in_tower((block,12),(block,9)), true, false)
final_goal(3, in_tower((block,13),(block,1)), true, false)
final_goal(3, in_tower((block,13),(block,10)), true, false)
final_goal(3, in_tower((block,13),(block,11)), true, false)
final_goal(3, in_tower((block,13),(block,12)), true, false)
final_goal(3, in_tower((block,13),(block,13)), true, false)
final_goal(3, in_tower((block,13),(block,14)), true, false)
final_goal(3, in_tower((block,13),(block,15)), true, false)
final_goal(3, in_tower((block,13),(block,16)), true, false)
final_goal(3, in_tower((block,13),(block,17)), true, false)
final_goal(3, in_tower((block,13),(block,18)), true, false)
final_goal(3, in_tower((block,13),(block,2)), true, false)
final_goal(3, in_tower((block,13),(block,3)), true, false)
final_goal(3, in_tower((block,13),(block,4)), true, false)
final_goal(3, in_tower((block,13),(block,5)), true, false)
final_goal(3, in_tower((block,13),(block,6)), true, false)
final_goal(3, in_tower((block,13),(block,7)), true, false)
final_goal(3, in_tower((block,13),(block,8)), true, false)
final_goal(3, in_tower((block,13),(block,9)), true, false)
final_goal(3, in_tower((block,14),(block,1)), true, false)
final_goal(3, in_tower((block,14),(block,10)), true, false)
final_goal(3, in_tower((block,14),(block,11)), true, false)
final_goal(3, in_tower((block,14),(block,12)), true, false)
final_goal(3, in_tower((block,14),(block,13)), true, false)
final_goal(3, in_tower((block,14),(block,14)), true, false)
final_goal(3, in_tower((block,14),(block,15)), true, false)
final_goal(3, in_tower((block,14),(block,16)), true, false)
final_goal(3, in_tower((block,14),(block,17)), true, false)
final_goal(3, in_tower((block,14),(block,18)), true, false)
final_goal(3, in_tower((block,14),(block,2)), true, false)
final_goal(3, in_tower((block,14),(block,3)), true, false)
final_goal(3, in_tower((block,14),(block,4)), true, false)
final_goal(3, in_tower((block,14),(block,5)), true, false)
final_goal(3, in_tower((block,14),(block,6)), true, false)
final_goal(3, in_tower((block,14),(block,7)), true, false)
final_goal(3, in_tower((block,14),(block,8)), true, false)
final_goal(3, in_tower((block,14),(block,9)), true, false)
final_goal(3, in_tower((block,15),(block,1)), true, false)
final_goal(3, in_tower((block,15),(block,10)), true, false)
final_goal(3, in_tower((block,15),(block,11)), true, false)
final_goal(3, in_tower((block,15),(block,12)), true, false)
final_goal(3, in_tower((block,15),(block,13)), false, false)
final_goal(3, in_tower((block,15),(block,14)), false, false)
final_goal(3, in_tower((block,15),(block,15)), false, false)
final_goal(3, in_tower((block,15),(block,16)), true, false)
final_goal(3, in_tower((block,15),(block,17)), true, false)
final_goal(3, in_tower((block,15),(block,18)), true, false)
final_goal(3, in_tower((block,15),(block,2)), true, false)
final_goal(3, in_tower((block,15),(block,3)), true, false)
final_goal(3, in_tower((block,15),(block,4)), true, false)
final_goal(3, in_tower((block,15),(block,5)), true, false)
final_goal(3, in_tower((block,15),(block,6)), true, false)
final_goal(3, in_tower((block,15),(block,7)), true, false)
final_goal(3, in_tower((block,15),(block,8)), true, false)
final_goal(3, in_tower((block,15),(block,9)), true, false)
final_goal(3, in_tower((block,16),(block,1)), true, false)
final_goal(3, in_tower((block,16),(block,10)), true, false)
final_goal(3, in_tower((block,16),(block,11)), true, false)
final_goal(3, in_tower((block,16),(block,12)), true, false)
final_goal(3, in_tower((block,16),(block,13)), true, false)
final_goal(3, in_tower((block,16),(block,14)), true, false)
final_goal(3, in_tower((block,16),(block,15)), true, false)
final_goal(3, in_tower((block,16),(block,16)), true, false)
final_goal(3, in_tower((block,16),(block,17)), true, false)
final_goal(3, in_tower((block,16),(block,18)), true, false)
final_goal(3, in_tower((block,16),(block,2)), true, false)
final_goal(3, in_tower((block,16),(block,3)), true, false)
final_goal(3, in_tower((block,16),(block,4)), true, false)
final_goal(3, in_tower((block,16),(block,5)), true, false)
final_goal(3, in_tower((block,16),(block,6)), true, false)
final_goal(3, in_tower((block,16),(block,7)), true, false)
final_goal(3, in_tower((block,16),(block,8)), true, false)
final_goal(3, in_tower((block,16),(block,9)), true, false)
final_goal(3, in_tower((block,17),(block,1)), true, false)
final_goal(3, in_tower((block,17),(block,10)), true, false)
final_goal(3, in_tower((block,17),(block,11)), true, false)
final_goal(3, in_tower((block,17),(block,12)), true, false)
final_goal(3, in_tower((block,17),(block,13)), true, false)
final_goal(3, in_tower((block,17),(block,14)), true, false)
final_goal(3, in_tower((block,17),(block,15)), true, false)
final_goal(3, in_tower((block,17),(block,16)), true, false)
final_goal(3, in_tower((block,17),(block,17)), true, false)
final_goal(3, in_tower((block,17),(block,18)), true, false)
final_goal(3, in_tower((block,17),(block,2)), true, false)
final_goal(3, in_tower((block,17),(block,3)), true, false)
final_goal(3, in_tower((block,17),(block,4)), true, false)
final_goal(3, in_tower((block,17),(block,5)), true, false)
final_goal(3, in_tower((block,17),(block,6)), true, false)
final_goal(3, in_tower((block,17),(block,7)), true, false)
final_goal(3, in_tower((block,17),(block,8)), true, false)
final_goal(3, in_tower((block,17),(block,9)), true, false)
final_goal(3, in_tower((block,18),(block,1)), true, false)
final_goal(3, in_tower((block,18),(block,10)), true, false)
final_goal(3, in_tower((block,18),(block,11)), true, false)
final_goal(3, in_tower((block,18),(block,12)), true, false)
final_goal(3, in_tower((block,18),(block,13)), true, false)
final_goal(3, in_tower((block,18),(block,14)), true, false)
final_goal(3, in_tower((block,18),(block,15)), true, false)
final_goal(3, in_tower((block,18),(block,16)), false, false)
final_goal(3, in_tower((block,18),(block,17)), false, false)
final_goal(3, in_tower((block,18),(block,18)), false, false)
final_goal(3, in_tower((block,18),(block,2)), true, false)
final_goal(3, in_tower((block,18),(block,3)), true, false)
final_goal(3, in_tower((block,18),(block,4)), true, false)
final_goal(3, in_tower((block,18),(block,5)), true, false)
final_goal(3, in_tower((block,18),(block,6)), true, false)
final_goal(3, in_tower((block,18),(block,7)), true, false)
final_goal(3, in_tower((block,18),(block,8)), true, false)
final_goal(3, in_tower((block,18),(block,9)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,10)), true, false)
final_goal(3, in_tower((block,2),(block,11)), true, false)
final_goal(3, in_tower((block,2),(block,12)), true, false)
final_goal(3, in_tower((block,2),(block,13)), true, false)
final_goal(3, in_tower((block,2),(block,14)), true, false)
final_goal(3, in_tower((block,2),(block,15)), true, false)
final_goal(3, in_tower((block,2),(block,16)), true, false)
final_goal(3, in_tower((block,2),(block,17)), true, false)
final_goal(3, in_tower((block,2),(block,18)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,7)), true, false)
final_goal(3, in_tower((block,2),(block,8)), true, false)
final_goal(3, in_tower((block,2),(block,9)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,10)), true, false)
final_goal(3, in_tower((block,3),(block,11)), true, false)
final_goal(3, in_tower((block,3),(block,12)), true, false)
final_goal(3, in_tower((block,3),(block,13)), true, false)
final_goal(3, in_tower((block,3),(block,14)), true, false)
final_goal(3, in_tower((block,3),(block,15)), true, false)
final_goal(3, in_tower((block,3),(block,16)), true, false)
final_goal(3, in_tower((block,3),(block,17)), true, false)
final_goal(3, in_tower((block,3),(block,18)), true, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,7)), true, false)
final_goal(3, in_tower((block,3),(block,8)), true, false)
final_goal(3, in_tower((block,3),(block,9)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,10)), true, false)
final_goal(3, in_tower((block,4),(block,11)), true, false)
final_goal(3, in_tower((block,4),(block,12)), true, false)
final_goal(3, in_tower((block,4),(block,13)), true, false)
final_goal(3, in_tower((block,4),(block,14)), true, false)
final_goal(3, in_tower((block,4),(block,15)), true, false)
final_goal(3, in_tower((block,4),(block,16)), true, false)
final_goal(3, in_tower((block,4),(block,17)), true, false)
final_goal(3, in_tower((block,4),(block,18)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,7)), true, false)
final_goal(3, in_tower((block,4),(block,8)), true, false)
final_goal(3, in_tower((block,4),(block,9)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,10)), true, false)
final_goal(3, in_tower((block,5),(block,11)), true, false)
final_goal(3, in_tower((block,5),(block,12)), true, false)
final_goal(3, in_tower((block,5),(block,13)), true, false)
final_goal(3, in_tower((block,5),(block,14)), true, false)
final_goal(3, in_tower((block,5),(block,15)), true, false)
final_goal(3, in_tower((block,5),(block,16)), true, false)
final_goal(3, in_tower((block,5),(block,17)), true, false)
final_goal(3, in_tower((block,5),(block,18)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,7)), true, false)
final_goal(3, in_tower((block,5),(block,8)), true, false)
final_goal(3, in_tower((block,5),(block,9)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,10)), true, false)
final_goal(3, in_tower((block,6),(block,11)), true, false)
final_goal(3, in_tower((block,6),(block,12)), true, false)
final_goal(3, in_tower((block,6),(block,13)), true, false)
final_goal(3, in_tower((block,6),(block,14)), true, false)
final_goal(3, in_tower((block,6),(block,15)), true, false)
final_goal(3, in_tower((block,6),(block,16)), true, false)
final_goal(3, in_tower((block,6),(block,17)), true, false)
final_goal(3, in_tower((block,6),(block,18)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, in_tower((block,6),(block,7)), true, false)
final_goal(3, in_tower((block,6),(block,8)), true, false)
final_goal(3, in_tower((block,6),(block,9)), true, false)
final_goal(3, in_tower((block,7),(block,1)), true, false)
final_goal(3, in_tower((block,7),(block,10)), true, false)
final_goal(3, in_tower((block,7),(block,11)), true, false)
final_goal(3, in_tower((block,7),(block,12)), true, false)
final_goal(3, in_tower((block,7),(block,13)), true, false)
final_goal(3, in_tower((block,7),(block,14)), true, false)
final_goal(3, in_tower((block,7),(block,15)), true, false)
final_goal(3, in_tower((block,7),(block,16)), true, false)
final_goal(3, in_tower((block,7),(block,17)), true, false)
final_goal(3, in_tower((block,7),(block,18)), true, false)
final_goal(3, in_tower((block,7),(block,2)), true, false)
final_goal(3, in_tower((block,7),(block,3)), true, false)
final_goal(3, in_tower((block,7),(block,4)), true, false)
final_goal(3, in_tower((block,7),(block,5)), true, false)
final_goal(3, in_tower((block,7),(block,6)), true, false)
final_goal(3, in_tower((block,7),(block,7)), true, false)
final_goal(3, in_tower((block,7),(block,8)), true, false)
final_goal(3, in_tower((block,7),(block,9)), true, false)
final_goal(3, in_tower((block,8),(block,1)), true, false)
final_goal(3, in_tower((block,8),(block,10)), true, false)
final_goal(3, in_tower((block,8),(block,11)), true, false)
final_goal(3, in_tower((block,8),(block,12)), true, false)
final_goal(3, in_tower((block,8),(block,13)), true, false)
final_goal(3, in_tower((block,8),(block,14)), true, false)
final_goal(3, in_tower((block,8),(block,15)), true, false)
final_goal(3, in_tower((block,8),(block,16)), true, false)
final_goal(3, in_tower((block,8),(block,17)), true, false)
final_goal(3, in_tower((block,8),(block,18)), true, false)
final_goal(3, in_tower((block,8),(block,2)), true, false)
final_goal(3, in_tower((block,8),(block,3)), true, false)
final_goal(3, in_tower((block,8),(block,4)), true, false)
final_goal(3, in_tower((block,8),(block,5)), true, false)
final_goal(3, in_tower((block,8),(block,6)), true, false)
final_goal(3, in_tower((block,8),(block,7)), true, false)
final_goal(3, in_tower((block,8),(block,8)), true, false)
final_goal(3, in_tower((block,8),(block,9)), true, false)
final_goal(3, in_tower((block,9),(block,1)), true, false)
final_goal(3, in_tower((block,9),(block,10)), true, false)
final_goal(3, in_tower((block,9),(block,11)), true, false)
final_goal(3, in_tower((block,9),(block,12)), true, false)
final_goal(3, in_tower((block,9),(block,13)), true, false)
final_goal(3, in_tower((block,9),(block,14)), true, false)
final_goal(3, in_tower((block,9),(block,15)), true, false)
final_goal(3, in_tower((block,9),(block,16)), true, false)
final_goal(3, in_tower((block,9),(block,17)), true, false)
final_goal(3, in_tower((block,9),(block,18)), true, false)
final_goal(3, in_tower((block,9),(block,2)), true, false)
final_goal(3, in_tower((block,9),(block,3)), true, false)
final_goal(3, in_tower((block,9),(block,4)), true, false)
final_goal(3, in_tower((block,9),(block,5)), true, false)
final_goal(3, in_tower((block,9),(block,6)), true, false)
final_goal(3, in_tower((block,9),(block,7)), false, false)
final_goal(3, in_tower((block,9),(block,8)), false, false)
final_goal(3, in_tower((block,9),(block,9)), false, false)
final_goal(3, on((block,1)), (block,10), false)
final_goal(3, on((block,1)), (block,11), false)
final_goal(3, on((block,1)), (block,12), false)
final_goal(3, on((block,1)), (block,13), false)
final_goal(3, on((block,1)), (block,14), false)
final_goal(3, on((block,1)), (block,15), false)
final_goal(3, on((block,1)), (block,16), false)
final_goal(3, on((block,1)), (block,17), false)
final_goal(3, on((block,1)), (block,18), false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), (block,7), false)
final_goal(3, on((block,1)), (block,8), false)
final_goal(3, on((block,1)), (block,9), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_1_table, false)
final_goal(3, on((block,1)), puzzle_room_2_table, false)
final_goal(3, on((block,10)), (block,1), false)
final_goal(3, on((block,10)), (block,12), false)
final_goal(3, on((block,10)), (block,13), false)
final_goal(3, on((block,10)), (block,14), false)
final_goal(3, on((block,10)), (block,15), false)
final_goal(3, on((block,10)), (block,16), false)
final_goal(3, on((block,10)), (block,17), false)
final_goal(3, on((block,10)), (block,18), false)
final_goal(3, on((block,10)), (block,2), false)
final_goal(3, on((block,10)), (block,3), false)
final_goal(3, on((block,10)), (block,4), false)
final_goal(3, on((block,10)), (block,5), false)
final_goal(3, on((block,10)), (block,6), false)
final_goal(3, on((block,10)), (block,7), false)
final_goal(3, on((block,10)), (block,8), false)
final_goal(3, on((block,10)), (block,9), false)
final_goal(3, on((block,10)), nothing, false)
final_goal(3, on((block,10)), puzzle_room_1_table, false)
final_goal(3, on((block,10)), puzzle_room_2_table, false)
final_goal(3, on((block,11)), (block,1), false)
final_goal(3, on((block,11)), (block,10), false)
final_goal(3, on((block,11)), (block,13), false)
final_goal(3, on((block,11)), (block,14), false)
final_goal(3, on((block,11)), (block,15), false)
final_goal(3, on((block,11)), (block,16), false)
final_goal(3, on((block,11)), (block,17), false)
final_goal(3, on((block,11)), (block,18), false)
final_goal(3, on((block,11)), (block,2), false)
final_goal(3, on((block,11)), (block,3), false)
final_goal(3, on((block,11)), (block,4), false)
final_goal(3, on((block,11)), (block,5), false)
final_goal(3, on((block,11)), (block,6), false)
final_goal(3, on((block,11)), (block,7), false)
final_goal(3, on((block,11)), (block,8), false)
final_goal(3, on((block,11)), (block,9), false)
final_goal(3, on((block,11)), nothing, false)
final_goal(3, on((block,11)), puzzle_room_1_table, false)
final_goal(3, on((block,11)), puzzle_room_2_table, false)
final_goal(3, on((block,12)), (block,1), false)
final_goal(3, on((block,12)), (block,10), false)
final_goal(3, on((block,12)), (block,11), false)
final_goal(3, on((block,12)), (block,13), false)
final_goal(3, on((block,12)), (block,14), false)
final_goal(3, on((block,12)), (block,15), false)
final_goal(3, on((block,12)), (block,16), false)
final_goal(3, on((block,12)), (block,17), false)
final_goal(3, on((block,12)), (block,18), false)
final_goal(3, on((block,12)), (block,2), false)
final_goal(3, on((block,12)), (block,3), false)
final_goal(3, on((block,12)), (block,4), false)
final_goal(3, on((block,12)), (block,5), false)
final_goal(3, on((block,12)), (block,6), false)
final_goal(3, on((block,12)), (block,7), false)
final_goal(3, on((block,12)), (block,8), false)
final_goal(3, on((block,12)), (block,9), false)
final_goal(3, on((block,12)), nothing, false)
final_goal(3, on((block,12)), puzzle_room_1_table, false)
final_goal(3, on((block,13)), (block,1), false)
final_goal(3, on((block,13)), (block,10), false)
final_goal(3, on((block,13)), (block,11), false)
final_goal(3, on((block,13)), (block,12), false)
final_goal(3, on((block,13)), (block,15), false)
final_goal(3, on((block,13)), (block,16), false)
final_goal(3, on((block,13)), (block,17), false)
final_goal(3, on((block,13)), (block,18), false)
final_goal(3, on((block,13)), (block,2), false)
final_goal(3, on((block,13)), (block,3), false)
final_goal(3, on((block,13)), (block,4), false)
final_goal(3, on((block,13)), (block,5), false)
final_goal(3, on((block,13)), (block,6), false)
final_goal(3, on((block,13)), (block,7), false)
final_goal(3, on((block,13)), (block,8), false)
final_goal(3, on((block,13)), (block,9), false)
final_goal(3, on((block,13)), nothing, false)
final_goal(3, on((block,13)), puzzle_room_1_table, false)
final_goal(3, on((block,13)), puzzle_room_2_table, false)
final_goal(3, on((block,14)), (block,1), false)
final_goal(3, on((block,14)), (block,10), false)
final_goal(3, on((block,14)), (block,11), false)
final_goal(3, on((block,14)), (block,12), false)
final_goal(3, on((block,14)), (block,13), false)
final_goal(3, on((block,14)), (block,16), false)
final_goal(3, on((block,14)), (block,17), false)
final_goal(3, on((block,14)), (block,18), false)
final_goal(3, on((block,14)), (block,2), false)
final_goal(3, on((block,14)), (block,3), false)
final_goal(3, on((block,14)), (block,4), false)
final_goal(3, on((block,14)), (block,5), false)
final_goal(3, on((block,14)), (block,6), false)
final_goal(3, on((block,14)), (block,7), false)
final_goal(3, on((block,14)), (block,8), false)
final_goal(3, on((block,14)), (block,9), false)
final_goal(3, on((block,14)), nothing, false)
final_goal(3, on((block,14)), puzzle_room_1_table, false)
final_goal(3, on((block,14)), puzzle_room_2_table, false)
final_goal(3, on((block,15)), (block,1), false)
final_goal(3, on((block,15)), (block,10), false)
final_goal(3, on((block,15)), (block,11), false)
final_goal(3, on((block,15)), (block,12), false)
final_goal(3, on((block,15)), (block,13), false)
final_goal(3, on((block,15)), (block,14), false)
final_goal(3, on((block,15)), (block,16), false)
final_goal(3, on((block,15)), (block,17), false)
final_goal(3, on((block,15)), (block,18), false)
final_goal(3, on((block,15)), (block,2), false)
final_goal(3, on((block,15)), (block,3), false)
final_goal(3, on((block,15)), (block,4), false)
final_goal(3, on((block,15)), (block,5), false)
final_goal(3, on((block,15)), (block,6), false)
final_goal(3, on((block,15)), (block,7), false)
final_goal(3, on((block,15)), (block,8), false)
final_goal(3, on((block,15)), (block,9), false)
final_goal(3, on((block,15)), nothing, false)
final_goal(3, on((block,15)), puzzle_room_1_table, false)
final_goal(3, on((block,16)), (block,1), false)
final_goal(3, on((block,16)), (block,10), false)
final_goal(3, on((block,16)), (block,11), false)
final_goal(3, on((block,16)), (block,12), false)
final_goal(3, on((block,16)), (block,13), false)
final_goal(3, on((block,16)), (block,14), false)
final_goal(3, on((block,16)), (block,15), false)
final_goal(3, on((block,16)), (block,18), false)
final_goal(3, on((block,16)), (block,2), false)
final_goal(3, on((block,16)), (block,3), false)
final_goal(3, on((block,16)), (block,4), false)
final_goal(3, on((block,16)), (block,5), false)
final_goal(3, on((block,16)), (block,6), false)
final_goal(3, on((block,16)), (block,7), false)
final_goal(3, on((block,16)), (block,8), false)
final_goal(3, on((block,16)), (block,9), false)
final_goal(3, on((block,16)), nothing, false)
final_goal(3, on((block,16)), puzzle_room_1_table, false)
final_goal(3, on((block,16)), puzzle_room_2_table, false)
final_goal(3, on((block,17)), (block,1), false)
final_goal(3, on((block,17)), (block,10), false)
final_goal(3, on((block,17)), (block,11), false)
final_goal(3, on((block,17)), (block,12), false)
final_goal(3, on((block,17)), (block,13), false)
final_goal(3, on((block,17)), (block,14), false)
final_goal(3, on((block,17)), (block,15), false)
final_goal(3, on((block,17)), (block,16), false)
final_goal(3, on((block,17)), (block,2), false)
final_goal(3, on((block,17)), (block,3), false)
final_goal(3, on((block,17)), (block,4), false)
final_goal(3, on((block,17)), (block,5), false)
final_goal(3, on((block,17)), (block,6), false)
final_goal(3, on((block,17)), (block,7), false)
final_goal(3, on((block,17)), (block,8), false)
final_goal(3, on((block,17)), (block,9), false)
final_goal(3, on((block,17)), nothing, false)
final_goal(3, on((block,17)), puzzle_room_1_table, false)
final_goal(3, on((block,17)), puzzle_room_2_table, false)
final_goal(3, on((block,18)), (block,1), false)
final_goal(3, on((block,18)), (block,10), false)
final_goal(3, on((block,18)), (block,11), false)
final_goal(3, on((block,18)), (block,12), false)
final_goal(3, on((block,18)), (block,13), false)
final_goal(3, on((block,18)), (block,14), false)
final_goal(3, on((block,18)), (block,15), false)
final_goal(3, on((block,18)), (block,16), false)
final_goal(3, on((block,18)), (block,17), false)
final_goal(3, on((block,18)), (block,2), false)
final_goal(3, on((block,18)), (block,3), false)
final_goal(3, on((block,18)), (block,4), false)
final_goal(3, on((block,18)), (block,5), false)
final_goal(3, on((block,18)), (block,6), false)
final_goal(3, on((block,18)), (block,7), false)
final_goal(3, on((block,18)), (block,8), false)
final_goal(3, on((block,18)), (block,9), false)
final_goal(3, on((block,18)), nothing, false)
final_goal(3, on((block,18)), puzzle_room_1_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,10), false)
final_goal(3, on((block,2)), (block,11), false)
final_goal(3, on((block,2)), (block,12), false)
final_goal(3, on((block,2)), (block,13), false)
final_goal(3, on((block,2)), (block,14), false)
final_goal(3, on((block,2)), (block,15), false)
final_goal(3, on((block,2)), (block,16), false)
final_goal(3, on((block,2)), (block,17), false)
final_goal(3, on((block,2)), (block,18), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), (block,7), false)
final_goal(3, on((block,2)), (block,8), false)
final_goal(3, on((block,2)), (block,9), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_1_table, false)
final_goal(3, on((block,2)), puzzle_room_2_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,10), false)
final_goal(3, on((block,3)), (block,11), false)
final_goal(3, on((block,3)), (block,12), false)
final_goal(3, on((block,3)), (block,13), false)
final_goal(3, on((block,3)), (block,14), false)
final_goal(3, on((block,3)), (block,15), false)
final_goal(3, on((block,3)), (block,16), false)
final_goal(3, on((block,3)), (block,17), false)
final_goal(3, on((block,3)), (block,18), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), (block,7), false)
final_goal(3, on((block,3)), (block,8), false)
final_goal(3, on((block,3)), (block,9), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,3)), puzzle_room_2_table, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,10), false)
final_goal(3, on((block,4)), (block,11), false)
final_goal(3, on((block,4)), (block,12), false)
final_goal(3, on((block,4)), (block,13), false)
final_goal(3, on((block,4)), (block,14), false)
final_goal(3, on((block,4)), (block,15), false)
final_goal(3, on((block,4)), (block,16), false)
final_goal(3, on((block,4)), (block,17), false)
final_goal(3, on((block,4)), (block,18), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), (block,7), false)
final_goal(3, on((block,4)), (block,8), false)
final_goal(3, on((block,4)), (block,9), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_1_table, false)
final_goal(3, on((block,4)), puzzle_room_2_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,10), false)
final_goal(3, on((block,5)), (block,11), false)
final_goal(3, on((block,5)), (block,12), false)
final_goal(3, on((block,5)), (block,13), false)
final_goal(3, on((block,5)), (block,14), false)
final_goal(3, on((block,5)), (block,15), false)
final_goal(3, on((block,5)), (block,16), false)
final_goal(3, on((block,5)), (block,17), false)
final_goal(3, on((block,5)), (block,18), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), (block,7), false)
final_goal(3, on((block,5)), (block,8), false)
final_goal(3, on((block,5)), (block,9), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_1_table, false)
final_goal(3, on((block,5)), puzzle_room_2_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,10), false)
final_goal(3, on((block,6)), (block,11), false)
final_goal(3, on((block,6)), (block,12), false)
final_goal(3, on((block,6)), (block,13), false)
final_goal(3, on((block,6)), (block,14), false)
final_goal(3, on((block,6)), (block,15), false)
final_goal(3, on((block,6)), (block,16), false)
final_goal(3, on((block,6)), (block,17), false)
final_goal(3, on((block,6)), (block,18), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), (block,7), false)
final_goal(3, on((block,6)), (block,8), false)
final_goal(3, on((block,6)), (block,9), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, on((block,6)), puzzle_room_2_table, false)
final_goal(3, on((block,7)), (block,1), false)
final_goal(3, on((block,7)), (block,10), false)
final_goal(3, on((block,7)), (block,11), false)
final_goal(3, on((block,7)), (block,12), false)
final_goal(3, on((block,7)), (block,13), false)
final_goal(3, on((block,7)), (block,14), false)
final_goal(3, on((block,7)), (block,15), false)
final_goal(3, on((block,7)), (block,16), false)
final_goal(3, on((block,7)), (block,17), false)
final_goal(3, on((block,7)), (block,18), false)
final_goal(3, on((block,7)), (block,2), false)
final_goal(3, on((block,7)), (block,3), false)
final_goal(3, on((block,7)), (block,4), false)
final_goal(3, on((block,7)), (block,5), false)
final_goal(3, on((block,7)), (block,6), false)
final_goal(3, on((block,7)), (block,9), false)
final_goal(3, on((block,7)), nothing, false)
final_goal(3, on((block,7)), puzzle_room_1_table, false)
final_goal(3, on((block,7)), puzzle_room_2_table, false)
final_goal(3, on((block,8)), (block,1), false)
final_goal(3, on((block,8)), (block,10), false)
final_goal(3, on((block,8)), (block,11), false)
final_goal(3, on((block,8)), (block,12), false)
final_goal(3, on((block,8)), (block,13), false)
final_goal(3, on((block,8)), (block,14), false)
final_goal(3, on((block,8)), (block,15), false)
final_goal(3, on((block,8)), (block,16), false)
final_goal(3, on((block,8)), (block,17), false)
final_goal(3, on((block,8)), (block,18), false)
final_goal(3, on((block,8)), (block,2), false)
final_goal(3, on((block,8)), (block,3), false)
final_goal(3, on((block,8)), (block,4), false)
final_goal(3, on((block,8)), (block,5), false)
final_goal(3, on((block,8)), (block,6), false)
final_goal(3, on((block,8)), (block,7), false)
final_goal(3, on((block,8)), nothing, false)
final_goal(3, on((block,8)), puzzle_room_1_table, false)
final_goal(3, on((block,8)), puzzle_room_2_table, false)
final_goal(3, on((block,9)), (block,1), false)
final_goal(3, on((block,9)), (block,10), false)
final_goal(3, on((block,9)), (block,11), false)
final_goal(3, on((block,9)), (block,12), false)
final_goal(3, on((block,9)), (block,13), false)
final_goal(3, on((block,9)), (block,14), false)
final_goal(3, on((block,9)), (block,15), false)
final_goal(3, on((block,9)), (block,16), false)
final_goal(3, on((block,9)), (block,17), false)
final_goal(3, on((block,9)), (block,18), false)
final_goal(3, on((block,9)), (block,2), false)
final_goal(3, on((block,9)), (block,3), false)
final_goal(3, on((block,9)), (block,4), false)
final_goal(3, on((block,9)), (block,5), false)
final_goal(3, on((block,9)), (block,6), false)
final_goal(3, on((block,9)), (block,7), false)
final_goal(3, on((block,9)), (block,8), false)
final_goal(3, on((block,9)), nothing, false)
final_goal(3, on((block,9)), puzzle_room_2_table, false)
final_goal(3, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(2, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,10)), false, true)
final_goal(2, in_tower((block,1),(block,11)), false, true)
final_goal(2, in_tower((block,1),(block,12)), false, true)
final_goal(2, in_tower((block,1),(block,13)), false, true)
final_goal(2, in_tower((block,1),(block,14)), false, true)
final_goal(2, in_tower((block,1),(block,15)), false, true)
final_goal(2, in_tower((block,1),(block,16)), false, true)
final_goal(2, in_tower((block,1),(block,17)), false, true)
final_goal(2, in_tower((block,1),(block,18)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,7)), false, true)
final_goal(2, in_tower((block,1),(block,8)), false, true)
final_goal(2, in_tower((block,1),(block,9)), false, true)
final_goal(2, in_tower((block,10),(block,1)), false, true)
final_goal(2, in_tower((block,10),(block,10)), false, true)
final_goal(2, in_tower((block,10),(block,11)), false, true)
final_goal(2, in_tower((block,10),(block,12)), false, true)
final_goal(2, in_tower((block,10),(block,13)), false, true)
final_goal(2, in_tower((block,10),(block,14)), false, true)
final_goal(2, in_tower((block,10),(block,15)), false, true)
final_goal(2, in_tower((block,10),(block,16)), false, true)
final_goal(2, in_tower((block,10),(block,17)), false, true)
final_goal(2, in_tower((block,10),(block,18)), false, true)
final_goal(2, in_tower((block,10),(block,2)), false, true)
final_goal(2, in_tower((block,10),(block,3)), false, true)
final_goal(2, in_tower((block,10),(block,4)), false, true)
final_goal(2, in_tower((block,10),(block,5)), false, true)
final_goal(2, in_tower((block,10),(block,6)), false, true)
final_goal(2, in_tower((block,10),(block,7)), false, true)
final_goal(2, in_tower((block,10),(block,8)), false, true)
final_goal(2, in_tower((block,10),(block,9)), false, true)
final_goal(2, in_tower((block,11),(block,1)), false, true)
final_goal(2, in_tower((block,11),(block,10)), false, true)
final_goal(2, in_tower((block,11),(block,11)), false, true)
final_goal(2, in_tower((block,11),(block,12)), false, true)
final_goal(2, in_tower((block,11),(block,13)), false, true)
final_goal(2, in_tower((block,11),(block,14)), false, true)
final_goal(2, in_tower((block,11),(block,15)), false, true)
final_goal(2, in_tower((block,11),(block,16)), false, true)
final_goal(2, in_tower((block,11),(block,17)), false, true)
final_goal(2, in_tower((block,11),(block,18)), false, true)
final_goal(2, in_tower((block,11),(block,2)), false, true)
final_goal(2, in_tower((block,11),(block,3)), false, true)
final_goal(2, in_tower((block,11),(block,4)), false, true)
final_goal(2, in_tower((block,11),(block,5)), false, true)
final_goal(2, in_tower((block,11),(block,6)), false, true)
final_goal(2, in_tower((block,11),(block,7)), false, true)
final_goal(2, in_tower((block,11),(block,8)), false, true)
final_goal(2, in_tower((block,11),(block,9)), false, true)
final_goal(2, in_tower((block,12),(block,1)), false, true)
final_goal(2, in_tower((block,12),(block,10)), true, true)
final_goal(2, in_tower((block,12),(block,11)), true, true)
final_goal(2, in_tower((block,12),(block,12)), true, true)
final_goal(2, in_tower((block,12),(block,13)), false, true)
final_goal(2, in_tower((block,12),(block,14)), false, true)
final_goal(2, in_tower((block,12),(block,15)), false, true)
final_goal(2, in_tower((block,12),(block,16)), false, true)
final_goal(2, in_tower((block,12),(block,17)), false, true)
final_goal(2, in_tower((block,12),(block,18)), false, true)
final_goal(2, in_tower((block,12),(block,2)), false, true)
final_goal(2, in_tower((block,12),(block,3)), false, true)
final_goal(2, in_tower((block,12),(block,4)), false, true)
final_goal(2, in_tower((block,12),(block,5)), false, true)
final_goal(2, in_tower((block,12),(block,6)), false, true)
final_goal(2, in_tower((block,12),(block,7)), false, true)
final_goal(2, in_tower((block,12),(block,8)), false, true)
final_goal(2, in_tower((block,12),(block,9)), false, true)
final_goal(2, in_tower((block,13),(block,1)), false, true)
final_goal(2, in_tower((block,13),(block,10)), false, true)
final_goal(2, in_tower((block,13),(block,11)), false, true)
final_goal(2, in_tower((block,13),(block,12)), false, true)
final_goal(2, in_tower((block,13),(block,13)), false, true)
final_goal(2, in_tower((block,13),(block,14)), false, true)
final_goal(2, in_tower((block,13),(block,15)), false, true)
final_goal(2, in_tower((block,13),(block,16)), false, true)
final_goal(2, in_tower((block,13),(block,17)), false, true)
final_goal(2, in_tower((block,13),(block,18)), false, true)
final_goal(2, in_tower((block,13),(block,2)), false, true)
final_goal(2, in_tower((block,13),(block,3)), false, true)
final_goal(2, in_tower((block,13),(block,4)), false, true)
final_goal(2, in_tower((block,13),(block,5)), false, true)
final_goal(2, in_tower((block,13),(block,6)), false, true)
final_goal(2, in_tower((block,13),(block,7)), false, true)
final_goal(2, in_tower((block,13),(block,8)), false, true)
final_goal(2, in_tower((block,13),(block,9)), false, true)
final_goal(2, in_tower((block,14),(block,1)), false, true)
final_goal(2, in_tower((block,14),(block,10)), false, true)
final_goal(2, in_tower((block,14),(block,11)), false, true)
final_goal(2, in_tower((block,14),(block,12)), false, true)
final_goal(2, in_tower((block,14),(block,13)), false, true)
final_goal(2, in_tower((block,14),(block,14)), false, true)
final_goal(2, in_tower((block,14),(block,15)), false, true)
final_goal(2, in_tower((block,14),(block,16)), false, true)
final_goal(2, in_tower((block,14),(block,17)), false, true)
final_goal(2, in_tower((block,14),(block,18)), false, true)
final_goal(2, in_tower((block,14),(block,2)), false, true)
final_goal(2, in_tower((block,14),(block,3)), false, true)
final_goal(2, in_tower((block,14),(block,4)), false, true)
final_goal(2, in_tower((block,14),(block,5)), false, true)
final_goal(2, in_tower((block,14),(block,6)), false, true)
final_goal(2, in_tower((block,14),(block,7)), false, true)
final_goal(2, in_tower((block,14),(block,8)), false, true)
final_goal(2, in_tower((block,14),(block,9)), false, true)
final_goal(2, in_tower((block,15),(block,1)), false, true)
final_goal(2, in_tower((block,15),(block,10)), false, true)
final_goal(2, in_tower((block,15),(block,11)), false, true)
final_goal(2, in_tower((block,15),(block,12)), false, true)
final_goal(2, in_tower((block,15),(block,13)), true, true)
final_goal(2, in_tower((block,15),(block,14)), true, true)
final_goal(2, in_tower((block,15),(block,15)), true, true)
final_goal(2, in_tower((block,15),(block,16)), false, true)
final_goal(2, in_tower((block,15),(block,17)), false, true)
final_goal(2, in_tower((block,15),(block,18)), false, true)
final_goal(2, in_tower((block,15),(block,2)), false, true)
final_goal(2, in_tower((block,15),(block,3)), false, true)
final_goal(2, in_tower((block,15),(block,4)), false, true)
final_goal(2, in_tower((block,15),(block,5)), false, true)
final_goal(2, in_tower((block,15),(block,6)), false, true)
final_goal(2, in_tower((block,15),(block,7)), false, true)
final_goal(2, in_tower((block,15),(block,8)), false, true)
final_goal(2, in_tower((block,15),(block,9)), false, true)
final_goal(2, in_tower((block,16),(block,1)), false, true)
final_goal(2, in_tower((block,16),(block,10)), false, true)
final_goal(2, in_tower((block,16),(block,11)), false, true)
final_goal(2, in_tower((block,16),(block,12)), false, true)
final_goal(2, in_tower((block,16),(block,13)), false, true)
final_goal(2, in_tower((block,16),(block,14)), false, true)
final_goal(2, in_tower((block,16),(block,15)), false, true)
final_goal(2, in_tower((block,16),(block,16)), false, true)
final_goal(2, in_tower((block,16),(block,17)), false, true)
final_goal(2, in_tower((block,16),(block,18)), false, true)
final_goal(2, in_tower((block,16),(block,2)), false, true)
final_goal(2, in_tower((block,16),(block,3)), false, true)
final_goal(2, in_tower((block,16),(block,4)), false, true)
final_goal(2, in_tower((block,16),(block,5)), false, true)
final_goal(2, in_tower((block,16),(block,6)), false, true)
final_goal(2, in_tower((block,16),(block,7)), false, true)
final_goal(2, in_tower((block,16),(block,8)), false, true)
final_goal(2, in_tower((block,16),(block,9)), false, true)
final_goal(2, in_tower((block,17),(block,1)), false, true)
final_goal(2, in_tower((block,17),(block,10)), false, true)
final_goal(2, in_tower((block,17),(block,11)), false, true)
final_goal(2, in_tower((block,17),(block,12)), false, true)
final_goal(2, in_tower((block,17),(block,13)), false, true)
final_goal(2, in_tower((block,17),(block,14)), false, true)
final_goal(2, in_tower((block,17),(block,15)), false, true)
final_goal(2, in_tower((block,17),(block,16)), false, true)
final_goal(2, in_tower((block,17),(block,17)), false, true)
final_goal(2, in_tower((block,17),(block,18)), false, true)
final_goal(2, in_tower((block,17),(block,2)), false, true)
final_goal(2, in_tower((block,17),(block,3)), false, true)
final_goal(2, in_tower((block,17),(block,4)), false, true)
final_goal(2, in_tower((block,17),(block,5)), false, true)
final_goal(2, in_tower((block,17),(block,6)), false, true)
final_goal(2, in_tower((block,17),(block,7)), false, true)
final_goal(2, in_tower((block,17),(block,8)), false, true)
final_goal(2, in_tower((block,17),(block,9)), false, true)
final_goal(2, in_tower((block,18),(block,1)), false, true)
final_goal(2, in_tower((block,18),(block,10)), false, true)
final_goal(2, in_tower((block,18),(block,11)), false, true)
final_goal(2, in_tower((block,18),(block,12)), false, true)
final_goal(2, in_tower((block,18),(block,13)), false, true)
final_goal(2, in_tower((block,18),(block,14)), false, true)
final_goal(2, in_tower((block,18),(block,15)), false, true)
final_goal(2, in_tower((block,18),(block,16)), true, true)
final_goal(2, in_tower((block,18),(block,17)), true, true)
final_goal(2, in_tower((block,18),(block,18)), true, true)
final_goal(2, in_tower((block,18),(block,2)), false, true)
final_goal(2, in_tower((block,18),(block,3)), false, true)
final_goal(2, in_tower((block,18),(block,4)), false, true)
final_goal(2, in_tower((block,18),(block,5)), false, true)
final_goal(2, in_tower((block,18),(block,6)), false, true)
final_goal(2, in_tower((block,18),(block,7)), false, true)
final_goal(2, in_tower((block,18),(block,8)), false, true)
final_goal(2, in_tower((block,18),(block,9)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,10)), false, true)
final_goal(2, in_tower((block,2),(block,11)), false, true)
final_goal(2, in_tower((block,2),(block,12)), false, true)
final_goal(2, in_tower((block,2),(block,13)), false, true)
final_goal(2, in_tower((block,2),(block,14)), false, true)
final_goal(2, in_tower((block,2),(block,15)), false, true)
final_goal(2, in_tower((block,2),(block,16)), false, true)
final_goal(2, in_tower((block,2),(block,17)), false, true)
final_goal(2, in_tower((block,2),(block,18)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,7)), false, true)
final_goal(2, in_tower((block,2),(block,8)), false, true)
final_goal(2, in_tower((block,2),(block,9)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,10)), false, true)
final_goal(2, in_tower((block,3),(block,11)), false, true)
final_goal(2, in_tower((block,3),(block,12)), false, true)
final_goal(2, in_tower((block,3),(block,13)), false, true)
final_goal(2, in_tower((block,3),(block,14)), false, true)
final_goal(2, in_tower((block,3),(block,15)), false, true)
final_goal(2, in_tower((block,3),(block,16)), false, true)
final_goal(2, in_tower((block,3),(block,17)), false, true)
final_goal(2, in_tower((block,3),(block,18)), false, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,7)), false, true)
final_goal(2, in_tower((block,3),(block,8)), false, true)
final_goal(2, in_tower((block,3),(block,9)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,10)), false, true)
final_goal(2, in_tower((block,4),(block,11)), false, true)
final_goal(2, in_tower((block,4),(block,12)), false, true)
final_goal(2, in_tower((block,4),(block,13)), false, true)
final_goal(2, in_tower((block,4),(block,14)), false, true)
final_goal(2, in_tower((block,4),(block,15)), false, true)
final_goal(2, in_tower((block,4),(block,16)), false, true)
final_goal(2, in_tower((block,4),(block,17)), false, true)
final_goal(2, in_tower((block,4),(block,18)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,7)), false, true)
final_goal(2, in_tower((block,4),(block,8)), false, true)
final_goal(2, in_tower((block,4),(block,9)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,10)), false, true)
final_goal(2, in_tower((block,5),(block,11)), false, true)
final_goal(2, in_tower((block,5),(block,12)), false, true)
final_goal(2, in_tower((block,5),(block,13)), false, true)
final_goal(2, in_tower((block,5),(block,14)), false, true)
final_goal(2, in_tower((block,5),(block,15)), false, true)
final_goal(2, in_tower((block,5),(block,16)), false, true)
final_goal(2, in_tower((block,5),(block,17)), false, true)
final_goal(2, in_tower((block,5),(block,18)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,7)), false, true)
final_goal(2, in_tower((block,5),(block,8)), false, true)
final_goal(2, in_tower((block,5),(block,9)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,10)), false, true)
final_goal(2, in_tower((block,6),(block,11)), false, true)
final_goal(2, in_tower((block,6),(block,12)), false, true)
final_goal(2, in_tower((block,6),(block,13)), false, true)
final_goal(2, in_tower((block,6),(block,14)), false, true)
final_goal(2, in_tower((block,6),(block,15)), false, true)
final_goal(2, in_tower((block,6),(block,16)), false, true)
final_goal(2, in_tower((block,6),(block,17)), false, true)
final_goal(2, in_tower((block,6),(block,18)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, in_tower((block,6),(block,7)), false, true)
final_goal(2, in_tower((block,6),(block,8)), false, true)
final_goal(2, in_tower((block,6),(block,9)), false, true)
final_goal(2, in_tower((block,7),(block,1)), false, true)
final_goal(2, in_tower((block,7),(block,10)), false, true)
final_goal(2, in_tower((block,7),(block,11)), false, true)
final_goal(2, in_tower((block,7),(block,12)), false, true)
final_goal(2, in_tower((block,7),(block,13)), false, true)
final_goal(2, in_tower((block,7),(block,14)), false, true)
final_goal(2, in_tower((block,7),(block,15)), false, true)
final_goal(2, in_tower((block,7),(block,16)), false, true)
final_goal(2, in_tower((block,7),(block,17)), false, true)
final_goal(2, in_tower((block,7),(block,18)), false, true)
final_goal(2, in_tower((block,7),(block,2)), false, true)
final_goal(2, in_tower((block,7),(block,3)), false, true)
final_goal(2, in_tower((block,7),(block,4)), false, true)
final_goal(2, in_tower((block,7),(block,5)), false, true)
final_goal(2, in_tower((block,7),(block,6)), false, true)
final_goal(2, in_tower((block,7),(block,7)), false, true)
final_goal(2, in_tower((block,7),(block,8)), false, true)
final_goal(2, in_tower((block,7),(block,9)), false, true)
final_goal(2, in_tower((block,8),(block,1)), false, true)
final_goal(2, in_tower((block,8),(block,10)), false, true)
final_goal(2, in_tower((block,8),(block,11)), false, true)
final_goal(2, in_tower((block,8),(block,12)), false, true)
final_goal(2, in_tower((block,8),(block,13)), false, true)
final_goal(2, in_tower((block,8),(block,14)), false, true)
final_goal(2, in_tower((block,8),(block,15)), false, true)
final_goal(2, in_tower((block,8),(block,16)), false, true)
final_goal(2, in_tower((block,8),(block,17)), false, true)
final_goal(2, in_tower((block,8),(block,18)), false, true)
final_goal(2, in_tower((block,8),(block,2)), false, true)
final_goal(2, in_tower((block,8),(block,3)), false, true)
final_goal(2, in_tower((block,8),(block,4)), false, true)
final_goal(2, in_tower((block,8),(block,5)), false, true)
final_goal(2, in_tower((block,8),(block,6)), false, true)
final_goal(2, in_tower((block,8),(block,7)), false, true)
final_goal(2, in_tower((block,8),(block,8)), false, true)
final_goal(2, in_tower((block,8),(block,9)), false, true)
final_goal(2, in_tower((block,9),(block,1)), false, true)
final_goal(2, in_tower((block,9),(block,10)), false, true)
final_goal(2, in_tower((block,9),(block,11)), false, true)
final_goal(2, in_tower((block,9),(block,12)), false, true)
final_goal(2, in_tower((block,9),(block,13)), false, true)
final_goal(2, in_tower((block,9),(block,14)), false, true)
final_goal(2, in_tower((block,9),(block,15)), false, true)
final_goal(2, in_tower((block,9),(block,16)), false, true)
final_goal(2, in_tower((block,9),(block,17)), false, true)
final_goal(2, in_tower((block,9),(block,18)), false, true)
final_goal(2, in_tower((block,9),(block,2)), false, true)
final_goal(2, in_tower((block,9),(block,3)), false, true)
final_goal(2, in_tower((block,9),(block,4)), false, true)
final_goal(2, in_tower((block,9),(block,5)), false, true)
final_goal(2, in_tower((block,9),(block,6)), false, true)
final_goal(2, in_tower((block,9),(block,7)), true, true)
final_goal(2, in_tower((block,9),(block,8)), true, true)
final_goal(2, in_tower((block,9),(block,9)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,10)), (block,11), true)
final_goal(2, on((block,11)), (block,12), true)
final_goal(2, on((block,12)), puzzle_room_2_table_left, true)
final_goal(2, on((block,13)), (block,14), true)
final_goal(2, on((block,14)), (block,15), true)
final_goal(2, on((block,15)), puzzle_room_2_table_right, true)
final_goal(2, on((block,16)), (block,17), true)
final_goal(2, on((block,17)), (block,18), true)
final_goal(2, on((block,18)), puzzle_room_2_table_middle, true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_1_table_left, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_1_table_right, true)
final_goal(2, on((block,7)), (block,8), true)
final_goal(2, on((block,8)), (block,9), true)
final_goal(2, on((block,9)), puzzle_room_1_table_middle, true)
final_goal(2, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(2, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,10)), true, false)
final_goal(2, in_tower((block,1),(block,11)), true, false)
final_goal(2, in_tower((block,1),(block,12)), true, false)
final_goal(2, in_tower((block,1),(block,13)), true, false)
final_goal(2, in_tower((block,1),(block,14)), true, false)
final_goal(2, in_tower((block,1),(block,15)), true, false)
final_goal(2, in_tower((block,1),(block,16)), true, false)
final_goal(2, in_tower((block,1),(block,17)), true, false)
final_goal(2, in_tower((block,1),(block,18)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,1),(block,7)), true, false)
final_goal(2, in_tower((block,1),(block,8)), true, false)
final_goal(2, in_tower((block,1),(block,9)), true, false)
final_goal(2, in_tower((block,10),(block,1)), true, false)
final_goal(2, in_tower((block,10),(block,10)), true, false)
final_goal(2, in_tower((block,10),(block,11)), true, false)
final_goal(2, in_tower((block,10),(block,12)), true, false)
final_goal(2, in_tower((block,10),(block,13)), true, false)
final_goal(2, in_tower((block,10),(block,14)), true, false)
final_goal(2, in_tower((block,10),(block,15)), true, false)
final_goal(2, in_tower((block,10),(block,16)), true, false)
final_goal(2, in_tower((block,10),(block,17)), true, false)
final_goal(2, in_tower((block,10),(block,18)), true, false)
final_goal(2, in_tower((block,10),(block,2)), true, false)
final_goal(2, in_tower((block,10),(block,3)), true, false)
final_goal(2, in_tower((block,10),(block,4)), true, false)
final_goal(2, in_tower((block,10),(block,5)), true, false)
final_goal(2, in_tower((block,10),(block,6)), true, false)
final_goal(2, in_tower((block,10),(block,7)), true, false)
final_goal(2, in_tower((block,10),(block,8)), true, false)
final_goal(2, in_tower((block,10),(block,9)), true, false)
final_goal(2, in_tower((block,11),(block,1)), true, false)
final_goal(2, in_tower((block,11),(block,10)), true, false)
final_goal(2, in_tower((block,11),(block,11)), true, false)
final_goal(2, in_tower((block,11),(block,12)), true, false)
final_goal(2, in_tower((block,11),(block,13)), true, false)
final_goal(2, in_tower((block,11),(block,14)), true, false)
final_goal(2, in_tower((block,11),(block,15)), true, false)
final_goal(2, in_tower((block,11),(block,16)), true, false)
final_goal(2, in_tower((block,11),(block,17)), true, false)
final_goal(2, in_tower((block,11),(block,18)), true, false)
final_goal(2, in_tower((block,11),(block,2)), true, false)
final_goal(2, in_tower((block,11),(block,3)), true, false)
final_goal(2, in_tower((block,11),(block,4)), true, false)
final_goal(2, in_tower((block,11),(block,5)), true, false)
final_goal(2, in_tower((block,11),(block,6)), true, false)
final_goal(2, in_tower((block,11),(block,7)), true, false)
final_goal(2, in_tower((block,11),(block,8)), true, false)
final_goal(2, in_tower((block,11),(block,9)), true, false)
final_goal(2, in_tower((block,12),(block,1)), true, false)
final_goal(2, in_tower((block,12),(block,10)), false, false)
final_goal(2, in_tower((block,12),(block,11)), false, false)
final_goal(2, in_tower((block,12),(block,12)), false, false)
final_goal(2, in_tower((block,12),(block,13)), true, false)
final_goal(2, in_tower((block,12),(block,14)), true, false)
final_goal(2, in_tower((block,12),(block,15)), true, false)
final_goal(2, in_tower((block,12),(block,16)), true, false)
final_goal(2, in_tower((block,12),(block,17)), true, false)
final_goal(2, in_tower((block,12),(block,18)), true, false)
final_goal(2, in_tower((block,12),(block,2)), true, false)
final_goal(2, in_tower((block,12),(block,3)), true, false)
final_goal(2, in_tower((block,12),(block,4)), true, false)
final_goal(2, in_tower((block,12),(block,5)), true, false)
final_goal(2, in_tower((block,12),(block,6)), true, false)
final_goal(2, in_tower((block,12),(block,7)), true, false)
final_goal(2, in_tower((block,12),(block,8)), true, false)
final_goal(2, in_tower((block,12),(block,9)), true, false)
final_goal(2, in_tower((block,13),(block,1)), true, false)
final_goal(2, in_tower((block,13),(block,10)), true, false)
final_goal(2, in_tower((block,13),(block,11)), true, false)
final_goal(2, in_tower((block,13),(block,12)), true, false)
final_goal(2, in_tower((block,13),(block,13)), true, false)
final_goal(2, in_tower((block,13),(block,14)), true, false)
final_goal(2, in_tower((block,13),(block,15)), true, false)
final_goal(2, in_tower((block,13),(block,16)), true, false)
final_goal(2, in_tower((block,13),(block,17)), true, false)
final_goal(2, in_tower((block,13),(block,18)), true, false)
final_goal(2, in_tower((block,13),(block,2)), true, false)
final_goal(2, in_tower((block,13),(block,3)), true, false)
final_goal(2, in_tower((block,13),(block,4)), true, false)
final_goal(2, in_tower((block,13),(block,5)), true, false)
final_goal(2, in_tower((block,13),(block,6)), true, false)
final_goal(2, in_tower((block,13),(block,7)), true, false)
final_goal(2, in_tower((block,13),(block,8)), true, false)
final_goal(2, in_tower((block,13),(block,9)), true, false)
final_goal(2, in_tower((block,14),(block,1)), true, false)
final_goal(2, in_tower((block,14),(block,10)), true, false)
final_goal(2, in_tower((block,14),(block,11)), true, false)
final_goal(2, in_tower((block,14),(block,12)), true, false)
final_goal(2, in_tower((block,14),(block,13)), true, false)
final_goal(2, in_tower((block,14),(block,14)), true, false)
final_goal(2, in_tower((block,14),(block,15)), true, false)
final_goal(2, in_tower((block,14),(block,16)), true, false)
final_goal(2, in_tower((block,14),(block,17)), true, false)
final_goal(2, in_tower((block,14),(block,18)), true, false)
final_goal(2, in_tower((block,14),(block,2)), true, false)
final_goal(2, in_tower((block,14),(block,3)), true, false)
final_goal(2, in_tower((block,14),(block,4)), true, false)
final_goal(2, in_tower((block,14),(block,5)), true, false)
final_goal(2, in_tower((block,14),(block,6)), true, false)
final_goal(2, in_tower((block,14),(block,7)), true, false)
final_goal(2, in_tower((block,14),(block,8)), true, false)
final_goal(2, in_tower((block,14),(block,9)), true, false)
final_goal(2, in_tower((block,15),(block,1)), true, false)
final_goal(2, in_tower((block,15),(block,10)), true, false)
final_goal(2, in_tower((block,15),(block,11)), true, false)
final_goal(2, in_tower((block,15),(block,12)), true, false)
final_goal(2, in_tower((block,15),(block,13)), false, false)
final_goal(2, in_tower((block,15),(block,14)), false, false)
final_goal(2, in_tower((block,15),(block,15)), false, false)
final_goal(2, in_tower((block,15),(block,16)), true, false)
final_goal(2, in_tower((block,15),(block,17)), true, false)
final_goal(2, in_tower((block,15),(block,18)), true, false)
final_goal(2, in_tower((block,15),(block,2)), true, false)
final_goal(2, in_tower((block,15),(block,3)), true, false)
final_goal(2, in_tower((block,15),(block,4)), true, false)
final_goal(2, in_tower((block,15),(block,5)), true, false)
final_goal(2, in_tower((block,15),(block,6)), true, false)
final_goal(2, in_tower((block,15),(block,7)), true, false)
final_goal(2, in_tower((block,15),(block,8)), true, false)
final_goal(2, in_tower((block,15),(block,9)), true, false)
final_goal(2, in_tower((block,16),(block,1)), true, false)
final_goal(2, in_tower((block,16),(block,10)), true, false)
final_goal(2, in_tower((block,16),(block,11)), true, false)
final_goal(2, in_tower((block,16),(block,12)), true, false)
final_goal(2, in_tower((block,16),(block,13)), true, false)
final_goal(2, in_tower((block,16),(block,14)), true, false)
final_goal(2, in_tower((block,16),(block,15)), true, false)
final_goal(2, in_tower((block,16),(block,16)), true, false)
final_goal(2, in_tower((block,16),(block,17)), true, false)
final_goal(2, in_tower((block,16),(block,18)), true, false)
final_goal(2, in_tower((block,16),(block,2)), true, false)
final_goal(2, in_tower((block,16),(block,3)), true, false)
final_goal(2, in_tower((block,16),(block,4)), true, false)
final_goal(2, in_tower((block,16),(block,5)), true, false)
final_goal(2, in_tower((block,16),(block,6)), true, false)
final_goal(2, in_tower((block,16),(block,7)), true, false)
final_goal(2, in_tower((block,16),(block,8)), true, false)
final_goal(2, in_tower((block,16),(block,9)), true, false)
final_goal(2, in_tower((block,17),(block,1)), true, false)
final_goal(2, in_tower((block,17),(block,10)), true, false)
final_goal(2, in_tower((block,17),(block,11)), true, false)
final_goal(2, in_tower((block,17),(block,12)), true, false)
final_goal(2, in_tower((block,17),(block,13)), true, false)
final_goal(2, in_tower((block,17),(block,14)), true, false)
final_goal(2, in_tower((block,17),(block,15)), true, false)
final_goal(2, in_tower((block,17),(block,16)), true, false)
final_goal(2, in_tower((block,17),(block,17)), true, false)
final_goal(2, in_tower((block,17),(block,18)), true, false)
final_goal(2, in_tower((block,17),(block,2)), true, false)
final_goal(2, in_tower((block,17),(block,3)), true, false)
final_goal(2, in_tower((block,17),(block,4)), true, false)
final_goal(2, in_tower((block,17),(block,5)), true, false)
final_goal(2, in_tower((block,17),(block,6)), true, false)
final_goal(2, in_tower((block,17),(block,7)), true, false)
final_goal(2, in_tower((block,17),(block,8)), true, false)
final_goal(2, in_tower((block,17),(block,9)), true, false)
final_goal(2, in_tower((block,18),(block,1)), true, false)
final_goal(2, in_tower((block,18),(block,10)), true, false)
final_goal(2, in_tower((block,18),(block,11)), true, false)
final_goal(2, in_tower((block,18),(block,12)), true, false)
final_goal(2, in_tower((block,18),(block,13)), true, false)
final_goal(2, in_tower((block,18),(block,14)), true, false)
final_goal(2, in_tower((block,18),(block,15)), true, false)
final_goal(2, in_tower((block,18),(block,16)), false, false)
final_goal(2, in_tower((block,18),(block,17)), false, false)
final_goal(2, in_tower((block,18),(block,18)), false, false)
final_goal(2, in_tower((block,18),(block,2)), true, false)
final_goal(2, in_tower((block,18),(block,3)), true, false)
final_goal(2, in_tower((block,18),(block,4)), true, false)
final_goal(2, in_tower((block,18),(block,5)), true, false)
final_goal(2, in_tower((block,18),(block,6)), true, false)
final_goal(2, in_tower((block,18),(block,7)), true, false)
final_goal(2, in_tower((block,18),(block,8)), true, false)
final_goal(2, in_tower((block,18),(block,9)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,10)), true, false)
final_goal(2, in_tower((block,2),(block,11)), true, false)
final_goal(2, in_tower((block,2),(block,12)), true, false)
final_goal(2, in_tower((block,2),(block,13)), true, false)
final_goal(2, in_tower((block,2),(block,14)), true, false)
final_goal(2, in_tower((block,2),(block,15)), true, false)
final_goal(2, in_tower((block,2),(block,16)), true, false)
final_goal(2, in_tower((block,2),(block,17)), true, false)
final_goal(2, in_tower((block,2),(block,18)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,7)), true, false)
final_goal(2, in_tower((block,2),(block,8)), true, false)
final_goal(2, in_tower((block,2),(block,9)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,10)), true, false)
final_goal(2, in_tower((block,3),(block,11)), true, false)
final_goal(2, in_tower((block,3),(block,12)), true, false)
final_goal(2, in_tower((block,3),(block,13)), true, false)
final_goal(2, in_tower((block,3),(block,14)), true, false)
final_goal(2, in_tower((block,3),(block,15)), true, false)
final_goal(2, in_tower((block,3),(block,16)), true, false)
final_goal(2, in_tower((block,3),(block,17)), true, false)
final_goal(2, in_tower((block,3),(block,18)), true, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,7)), true, false)
final_goal(2, in_tower((block,3),(block,8)), true, false)
final_goal(2, in_tower((block,3),(block,9)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,10)), true, false)
final_goal(2, in_tower((block,4),(block,11)), true, false)
final_goal(2, in_tower((block,4),(block,12)), true, false)
final_goal(2, in_tower((block,4),(block,13)), true, false)
final_goal(2, in_tower((block,4),(block,14)), true, false)
final_goal(2, in_tower((block,4),(block,15)), true, false)
final_goal(2, in_tower((block,4),(block,16)), true, false)
final_goal(2, in_tower((block,4),(block,17)), true, false)
final_goal(2, in_tower((block,4),(block,18)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,7)), true, false)
final_goal(2, in_tower((block,4),(block,8)), true, false)
final_goal(2, in_tower((block,4),(block,9)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,10)), true, false)
final_goal(2, in_tower((block,5),(block,11)), true, false)
final_goal(2, in_tower((block,5),(block,12)), true, false)
final_goal(2, in_tower((block,5),(block,13)), true, false)
final_goal(2, in_tower((block,5),(block,14)), true, false)
final_goal(2, in_tower((block,5),(block,15)), true, false)
final_goal(2, in_tower((block,5),(block,16)), true, false)
final_goal(2, in_tower((block,5),(block,17)), true, false)
final_goal(2, in_tower((block,5),(block,18)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,7)), true, false)
final_goal(2, in_tower((block,5),(block,8)), true, false)
final_goal(2, in_tower((block,5),(block,9)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,10)), true, false)
final_goal(2, in_tower((block,6),(block,11)), true, false)
final_goal(2, in_tower((block,6),(block,12)), true, false)
final_goal(2, in_tower((block,6),(block,13)), true, false)
final_goal(2, in_tower((block,6),(block,14)), true, false)
final_goal(2, in_tower((block,6),(block,15)), true, false)
final_goal(2, in_tower((block,6),(block,16)), true, false)
final_goal(2, in_tower((block,6),(block,17)), true, false)
final_goal(2, in_tower((block,6),(block,18)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,7)), true, false)
final_goal(2, in_tower((block,6),(block,8)), true, false)
final_goal(2, in_tower((block,6),(block,9)), true, false)
final_goal(2, in_tower((block,7),(block,1)), true, false)
final_goal(2, in_tower((block,7),(block,10)), true, false)
final_goal(2, in_tower((block,7),(block,11)), true, false)
final_goal(2, in_tower((block,7),(block,12)), true, false)
final_goal(2, in_tower((block,7),(block,13)), true, false)
final_goal(2, in_tower((block,7),(block,14)), true, false)
final_goal(2, in_tower((block,7),(block,15)), true, false)
final_goal(2, in_tower((block,7),(block,16)), true, false)
final_goal(2, in_tower((block,7),(block,17)), true, false)
final_goal(2, in_tower((block,7),(block,18)), true, false)
final_goal(2, in_tower((block,7),(block,2)), true, false)
final_goal(2, in_tower((block,7),(block,3)), true, false)
final_goal(2, in_tower((block,7),(block,4)), true, false)
final_goal(2, in_tower((block,7),(block,5)), true, false)
final_goal(2, in_tower((block,7),(block,6)), true, false)
final_goal(2, in_tower((block,7),(block,7)), true, false)
final_goal(2, in_tower((block,7),(block,8)), true, false)
final_goal(2, in_tower((block,7),(block,9)), true, false)
final_goal(2, in_tower((block,8),(block,1)), true, false)
final_goal(2, in_tower((block,8),(block,10)), true, false)
final_goal(2, in_tower((block,8),(block,11)), true, false)
final_goal(2, in_tower((block,8),(block,12)), true, false)
final_goal(2, in_tower((block,8),(block,13)), true, false)
final_goal(2, in_tower((block,8),(block,14)), true, false)
final_goal(2, in_tower((block,8),(block,15)), true, false)
final_goal(2, in_tower((block,8),(block,16)), true, false)
final_goal(2, in_tower((block,8),(block,17)), true, false)
final_goal(2, in_tower((block,8),(block,18)), true, false)
final_goal(2, in_tower((block,8),(block,2)), true, false)
final_goal(2, in_tower((block,8),(block,3)), true, false)
final_goal(2, in_tower((block,8),(block,4)), true, false)
final_goal(2, in_tower((block,8),(block,5)), true, false)
final_goal(2, in_tower((block,8),(block,6)), true, false)
final_goal(2, in_tower((block,8),(block,7)), true, false)
final_goal(2, in_tower((block,8),(block,8)), true, false)
final_goal(2, in_tower((block,8),(block,9)), true, false)
final_goal(2, in_tower((block,9),(block,1)), true, false)
final_goal(2, in_tower((block,9),(block,10)), true, false)
final_goal(2, in_tower((block,9),(block,11)), true, false)
final_goal(2, in_tower((block,9),(block,12)), true, false)
final_goal(2, in_tower((block,9),(block,13)), true, false)
final_goal(2, in_tower((block,9),(block,14)), true, false)
final_goal(2, in_tower((block,9),(block,15)), true, false)
final_goal(2, in_tower((block,9),(block,16)), true, false)
final_goal(2, in_tower((block,9),(block,17)), true, false)
final_goal(2, in_tower((block,9),(block,18)), true, false)
final_goal(2, in_tower((block,9),(block,2)), true, false)
final_goal(2, in_tower((block,9),(block,3)), true, false)
final_goal(2, in_tower((block,9),(block,4)), true, false)
final_goal(2, in_tower((block,9),(block,5)), true, false)
final_goal(2, in_tower((block,9),(block,6)), true, false)
final_goal(2, in_tower((block,9),(block,7)), false, false)
final_goal(2, in_tower((block,9),(block,8)), false, false)
final_goal(2, in_tower((block,9),(block,9)), false, false)
final_goal(2, on((block,1)), (block,10), false)
final_goal(2, on((block,1)), (block,11), false)
final_goal(2, on((block,1)), (block,12), false)
final_goal(2, on((block,1)), (block,13), false)
final_goal(2, on((block,1)), (block,14), false)
final_goal(2, on((block,1)), (block,15), false)
final_goal(2, on((block,1)), (block,16), false)
final_goal(2, on((block,1)), (block,17), false)
final_goal(2, on((block,1)), (block,18), false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), (block,7), false)
final_goal(2, on((block,1)), (block,8), false)
final_goal(2, on((block,1)), (block,9), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_1_table_left, false)
final_goal(2, on((block,1)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,1)), puzzle_room_1_table_right, false)
final_goal(2, on((block,1)), puzzle_room_2_table_left, false)
final_goal(2, on((block,1)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,1)), puzzle_room_2_table_right, false)
final_goal(2, on((block,10)), (block,1), false)
final_goal(2, on((block,10)), (block,12), false)
final_goal(2, on((block,10)), (block,13), false)
final_goal(2, on((block,10)), (block,14), false)
final_goal(2, on((block,10)), (block,15), false)
final_goal(2, on((block,10)), (block,16), false)
final_goal(2, on((block,10)), (block,17), false)
final_goal(2, on((block,10)), (block,18), false)
final_goal(2, on((block,10)), (block,2), false)
final_goal(2, on((block,10)), (block,3), false)
final_goal(2, on((block,10)), (block,4), false)
final_goal(2, on((block,10)), (block,5), false)
final_goal(2, on((block,10)), (block,6), false)
final_goal(2, on((block,10)), (block,7), false)
final_goal(2, on((block,10)), (block,8), false)
final_goal(2, on((block,10)), (block,9), false)
final_goal(2, on((block,10)), nothing, false)
final_goal(2, on((block,10)), puzzle_room_1_table_left, false)
final_goal(2, on((block,10)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,10)), puzzle_room_1_table_right, false)
final_goal(2, on((block,10)), puzzle_room_2_table_left, false)
final_goal(2, on((block,10)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,10)), puzzle_room_2_table_right, false)
final_goal(2, on((block,11)), (block,1), false)
final_goal(2, on((block,11)), (block,10), false)
final_goal(2, on((block,11)), (block,13), false)
final_goal(2, on((block,11)), (block,14), false)
final_goal(2, on((block,11)), (block,15), false)
final_goal(2, on((block,11)), (block,16), false)
final_goal(2, on((block,11)), (block,17), false)
final_goal(2, on((block,11)), (block,18), false)
final_goal(2, on((block,11)), (block,2), false)
final_goal(2, on((block,11)), (block,3), false)
final_goal(2, on((block,11)), (block,4), false)
final_goal(2, on((block,11)), (block,5), false)
final_goal(2, on((block,11)), (block,6), false)
final_goal(2, on((block,11)), (block,7), false)
final_goal(2, on((block,11)), (block,8), false)
final_goal(2, on((block,11)), (block,9), false)
final_goal(2, on((block,11)), nothing, false)
final_goal(2, on((block,11)), puzzle_room_1_table_left, false)
final_goal(2, on((block,11)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,11)), puzzle_room_1_table_right, false)
final_goal(2, on((block,11)), puzzle_room_2_table_left, false)
final_goal(2, on((block,11)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,11)), puzzle_room_2_table_right, false)
final_goal(2, on((block,12)), (block,1), false)
final_goal(2, on((block,12)), (block,10), false)
final_goal(2, on((block,12)), (block,11), false)
final_goal(2, on((block,12)), (block,13), false)
final_goal(2, on((block,12)), (block,14), false)
final_goal(2, on((block,12)), (block,15), false)
final_goal(2, on((block,12)), (block,16), false)
final_goal(2, on((block,12)), (block,17), false)
final_goal(2, on((block,12)), (block,18), false)
final_goal(2, on((block,12)), (block,2), false)
final_goal(2, on((block,12)), (block,3), false)
final_goal(2, on((block,12)), (block,4), false)
final_goal(2, on((block,12)), (block,5), false)
final_goal(2, on((block,12)), (block,6), false)
final_goal(2, on((block,12)), (block,7), false)
final_goal(2, on((block,12)), (block,8), false)
final_goal(2, on((block,12)), (block,9), false)
final_goal(2, on((block,12)), nothing, false)
final_goal(2, on((block,12)), puzzle_room_1_table_left, false)
final_goal(2, on((block,12)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,12)), puzzle_room_1_table_right, false)
final_goal(2, on((block,12)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,12)), puzzle_room_2_table_right, false)
final_goal(2, on((block,13)), (block,1), false)
final_goal(2, on((block,13)), (block,10), false)
final_goal(2, on((block,13)), (block,11), false)
final_goal(2, on((block,13)), (block,12), false)
final_goal(2, on((block,13)), (block,15), false)
final_goal(2, on((block,13)), (block,16), false)
final_goal(2, on((block,13)), (block,17), false)
final_goal(2, on((block,13)), (block,18), false)
final_goal(2, on((block,13)), (block,2), false)
final_goal(2, on((block,13)), (block,3), false)
final_goal(2, on((block,13)), (block,4), false)
final_goal(2, on((block,13)), (block,5), false)
final_goal(2, on((block,13)), (block,6), false)
final_goal(2, on((block,13)), (block,7), false)
final_goal(2, on((block,13)), (block,8), false)
final_goal(2, on((block,13)), (block,9), false)
final_goal(2, on((block,13)), nothing, false)
final_goal(2, on((block,13)), puzzle_room_1_table_left, false)
final_goal(2, on((block,13)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,13)), puzzle_room_1_table_right, false)
final_goal(2, on((block,13)), puzzle_room_2_table_left, false)
final_goal(2, on((block,13)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,13)), puzzle_room_2_table_right, false)
final_goal(2, on((block,14)), (block,1), false)
final_goal(2, on((block,14)), (block,10), false)
final_goal(2, on((block,14)), (block,11), false)
final_goal(2, on((block,14)), (block,12), false)
final_goal(2, on((block,14)), (block,13), false)
final_goal(2, on((block,14)), (block,16), false)
final_goal(2, on((block,14)), (block,17), false)
final_goal(2, on((block,14)), (block,18), false)
final_goal(2, on((block,14)), (block,2), false)
final_goal(2, on((block,14)), (block,3), false)
final_goal(2, on((block,14)), (block,4), false)
final_goal(2, on((block,14)), (block,5), false)
final_goal(2, on((block,14)), (block,6), false)
final_goal(2, on((block,14)), (block,7), false)
final_goal(2, on((block,14)), (block,8), false)
final_goal(2, on((block,14)), (block,9), false)
final_goal(2, on((block,14)), nothing, false)
final_goal(2, on((block,14)), puzzle_room_1_table_left, false)
final_goal(2, on((block,14)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,14)), puzzle_room_1_table_right, false)
final_goal(2, on((block,14)), puzzle_room_2_table_left, false)
final_goal(2, on((block,14)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,14)), puzzle_room_2_table_right, false)
final_goal(2, on((block,15)), (block,1), false)
final_goal(2, on((block,15)), (block,10), false)
final_goal(2, on((block,15)), (block,11), false)
final_goal(2, on((block,15)), (block,12), false)
final_goal(2, on((block,15)), (block,13), false)
final_goal(2, on((block,15)), (block,14), false)
final_goal(2, on((block,15)), (block,16), false)
final_goal(2, on((block,15)), (block,17), false)
final_goal(2, on((block,15)), (block,18), false)
final_goal(2, on((block,15)), (block,2), false)
final_goal(2, on((block,15)), (block,3), false)
final_goal(2, on((block,15)), (block,4), false)
final_goal(2, on((block,15)), (block,5), false)
final_goal(2, on((block,15)), (block,6), false)
final_goal(2, on((block,15)), (block,7), false)
final_goal(2, on((block,15)), (block,8), false)
final_goal(2, on((block,15)), (block,9), false)
final_goal(2, on((block,15)), nothing, false)
final_goal(2, on((block,15)), puzzle_room_1_table_left, false)
final_goal(2, on((block,15)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,15)), puzzle_room_1_table_right, false)
final_goal(2, on((block,15)), puzzle_room_2_table_left, false)
final_goal(2, on((block,15)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,16)), (block,1), false)
final_goal(2, on((block,16)), (block,10), false)
final_goal(2, on((block,16)), (block,11), false)
final_goal(2, on((block,16)), (block,12), false)
final_goal(2, on((block,16)), (block,13), false)
final_goal(2, on((block,16)), (block,14), false)
final_goal(2, on((block,16)), (block,15), false)
final_goal(2, on((block,16)), (block,18), false)
final_goal(2, on((block,16)), (block,2), false)
final_goal(2, on((block,16)), (block,3), false)
final_goal(2, on((block,16)), (block,4), false)
final_goal(2, on((block,16)), (block,5), false)
final_goal(2, on((block,16)), (block,6), false)
final_goal(2, on((block,16)), (block,7), false)
final_goal(2, on((block,16)), (block,8), false)
final_goal(2, on((block,16)), (block,9), false)
final_goal(2, on((block,16)), nothing, false)
final_goal(2, on((block,16)), puzzle_room_1_table_left, false)
final_goal(2, on((block,16)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,16)), puzzle_room_1_table_right, false)
final_goal(2, on((block,16)), puzzle_room_2_table_left, false)
final_goal(2, on((block,16)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,16)), puzzle_room_2_table_right, false)
final_goal(2, on((block,17)), (block,1), false)
final_goal(2, on((block,17)), (block,10), false)
final_goal(2, on((block,17)), (block,11), false)
final_goal(2, on((block,17)), (block,12), false)
final_goal(2, on((block,17)), (block,13), false)
final_goal(2, on((block,17)), (block,14), false)
final_goal(2, on((block,17)), (block,15), false)
final_goal(2, on((block,17)), (block,16), false)
final_goal(2, on((block,17)), (block,2), false)
final_goal(2, on((block,17)), (block,3), false)
final_goal(2, on((block,17)), (block,4), false)
final_goal(2, on((block,17)), (block,5), false)
final_goal(2, on((block,17)), (block,6), false)
final_goal(2, on((block,17)), (block,7), false)
final_goal(2, on((block,17)), (block,8), false)
final_goal(2, on((block,17)), (block,9), false)
final_goal(2, on((block,17)), nothing, false)
final_goal(2, on((block,17)), puzzle_room_1_table_left, false)
final_goal(2, on((block,17)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,17)), puzzle_room_1_table_right, false)
final_goal(2, on((block,17)), puzzle_room_2_table_left, false)
final_goal(2, on((block,17)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,17)), puzzle_room_2_table_right, false)
final_goal(2, on((block,18)), (block,1), false)
final_goal(2, on((block,18)), (block,10), false)
final_goal(2, on((block,18)), (block,11), false)
final_goal(2, on((block,18)), (block,12), false)
final_goal(2, on((block,18)), (block,13), false)
final_goal(2, on((block,18)), (block,14), false)
final_goal(2, on((block,18)), (block,15), false)
final_goal(2, on((block,18)), (block,16), false)
final_goal(2, on((block,18)), (block,17), false)
final_goal(2, on((block,18)), (block,2), false)
final_goal(2, on((block,18)), (block,3), false)
final_goal(2, on((block,18)), (block,4), false)
final_goal(2, on((block,18)), (block,5), false)
final_goal(2, on((block,18)), (block,6), false)
final_goal(2, on((block,18)), (block,7), false)
final_goal(2, on((block,18)), (block,8), false)
final_goal(2, on((block,18)), (block,9), false)
final_goal(2, on((block,18)), nothing, false)
final_goal(2, on((block,18)), puzzle_room_1_table_left, false)
final_goal(2, on((block,18)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,18)), puzzle_room_1_table_right, false)
final_goal(2, on((block,18)), puzzle_room_2_table_left, false)
final_goal(2, on((block,18)), puzzle_room_2_table_right, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,10), false)
final_goal(2, on((block,2)), (block,11), false)
final_goal(2, on((block,2)), (block,12), false)
final_goal(2, on((block,2)), (block,13), false)
final_goal(2, on((block,2)), (block,14), false)
final_goal(2, on((block,2)), (block,15), false)
final_goal(2, on((block,2)), (block,16), false)
final_goal(2, on((block,2)), (block,17), false)
final_goal(2, on((block,2)), (block,18), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), (block,7), false)
final_goal(2, on((block,2)), (block,8), false)
final_goal(2, on((block,2)), (block,9), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_1_table_left, false)
final_goal(2, on((block,2)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,2)), puzzle_room_1_table_right, false)
final_goal(2, on((block,2)), puzzle_room_2_table_left, false)
final_goal(2, on((block,2)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,2)), puzzle_room_2_table_right, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,10), false)
final_goal(2, on((block,3)), (block,11), false)
final_goal(2, on((block,3)), (block,12), false)
final_goal(2, on((block,3)), (block,13), false)
final_goal(2, on((block,3)), (block,14), false)
final_goal(2, on((block,3)), (block,15), false)
final_goal(2, on((block,3)), (block,16), false)
final_goal(2, on((block,3)), (block,17), false)
final_goal(2, on((block,3)), (block,18), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), (block,7), false)
final_goal(2, on((block,3)), (block,8), false)
final_goal(2, on((block,3)), (block,9), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,3)), puzzle_room_1_table_right, false)
final_goal(2, on((block,3)), puzzle_room_2_table_left, false)
final_goal(2, on((block,3)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,3)), puzzle_room_2_table_right, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,10), false)
final_goal(2, on((block,4)), (block,11), false)
final_goal(2, on((block,4)), (block,12), false)
final_goal(2, on((block,4)), (block,13), false)
final_goal(2, on((block,4)), (block,14), false)
final_goal(2, on((block,4)), (block,15), false)
final_goal(2, on((block,4)), (block,16), false)
final_goal(2, on((block,4)), (block,17), false)
final_goal(2, on((block,4)), (block,18), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), (block,7), false)
final_goal(2, on((block,4)), (block,8), false)
final_goal(2, on((block,4)), (block,9), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_1_table_left, false)
final_goal(2, on((block,4)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,4)), puzzle_room_1_table_right, false)
final_goal(2, on((block,4)), puzzle_room_2_table_left, false)
final_goal(2, on((block,4)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,4)), puzzle_room_2_table_right, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,10), false)
final_goal(2, on((block,5)), (block,11), false)
final_goal(2, on((block,5)), (block,12), false)
final_goal(2, on((block,5)), (block,13), false)
final_goal(2, on((block,5)), (block,14), false)
final_goal(2, on((block,5)), (block,15), false)
final_goal(2, on((block,5)), (block,16), false)
final_goal(2, on((block,5)), (block,17), false)
final_goal(2, on((block,5)), (block,18), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,7), false)
final_goal(2, on((block,5)), (block,8), false)
final_goal(2, on((block,5)), (block,9), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_1_table_left, false)
final_goal(2, on((block,5)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,5)), puzzle_room_1_table_right, false)
final_goal(2, on((block,5)), puzzle_room_2_table_left, false)
final_goal(2, on((block,5)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,5)), puzzle_room_2_table_right, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,10), false)
final_goal(2, on((block,6)), (block,11), false)
final_goal(2, on((block,6)), (block,12), false)
final_goal(2, on((block,6)), (block,13), false)
final_goal(2, on((block,6)), (block,14), false)
final_goal(2, on((block,6)), (block,15), false)
final_goal(2, on((block,6)), (block,16), false)
final_goal(2, on((block,6)), (block,17), false)
final_goal(2, on((block,6)), (block,18), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), (block,7), false)
final_goal(2, on((block,6)), (block,8), false)
final_goal(2, on((block,6)), (block,9), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_1_table_left, false)
final_goal(2, on((block,6)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,6)), puzzle_room_2_table_left, false)
final_goal(2, on((block,6)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,6)), puzzle_room_2_table_right, false)
final_goal(2, on((block,7)), (block,1), false)
final_goal(2, on((block,7)), (block,10), false)
final_goal(2, on((block,7)), (block,11), false)
final_goal(2, on((block,7)), (block,12), false)
final_goal(2, on((block,7)), (block,13), false)
final_goal(2, on((block,7)), (block,14), false)
final_goal(2, on((block,7)), (block,15), false)
final_goal(2, on((block,7)), (block,16), false)
final_goal(2, on((block,7)), (block,17), false)
final_goal(2, on((block,7)), (block,18), false)
final_goal(2, on((block,7)), (block,2), false)
final_goal(2, on((block,7)), (block,3), false)
final_goal(2, on((block,7)), (block,4), false)
final_goal(2, on((block,7)), (block,5), false)
final_goal(2, on((block,7)), (block,6), false)
final_goal(2, on((block,7)), (block,9), false)
final_goal(2, on((block,7)), nothing, false)
final_goal(2, on((block,7)), puzzle_room_1_table_left, false)
final_goal(2, on((block,7)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,7)), puzzle_room_1_table_right, false)
final_goal(2, on((block,7)), puzzle_room_2_table_left, false)
final_goal(2, on((block,7)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,7)), puzzle_room_2_table_right, false)
final_goal(2, on((block,8)), (block,1), false)
final_goal(2, on((block,8)), (block,10), false)
final_goal(2, on((block,8)), (block,11), false)
final_goal(2, on((block,8)), (block,12), false)
final_goal(2, on((block,8)), (block,13), false)
final_goal(2, on((block,8)), (block,14), false)
final_goal(2, on((block,8)), (block,15), false)
final_goal(2, on((block,8)), (block,16), false)
final_goal(2, on((block,8)), (block,17), false)
final_goal(2, on((block,8)), (block,18), false)
final_goal(2, on((block,8)), (block,2), false)
final_goal(2, on((block,8)), (block,3), false)
final_goal(2, on((block,8)), (block,4), false)
final_goal(2, on((block,8)), (block,5), false)
final_goal(2, on((block,8)), (block,6), false)
final_goal(2, on((block,8)), (block,7), false)
final_goal(2, on((block,8)), nothing, false)
final_goal(2, on((block,8)), puzzle_room_1_table_left, false)
final_goal(2, on((block,8)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,8)), puzzle_room_1_table_right, false)
final_goal(2, on((block,8)), puzzle_room_2_table_left, false)
final_goal(2, on((block,8)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,8)), puzzle_room_2_table_right, false)
final_goal(2, on((block,9)), (block,1), false)
final_goal(2, on((block,9)), (block,10), false)
final_goal(2, on((block,9)), (block,11), false)
final_goal(2, on((block,9)), (block,12), false)
final_goal(2, on((block,9)), (block,13), false)
final_goal(2, on((block,9)), (block,14), false)
final_goal(2, on((block,9)), (block,15), false)
final_goal(2, on((block,9)), (block,16), false)
final_goal(2, on((block,9)), (block,17), false)
final_goal(2, on((block,9)), (block,18), false)
final_goal(2, on((block,9)), (block,2), false)
final_goal(2, on((block,9)), (block,3), false)
final_goal(2, on((block,9)), (block,4), false)
final_goal(2, on((block,9)), (block,5), false)
final_goal(2, on((block,9)), (block,6), false)
final_goal(2, on((block,9)), (block,7), false)
final_goal(2, on((block,9)), (block,8), false)
final_goal(2, on((block,9)), nothing, false)
final_goal(2, on((block,9)), puzzle_room_1_table_left, false)
final_goal(2, on((block,9)), puzzle_room_1_table_right, false)
final_goal(2, on((block,9)), puzzle_room_2_table_left, false)
final_goal(2, on((block,9)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,9)), puzzle_room_2_table_right, false)
final_goal(2, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(1, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,10)), false, true)
final_goal(1, in_tower((block,1),(block,11)), false, true)
final_goal(1, in_tower((block,1),(block,12)), false, true)
final_goal(1, in_tower((block,1),(block,13)), false, true)
final_goal(1, in_tower((block,1),(block,14)), false, true)
final_goal(1, in_tower((block,1),(block,15)), false, true)
final_goal(1, in_tower((block,1),(block,16)), false, true)
final_goal(1, in_tower((block,1),(block,17)), false, true)
final_goal(1, in_tower((block,1),(block,18)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,7)), false, true)
final_goal(1, in_tower((block,1),(block,8)), false, true)
final_goal(1, in_tower((block,1),(block,9)), false, true)
final_goal(1, in_tower((block,10),(block,1)), false, true)
final_goal(1, in_tower((block,10),(block,10)), false, true)
final_goal(1, in_tower((block,10),(block,11)), false, true)
final_goal(1, in_tower((block,10),(block,12)), false, true)
final_goal(1, in_tower((block,10),(block,13)), false, true)
final_goal(1, in_tower((block,10),(block,14)), false, true)
final_goal(1, in_tower((block,10),(block,15)), false, true)
final_goal(1, in_tower((block,10),(block,16)), false, true)
final_goal(1, in_tower((block,10),(block,17)), false, true)
final_goal(1, in_tower((block,10),(block,18)), false, true)
final_goal(1, in_tower((block,10),(block,2)), false, true)
final_goal(1, in_tower((block,10),(block,3)), false, true)
final_goal(1, in_tower((block,10),(block,4)), false, true)
final_goal(1, in_tower((block,10),(block,5)), false, true)
final_goal(1, in_tower((block,10),(block,6)), false, true)
final_goal(1, in_tower((block,10),(block,7)), false, true)
final_goal(1, in_tower((block,10),(block,8)), false, true)
final_goal(1, in_tower((block,10),(block,9)), false, true)
final_goal(1, in_tower((block,11),(block,1)), false, true)
final_goal(1, in_tower((block,11),(block,10)), false, true)
final_goal(1, in_tower((block,11),(block,11)), false, true)
final_goal(1, in_tower((block,11),(block,12)), false, true)
final_goal(1, in_tower((block,11),(block,13)), false, true)
final_goal(1, in_tower((block,11),(block,14)), false, true)
final_goal(1, in_tower((block,11),(block,15)), false, true)
final_goal(1, in_tower((block,11),(block,16)), false, true)
final_goal(1, in_tower((block,11),(block,17)), false, true)
final_goal(1, in_tower((block,11),(block,18)), false, true)
final_goal(1, in_tower((block,11),(block,2)), false, true)
final_goal(1, in_tower((block,11),(block,3)), false, true)
final_goal(1, in_tower((block,11),(block,4)), false, true)
final_goal(1, in_tower((block,11),(block,5)), false, true)
final_goal(1, in_tower((block,11),(block,6)), false, true)
final_goal(1, in_tower((block,11),(block,7)), false, true)
final_goal(1, in_tower((block,11),(block,8)), false, true)
final_goal(1, in_tower((block,11),(block,9)), false, true)
final_goal(1, in_tower((block,12),(block,1)), false, true)
final_goal(1, in_tower((block,12),(block,10)), true, true)
final_goal(1, in_tower((block,12),(block,11)), true, true)
final_goal(1, in_tower((block,12),(block,12)), true, true)
final_goal(1, in_tower((block,12),(block,13)), false, true)
final_goal(1, in_tower((block,12),(block,14)), false, true)
final_goal(1, in_tower((block,12),(block,15)), false, true)
final_goal(1, in_tower((block,12),(block,16)), false, true)
final_goal(1, in_tower((block,12),(block,17)), false, true)
final_goal(1, in_tower((block,12),(block,18)), false, true)
final_goal(1, in_tower((block,12),(block,2)), false, true)
final_goal(1, in_tower((block,12),(block,3)), false, true)
final_goal(1, in_tower((block,12),(block,4)), false, true)
final_goal(1, in_tower((block,12),(block,5)), false, true)
final_goal(1, in_tower((block,12),(block,6)), false, true)
final_goal(1, in_tower((block,12),(block,7)), false, true)
final_goal(1, in_tower((block,12),(block,8)), false, true)
final_goal(1, in_tower((block,12),(block,9)), false, true)
final_goal(1, in_tower((block,13),(block,1)), false, true)
final_goal(1, in_tower((block,13),(block,10)), false, true)
final_goal(1, in_tower((block,13),(block,11)), false, true)
final_goal(1, in_tower((block,13),(block,12)), false, true)
final_goal(1, in_tower((block,13),(block,13)), false, true)
final_goal(1, in_tower((block,13),(block,14)), false, true)
final_goal(1, in_tower((block,13),(block,15)), false, true)
final_goal(1, in_tower((block,13),(block,16)), false, true)
final_goal(1, in_tower((block,13),(block,17)), false, true)
final_goal(1, in_tower((block,13),(block,18)), false, true)
final_goal(1, in_tower((block,13),(block,2)), false, true)
final_goal(1, in_tower((block,13),(block,3)), false, true)
final_goal(1, in_tower((block,13),(block,4)), false, true)
final_goal(1, in_tower((block,13),(block,5)), false, true)
final_goal(1, in_tower((block,13),(block,6)), false, true)
final_goal(1, in_tower((block,13),(block,7)), false, true)
final_goal(1, in_tower((block,13),(block,8)), false, true)
final_goal(1, in_tower((block,13),(block,9)), false, true)
final_goal(1, in_tower((block,14),(block,1)), false, true)
final_goal(1, in_tower((block,14),(block,10)), false, true)
final_goal(1, in_tower((block,14),(block,11)), false, true)
final_goal(1, in_tower((block,14),(block,12)), false, true)
final_goal(1, in_tower((block,14),(block,13)), false, true)
final_goal(1, in_tower((block,14),(block,14)), false, true)
final_goal(1, in_tower((block,14),(block,15)), false, true)
final_goal(1, in_tower((block,14),(block,16)), false, true)
final_goal(1, in_tower((block,14),(block,17)), false, true)
final_goal(1, in_tower((block,14),(block,18)), false, true)
final_goal(1, in_tower((block,14),(block,2)), false, true)
final_goal(1, in_tower((block,14),(block,3)), false, true)
final_goal(1, in_tower((block,14),(block,4)), false, true)
final_goal(1, in_tower((block,14),(block,5)), false, true)
final_goal(1, in_tower((block,14),(block,6)), false, true)
final_goal(1, in_tower((block,14),(block,7)), false, true)
final_goal(1, in_tower((block,14),(block,8)), false, true)
final_goal(1, in_tower((block,14),(block,9)), false, true)
final_goal(1, in_tower((block,15),(block,1)), false, true)
final_goal(1, in_tower((block,15),(block,10)), false, true)
final_goal(1, in_tower((block,15),(block,11)), false, true)
final_goal(1, in_tower((block,15),(block,12)), false, true)
final_goal(1, in_tower((block,15),(block,13)), true, true)
final_goal(1, in_tower((block,15),(block,14)), true, true)
final_goal(1, in_tower((block,15),(block,15)), true, true)
final_goal(1, in_tower((block,15),(block,16)), false, true)
final_goal(1, in_tower((block,15),(block,17)), false, true)
final_goal(1, in_tower((block,15),(block,18)), false, true)
final_goal(1, in_tower((block,15),(block,2)), false, true)
final_goal(1, in_tower((block,15),(block,3)), false, true)
final_goal(1, in_tower((block,15),(block,4)), false, true)
final_goal(1, in_tower((block,15),(block,5)), false, true)
final_goal(1, in_tower((block,15),(block,6)), false, true)
final_goal(1, in_tower((block,15),(block,7)), false, true)
final_goal(1, in_tower((block,15),(block,8)), false, true)
final_goal(1, in_tower((block,15),(block,9)), false, true)
final_goal(1, in_tower((block,16),(block,1)), false, true)
final_goal(1, in_tower((block,16),(block,10)), false, true)
final_goal(1, in_tower((block,16),(block,11)), false, true)
final_goal(1, in_tower((block,16),(block,12)), false, true)
final_goal(1, in_tower((block,16),(block,13)), false, true)
final_goal(1, in_tower((block,16),(block,14)), false, true)
final_goal(1, in_tower((block,16),(block,15)), false, true)
final_goal(1, in_tower((block,16),(block,16)), false, true)
final_goal(1, in_tower((block,16),(block,17)), false, true)
final_goal(1, in_tower((block,16),(block,18)), false, true)
final_goal(1, in_tower((block,16),(block,2)), false, true)
final_goal(1, in_tower((block,16),(block,3)), false, true)
final_goal(1, in_tower((block,16),(block,4)), false, true)
final_goal(1, in_tower((block,16),(block,5)), false, true)
final_goal(1, in_tower((block,16),(block,6)), false, true)
final_goal(1, in_tower((block,16),(block,7)), false, true)
final_goal(1, in_tower((block,16),(block,8)), false, true)
final_goal(1, in_tower((block,16),(block,9)), false, true)
final_goal(1, in_tower((block,17),(block,1)), false, true)
final_goal(1, in_tower((block,17),(block,10)), false, true)
final_goal(1, in_tower((block,17),(block,11)), false, true)
final_goal(1, in_tower((block,17),(block,12)), false, true)
final_goal(1, in_tower((block,17),(block,13)), false, true)
final_goal(1, in_tower((block,17),(block,14)), false, true)
final_goal(1, in_tower((block,17),(block,15)), false, true)
final_goal(1, in_tower((block,17),(block,16)), false, true)
final_goal(1, in_tower((block,17),(block,17)), false, true)
final_goal(1, in_tower((block,17),(block,18)), false, true)
final_goal(1, in_tower((block,17),(block,2)), false, true)
final_goal(1, in_tower((block,17),(block,3)), false, true)
final_goal(1, in_tower((block,17),(block,4)), false, true)
final_goal(1, in_tower((block,17),(block,5)), false, true)
final_goal(1, in_tower((block,17),(block,6)), false, true)
final_goal(1, in_tower((block,17),(block,7)), false, true)
final_goal(1, in_tower((block,17),(block,8)), false, true)
final_goal(1, in_tower((block,17),(block,9)), false, true)
final_goal(1, in_tower((block,18),(block,1)), false, true)
final_goal(1, in_tower((block,18),(block,10)), false, true)
final_goal(1, in_tower((block,18),(block,11)), false, true)
final_goal(1, in_tower((block,18),(block,12)), false, true)
final_goal(1, in_tower((block,18),(block,13)), false, true)
final_goal(1, in_tower((block,18),(block,14)), false, true)
final_goal(1, in_tower((block,18),(block,15)), false, true)
final_goal(1, in_tower((block,18),(block,16)), true, true)
final_goal(1, in_tower((block,18),(block,17)), true, true)
final_goal(1, in_tower((block,18),(block,18)), true, true)
final_goal(1, in_tower((block,18),(block,2)), false, true)
final_goal(1, in_tower((block,18),(block,3)), false, true)
final_goal(1, in_tower((block,18),(block,4)), false, true)
final_goal(1, in_tower((block,18),(block,5)), false, true)
final_goal(1, in_tower((block,18),(block,6)), false, true)
final_goal(1, in_tower((block,18),(block,7)), false, true)
final_goal(1, in_tower((block,18),(block,8)), false, true)
final_goal(1, in_tower((block,18),(block,9)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,10)), false, true)
final_goal(1, in_tower((block,2),(block,11)), false, true)
final_goal(1, in_tower((block,2),(block,12)), false, true)
final_goal(1, in_tower((block,2),(block,13)), false, true)
final_goal(1, in_tower((block,2),(block,14)), false, true)
final_goal(1, in_tower((block,2),(block,15)), false, true)
final_goal(1, in_tower((block,2),(block,16)), false, true)
final_goal(1, in_tower((block,2),(block,17)), false, true)
final_goal(1, in_tower((block,2),(block,18)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,7)), false, true)
final_goal(1, in_tower((block,2),(block,8)), false, true)
final_goal(1, in_tower((block,2),(block,9)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,10)), false, true)
final_goal(1, in_tower((block,3),(block,11)), false, true)
final_goal(1, in_tower((block,3),(block,12)), false, true)
final_goal(1, in_tower((block,3),(block,13)), false, true)
final_goal(1, in_tower((block,3),(block,14)), false, true)
final_goal(1, in_tower((block,3),(block,15)), false, true)
final_goal(1, in_tower((block,3),(block,16)), false, true)
final_goal(1, in_tower((block,3),(block,17)), false, true)
final_goal(1, in_tower((block,3),(block,18)), false, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,7)), false, true)
final_goal(1, in_tower((block,3),(block,8)), false, true)
final_goal(1, in_tower((block,3),(block,9)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,10)), false, true)
final_goal(1, in_tower((block,4),(block,11)), false, true)
final_goal(1, in_tower((block,4),(block,12)), false, true)
final_goal(1, in_tower((block,4),(block,13)), false, true)
final_goal(1, in_tower((block,4),(block,14)), false, true)
final_goal(1, in_tower((block,4),(block,15)), false, true)
final_goal(1, in_tower((block,4),(block,16)), false, true)
final_goal(1, in_tower((block,4),(block,17)), false, true)
final_goal(1, in_tower((block,4),(block,18)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,7)), false, true)
final_goal(1, in_tower((block,4),(block,8)), false, true)
final_goal(1, in_tower((block,4),(block,9)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,10)), false, true)
final_goal(1, in_tower((block,5),(block,11)), false, true)
final_goal(1, in_tower((block,5),(block,12)), false, true)
final_goal(1, in_tower((block,5),(block,13)), false, true)
final_goal(1, in_tower((block,5),(block,14)), false, true)
final_goal(1, in_tower((block,5),(block,15)), false, true)
final_goal(1, in_tower((block,5),(block,16)), false, true)
final_goal(1, in_tower((block,5),(block,17)), false, true)
final_goal(1, in_tower((block,5),(block,18)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,7)), false, true)
final_goal(1, in_tower((block,5),(block,8)), false, true)
final_goal(1, in_tower((block,5),(block,9)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,10)), false, true)
final_goal(1, in_tower((block,6),(block,11)), false, true)
final_goal(1, in_tower((block,6),(block,12)), false, true)
final_goal(1, in_tower((block,6),(block,13)), false, true)
final_goal(1, in_tower((block,6),(block,14)), false, true)
final_goal(1, in_tower((block,6),(block,15)), false, true)
final_goal(1, in_tower((block,6),(block,16)), false, true)
final_goal(1, in_tower((block,6),(block,17)), false, true)
final_goal(1, in_tower((block,6),(block,18)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, in_tower((block,6),(block,7)), false, true)
final_goal(1, in_tower((block,6),(block,8)), false, true)
final_goal(1, in_tower((block,6),(block,9)), false, true)
final_goal(1, in_tower((block,7),(block,1)), false, true)
final_goal(1, in_tower((block,7),(block,10)), false, true)
final_goal(1, in_tower((block,7),(block,11)), false, true)
final_goal(1, in_tower((block,7),(block,12)), false, true)
final_goal(1, in_tower((block,7),(block,13)), false, true)
final_goal(1, in_tower((block,7),(block,14)), false, true)
final_goal(1, in_tower((block,7),(block,15)), false, true)
final_goal(1, in_tower((block,7),(block,16)), false, true)
final_goal(1, in_tower((block,7),(block,17)), false, true)
final_goal(1, in_tower((block,7),(block,18)), false, true)
final_goal(1, in_tower((block,7),(block,2)), false, true)
final_goal(1, in_tower((block,7),(block,3)), false, true)
final_goal(1, in_tower((block,7),(block,4)), false, true)
final_goal(1, in_tower((block,7),(block,5)), false, true)
final_goal(1, in_tower((block,7),(block,6)), false, true)
final_goal(1, in_tower((block,7),(block,7)), false, true)
final_goal(1, in_tower((block,7),(block,8)), false, true)
final_goal(1, in_tower((block,7),(block,9)), false, true)
final_goal(1, in_tower((block,8),(block,1)), false, true)
final_goal(1, in_tower((block,8),(block,10)), false, true)
final_goal(1, in_tower((block,8),(block,11)), false, true)
final_goal(1, in_tower((block,8),(block,12)), false, true)
final_goal(1, in_tower((block,8),(block,13)), false, true)
final_goal(1, in_tower((block,8),(block,14)), false, true)
final_goal(1, in_tower((block,8),(block,15)), false, true)
final_goal(1, in_tower((block,8),(block,16)), false, true)
final_goal(1, in_tower((block,8),(block,17)), false, true)
final_goal(1, in_tower((block,8),(block,18)), false, true)
final_goal(1, in_tower((block,8),(block,2)), false, true)
final_goal(1, in_tower((block,8),(block,3)), false, true)
final_goal(1, in_tower((block,8),(block,4)), false, true)
final_goal(1, in_tower((block,8),(block,5)), false, true)
final_goal(1, in_tower((block,8),(block,6)), false, true)
final_goal(1, in_tower((block,8),(block,7)), false, true)
final_goal(1, in_tower((block,8),(block,8)), false, true)
final_goal(1, in_tower((block,8),(block,9)), false, true)
final_goal(1, in_tower((block,9),(block,1)), false, true)
final_goal(1, in_tower((block,9),(block,10)), false, true)
final_goal(1, in_tower((block,9),(block,11)), false, true)
final_goal(1, in_tower((block,9),(block,12)), false, true)
final_goal(1, in_tower((block,9),(block,13)), false, true)
final_goal(1, in_tower((block,9),(block,14)), false, true)
final_goal(1, in_tower((block,9),(block,15)), false, true)
final_goal(1, in_tower((block,9),(block,16)), false, true)
final_goal(1, in_tower((block,9),(block,17)), false, true)
final_goal(1, in_tower((block,9),(block,18)), false, true)
final_goal(1, in_tower((block,9),(block,2)), false, true)
final_goal(1, in_tower((block,9),(block,3)), false, true)
final_goal(1, in_tower((block,9),(block,4)), false, true)
final_goal(1, in_tower((block,9),(block,5)), false, true)
final_goal(1, in_tower((block,9),(block,6)), false, true)
final_goal(1, in_tower((block,9),(block,7)), true, true)
final_goal(1, in_tower((block,9),(block,8)), true, true)
final_goal(1, in_tower((block,9),(block,9)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,10)), (block,11), true)
final_goal(1, on((block,11)), (block,12), true)
final_goal(1, on((block,12)), puzzle_room_2_table_left, true)
final_goal(1, on((block,13)), (block,14), true)
final_goal(1, on((block,14)), (block,15), true)
final_goal(1, on((block,15)), puzzle_room_2_table_right, true)
final_goal(1, on((block,16)), (block,17), true)
final_goal(1, on((block,17)), (block,18), true)
final_goal(1, on((block,18)), puzzle_room_2_table_middle, true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_1_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_1_table_right, true)
final_goal(1, on((block,7)), (block,8), true)
final_goal(1, on((block,8)), (block,9), true)
final_goal(1, on((block,9)), puzzle_room_1_table_middle, true)
final_goal(1, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(1, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,10)), true, false)
final_goal(1, in_tower((block,1),(block,11)), true, false)
final_goal(1, in_tower((block,1),(block,12)), true, false)
final_goal(1, in_tower((block,1),(block,13)), true, false)
final_goal(1, in_tower((block,1),(block,14)), true, false)
final_goal(1, in_tower((block,1),(block,15)), true, false)
final_goal(1, in_tower((block,1),(block,16)), true, false)
final_goal(1, in_tower((block,1),(block,17)), true, false)
final_goal(1, in_tower((block,1),(block,18)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,1),(block,7)), true, false)
final_goal(1, in_tower((block,1),(block,8)), true, false)
final_goal(1, in_tower((block,1),(block,9)), true, false)
final_goal(1, in_tower((block,10),(block,1)), true, false)
final_goal(1, in_tower((block,10),(block,10)), true, false)
final_goal(1, in_tower((block,10),(block,11)), true, false)
final_goal(1, in_tower((block,10),(block,12)), true, false)
final_goal(1, in_tower((block,10),(block,13)), true, false)
final_goal(1, in_tower((block,10),(block,14)), true, false)
final_goal(1, in_tower((block,10),(block,15)), true, false)
final_goal(1, in_tower((block,10),(block,16)), true, false)
final_goal(1, in_tower((block,10),(block,17)), true, false)
final_goal(1, in_tower((block,10),(block,18)), true, false)
final_goal(1, in_tower((block,10),(block,2)), true, false)
final_goal(1, in_tower((block,10),(block,3)), true, false)
final_goal(1, in_tower((block,10),(block,4)), true, false)
final_goal(1, in_tower((block,10),(block,5)), true, false)
final_goal(1, in_tower((block,10),(block,6)), true, false)
final_goal(1, in_tower((block,10),(block,7)), true, false)
final_goal(1, in_tower((block,10),(block,8)), true, false)
final_goal(1, in_tower((block,10),(block,9)), true, false)
final_goal(1, in_tower((block,11),(block,1)), true, false)
final_goal(1, in_tower((block,11),(block,10)), true, false)
final_goal(1, in_tower((block,11),(block,11)), true, false)
final_goal(1, in_tower((block,11),(block,12)), true, false)
final_goal(1, in_tower((block,11),(block,13)), true, false)
final_goal(1, in_tower((block,11),(block,14)), true, false)
final_goal(1, in_tower((block,11),(block,15)), true, false)
final_goal(1, in_tower((block,11),(block,16)), true, false)
final_goal(1, in_tower((block,11),(block,17)), true, false)
final_goal(1, in_tower((block,11),(block,18)), true, false)
final_goal(1, in_tower((block,11),(block,2)), true, false)
final_goal(1, in_tower((block,11),(block,3)), true, false)
final_goal(1, in_tower((block,11),(block,4)), true, false)
final_goal(1, in_tower((block,11),(block,5)), true, false)
final_goal(1, in_tower((block,11),(block,6)), true, false)
final_goal(1, in_tower((block,11),(block,7)), true, false)
final_goal(1, in_tower((block,11),(block,8)), true, false)
final_goal(1, in_tower((block,11),(block,9)), true, false)
final_goal(1, in_tower((block,12),(block,1)), true, false)
final_goal(1, in_tower((block,12),(block,10)), false, false)
final_goal(1, in_tower((block,12),(block,11)), false, false)
final_goal(1, in_tower((block,12),(block,12)), false, false)
final_goal(1, in_tower((block,12),(block,13)), true, false)
final_goal(1, in_tower((block,12),(block,14)), true, false)
final_goal(1, in_tower((block,12),(block,15)), true, false)
final_goal(1, in_tower((block,12),(block,16)), true, false)
final_goal(1, in_tower((block,12),(block,17)), true, false)
final_goal(1, in_tower((block,12),(block,18)), true, false)
final_goal(1, in_tower((block,12),(block,2)), true, false)
final_goal(1, in_tower((block,12),(block,3)), true, false)
final_goal(1, in_tower((block,12),(block,4)), true, false)
final_goal(1, in_tower((block,12),(block,5)), true, false)
final_goal(1, in_tower((block,12),(block,6)), true, false)
final_goal(1, in_tower((block,12),(block,7)), true, false)
final_goal(1, in_tower((block,12),(block,8)), true, false)
final_goal(1, in_tower((block,12),(block,9)), true, false)
final_goal(1, in_tower((block,13),(block,1)), true, false)
final_goal(1, in_tower((block,13),(block,10)), true, false)
final_goal(1, in_tower((block,13),(block,11)), true, false)
final_goal(1, in_tower((block,13),(block,12)), true, false)
final_goal(1, in_tower((block,13),(block,13)), true, false)
final_goal(1, in_tower((block,13),(block,14)), true, false)
final_goal(1, in_tower((block,13),(block,15)), true, false)
final_goal(1, in_tower((block,13),(block,16)), true, false)
final_goal(1, in_tower((block,13),(block,17)), true, false)
final_goal(1, in_tower((block,13),(block,18)), true, false)
final_goal(1, in_tower((block,13),(block,2)), true, false)
final_goal(1, in_tower((block,13),(block,3)), true, false)
final_goal(1, in_tower((block,13),(block,4)), true, false)
final_goal(1, in_tower((block,13),(block,5)), true, false)
final_goal(1, in_tower((block,13),(block,6)), true, false)
final_goal(1, in_tower((block,13),(block,7)), true, false)
final_goal(1, in_tower((block,13),(block,8)), true, false)
final_goal(1, in_tower((block,13),(block,9)), true, false)
final_goal(1, in_tower((block,14),(block,1)), true, false)
final_goal(1, in_tower((block,14),(block,10)), true, false)
final_goal(1, in_tower((block,14),(block,11)), true, false)
final_goal(1, in_tower((block,14),(block,12)), true, false)
final_goal(1, in_tower((block,14),(block,13)), true, false)
final_goal(1, in_tower((block,14),(block,14)), true, false)
final_goal(1, in_tower((block,14),(block,15)), true, false)
final_goal(1, in_tower((block,14),(block,16)), true, false)
final_goal(1, in_tower((block,14),(block,17)), true, false)
final_goal(1, in_tower((block,14),(block,18)), true, false)
final_goal(1, in_tower((block,14),(block,2)), true, false)
final_goal(1, in_tower((block,14),(block,3)), true, false)
final_goal(1, in_tower((block,14),(block,4)), true, false)
final_goal(1, in_tower((block,14),(block,5)), true, false)
final_goal(1, in_tower((block,14),(block,6)), true, false)
final_goal(1, in_tower((block,14),(block,7)), true, false)
final_goal(1, in_tower((block,14),(block,8)), true, false)
final_goal(1, in_tower((block,14),(block,9)), true, false)
final_goal(1, in_tower((block,15),(block,1)), true, false)
final_goal(1, in_tower((block,15),(block,10)), true, false)
final_goal(1, in_tower((block,15),(block,11)), true, false)
final_goal(1, in_tower((block,15),(block,12)), true, false)
final_goal(1, in_tower((block,15),(block,13)), false, false)
final_goal(1, in_tower((block,15),(block,14)), false, false)
final_goal(1, in_tower((block,15),(block,15)), false, false)
final_goal(1, in_tower((block,15),(block,16)), true, false)
final_goal(1, in_tower((block,15),(block,17)), true, false)
final_goal(1, in_tower((block,15),(block,18)), true, false)
final_goal(1, in_tower((block,15),(block,2)), true, false)
final_goal(1, in_tower((block,15),(block,3)), true, false)
final_goal(1, in_tower((block,15),(block,4)), true, false)
final_goal(1, in_tower((block,15),(block,5)), true, false)
final_goal(1, in_tower((block,15),(block,6)), true, false)
final_goal(1, in_tower((block,15),(block,7)), true, false)
final_goal(1, in_tower((block,15),(block,8)), true, false)
final_goal(1, in_tower((block,15),(block,9)), true, false)
final_goal(1, in_tower((block,16),(block,1)), true, false)
final_goal(1, in_tower((block,16),(block,10)), true, false)
final_goal(1, in_tower((block,16),(block,11)), true, false)
final_goal(1, in_tower((block,16),(block,12)), true, false)
final_goal(1, in_tower((block,16),(block,13)), true, false)
final_goal(1, in_tower((block,16),(block,14)), true, false)
final_goal(1, in_tower((block,16),(block,15)), true, false)
final_goal(1, in_tower((block,16),(block,16)), true, false)
final_goal(1, in_tower((block,16),(block,17)), true, false)
final_goal(1, in_tower((block,16),(block,18)), true, false)
final_goal(1, in_tower((block,16),(block,2)), true, false)
final_goal(1, in_tower((block,16),(block,3)), true, false)
final_goal(1, in_tower((block,16),(block,4)), true, false)
final_goal(1, in_tower((block,16),(block,5)), true, false)
final_goal(1, in_tower((block,16),(block,6)), true, false)
final_goal(1, in_tower((block,16),(block,7)), true, false)
final_goal(1, in_tower((block,16),(block,8)), true, false)
final_goal(1, in_tower((block,16),(block,9)), true, false)
final_goal(1, in_tower((block,17),(block,1)), true, false)
final_goal(1, in_tower((block,17),(block,10)), true, false)
final_goal(1, in_tower((block,17),(block,11)), true, false)
final_goal(1, in_tower((block,17),(block,12)), true, false)
final_goal(1, in_tower((block,17),(block,13)), true, false)
final_goal(1, in_tower((block,17),(block,14)), true, false)
final_goal(1, in_tower((block,17),(block,15)), true, false)
final_goal(1, in_tower((block,17),(block,16)), true, false)
final_goal(1, in_tower((block,17),(block,17)), true, false)
final_goal(1, in_tower((block,17),(block,18)), true, false)
final_goal(1, in_tower((block,17),(block,2)), true, false)
final_goal(1, in_tower((block,17),(block,3)), true, false)
final_goal(1, in_tower((block,17),(block,4)), true, false)
final_goal(1, in_tower((block,17),(block,5)), true, false)
final_goal(1, in_tower((block,17),(block,6)), true, false)
final_goal(1, in_tower((block,17),(block,7)), true, false)
final_goal(1, in_tower((block,17),(block,8)), true, false)
final_goal(1, in_tower((block,17),(block,9)), true, false)
final_goal(1, in_tower((block,18),(block,1)), true, false)
final_goal(1, in_tower((block,18),(block,10)), true, false)
final_goal(1, in_tower((block,18),(block,11)), true, false)
final_goal(1, in_tower((block,18),(block,12)), true, false)
final_goal(1, in_tower((block,18),(block,13)), true, false)
final_goal(1, in_tower((block,18),(block,14)), true, false)
final_goal(1, in_tower((block,18),(block,15)), true, false)
final_goal(1, in_tower((block,18),(block,16)), false, false)
final_goal(1, in_tower((block,18),(block,17)), false, false)
final_goal(1, in_tower((block,18),(block,18)), false, false)
final_goal(1, in_tower((block,18),(block,2)), true, false)
final_goal(1, in_tower((block,18),(block,3)), true, false)
final_goal(1, in_tower((block,18),(block,4)), true, false)
final_goal(1, in_tower((block,18),(block,5)), true, false)
final_goal(1, in_tower((block,18),(block,6)), true, false)
final_goal(1, in_tower((block,18),(block,7)), true, false)
final_goal(1, in_tower((block,18),(block,8)), true, false)
final_goal(1, in_tower((block,18),(block,9)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,10)), true, false)
final_goal(1, in_tower((block,2),(block,11)), true, false)
final_goal(1, in_tower((block,2),(block,12)), true, false)
final_goal(1, in_tower((block,2),(block,13)), true, false)
final_goal(1, in_tower((block,2),(block,14)), true, false)
final_goal(1, in_tower((block,2),(block,15)), true, false)
final_goal(1, in_tower((block,2),(block,16)), true, false)
final_goal(1, in_tower((block,2),(block,17)), true, false)
final_goal(1, in_tower((block,2),(block,18)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,7)), true, false)
final_goal(1, in_tower((block,2),(block,8)), true, false)
final_goal(1, in_tower((block,2),(block,9)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,10)), true, false)
final_goal(1, in_tower((block,3),(block,11)), true, false)
final_goal(1, in_tower((block,3),(block,12)), true, false)
final_goal(1, in_tower((block,3),(block,13)), true, false)
final_goal(1, in_tower((block,3),(block,14)), true, false)
final_goal(1, in_tower((block,3),(block,15)), true, false)
final_goal(1, in_tower((block,3),(block,16)), true, false)
final_goal(1, in_tower((block,3),(block,17)), true, false)
final_goal(1, in_tower((block,3),(block,18)), true, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,7)), true, false)
final_goal(1, in_tower((block,3),(block,8)), true, false)
final_goal(1, in_tower((block,3),(block,9)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,10)), true, false)
final_goal(1, in_tower((block,4),(block,11)), true, false)
final_goal(1, in_tower((block,4),(block,12)), true, false)
final_goal(1, in_tower((block,4),(block,13)), true, false)
final_goal(1, in_tower((block,4),(block,14)), true, false)
final_goal(1, in_tower((block,4),(block,15)), true, false)
final_goal(1, in_tower((block,4),(block,16)), true, false)
final_goal(1, in_tower((block,4),(block,17)), true, false)
final_goal(1, in_tower((block,4),(block,18)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,7)), true, false)
final_goal(1, in_tower((block,4),(block,8)), true, false)
final_goal(1, in_tower((block,4),(block,9)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,10)), true, false)
final_goal(1, in_tower((block,5),(block,11)), true, false)
final_goal(1, in_tower((block,5),(block,12)), true, false)
final_goal(1, in_tower((block,5),(block,13)), true, false)
final_goal(1, in_tower((block,5),(block,14)), true, false)
final_goal(1, in_tower((block,5),(block,15)), true, false)
final_goal(1, in_tower((block,5),(block,16)), true, false)
final_goal(1, in_tower((block,5),(block,17)), true, false)
final_goal(1, in_tower((block,5),(block,18)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,7)), true, false)
final_goal(1, in_tower((block,5),(block,8)), true, false)
final_goal(1, in_tower((block,5),(block,9)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,10)), true, false)
final_goal(1, in_tower((block,6),(block,11)), true, false)
final_goal(1, in_tower((block,6),(block,12)), true, false)
final_goal(1, in_tower((block,6),(block,13)), true, false)
final_goal(1, in_tower((block,6),(block,14)), true, false)
final_goal(1, in_tower((block,6),(block,15)), true, false)
final_goal(1, in_tower((block,6),(block,16)), true, false)
final_goal(1, in_tower((block,6),(block,17)), true, false)
final_goal(1, in_tower((block,6),(block,18)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,7)), true, false)
final_goal(1, in_tower((block,6),(block,8)), true, false)
final_goal(1, in_tower((block,6),(block,9)), true, false)
final_goal(1, in_tower((block,7),(block,1)), true, false)
final_goal(1, in_tower((block,7),(block,10)), true, false)
final_goal(1, in_tower((block,7),(block,11)), true, false)
final_goal(1, in_tower((block,7),(block,12)), true, false)
final_goal(1, in_tower((block,7),(block,13)), true, false)
final_goal(1, in_tower((block,7),(block,14)), true, false)
final_goal(1, in_tower((block,7),(block,15)), true, false)
final_goal(1, in_tower((block,7),(block,16)), true, false)
final_goal(1, in_tower((block,7),(block,17)), true, false)
final_goal(1, in_tower((block,7),(block,18)), true, false)
final_goal(1, in_tower((block,7),(block,2)), true, false)
final_goal(1, in_tower((block,7),(block,3)), true, false)
final_goal(1, in_tower((block,7),(block,4)), true, false)
final_goal(1, in_tower((block,7),(block,5)), true, false)
final_goal(1, in_tower((block,7),(block,6)), true, false)
final_goal(1, in_tower((block,7),(block,7)), true, false)
final_goal(1, in_tower((block,7),(block,8)), true, false)
final_goal(1, in_tower((block,7),(block,9)), true, false)
final_goal(1, in_tower((block,8),(block,1)), true, false)
final_goal(1, in_tower((block,8),(block,10)), true, false)
final_goal(1, in_tower((block,8),(block,11)), true, false)
final_goal(1, in_tower((block,8),(block,12)), true, false)
final_goal(1, in_tower((block,8),(block,13)), true, false)
final_goal(1, in_tower((block,8),(block,14)), true, false)
final_goal(1, in_tower((block,8),(block,15)), true, false)
final_goal(1, in_tower((block,8),(block,16)), true, false)
final_goal(1, in_tower((block,8),(block,17)), true, false)
final_goal(1, in_tower((block,8),(block,18)), true, false)
final_goal(1, in_tower((block,8),(block,2)), true, false)
final_goal(1, in_tower((block,8),(block,3)), true, false)
final_goal(1, in_tower((block,8),(block,4)), true, false)
final_goal(1, in_tower((block,8),(block,5)), true, false)
final_goal(1, in_tower((block,8),(block,6)), true, false)
final_goal(1, in_tower((block,8),(block,7)), true, false)
final_goal(1, in_tower((block,8),(block,8)), true, false)
final_goal(1, in_tower((block,8),(block,9)), true, false)
final_goal(1, in_tower((block,9),(block,1)), true, false)
final_goal(1, in_tower((block,9),(block,10)), true, false)
final_goal(1, in_tower((block,9),(block,11)), true, false)
final_goal(1, in_tower((block,9),(block,12)), true, false)
final_goal(1, in_tower((block,9),(block,13)), true, false)
final_goal(1, in_tower((block,9),(block,14)), true, false)
final_goal(1, in_tower((block,9),(block,15)), true, false)
final_goal(1, in_tower((block,9),(block,16)), true, false)
final_goal(1, in_tower((block,9),(block,17)), true, false)
final_goal(1, in_tower((block,9),(block,18)), true, false)
final_goal(1, in_tower((block,9),(block,2)), true, false)
final_goal(1, in_tower((block,9),(block,3)), true, false)
final_goal(1, in_tower((block,9),(block,4)), true, false)
final_goal(1, in_tower((block,9),(block,5)), true, false)
final_goal(1, in_tower((block,9),(block,6)), true, false)
final_goal(1, in_tower((block,9),(block,7)), false, false)
final_goal(1, in_tower((block,9),(block,8)), false, false)
final_goal(1, in_tower((block,9),(block,9)), false, false)
final_goal(1, on((block,1)), (block,10), false)
final_goal(1, on((block,1)), (block,11), false)
final_goal(1, on((block,1)), (block,12), false)
final_goal(1, on((block,1)), (block,13), false)
final_goal(1, on((block,1)), (block,14), false)
final_goal(1, on((block,1)), (block,15), false)
final_goal(1, on((block,1)), (block,16), false)
final_goal(1, on((block,1)), (block,17), false)
final_goal(1, on((block,1)), (block,18), false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), (block,7), false)
final_goal(1, on((block,1)), (block,8), false)
final_goal(1, on((block,1)), (block,9), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_1_table_left, false)
final_goal(1, on((block,1)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_1_table_right, false)
final_goal(1, on((block,1)), puzzle_room_2_table_left, false)
final_goal(1, on((block,1)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_2_table_right, false)
final_goal(1, on((block,10)), (block,1), false)
final_goal(1, on((block,10)), (block,12), false)
final_goal(1, on((block,10)), (block,13), false)
final_goal(1, on((block,10)), (block,14), false)
final_goal(1, on((block,10)), (block,15), false)
final_goal(1, on((block,10)), (block,16), false)
final_goal(1, on((block,10)), (block,17), false)
final_goal(1, on((block,10)), (block,18), false)
final_goal(1, on((block,10)), (block,2), false)
final_goal(1, on((block,10)), (block,3), false)
final_goal(1, on((block,10)), (block,4), false)
final_goal(1, on((block,10)), (block,5), false)
final_goal(1, on((block,10)), (block,6), false)
final_goal(1, on((block,10)), (block,7), false)
final_goal(1, on((block,10)), (block,8), false)
final_goal(1, on((block,10)), (block,9), false)
final_goal(1, on((block,10)), nothing, false)
final_goal(1, on((block,10)), puzzle_room_1_table_left, false)
final_goal(1, on((block,10)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,10)), puzzle_room_1_table_right, false)
final_goal(1, on((block,10)), puzzle_room_2_table_left, false)
final_goal(1, on((block,10)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,10)), puzzle_room_2_table_right, false)
final_goal(1, on((block,11)), (block,1), false)
final_goal(1, on((block,11)), (block,10), false)
final_goal(1, on((block,11)), (block,13), false)
final_goal(1, on((block,11)), (block,14), false)
final_goal(1, on((block,11)), (block,15), false)
final_goal(1, on((block,11)), (block,16), false)
final_goal(1, on((block,11)), (block,17), false)
final_goal(1, on((block,11)), (block,18), false)
final_goal(1, on((block,11)), (block,2), false)
final_goal(1, on((block,11)), (block,3), false)
final_goal(1, on((block,11)), (block,4), false)
final_goal(1, on((block,11)), (block,5), false)
final_goal(1, on((block,11)), (block,6), false)
final_goal(1, on((block,11)), (block,7), false)
final_goal(1, on((block,11)), (block,8), false)
final_goal(1, on((block,11)), (block,9), false)
final_goal(1, on((block,11)), nothing, false)
final_goal(1, on((block,11)), puzzle_room_1_table_left, false)
final_goal(1, on((block,11)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,11)), puzzle_room_1_table_right, false)
final_goal(1, on((block,11)), puzzle_room_2_table_left, false)
final_goal(1, on((block,11)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,11)), puzzle_room_2_table_right, false)
final_goal(1, on((block,12)), (block,1), false)
final_goal(1, on((block,12)), (block,10), false)
final_goal(1, on((block,12)), (block,11), false)
final_goal(1, on((block,12)), (block,13), false)
final_goal(1, on((block,12)), (block,14), false)
final_goal(1, on((block,12)), (block,15), false)
final_goal(1, on((block,12)), (block,16), false)
final_goal(1, on((block,12)), (block,17), false)
final_goal(1, on((block,12)), (block,18), false)
final_goal(1, on((block,12)), (block,2), false)
final_goal(1, on((block,12)), (block,3), false)
final_goal(1, on((block,12)), (block,4), false)
final_goal(1, on((block,12)), (block,5), false)
final_goal(1, on((block,12)), (block,6), false)
final_goal(1, on((block,12)), (block,7), false)
final_goal(1, on((block,12)), (block,8), false)
final_goal(1, on((block,12)), (block,9), false)
final_goal(1, on((block,12)), nothing, false)
final_goal(1, on((block,12)), puzzle_room_1_table_left, false)
final_goal(1, on((block,12)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,12)), puzzle_room_1_table_right, false)
final_goal(1, on((block,12)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,12)), puzzle_room_2_table_right, false)
final_goal(1, on((block,13)), (block,1), false)
final_goal(1, on((block,13)), (block,10), false)
final_goal(1, on((block,13)), (block,11), false)
final_goal(1, on((block,13)), (block,12), false)
final_goal(1, on((block,13)), (block,15), false)
final_goal(1, on((block,13)), (block,16), false)
final_goal(1, on((block,13)), (block,17), false)
final_goal(1, on((block,13)), (block,18), false)
final_goal(1, on((block,13)), (block,2), false)
final_goal(1, on((block,13)), (block,3), false)
final_goal(1, on((block,13)), (block,4), false)
final_goal(1, on((block,13)), (block,5), false)
final_goal(1, on((block,13)), (block,6), false)
final_goal(1, on((block,13)), (block,7), false)
final_goal(1, on((block,13)), (block,8), false)
final_goal(1, on((block,13)), (block,9), false)
final_goal(1, on((block,13)), nothing, false)
final_goal(1, on((block,13)), puzzle_room_1_table_left, false)
final_goal(1, on((block,13)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,13)), puzzle_room_1_table_right, false)
final_goal(1, on((block,13)), puzzle_room_2_table_left, false)
final_goal(1, on((block,13)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,13)), puzzle_room_2_table_right, false)
final_goal(1, on((block,14)), (block,1), false)
final_goal(1, on((block,14)), (block,10), false)
final_goal(1, on((block,14)), (block,11), false)
final_goal(1, on((block,14)), (block,12), false)
final_goal(1, on((block,14)), (block,13), false)
final_goal(1, on((block,14)), (block,16), false)
final_goal(1, on((block,14)), (block,17), false)
final_goal(1, on((block,14)), (block,18), false)
final_goal(1, on((block,14)), (block,2), false)
final_goal(1, on((block,14)), (block,3), false)
final_goal(1, on((block,14)), (block,4), false)
final_goal(1, on((block,14)), (block,5), false)
final_goal(1, on((block,14)), (block,6), false)
final_goal(1, on((block,14)), (block,7), false)
final_goal(1, on((block,14)), (block,8), false)
final_goal(1, on((block,14)), (block,9), false)
final_goal(1, on((block,14)), nothing, false)
final_goal(1, on((block,14)), puzzle_room_1_table_left, false)
final_goal(1, on((block,14)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,14)), puzzle_room_1_table_right, false)
final_goal(1, on((block,14)), puzzle_room_2_table_left, false)
final_goal(1, on((block,14)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,14)), puzzle_room_2_table_right, false)
final_goal(1, on((block,15)), (block,1), false)
final_goal(1, on((block,15)), (block,10), false)
final_goal(1, on((block,15)), (block,11), false)
final_goal(1, on((block,15)), (block,12), false)
final_goal(1, on((block,15)), (block,13), false)
final_goal(1, on((block,15)), (block,14), false)
final_goal(1, on((block,15)), (block,16), false)
final_goal(1, on((block,15)), (block,17), false)
final_goal(1, on((block,15)), (block,18), false)
final_goal(1, on((block,15)), (block,2), false)
final_goal(1, on((block,15)), (block,3), false)
final_goal(1, on((block,15)), (block,4), false)
final_goal(1, on((block,15)), (block,5), false)
final_goal(1, on((block,15)), (block,6), false)
final_goal(1, on((block,15)), (block,7), false)
final_goal(1, on((block,15)), (block,8), false)
final_goal(1, on((block,15)), (block,9), false)
final_goal(1, on((block,15)), nothing, false)
final_goal(1, on((block,15)), puzzle_room_1_table_left, false)
final_goal(1, on((block,15)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,15)), puzzle_room_1_table_right, false)
final_goal(1, on((block,15)), puzzle_room_2_table_left, false)
final_goal(1, on((block,15)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,16)), (block,1), false)
final_goal(1, on((block,16)), (block,10), false)
final_goal(1, on((block,16)), (block,11), false)
final_goal(1, on((block,16)), (block,12), false)
final_goal(1, on((block,16)), (block,13), false)
final_goal(1, on((block,16)), (block,14), false)
final_goal(1, on((block,16)), (block,15), false)
final_goal(1, on((block,16)), (block,18), false)
final_goal(1, on((block,16)), (block,2), false)
final_goal(1, on((block,16)), (block,3), false)
final_goal(1, on((block,16)), (block,4), false)
final_goal(1, on((block,16)), (block,5), false)
final_goal(1, on((block,16)), (block,6), false)
final_goal(1, on((block,16)), (block,7), false)
final_goal(1, on((block,16)), (block,8), false)
final_goal(1, on((block,16)), (block,9), false)
final_goal(1, on((block,16)), nothing, false)
final_goal(1, on((block,16)), puzzle_room_1_table_left, false)
final_goal(1, on((block,16)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,16)), puzzle_room_1_table_right, false)
final_goal(1, on((block,16)), puzzle_room_2_table_left, false)
final_goal(1, on((block,16)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,16)), puzzle_room_2_table_right, false)
final_goal(1, on((block,17)), (block,1), false)
final_goal(1, on((block,17)), (block,10), false)
final_goal(1, on((block,17)), (block,11), false)
final_goal(1, on((block,17)), (block,12), false)
final_goal(1, on((block,17)), (block,13), false)
final_goal(1, on((block,17)), (block,14), false)
final_goal(1, on((block,17)), (block,15), false)
final_goal(1, on((block,17)), (block,16), false)
final_goal(1, on((block,17)), (block,2), false)
final_goal(1, on((block,17)), (block,3), false)
final_goal(1, on((block,17)), (block,4), false)
final_goal(1, on((block,17)), (block,5), false)
final_goal(1, on((block,17)), (block,6), false)
final_goal(1, on((block,17)), (block,7), false)
final_goal(1, on((block,17)), (block,8), false)
final_goal(1, on((block,17)), (block,9), false)
final_goal(1, on((block,17)), nothing, false)
final_goal(1, on((block,17)), puzzle_room_1_table_left, false)
final_goal(1, on((block,17)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,17)), puzzle_room_1_table_right, false)
final_goal(1, on((block,17)), puzzle_room_2_table_left, false)
final_goal(1, on((block,17)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,17)), puzzle_room_2_table_right, false)
final_goal(1, on((block,18)), (block,1), false)
final_goal(1, on((block,18)), (block,10), false)
final_goal(1, on((block,18)), (block,11), false)
final_goal(1, on((block,18)), (block,12), false)
final_goal(1, on((block,18)), (block,13), false)
final_goal(1, on((block,18)), (block,14), false)
final_goal(1, on((block,18)), (block,15), false)
final_goal(1, on((block,18)), (block,16), false)
final_goal(1, on((block,18)), (block,17), false)
final_goal(1, on((block,18)), (block,2), false)
final_goal(1, on((block,18)), (block,3), false)
final_goal(1, on((block,18)), (block,4), false)
final_goal(1, on((block,18)), (block,5), false)
final_goal(1, on((block,18)), (block,6), false)
final_goal(1, on((block,18)), (block,7), false)
final_goal(1, on((block,18)), (block,8), false)
final_goal(1, on((block,18)), (block,9), false)
final_goal(1, on((block,18)), nothing, false)
final_goal(1, on((block,18)), puzzle_room_1_table_left, false)
final_goal(1, on((block,18)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,18)), puzzle_room_1_table_right, false)
final_goal(1, on((block,18)), puzzle_room_2_table_left, false)
final_goal(1, on((block,18)), puzzle_room_2_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,10), false)
final_goal(1, on((block,2)), (block,11), false)
final_goal(1, on((block,2)), (block,12), false)
final_goal(1, on((block,2)), (block,13), false)
final_goal(1, on((block,2)), (block,14), false)
final_goal(1, on((block,2)), (block,15), false)
final_goal(1, on((block,2)), (block,16), false)
final_goal(1, on((block,2)), (block,17), false)
final_goal(1, on((block,2)), (block,18), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), (block,7), false)
final_goal(1, on((block,2)), (block,8), false)
final_goal(1, on((block,2)), (block,9), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_1_table_left, false)
final_goal(1, on((block,2)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_1_table_right, false)
final_goal(1, on((block,2)), puzzle_room_2_table_left, false)
final_goal(1, on((block,2)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_2_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,10), false)
final_goal(1, on((block,3)), (block,11), false)
final_goal(1, on((block,3)), (block,12), false)
final_goal(1, on((block,3)), (block,13), false)
final_goal(1, on((block,3)), (block,14), false)
final_goal(1, on((block,3)), (block,15), false)
final_goal(1, on((block,3)), (block,16), false)
final_goal(1, on((block,3)), (block,17), false)
final_goal(1, on((block,3)), (block,18), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), (block,7), false)
final_goal(1, on((block,3)), (block,8), false)
final_goal(1, on((block,3)), (block,9), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_1_table_right, false)
final_goal(1, on((block,3)), puzzle_room_2_table_left, false)
final_goal(1, on((block,3)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_2_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,10), false)
final_goal(1, on((block,4)), (block,11), false)
final_goal(1, on((block,4)), (block,12), false)
final_goal(1, on((block,4)), (block,13), false)
final_goal(1, on((block,4)), (block,14), false)
final_goal(1, on((block,4)), (block,15), false)
final_goal(1, on((block,4)), (block,16), false)
final_goal(1, on((block,4)), (block,17), false)
final_goal(1, on((block,4)), (block,18), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), (block,7), false)
final_goal(1, on((block,4)), (block,8), false)
final_goal(1, on((block,4)), (block,9), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_1_table_left, false)
final_goal(1, on((block,4)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_1_table_right, false)
final_goal(1, on((block,4)), puzzle_room_2_table_left, false)
final_goal(1, on((block,4)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_2_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,10), false)
final_goal(1, on((block,5)), (block,11), false)
final_goal(1, on((block,5)), (block,12), false)
final_goal(1, on((block,5)), (block,13), false)
final_goal(1, on((block,5)), (block,14), false)
final_goal(1, on((block,5)), (block,15), false)
final_goal(1, on((block,5)), (block,16), false)
final_goal(1, on((block,5)), (block,17), false)
final_goal(1, on((block,5)), (block,18), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,7), false)
final_goal(1, on((block,5)), (block,8), false)
final_goal(1, on((block,5)), (block,9), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_1_table_left, false)
final_goal(1, on((block,5)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_1_table_right, false)
final_goal(1, on((block,5)), puzzle_room_2_table_left, false)
final_goal(1, on((block,5)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_2_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,10), false)
final_goal(1, on((block,6)), (block,11), false)
final_goal(1, on((block,6)), (block,12), false)
final_goal(1, on((block,6)), (block,13), false)
final_goal(1, on((block,6)), (block,14), false)
final_goal(1, on((block,6)), (block,15), false)
final_goal(1, on((block,6)), (block,16), false)
final_goal(1, on((block,6)), (block,17), false)
final_goal(1, on((block,6)), (block,18), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), (block,7), false)
final_goal(1, on((block,6)), (block,8), false)
final_goal(1, on((block,6)), (block,9), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_1_table_left, false)
final_goal(1, on((block,6)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,6)), puzzle_room_2_table_left, false)
final_goal(1, on((block,6)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,6)), puzzle_room_2_table_right, false)
final_goal(1, on((block,7)), (block,1), false)
final_goal(1, on((block,7)), (block,10), false)
final_goal(1, on((block,7)), (block,11), false)
final_goal(1, on((block,7)), (block,12), false)
final_goal(1, on((block,7)), (block,13), false)
final_goal(1, on((block,7)), (block,14), false)
final_goal(1, on((block,7)), (block,15), false)
final_goal(1, on((block,7)), (block,16), false)
final_goal(1, on((block,7)), (block,17), false)
final_goal(1, on((block,7)), (block,18), false)
final_goal(1, on((block,7)), (block,2), false)
final_goal(1, on((block,7)), (block,3), false)
final_goal(1, on((block,7)), (block,4), false)
final_goal(1, on((block,7)), (block,5), false)
final_goal(1, on((block,7)), (block,6), false)
final_goal(1, on((block,7)), (block,9), false)
final_goal(1, on((block,7)), nothing, false)
final_goal(1, on((block,7)), puzzle_room_1_table_left, false)
final_goal(1, on((block,7)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_1_table_right, false)
final_goal(1, on((block,7)), puzzle_room_2_table_left, false)
final_goal(1, on((block,7)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_2_table_right, false)
final_goal(1, on((block,8)), (block,1), false)
final_goal(1, on((block,8)), (block,10), false)
final_goal(1, on((block,8)), (block,11), false)
final_goal(1, on((block,8)), (block,12), false)
final_goal(1, on((block,8)), (block,13), false)
final_goal(1, on((block,8)), (block,14), false)
final_goal(1, on((block,8)), (block,15), false)
final_goal(1, on((block,8)), (block,16), false)
final_goal(1, on((block,8)), (block,17), false)
final_goal(1, on((block,8)), (block,18), false)
final_goal(1, on((block,8)), (block,2), false)
final_goal(1, on((block,8)), (block,3), false)
final_goal(1, on((block,8)), (block,4), false)
final_goal(1, on((block,8)), (block,5), false)
final_goal(1, on((block,8)), (block,6), false)
final_goal(1, on((block,8)), (block,7), false)
final_goal(1, on((block,8)), nothing, false)
final_goal(1, on((block,8)), puzzle_room_1_table_left, false)
final_goal(1, on((block,8)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_1_table_right, false)
final_goal(1, on((block,8)), puzzle_room_2_table_left, false)
final_goal(1, on((block,8)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_2_table_right, false)
final_goal(1, on((block,9)), (block,1), false)
final_goal(1, on((block,9)), (block,10), false)
final_goal(1, on((block,9)), (block,11), false)
final_goal(1, on((block,9)), (block,12), false)
final_goal(1, on((block,9)), (block,13), false)
final_goal(1, on((block,9)), (block,14), false)
final_goal(1, on((block,9)), (block,15), false)
final_goal(1, on((block,9)), (block,16), false)
final_goal(1, on((block,9)), (block,17), false)
final_goal(1, on((block,9)), (block,18), false)
final_goal(1, on((block,9)), (block,2), false)
final_goal(1, on((block,9)), (block,3), false)
final_goal(1, on((block,9)), (block,4), false)
final_goal(1, on((block,9)), (block,5), false)
final_goal(1, on((block,9)), (block,6), false)
final_goal(1, on((block,9)), (block,7), false)
final_goal(1, on((block,9)), (block,8), false)
final_goal(1, on((block,9)), nothing, false)
final_goal(1, on((block,9)), puzzle_room_1_table_left, false)
final_goal(1, on((block,9)), puzzle_room_1_table_right, false)
final_goal(1, on((block,9)), puzzle_room_2_table_left, false)
final_goal(1, on((block,9)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,9)), puzzle_room_2_table_right, false)
final_goal(1, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', 5)
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Hasty object at 0x0000021F9E41DE80>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', False)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-5] : ONLINE MODE

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 5 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 4 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 3 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 2 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 5, Highest = 5.

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [1-5].

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 5

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Hasty object at 0x0000021F9E41DE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 5)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 5] classical : Concurrency enabled : Minimum search length bound disabled with value 0

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 5
concurrency = True
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[04-03-2022_16-21-23] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = True
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[04-03-2022_16-21-23] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[04-03-2022_16-21-23] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 459 rules into program part ash_initial_state:

holds(5, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(5, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(5, complete_tower(red,puzzle_room_1_table), false, 0).
holds(5, complete_tower(red,puzzle_room_2_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(5, in((block,1)), puzzle_room_1, 0).
holds(5, in((block,10)), puzzle_room_2, 0).
holds(5, in((block,11)), puzzle_room_2, 0).
holds(5, in((block,12)), puzzle_room_2, 0).
holds(5, in((block,13)), store_room_2, 0).
holds(5, in((block,14)), store_room_2, 0).
holds(5, in((block,15)), store_room_2, 0).
holds(5, in((block,16)), puzzle_room_2, 0).
holds(5, in((block,17)), store_room_2, 0).
holds(5, in((block,18)), puzzle_room_2, 0).
holds(5, in((block,2)), puzzle_room_1, 0).
holds(5, in((block,3)), puzzle_room_1, 0).
holds(5, in((block,4)), store_room_1, 0).
holds(5, in((block,5)), store_room_1, 0).
holds(5, in((block,6)), store_room_1, 0).
holds(5, in((block,7)), puzzle_room_1, 0).
holds(5, in((block,8)), store_room_1, 0).
holds(5, in((block,9)), puzzle_room_1, 0).
holds(5, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(5, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(5, in(talos), starting_room_1, 0).
holds(5, in_tower((block,1),(block,1)), true, 0).
holds(5, in_tower((block,1),(block,10)), false, 0).
holds(5, in_tower((block,1),(block,11)), false, 0).
holds(5, in_tower((block,1),(block,12)), false, 0).
holds(5, in_tower((block,1),(block,13)), false, 0).
holds(5, in_tower((block,1),(block,14)), false, 0).
holds(5, in_tower((block,1),(block,15)), false, 0).
holds(5, in_tower((block,1),(block,16)), false, 0).
holds(5, in_tower((block,1),(block,17)), false, 0).
holds(5, in_tower((block,1),(block,18)), false, 0).
holds(5, in_tower((block,1),(block,2)), false, 0).
holds(5, in_tower((block,1),(block,3)), true, 0).
holds(5, in_tower((block,1),(block,4)), false, 0).
holds(5, in_tower((block,1),(block,5)), false, 0).
holds(5, in_tower((block,1),(block,6)), false, 0).
holds(5, in_tower((block,1),(block,7)), false, 0).
holds(5, in_tower((block,1),(block,8)), false, 0).
holds(5, in_tower((block,1),(block,9)), false, 0).
holds(5, in_tower((block,10),(block,1)), false, 0).
holds(5, in_tower((block,10),(block,10)), true, 0).
holds(5, in_tower((block,10),(block,11)), false, 0).
holds(5, in_tower((block,10),(block,12)), true, 0).
holds(5, in_tower((block,10),(block,13)), false, 0).
holds(5, in_tower((block,10),(block,14)), false, 0).
holds(5, in_tower((block,10),(block,15)), false, 0).
holds(5, in_tower((block,10),(block,16)), false, 0).
holds(5, in_tower((block,10),(block,17)), false, 0).
holds(5, in_tower((block,10),(block,18)), false, 0).
holds(5, in_tower((block,10),(block,2)), false, 0).
holds(5, in_tower((block,10),(block,3)), false, 0).
holds(5, in_tower((block,10),(block,4)), false, 0).
holds(5, in_tower((block,10),(block,5)), false, 0).
holds(5, in_tower((block,10),(block,6)), false, 0).
holds(5, in_tower((block,10),(block,7)), false, 0).
holds(5, in_tower((block,10),(block,8)), false, 0).
holds(5, in_tower((block,10),(block,9)), false, 0).
holds(5, in_tower((block,11),(block,1)), false, 0).
holds(5, in_tower((block,11),(block,10)), false, 0).
holds(5, in_tower((block,11),(block,11)), true, 0).
holds(5, in_tower((block,11),(block,12)), false, 0).
holds(5, in_tower((block,11),(block,13)), false, 0).
holds(5, in_tower((block,11),(block,14)), false, 0).
holds(5, in_tower((block,11),(block,15)), false, 0).
holds(5, in_tower((block,11),(block,16)), false, 0).
holds(5, in_tower((block,11),(block,17)), false, 0).
holds(5, in_tower((block,11),(block,18)), false, 0).
holds(5, in_tower((block,11),(block,2)), false, 0).
holds(5, in_tower((block,11),(block,3)), false, 0).
holds(5, in_tower((block,11),(block,4)), false, 0).
holds(5, in_tower((block,11),(block,5)), false, 0).
holds(5, in_tower((block,11),(block,6)), false, 0).
holds(5, in_tower((block,11),(block,7)), false, 0).
holds(5, in_tower((block,11),(block,8)), false, 0).
holds(5, in_tower((block,11),(block,9)), false, 0).
holds(5, in_tower((block,12),(block,1)), false, 0).
holds(5, in_tower((block,12),(block,10)), false, 0).
holds(5, in_tower((block,12),(block,11)), false, 0).
holds(5, in_tower((block,12),(block,12)), false, 0).
holds(5, in_tower((block,12),(block,13)), false, 0).
holds(5, in_tower((block,12),(block,14)), false, 0).
holds(5, in_tower((block,12),(block,15)), false, 0).
holds(5, in_tower((block,12),(block,16)), false, 0).
holds(5, in_tower((block,12),(block,17)), false, 0).
holds(5, in_tower((block,12),(block,18)), false, 0).
holds(5, in_tower((block,12),(block,2)), false, 0).
holds(5, in_tower((block,12),(block,3)), false, 0).
holds(5, in_tower((block,12),(block,4)), false, 0).
holds(5, in_tower((block,12),(block,5)), false, 0).
holds(5, in_tower((block,12),(block,6)), false, 0).
holds(5, in_tower((block,12),(block,7)), false, 0).
holds(5, in_tower((block,12),(block,8)), false, 0).
holds(5, in_tower((block,12),(block,9)), false, 0).
holds(5, in_tower((block,13),(block,1)), false, 0).
holds(5, in_tower((block,13),(block,10)), false, 0).
holds(5, in_tower((block,13),(block,11)), false, 0).
holds(5, in_tower((block,13),(block,12)), false, 0).
holds(5, in_tower((block,13),(block,13)), false, 0).
holds(5, in_tower((block,13),(block,14)), false, 0).
holds(5, in_tower((block,13),(block,15)), false, 0).
holds(5, in_tower((block,13),(block,16)), false, 0).
holds(5, in_tower((block,13),(block,17)), false, 0).
holds(5, in_tower((block,13),(block,18)), false, 0).
holds(5, in_tower((block,13),(block,2)), false, 0).
holds(5, in_tower((block,13),(block,3)), false, 0).
holds(5, in_tower((block,13),(block,4)), false, 0).
holds(5, in_tower((block,13),(block,5)), false, 0).
holds(5, in_tower((block,13),(block,6)), false, 0).
holds(5, in_tower((block,13),(block,7)), false, 0).
holds(5, in_tower((block,13),(block,8)), false, 0).
holds(5, in_tower((block,13),(block,9)), false, 0).
holds(5, in_tower((block,14),(block,1)), false, 0).
holds(5, in_tower((block,14),(block,10)), false, 0).
holds(5, in_tower((block,14),(block,11)), false, 0).
holds(5, in_tower((block,14),(block,12)), false, 0).
holds(5, in_tower((block,14),(block,13)), false, 0).
holds(5, in_tower((block,14),(block,14)), false, 0).
holds(5, in_tower((block,14),(block,15)), false, 0).
holds(5, in_tower((block,14),(block,16)), false, 0).
holds(5, in_tower((block,14),(block,17)), false, 0).
holds(5, in_tower((block,14),(block,18)), false, 0).
holds(5, in_tower((block,14),(block,2)), false, 0).
holds(5, in_tower((block,14),(block,3)), false, 0).
holds(5, in_tower((block,14),(block,4)), false, 0).
holds(5, in_tower((block,14),(block,5)), false, 0).
holds(5, in_tower((block,14),(block,6)), false, 0).
holds(5, in_tower((block,14),(block,7)), false, 0).
holds(5, in_tower((block,14),(block,8)), false, 0).
holds(5, in_tower((block,14),(block,9)), false, 0).
holds(5, in_tower((block,15),(block,1)), false, 0).
holds(5, in_tower((block,15),(block,10)), false, 0).
holds(5, in_tower((block,15),(block,11)), false, 0).
holds(5, in_tower((block,15),(block,12)), false, 0).
holds(5, in_tower((block,15),(block,13)), false, 0).
holds(5, in_tower((block,15),(block,14)), false, 0).
holds(5, in_tower((block,15),(block,15)), false, 0).
holds(5, in_tower((block,15),(block,16)), false, 0).
holds(5, in_tower((block,15),(block,17)), false, 0).
holds(5, in_tower((block,15),(block,18)), false, 0).
holds(5, in_tower((block,15),(block,2)), false, 0).
holds(5, in_tower((block,15),(block,3)), false, 0).
holds(5, in_tower((block,15),(block,4)), false, 0).
holds(5, in_tower((block,15),(block,5)), false, 0).
holds(5, in_tower((block,15),(block,6)), false, 0).
holds(5, in_tower((block,15),(block,7)), false, 0).
holds(5, in_tower((block,15),(block,8)), false, 0).
holds(5, in_tower((block,15),(block,9)), false, 0).
holds(5, in_tower((block,16),(block,1)), false, 0).
holds(5, in_tower((block,16),(block,10)), false, 0).
holds(5, in_tower((block,16),(block,11)), false, 0).
holds(5, in_tower((block,16),(block,12)), false, 0).
holds(5, in_tower((block,16),(block,13)), false, 0).
holds(5, in_tower((block,16),(block,14)), false, 0).
holds(5, in_tower((block,16),(block,15)), false, 0).
holds(5, in_tower((block,16),(block,16)), true, 0).
holds(5, in_tower((block,16),(block,17)), false, 0).
holds(5, in_tower((block,16),(block,18)), true, 0).
holds(5, in_tower((block,16),(block,2)), false, 0).
holds(5, in_tower((block,16),(block,3)), false, 0).
holds(5, in_tower((block,16),(block,4)), false, 0).
holds(5, in_tower((block,16),(block,5)), false, 0).
holds(5, in_tower((block,16),(block,6)), false, 0).
holds(5, in_tower((block,16),(block,7)), false, 0).
holds(5, in_tower((block,16),(block,8)), false, 0).
holds(5, in_tower((block,16),(block,9)), false, 0).
holds(5, in_tower((block,17),(block,1)), false, 0).
holds(5, in_tower((block,17),(block,10)), false, 0).
holds(5, in_tower((block,17),(block,11)), false, 0).
holds(5, in_tower((block,17),(block,12)), false, 0).
holds(5, in_tower((block,17),(block,13)), false, 0).
holds(5, in_tower((block,17),(block,14)), false, 0).
holds(5, in_tower((block,17),(block,15)), false, 0).
holds(5, in_tower((block,17),(block,16)), false, 0).
holds(5, in_tower((block,17),(block,17)), false, 0).
holds(5, in_tower((block,17),(block,18)), false, 0).
holds(5, in_tower((block,17),(block,2)), false, 0).
holds(5, in_tower((block,17),(block,3)), false, 0).
holds(5, in_tower((block,17),(block,4)), false, 0).
holds(5, in_tower((block,17),(block,5)), false, 0).
holds(5, in_tower((block,17),(block,6)), false, 0).
holds(5, in_tower((block,17),(block,7)), false, 0).
holds(5, in_tower((block,17),(block,8)), false, 0).
holds(5, in_tower((block,17),(block,9)), false, 0).
holds(5, in_tower((block,18),(block,1)), false, 0).
holds(5, in_tower((block,18),(block,10)), false, 0).
holds(5, in_tower((block,18),(block,11)), false, 0).
holds(5, in_tower((block,18),(block,12)), false, 0).
holds(5, in_tower((block,18),(block,13)), false, 0).
holds(5, in_tower((block,18),(block,14)), false, 0).
holds(5, in_tower((block,18),(block,15)), false, 0).
holds(5, in_tower((block,18),(block,16)), false, 0).
holds(5, in_tower((block,18),(block,17)), false, 0).
holds(5, in_tower((block,18),(block,18)), false, 0).
holds(5, in_tower((block,18),(block,2)), false, 0).
holds(5, in_tower((block,18),(block,3)), false, 0).
holds(5, in_tower((block,18),(block,4)), false, 0).
holds(5, in_tower((block,18),(block,5)), false, 0).
holds(5, in_tower((block,18),(block,6)), false, 0).
holds(5, in_tower((block,18),(block,7)), false, 0).
holds(5, in_tower((block,18),(block,8)), false, 0).
holds(5, in_tower((block,18),(block,9)), false, 0).
holds(5, in_tower((block,2),(block,1)), false, 0).
holds(5, in_tower((block,2),(block,10)), false, 0).
holds(5, in_tower((block,2),(block,11)), false, 0).
holds(5, in_tower((block,2),(block,12)), false, 0).
holds(5, in_tower((block,2),(block,13)), false, 0).
holds(5, in_tower((block,2),(block,14)), false, 0).
holds(5, in_tower((block,2),(block,15)), false, 0).
holds(5, in_tower((block,2),(block,16)), false, 0).
holds(5, in_tower((block,2),(block,17)), false, 0).
holds(5, in_tower((block,2),(block,18)), false, 0).
holds(5, in_tower((block,2),(block,2)), true, 0).
holds(5, in_tower((block,2),(block,3)), false, 0).
holds(5, in_tower((block,2),(block,4)), false, 0).
holds(5, in_tower((block,2),(block,5)), false, 0).
holds(5, in_tower((block,2),(block,6)), false, 0).
holds(5, in_tower((block,2),(block,7)), false, 0).
holds(5, in_tower((block,2),(block,8)), false, 0).
holds(5, in_tower((block,2),(block,9)), false, 0).
holds(5, in_tower((block,3),(block,1)), false, 0).
holds(5, in_tower((block,3),(block,10)), false, 0).
holds(5, in_tower((block,3),(block,11)), false, 0).
holds(5, in_tower((block,3),(block,12)), false, 0).
holds(5, in_tower((block,3),(block,13)), false, 0).
holds(5, in_tower((block,3),(block,14)), false, 0).
holds(5, in_tower((block,3),(block,15)), false, 0).
holds(5, in_tower((block,3),(block,16)), false, 0).
holds(5, in_tower((block,3),(block,17)), false, 0).
holds(5, in_tower((block,3),(block,18)), false, 0).
holds(5, in_tower((block,3),(block,2)), false, 0).
holds(5, in_tower((block,3),(block,3)), false, 0).
holds(5, in_tower((block,3),(block,4)), false, 0).
holds(5, in_tower((block,3),(block,5)), false, 0).
holds(5, in_tower((block,3),(block,6)), false, 0).
holds(5, in_tower((block,3),(block,7)), false, 0).
holds(5, in_tower((block,3),(block,8)), false, 0).
holds(5, in_tower((block,3),(block,9)), false, 0).
holds(5, in_tower((block,4),(block,1)), false, 0).
holds(5, in_tower((block,4),(block,10)), false, 0).
holds(5, in_tower((block,4),(block,11)), false, 0).
holds(5, in_tower((block,4),(block,12)), false, 0).
holds(5, in_tower((block,4),(block,13)), false, 0).
holds(5, in_tower((block,4),(block,14)), false, 0).
holds(5, in_tower((block,4),(block,15)), false, 0).
holds(5, in_tower((block,4),(block,16)), false, 0).
holds(5, in_tower((block,4),(block,17)), false, 0).
holds(5, in_tower((block,4),(block,18)), false, 0).
holds(5, in_tower((block,4),(block,2)), false, 0).
holds(5, in_tower((block,4),(block,3)), false, 0).
holds(5, in_tower((block,4),(block,4)), false, 0).
holds(5, in_tower((block,4),(block,5)), false, 0).
holds(5, in_tower((block,4),(block,6)), false, 0).
holds(5, in_tower((block,4),(block,7)), false, 0).
holds(5, in_tower((block,4),(block,8)), false, 0).
holds(5, in_tower((block,4),(block,9)), false, 0).
holds(5, in_tower((block,5),(block,1)), false, 0).
holds(5, in_tower((block,5),(block,10)), false, 0).
holds(5, in_tower((block,5),(block,11)), false, 0).
holds(5, in_tower((block,5),(block,12)), false, 0).
holds(5, in_tower((block,5),(block,13)), false, 0).
holds(5, in_tower((block,5),(block,14)), false, 0).
holds(5, in_tower((block,5),(block,15)), false, 0).
holds(5, in_tower((block,5),(block,16)), false, 0).
holds(5, in_tower((block,5),(block,17)), false, 0).
holds(5, in_tower((block,5),(block,18)), false, 0).
holds(5, in_tower((block,5),(block,2)), false, 0).
holds(5, in_tower((block,5),(block,3)), false, 0).
holds(5, in_tower((block,5),(block,4)), false, 0).
holds(5, in_tower((block,5),(block,5)), false, 0).
holds(5, in_tower((block,5),(block,6)), false, 0).
holds(5, in_tower((block,5),(block,7)), false, 0).
holds(5, in_tower((block,5),(block,8)), false, 0).
holds(5, in_tower((block,5),(block,9)), false, 0).
holds(5, in_tower((block,6),(block,1)), false, 0).
holds(5, in_tower((block,6),(block,10)), false, 0).
holds(5, in_tower((block,6),(block,11)), false, 0).
holds(5, in_tower((block,6),(block,12)), false, 0).
holds(5, in_tower((block,6),(block,13)), false, 0).
holds(5, in_tower((block,6),(block,14)), false, 0).
holds(5, in_tower((block,6),(block,15)), false, 0).
holds(5, in_tower((block,6),(block,16)), false, 0).
holds(5, in_tower((block,6),(block,17)), false, 0).
holds(5, in_tower((block,6),(block,18)), false, 0).
holds(5, in_tower((block,6),(block,2)), false, 0).
holds(5, in_tower((block,6),(block,3)), false, 0).
holds(5, in_tower((block,6),(block,4)), false, 0).
holds(5, in_tower((block,6),(block,5)), false, 0).
holds(5, in_tower((block,6),(block,6)), false, 0).
holds(5, in_tower((block,6),(block,7)), false, 0).
holds(5, in_tower((block,6),(block,8)), false, 0).
holds(5, in_tower((block,6),(block,9)), false, 0).
holds(5, in_tower((block,7),(block,1)), false, 0).
holds(5, in_tower((block,7),(block,10)), false, 0).
holds(5, in_tower((block,7),(block,11)), false, 0).
holds(5, in_tower((block,7),(block,12)), false, 0).
holds(5, in_tower((block,7),(block,13)), false, 0).
holds(5, in_tower((block,7),(block,14)), false, 0).
holds(5, in_tower((block,7),(block,15)), false, 0).
holds(5, in_tower((block,7),(block,16)), false, 0).
holds(5, in_tower((block,7),(block,17)), false, 0).
holds(5, in_tower((block,7),(block,18)), false, 0).
holds(5, in_tower((block,7),(block,2)), false, 0).
holds(5, in_tower((block,7),(block,3)), false, 0).
holds(5, in_tower((block,7),(block,4)), false, 0).
holds(5, in_tower((block,7),(block,5)), false, 0).
holds(5, in_tower((block,7),(block,6)), false, 0).
holds(5, in_tower((block,7),(block,7)), true, 0).
holds(5, in_tower((block,7),(block,8)), false, 0).
holds(5, in_tower((block,7),(block,9)), true, 0).
holds(5, in_tower((block,8),(block,1)), false, 0).
holds(5, in_tower((block,8),(block,10)), false, 0).
holds(5, in_tower((block,8),(block,11)), false, 0).
holds(5, in_tower((block,8),(block,12)), false, 0).
holds(5, in_tower((block,8),(block,13)), false, 0).
holds(5, in_tower((block,8),(block,14)), false, 0).
holds(5, in_tower((block,8),(block,15)), false, 0).
holds(5, in_tower((block,8),(block,16)), false, 0).
holds(5, in_tower((block,8),(block,17)), false, 0).
holds(5, in_tower((block,8),(block,18)), false, 0).
holds(5, in_tower((block,8),(block,2)), false, 0).
holds(5, in_tower((block,8),(block,3)), false, 0).
holds(5, in_tower((block,8),(block,4)), false, 0).
holds(5, in_tower((block,8),(block,5)), false, 0).
holds(5, in_tower((block,8),(block,6)), false, 0).
holds(5, in_tower((block,8),(block,7)), false, 0).
holds(5, in_tower((block,8),(block,8)), false, 0).
holds(5, in_tower((block,8),(block,9)), false, 0).
holds(5, in_tower((block,9),(block,1)), false, 0).
holds(5, in_tower((block,9),(block,10)), false, 0).
holds(5, in_tower((block,9),(block,11)), false, 0).
holds(5, in_tower((block,9),(block,12)), false, 0).
holds(5, in_tower((block,9),(block,13)), false, 0).
holds(5, in_tower((block,9),(block,14)), false, 0).
holds(5, in_tower((block,9),(block,15)), false, 0).
holds(5, in_tower((block,9),(block,16)), false, 0).
holds(5, in_tower((block,9),(block,17)), false, 0).
holds(5, in_tower((block,9),(block,18)), false, 0).
holds(5, in_tower((block,9),(block,2)), false, 0).
holds(5, in_tower((block,9),(block,3)), false, 0).
holds(5, in_tower((block,9),(block,4)), false, 0).
holds(5, in_tower((block,9),(block,5)), false, 0).
holds(5, in_tower((block,9),(block,6)), false, 0).
holds(5, in_tower((block,9),(block,7)), false, 0).
holds(5, in_tower((block,9),(block,8)), false, 0).
holds(5, in_tower((block,9),(block,9)), false, 0).
holds(5, on((block,1)), puzzle_room_1_table, 0).
holds(5, on((block,10)), puzzle_room_2_table, 0).
holds(5, on((block,11)), puzzle_room_2_table, 0).
holds(5, on((block,12)), (block,10), 0).
holds(5, on((block,13)), nothing, 0).
holds(5, on((block,14)), nothing, 0).
holds(5, on((block,15)), nothing, 0).
holds(5, on((block,16)), puzzle_room_2_table, 0).
holds(5, on((block,17)), nothing, 0).
holds(5, on((block,18)), (block,16), 0).
holds(5, on((block,2)), puzzle_room_1_table, 0).
holds(5, on((block,3)), (block,1), 0).
holds(5, on((block,4)), nothing, 0).
holds(5, on((block,5)), nothing, 0).
holds(5, on((block,6)), nothing, 0).
holds(5, on((block,7)), puzzle_room_1_table, 0).
holds(5, on((block,8)), nothing, 0).
holds(5, on((block,9)), (block,7), 0).
holds(5, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(5, transporting(talos,(block,1)), false, 0).
holds(5, transporting(talos,(block,10)), false, 0).
holds(5, transporting(talos,(block,11)), false, 0).
holds(5, transporting(talos,(block,12)), false, 0).
holds(5, transporting(talos,(block,13)), false, 0).
holds(5, transporting(talos,(block,14)), false, 0).
holds(5, transporting(talos,(block,15)), false, 0).
holds(5, transporting(talos,(block,16)), false, 0).
holds(5, transporting(talos,(block,17)), false, 0).
holds(5, transporting(talos,(block,18)), false, 0).
holds(5, transporting(talos,(block,2)), false, 0).
holds(5, transporting(talos,(block,3)), false, 0).
holds(5, transporting(talos,(block,4)), false, 0).
holds(5, transporting(talos,(block,5)), false, 0).
holds(5, transporting(talos,(block,6)), false, 0).
holds(5, transporting(talos,(block,7)), false, 0).
holds(5, transporting(talos,(block,8)), false, 0).
holds(5, transporting(talos,(block,9)), false, 0).
holds(5, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_2_table), false, 0).

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1164 rules into program part ash_goal_state:

final_goal(5, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(5, in_tower((block,1),(block,1)), false, true).
final_goal(5, in_tower((block,1),(block,1)), true, false).
final_goal(5, in_tower((block,1),(block,10)), false, true).
final_goal(5, in_tower((block,1),(block,10)), true, false).
final_goal(5, in_tower((block,1),(block,11)), false, true).
final_goal(5, in_tower((block,1),(block,11)), true, false).
final_goal(5, in_tower((block,1),(block,12)), false, true).
final_goal(5, in_tower((block,1),(block,12)), true, false).
final_goal(5, in_tower((block,1),(block,13)), false, true).
final_goal(5, in_tower((block,1),(block,13)), true, false).
final_goal(5, in_tower((block,1),(block,14)), false, true).
final_goal(5, in_tower((block,1),(block,14)), true, false).
final_goal(5, in_tower((block,1),(block,15)), false, true).
final_goal(5, in_tower((block,1),(block,15)), true, false).
final_goal(5, in_tower((block,1),(block,16)), false, true).
final_goal(5, in_tower((block,1),(block,16)), true, false).
final_goal(5, in_tower((block,1),(block,17)), false, true).
final_goal(5, in_tower((block,1),(block,17)), true, false).
final_goal(5, in_tower((block,1),(block,18)), false, true).
final_goal(5, in_tower((block,1),(block,18)), true, false).
final_goal(5, in_tower((block,1),(block,2)), false, true).
final_goal(5, in_tower((block,1),(block,2)), true, false).
final_goal(5, in_tower((block,1),(block,3)), false, true).
final_goal(5, in_tower((block,1),(block,3)), true, false).
final_goal(5, in_tower((block,1),(block,4)), false, true).
final_goal(5, in_tower((block,1),(block,4)), true, false).
final_goal(5, in_tower((block,1),(block,5)), false, true).
final_goal(5, in_tower((block,1),(block,5)), true, false).
final_goal(5, in_tower((block,1),(block,6)), false, true).
final_goal(5, in_tower((block,1),(block,6)), true, false).
final_goal(5, in_tower((block,1),(block,7)), false, true).
final_goal(5, in_tower((block,1),(block,7)), true, false).
final_goal(5, in_tower((block,1),(block,8)), false, true).
final_goal(5, in_tower((block,1),(block,8)), true, false).
final_goal(5, in_tower((block,1),(block,9)), false, true).
final_goal(5, in_tower((block,1),(block,9)), true, false).
final_goal(5, in_tower((block,10),(block,1)), false, true).
final_goal(5, in_tower((block,10),(block,1)), true, false).
final_goal(5, in_tower((block,10),(block,10)), false, true).
final_goal(5, in_tower((block,10),(block,10)), true, false).
final_goal(5, in_tower((block,10),(block,11)), false, true).
final_goal(5, in_tower((block,10),(block,11)), true, false).
final_goal(5, in_tower((block,10),(block,12)), false, true).
final_goal(5, in_tower((block,10),(block,12)), true, false).
final_goal(5, in_tower((block,10),(block,13)), false, true).
final_goal(5, in_tower((block,10),(block,13)), true, false).
final_goal(5, in_tower((block,10),(block,14)), false, true).
final_goal(5, in_tower((block,10),(block,14)), true, false).
final_goal(5, in_tower((block,10),(block,15)), false, true).
final_goal(5, in_tower((block,10),(block,15)), true, false).
final_goal(5, in_tower((block,10),(block,16)), false, true).
final_goal(5, in_tower((block,10),(block,16)), true, false).
final_goal(5, in_tower((block,10),(block,17)), false, true).
final_goal(5, in_tower((block,10),(block,17)), true, false).
final_goal(5, in_tower((block,10),(block,18)), false, true).
final_goal(5, in_tower((block,10),(block,18)), true, false).
final_goal(5, in_tower((block,10),(block,2)), false, true).
final_goal(5, in_tower((block,10),(block,2)), true, false).
final_goal(5, in_tower((block,10),(block,3)), false, true).
final_goal(5, in_tower((block,10),(block,3)), true, false).
final_goal(5, in_tower((block,10),(block,4)), false, true).
final_goal(5, in_tower((block,10),(block,4)), true, false).
final_goal(5, in_tower((block,10),(block,5)), false, true).
final_goal(5, in_tower((block,10),(block,5)), true, false).
final_goal(5, in_tower((block,10),(block,6)), false, true).
final_goal(5, in_tower((block,10),(block,6)), true, false).
final_goal(5, in_tower((block,10),(block,7)), false, true).
final_goal(5, in_tower((block,10),(block,7)), true, false).
final_goal(5, in_tower((block,10),(block,8)), false, true).
final_goal(5, in_tower((block,10),(block,8)), true, false).
final_goal(5, in_tower((block,10),(block,9)), false, true).
final_goal(5, in_tower((block,10),(block,9)), true, false).
final_goal(5, in_tower((block,11),(block,1)), false, true).
final_goal(5, in_tower((block,11),(block,1)), true, false).
final_goal(5, in_tower((block,11),(block,10)), false, true).
final_goal(5, in_tower((block,11),(block,10)), true, false).
final_goal(5, in_tower((block,11),(block,11)), false, true).
final_goal(5, in_tower((block,11),(block,11)), true, false).
final_goal(5, in_tower((block,11),(block,12)), false, true).
final_goal(5, in_tower((block,11),(block,12)), true, false).
final_goal(5, in_tower((block,11),(block,13)), false, true).
final_goal(5, in_tower((block,11),(block,13)), true, false).
final_goal(5, in_tower((block,11),(block,14)), false, true).
final_goal(5, in_tower((block,11),(block,14)), true, false).
final_goal(5, in_tower((block,11),(block,15)), false, true).
final_goal(5, in_tower((block,11),(block,15)), true, false).
final_goal(5, in_tower((block,11),(block,16)), false, true).
final_goal(5, in_tower((block,11),(block,16)), true, false).
final_goal(5, in_tower((block,11),(block,17)), false, true).
final_goal(5, in_tower((block,11),(block,17)), true, false).
final_goal(5, in_tower((block,11),(block,18)), false, true).
final_goal(5, in_tower((block,11),(block,18)), true, false).
final_goal(5, in_tower((block,11),(block,2)), false, true).
final_goal(5, in_tower((block,11),(block,2)), true, false).
final_goal(5, in_tower((block,11),(block,3)), false, true).
final_goal(5, in_tower((block,11),(block,3)), true, false).
final_goal(5, in_tower((block,11),(block,4)), false, true).
final_goal(5, in_tower((block,11),(block,4)), true, false).
final_goal(5, in_tower((block,11),(block,5)), false, true).
final_goal(5, in_tower((block,11),(block,5)), true, false).
final_goal(5, in_tower((block,11),(block,6)), false, true).
final_goal(5, in_tower((block,11),(block,6)), true, false).
final_goal(5, in_tower((block,11),(block,7)), false, true).
final_goal(5, in_tower((block,11),(block,7)), true, false).
final_goal(5, in_tower((block,11),(block,8)), false, true).
final_goal(5, in_tower((block,11),(block,8)), true, false).
final_goal(5, in_tower((block,11),(block,9)), false, true).
final_goal(5, in_tower((block,11),(block,9)), true, false).
final_goal(5, in_tower((block,12),(block,1)), false, true).
final_goal(5, in_tower((block,12),(block,1)), true, false).
final_goal(5, in_tower((block,12),(block,10)), false, false).
final_goal(5, in_tower((block,12),(block,10)), true, true).
final_goal(5, in_tower((block,12),(block,11)), false, false).
final_goal(5, in_tower((block,12),(block,11)), true, true).
final_goal(5, in_tower((block,12),(block,12)), false, false).
final_goal(5, in_tower((block,12),(block,12)), true, true).
final_goal(5, in_tower((block,12),(block,13)), false, true).
final_goal(5, in_tower((block,12),(block,13)), true, false).
final_goal(5, in_tower((block,12),(block,14)), false, true).
final_goal(5, in_tower((block,12),(block,14)), true, false).
final_goal(5, in_tower((block,12),(block,15)), false, true).
final_goal(5, in_tower((block,12),(block,15)), true, false).
final_goal(5, in_tower((block,12),(block,16)), false, true).
final_goal(5, in_tower((block,12),(block,16)), true, false).
final_goal(5, in_tower((block,12),(block,17)), false, true).
final_goal(5, in_tower((block,12),(block,17)), true, false).
final_goal(5, in_tower((block,12),(block,18)), false, true).
final_goal(5, in_tower((block,12),(block,18)), true, false).
final_goal(5, in_tower((block,12),(block,2)), false, true).
final_goal(5, in_tower((block,12),(block,2)), true, false).
final_goal(5, in_tower((block,12),(block,3)), false, true).
final_goal(5, in_tower((block,12),(block,3)), true, false).
final_goal(5, in_tower((block,12),(block,4)), false, true).
final_goal(5, in_tower((block,12),(block,4)), true, false).
final_goal(5, in_tower((block,12),(block,5)), false, true).
final_goal(5, in_tower((block,12),(block,5)), true, false).
final_goal(5, in_tower((block,12),(block,6)), false, true).
final_goal(5, in_tower((block,12),(block,6)), true, false).
final_goal(5, in_tower((block,12),(block,7)), false, true).
final_goal(5, in_tower((block,12),(block,7)), true, false).
final_goal(5, in_tower((block,12),(block,8)), false, true).
final_goal(5, in_tower((block,12),(block,8)), true, false).
final_goal(5, in_tower((block,12),(block,9)), false, true).
final_goal(5, in_tower((block,12),(block,9)), true, false).
final_goal(5, in_tower((block,13),(block,1)), false, true).
final_goal(5, in_tower((block,13),(block,1)), true, false).
final_goal(5, in_tower((block,13),(block,10)), false, true).
final_goal(5, in_tower((block,13),(block,10)), true, false).
final_goal(5, in_tower((block,13),(block,11)), false, true).
final_goal(5, in_tower((block,13),(block,11)), true, false).
final_goal(5, in_tower((block,13),(block,12)), false, true).
final_goal(5, in_tower((block,13),(block,12)), true, false).
final_goal(5, in_tower((block,13),(block,13)), false, true).
final_goal(5, in_tower((block,13),(block,13)), true, false).
final_goal(5, in_tower((block,13),(block,14)), false, true).
final_goal(5, in_tower((block,13),(block,14)), true, false).
final_goal(5, in_tower((block,13),(block,15)), false, true).
final_goal(5, in_tower((block,13),(block,15)), true, false).
final_goal(5, in_tower((block,13),(block,16)), false, true).
final_goal(5, in_tower((block,13),(block,16)), true, false).
final_goal(5, in_tower((block,13),(block,17)), false, true).
final_goal(5, in_tower((block,13),(block,17)), true, false).
final_goal(5, in_tower((block,13),(block,18)), false, true).
final_goal(5, in_tower((block,13),(block,18)), true, false).
final_goal(5, in_tower((block,13),(block,2)), false, true).
final_goal(5, in_tower((block,13),(block,2)), true, false).
final_goal(5, in_tower((block,13),(block,3)), false, true).
final_goal(5, in_tower((block,13),(block,3)), true, false).
final_goal(5, in_tower((block,13),(block,4)), false, true).
final_goal(5, in_tower((block,13),(block,4)), true, false).
final_goal(5, in_tower((block,13),(block,5)), false, true).
final_goal(5, in_tower((block,13),(block,5)), true, false).
final_goal(5, in_tower((block,13),(block,6)), false, true).
final_goal(5, in_tower((block,13),(block,6)), true, false).
final_goal(5, in_tower((block,13),(block,7)), false, true).
final_goal(5, in_tower((block,13),(block,7)), true, false).
final_goal(5, in_tower((block,13),(block,8)), false, true).
final_goal(5, in_tower((block,13),(block,8)), true, false).
final_goal(5, in_tower((block,13),(block,9)), false, true).
final_goal(5, in_tower((block,13),(block,9)), true, false).
final_goal(5, in_tower((block,14),(block,1)), false, true).
final_goal(5, in_tower((block,14),(block,1)), true, false).
final_goal(5, in_tower((block,14),(block,10)), false, true).
final_goal(5, in_tower((block,14),(block,10)), true, false).
final_goal(5, in_tower((block,14),(block,11)), false, true).
final_goal(5, in_tower((block,14),(block,11)), true, false).
final_goal(5, in_tower((block,14),(block,12)), false, true).
final_goal(5, in_tower((block,14),(block,12)), true, false).
final_goal(5, in_tower((block,14),(block,13)), false, true).
final_goal(5, in_tower((block,14),(block,13)), true, false).
final_goal(5, in_tower((block,14),(block,14)), false, true).
final_goal(5, in_tower((block,14),(block,14)), true, false).
final_goal(5, in_tower((block,14),(block,15)), false, true).
final_goal(5, in_tower((block,14),(block,15)), true, false).
final_goal(5, in_tower((block,14),(block,16)), false, true).
final_goal(5, in_tower((block,14),(block,16)), true, false).
final_goal(5, in_tower((block,14),(block,17)), false, true).
final_goal(5, in_tower((block,14),(block,17)), true, false).
final_goal(5, in_tower((block,14),(block,18)), false, true).
final_goal(5, in_tower((block,14),(block,18)), true, false).
final_goal(5, in_tower((block,14),(block,2)), false, true).
final_goal(5, in_tower((block,14),(block,2)), true, false).
final_goal(5, in_tower((block,14),(block,3)), false, true).
final_goal(5, in_tower((block,14),(block,3)), true, false).
final_goal(5, in_tower((block,14),(block,4)), false, true).
final_goal(5, in_tower((block,14),(block,4)), true, false).
final_goal(5, in_tower((block,14),(block,5)), false, true).
final_goal(5, in_tower((block,14),(block,5)), true, false).
final_goal(5, in_tower((block,14),(block,6)), false, true).
final_goal(5, in_tower((block,14),(block,6)), true, false).
final_goal(5, in_tower((block,14),(block,7)), false, true).
final_goal(5, in_tower((block,14),(block,7)), true, false).
final_goal(5, in_tower((block,14),(block,8)), false, true).
final_goal(5, in_tower((block,14),(block,8)), true, false).
final_goal(5, in_tower((block,14),(block,9)), false, true).
final_goal(5, in_tower((block,14),(block,9)), true, false).
final_goal(5, in_tower((block,15),(block,1)), false, true).
final_goal(5, in_tower((block,15),(block,1)), true, false).
final_goal(5, in_tower((block,15),(block,10)), false, true).
final_goal(5, in_tower((block,15),(block,10)), true, false).
final_goal(5, in_tower((block,15),(block,11)), false, true).
final_goal(5, in_tower((block,15),(block,11)), true, false).
final_goal(5, in_tower((block,15),(block,12)), false, true).
final_goal(5, in_tower((block,15),(block,12)), true, false).
final_goal(5, in_tower((block,15),(block,13)), false, false).
final_goal(5, in_tower((block,15),(block,13)), true, true).
final_goal(5, in_tower((block,15),(block,14)), false, false).
final_goal(5, in_tower((block,15),(block,14)), true, true).
final_goal(5, in_tower((block,15),(block,15)), false, false).
final_goal(5, in_tower((block,15),(block,15)), true, true).
final_goal(5, in_tower((block,15),(block,16)), false, true).
final_goal(5, in_tower((block,15),(block,16)), true, false).
final_goal(5, in_tower((block,15),(block,17)), false, true).
final_goal(5, in_tower((block,15),(block,17)), true, false).
final_goal(5, in_tower((block,15),(block,18)), false, true).
final_goal(5, in_tower((block,15),(block,18)), true, false).
final_goal(5, in_tower((block,15),(block,2)), false, true).
final_goal(5, in_tower((block,15),(block,2)), true, false).
final_goal(5, in_tower((block,15),(block,3)), false, true).
final_goal(5, in_tower((block,15),(block,3)), true, false).
final_goal(5, in_tower((block,15),(block,4)), false, true).
final_goal(5, in_tower((block,15),(block,4)), true, false).
final_goal(5, in_tower((block,15),(block,5)), false, true).
final_goal(5, in_tower((block,15),(block,5)), true, false).
final_goal(5, in_tower((block,15),(block,6)), false, true).
final_goal(5, in_tower((block,15),(block,6)), true, false).
final_goal(5, in_tower((block,15),(block,7)), false, true).
final_goal(5, in_tower((block,15),(block,7)), true, false).
final_goal(5, in_tower((block,15),(block,8)), false, true).
final_goal(5, in_tower((block,15),(block,8)), true, false).
final_goal(5, in_tower((block,15),(block,9)), false, true).
final_goal(5, in_tower((block,15),(block,9)), true, false).
final_goal(5, in_tower((block,16),(block,1)), false, true).
final_goal(5, in_tower((block,16),(block,1)), true, false).
final_goal(5, in_tower((block,16),(block,10)), false, true).
final_goal(5, in_tower((block,16),(block,10)), true, false).
final_goal(5, in_tower((block,16),(block,11)), false, true).
final_goal(5, in_tower((block,16),(block,11)), true, false).
final_goal(5, in_tower((block,16),(block,12)), false, true).
final_goal(5, in_tower((block,16),(block,12)), true, false).
final_goal(5, in_tower((block,16),(block,13)), false, true).
final_goal(5, in_tower((block,16),(block,13)), true, false).
final_goal(5, in_tower((block,16),(block,14)), false, true).
final_goal(5, in_tower((block,16),(block,14)), true, false).
final_goal(5, in_tower((block,16),(block,15)), false, true).
final_goal(5, in_tower((block,16),(block,15)), true, false).
final_goal(5, in_tower((block,16),(block,16)), false, true).
final_goal(5, in_tower((block,16),(block,16)), true, false).
final_goal(5, in_tower((block,16),(block,17)), false, true).
final_goal(5, in_tower((block,16),(block,17)), true, false).
final_goal(5, in_tower((block,16),(block,18)), false, true).
final_goal(5, in_tower((block,16),(block,18)), true, false).
final_goal(5, in_tower((block,16),(block,2)), false, true).
final_goal(5, in_tower((block,16),(block,2)), true, false).
final_goal(5, in_tower((block,16),(block,3)), false, true).
final_goal(5, in_tower((block,16),(block,3)), true, false).
final_goal(5, in_tower((block,16),(block,4)), false, true).
final_goal(5, in_tower((block,16),(block,4)), true, false).
final_goal(5, in_tower((block,16),(block,5)), false, true).
final_goal(5, in_tower((block,16),(block,5)), true, false).
final_goal(5, in_tower((block,16),(block,6)), false, true).
final_goal(5, in_tower((block,16),(block,6)), true, false).
final_goal(5, in_tower((block,16),(block,7)), false, true).
final_goal(5, in_tower((block,16),(block,7)), true, false).
final_goal(5, in_tower((block,16),(block,8)), false, true).
final_goal(5, in_tower((block,16),(block,8)), true, false).
final_goal(5, in_tower((block,16),(block,9)), false, true).
final_goal(5, in_tower((block,16),(block,9)), true, false).
final_goal(5, in_tower((block,17),(block,1)), false, true).
final_goal(5, in_tower((block,17),(block,1)), true, false).
final_goal(5, in_tower((block,17),(block,10)), false, true).
final_goal(5, in_tower((block,17),(block,10)), true, false).
final_goal(5, in_tower((block,17),(block,11)), false, true).
final_goal(5, in_tower((block,17),(block,11)), true, false).
final_goal(5, in_tower((block,17),(block,12)), false, true).
final_goal(5, in_tower((block,17),(block,12)), true, false).
final_goal(5, in_tower((block,17),(block,13)), false, true).
final_goal(5, in_tower((block,17),(block,13)), true, false).
final_goal(5, in_tower((block,17),(block,14)), false, true).
final_goal(5, in_tower((block,17),(block,14)), true, false).
final_goal(5, in_tower((block,17),(block,15)), false, true).
final_goal(5, in_tower((block,17),(block,15)), true, false).
final_goal(5, in_tower((block,17),(block,16)), false, true).
final_goal(5, in_tower((block,17),(block,16)), true, false).
final_goal(5, in_tower((block,17),(block,17)), false, true).
final_goal(5, in_tower((block,17),(block,17)), true, false).
final_goal(5, in_tower((block,17),(block,18)), false, true).
final_goal(5, in_tower((block,17),(block,18)), true, false).
final_goal(5, in_tower((block,17),(block,2)), false, true).
final_goal(5, in_tower((block,17),(block,2)), true, false).
final_goal(5, in_tower((block,17),(block,3)), false, true).
final_goal(5, in_tower((block,17),(block,3)), true, false).
final_goal(5, in_tower((block,17),(block,4)), false, true).
final_goal(5, in_tower((block,17),(block,4)), true, false).
final_goal(5, in_tower((block,17),(block,5)), false, true).
final_goal(5, in_tower((block,17),(block,5)), true, false).
final_goal(5, in_tower((block,17),(block,6)), false, true).
final_goal(5, in_tower((block,17),(block,6)), true, false).
final_goal(5, in_tower((block,17),(block,7)), false, true).
final_goal(5, in_tower((block,17),(block,7)), true, false).
final_goal(5, in_tower((block,17),(block,8)), false, true).
final_goal(5, in_tower((block,17),(block,8)), true, false).
final_goal(5, in_tower((block,17),(block,9)), false, true).
final_goal(5, in_tower((block,17),(block,9)), true, false).
final_goal(5, in_tower((block,18),(block,1)), false, true).
final_goal(5, in_tower((block,18),(block,1)), true, false).
final_goal(5, in_tower((block,18),(block,10)), false, true).
final_goal(5, in_tower((block,18),(block,10)), true, false).
final_goal(5, in_tower((block,18),(block,11)), false, true).
final_goal(5, in_tower((block,18),(block,11)), true, false).
final_goal(5, in_tower((block,18),(block,12)), false, true).
final_goal(5, in_tower((block,18),(block,12)), true, false).
final_goal(5, in_tower((block,18),(block,13)), false, true).
final_goal(5, in_tower((block,18),(block,13)), true, false).
final_goal(5, in_tower((block,18),(block,14)), false, true).
final_goal(5, in_tower((block,18),(block,14)), true, false).
final_goal(5, in_tower((block,18),(block,15)), false, true).
final_goal(5, in_tower((block,18),(block,15)), true, false).
final_goal(5, in_tower((block,18),(block,16)), false, false).
final_goal(5, in_tower((block,18),(block,16)), true, true).
final_goal(5, in_tower((block,18),(block,17)), false, false).
final_goal(5, in_tower((block,18),(block,17)), true, true).
final_goal(5, in_tower((block,18),(block,18)), false, false).
final_goal(5, in_tower((block,18),(block,18)), true, true).
final_goal(5, in_tower((block,18),(block,2)), false, true).
final_goal(5, in_tower((block,18),(block,2)), true, false).
final_goal(5, in_tower((block,18),(block,3)), false, true).
final_goal(5, in_tower((block,18),(block,3)), true, false).
final_goal(5, in_tower((block,18),(block,4)), false, true).
final_goal(5, in_tower((block,18),(block,4)), true, false).
final_goal(5, in_tower((block,18),(block,5)), false, true).
final_goal(5, in_tower((block,18),(block,5)), true, false).
final_goal(5, in_tower((block,18),(block,6)), false, true).
final_goal(5, in_tower((block,18),(block,6)), true, false).
final_goal(5, in_tower((block,18),(block,7)), false, true).
final_goal(5, in_tower((block,18),(block,7)), true, false).
final_goal(5, in_tower((block,18),(block,8)), false, true).
final_goal(5, in_tower((block,18),(block,8)), true, false).
final_goal(5, in_tower((block,18),(block,9)), false, true).
final_goal(5, in_tower((block,18),(block,9)), true, false).
final_goal(5, in_tower((block,2),(block,1)), false, true).
final_goal(5, in_tower((block,2),(block,1)), true, false).
final_goal(5, in_tower((block,2),(block,10)), false, true).
final_goal(5, in_tower((block,2),(block,10)), true, false).
final_goal(5, in_tower((block,2),(block,11)), false, true).
final_goal(5, in_tower((block,2),(block,11)), true, false).
final_goal(5, in_tower((block,2),(block,12)), false, true).
final_goal(5, in_tower((block,2),(block,12)), true, false).
final_goal(5, in_tower((block,2),(block,13)), false, true).
final_goal(5, in_tower((block,2),(block,13)), true, false).
final_goal(5, in_tower((block,2),(block,14)), false, true).
final_goal(5, in_tower((block,2),(block,14)), true, false).
final_goal(5, in_tower((block,2),(block,15)), false, true).
final_goal(5, in_tower((block,2),(block,15)), true, false).
final_goal(5, in_tower((block,2),(block,16)), false, true).
final_goal(5, in_tower((block,2),(block,16)), true, false).
final_goal(5, in_tower((block,2),(block,17)), false, true).
final_goal(5, in_tower((block,2),(block,17)), true, false).
final_goal(5, in_tower((block,2),(block,18)), false, true).
final_goal(5, in_tower((block,2),(block,18)), true, false).
final_goal(5, in_tower((block,2),(block,2)), false, true).
final_goal(5, in_tower((block,2),(block,2)), true, false).
final_goal(5, in_tower((block,2),(block,3)), false, true).
final_goal(5, in_tower((block,2),(block,3)), true, false).
final_goal(5, in_tower((block,2),(block,4)), false, true).
final_goal(5, in_tower((block,2),(block,4)), true, false).
final_goal(5, in_tower((block,2),(block,5)), false, true).
final_goal(5, in_tower((block,2),(block,5)), true, false).
final_goal(5, in_tower((block,2),(block,6)), false, true).
final_goal(5, in_tower((block,2),(block,6)), true, false).
final_goal(5, in_tower((block,2),(block,7)), false, true).
final_goal(5, in_tower((block,2),(block,7)), true, false).
final_goal(5, in_tower((block,2),(block,8)), false, true).
final_goal(5, in_tower((block,2),(block,8)), true, false).
final_goal(5, in_tower((block,2),(block,9)), false, true).
final_goal(5, in_tower((block,2),(block,9)), true, false).
final_goal(5, in_tower((block,3),(block,1)), false, false).
final_goal(5, in_tower((block,3),(block,1)), true, true).
final_goal(5, in_tower((block,3),(block,10)), false, true).
final_goal(5, in_tower((block,3),(block,10)), true, false).
final_goal(5, in_tower((block,3),(block,11)), false, true).
final_goal(5, in_tower((block,3),(block,11)), true, false).
final_goal(5, in_tower((block,3),(block,12)), false, true).
final_goal(5, in_tower((block,3),(block,12)), true, false).
final_goal(5, in_tower((block,3),(block,13)), false, true).
final_goal(5, in_tower((block,3),(block,13)), true, false).
final_goal(5, in_tower((block,3),(block,14)), false, true).
final_goal(5, in_tower((block,3),(block,14)), true, false).
final_goal(5, in_tower((block,3),(block,15)), false, true).
final_goal(5, in_tower((block,3),(block,15)), true, false).
final_goal(5, in_tower((block,3),(block,16)), false, true).
final_goal(5, in_tower((block,3),(block,16)), true, false).
final_goal(5, in_tower((block,3),(block,17)), false, true).
final_goal(5, in_tower((block,3),(block,17)), true, false).
final_goal(5, in_tower((block,3),(block,18)), false, true).
final_goal(5, in_tower((block,3),(block,18)), true, false).
final_goal(5, in_tower((block,3),(block,2)), false, false).
final_goal(5, in_tower((block,3),(block,2)), true, true).
final_goal(5, in_tower((block,3),(block,3)), false, false).
final_goal(5, in_tower((block,3),(block,3)), true, true).
final_goal(5, in_tower((block,3),(block,4)), false, true).
final_goal(5, in_tower((block,3),(block,4)), true, false).
final_goal(5, in_tower((block,3),(block,5)), false, true).
final_goal(5, in_tower((block,3),(block,5)), true, false).
final_goal(5, in_tower((block,3),(block,6)), false, true).
final_goal(5, in_tower((block,3),(block,6)), true, false).
final_goal(5, in_tower((block,3),(block,7)), false, true).
final_goal(5, in_tower((block,3),(block,7)), true, false).
final_goal(5, in_tower((block,3),(block,8)), false, true).
final_goal(5, in_tower((block,3),(block,8)), true, false).
final_goal(5, in_tower((block,3),(block,9)), false, true).
final_goal(5, in_tower((block,3),(block,9)), true, false).
final_goal(5, in_tower((block,4),(block,1)), false, true).
final_goal(5, in_tower((block,4),(block,1)), true, false).
final_goal(5, in_tower((block,4),(block,10)), false, true).
final_goal(5, in_tower((block,4),(block,10)), true, false).
final_goal(5, in_tower((block,4),(block,11)), false, true).
final_goal(5, in_tower((block,4),(block,11)), true, false).
final_goal(5, in_tower((block,4),(block,12)), false, true).
final_goal(5, in_tower((block,4),(block,12)), true, false).
final_goal(5, in_tower((block,4),(block,13)), false, true).
final_goal(5, in_tower((block,4),(block,13)), true, false).
final_goal(5, in_tower((block,4),(block,14)), false, true).
final_goal(5, in_tower((block,4),(block,14)), true, false).
final_goal(5, in_tower((block,4),(block,15)), false, true).
final_goal(5, in_tower((block,4),(block,15)), true, false).
final_goal(5, in_tower((block,4),(block,16)), false, true).
final_goal(5, in_tower((block,4),(block,16)), true, false).
final_goal(5, in_tower((block,4),(block,17)), false, true).
final_goal(5, in_tower((block,4),(block,17)), true, false).
final_goal(5, in_tower((block,4),(block,18)), false, true).
final_goal(5, in_tower((block,4),(block,18)), true, false).
final_goal(5, in_tower((block,4),(block,2)), false, true).
final_goal(5, in_tower((block,4),(block,2)), true, false).
final_goal(5, in_tower((block,4),(block,3)), false, true).
final_goal(5, in_tower((block,4),(block,3)), true, false).
final_goal(5, in_tower((block,4),(block,4)), false, true).
final_goal(5, in_tower((block,4),(block,4)), true, false).
final_goal(5, in_tower((block,4),(block,5)), false, true).
final_goal(5, in_tower((block,4),(block,5)), true, false).
final_goal(5, in_tower((block,4),(block,6)), false, true).
final_goal(5, in_tower((block,4),(block,6)), true, false).
final_goal(5, in_tower((block,4),(block,7)), false, true).
final_goal(5, in_tower((block,4),(block,7)), true, false).
final_goal(5, in_tower((block,4),(block,8)), false, true).
final_goal(5, in_tower((block,4),(block,8)), true, false).
final_goal(5, in_tower((block,4),(block,9)), false, true).
final_goal(5, in_tower((block,4),(block,9)), true, false).
final_goal(5, in_tower((block,5),(block,1)), false, true).
final_goal(5, in_tower((block,5),(block,1)), true, false).
final_goal(5, in_tower((block,5),(block,10)), false, true).
final_goal(5, in_tower((block,5),(block,10)), true, false).
final_goal(5, in_tower((block,5),(block,11)), false, true).
final_goal(5, in_tower((block,5),(block,11)), true, false).
final_goal(5, in_tower((block,5),(block,12)), false, true).
final_goal(5, in_tower((block,5),(block,12)), true, false).
final_goal(5, in_tower((block,5),(block,13)), false, true).
final_goal(5, in_tower((block,5),(block,13)), true, false).
final_goal(5, in_tower((block,5),(block,14)), false, true).
final_goal(5, in_tower((block,5),(block,14)), true, false).
final_goal(5, in_tower((block,5),(block,15)), false, true).
final_goal(5, in_tower((block,5),(block,15)), true, false).
final_goal(5, in_tower((block,5),(block,16)), false, true).
final_goal(5, in_tower((block,5),(block,16)), true, false).
final_goal(5, in_tower((block,5),(block,17)), false, true).
final_goal(5, in_tower((block,5),(block,17)), true, false).
final_goal(5, in_tower((block,5),(block,18)), false, true).
final_goal(5, in_tower((block,5),(block,18)), true, false).
final_goal(5, in_tower((block,5),(block,2)), false, true).
final_goal(5, in_tower((block,5),(block,2)), true, false).
final_goal(5, in_tower((block,5),(block,3)), false, true).
final_goal(5, in_tower((block,5),(block,3)), true, false).
final_goal(5, in_tower((block,5),(block,4)), false, true).
final_goal(5, in_tower((block,5),(block,4)), true, false).
final_goal(5, in_tower((block,5),(block,5)), false, true).
final_goal(5, in_tower((block,5),(block,5)), true, false).
final_goal(5, in_tower((block,5),(block,6)), false, true).
final_goal(5, in_tower((block,5),(block,6)), true, false).
final_goal(5, in_tower((block,5),(block,7)), false, true).
final_goal(5, in_tower((block,5),(block,7)), true, false).
final_goal(5, in_tower((block,5),(block,8)), false, true).
final_goal(5, in_tower((block,5),(block,8)), true, false).
final_goal(5, in_tower((block,5),(block,9)), false, true).
final_goal(5, in_tower((block,5),(block,9)), true, false).
final_goal(5, in_tower((block,6),(block,1)), false, true).
final_goal(5, in_tower((block,6),(block,1)), true, false).
final_goal(5, in_tower((block,6),(block,10)), false, true).
final_goal(5, in_tower((block,6),(block,10)), true, false).
final_goal(5, in_tower((block,6),(block,11)), false, true).
final_goal(5, in_tower((block,6),(block,11)), true, false).
final_goal(5, in_tower((block,6),(block,12)), false, true).
final_goal(5, in_tower((block,6),(block,12)), true, false).
final_goal(5, in_tower((block,6),(block,13)), false, true).
final_goal(5, in_tower((block,6),(block,13)), true, false).
final_goal(5, in_tower((block,6),(block,14)), false, true).
final_goal(5, in_tower((block,6),(block,14)), true, false).
final_goal(5, in_tower((block,6),(block,15)), false, true).
final_goal(5, in_tower((block,6),(block,15)), true, false).
final_goal(5, in_tower((block,6),(block,16)), false, true).
final_goal(5, in_tower((block,6),(block,16)), true, false).
final_goal(5, in_tower((block,6),(block,17)), false, true).
final_goal(5, in_tower((block,6),(block,17)), true, false).
final_goal(5, in_tower((block,6),(block,18)), false, true).
final_goal(5, in_tower((block,6),(block,18)), true, false).
final_goal(5, in_tower((block,6),(block,2)), false, true).
final_goal(5, in_tower((block,6),(block,2)), true, false).
final_goal(5, in_tower((block,6),(block,3)), false, true).
final_goal(5, in_tower((block,6),(block,3)), true, false).
final_goal(5, in_tower((block,6),(block,4)), false, false).
final_goal(5, in_tower((block,6),(block,4)), true, true).
final_goal(5, in_tower((block,6),(block,5)), false, false).
final_goal(5, in_tower((block,6),(block,5)), true, true).
final_goal(5, in_tower((block,6),(block,6)), false, false).
final_goal(5, in_tower((block,6),(block,6)), true, true).
final_goal(5, in_tower((block,6),(block,7)), false, true).
final_goal(5, in_tower((block,6),(block,7)), true, false).
final_goal(5, in_tower((block,6),(block,8)), false, true).
final_goal(5, in_tower((block,6),(block,8)), true, false).
final_goal(5, in_tower((block,6),(block,9)), false, true).
final_goal(5, in_tower((block,6),(block,9)), true, false).
final_goal(5, in_tower((block,7),(block,1)), false, true).
final_goal(5, in_tower((block,7),(block,1)), true, false).
final_goal(5, in_tower((block,7),(block,10)), false, true).
final_goal(5, in_tower((block,7),(block,10)), true, false).
final_goal(5, in_tower((block,7),(block,11)), false, true).
final_goal(5, in_tower((block,7),(block,11)), true, false).
final_goal(5, in_tower((block,7),(block,12)), false, true).
final_goal(5, in_tower((block,7),(block,12)), true, false).
final_goal(5, in_tower((block,7),(block,13)), false, true).
final_goal(5, in_tower((block,7),(block,13)), true, false).
final_goal(5, in_tower((block,7),(block,14)), false, true).
final_goal(5, in_tower((block,7),(block,14)), true, false).
final_goal(5, in_tower((block,7),(block,15)), false, true).
final_goal(5, in_tower((block,7),(block,15)), true, false).
final_goal(5, in_tower((block,7),(block,16)), false, true).
final_goal(5, in_tower((block,7),(block,16)), true, false).
final_goal(5, in_tower((block,7),(block,17)), false, true).
final_goal(5, in_tower((block,7),(block,17)), true, false).
final_goal(5, in_tower((block,7),(block,18)), false, true).
final_goal(5, in_tower((block,7),(block,18)), true, false).
final_goal(5, in_tower((block,7),(block,2)), false, true).
final_goal(5, in_tower((block,7),(block,2)), true, false).
final_goal(5, in_tower((block,7),(block,3)), false, true).
final_goal(5, in_tower((block,7),(block,3)), true, false).
final_goal(5, in_tower((block,7),(block,4)), false, true).
final_goal(5, in_tower((block,7),(block,4)), true, false).
final_goal(5, in_tower((block,7),(block,5)), false, true).
final_goal(5, in_tower((block,7),(block,5)), true, false).
final_goal(5, in_tower((block,7),(block,6)), false, true).
final_goal(5, in_tower((block,7),(block,6)), true, false).
final_goal(5, in_tower((block,7),(block,7)), false, true).
final_goal(5, in_tower((block,7),(block,7)), true, false).
final_goal(5, in_tower((block,7),(block,8)), false, true).
final_goal(5, in_tower((block,7),(block,8)), true, false).
final_goal(5, in_tower((block,7),(block,9)), false, true).
final_goal(5, in_tower((block,7),(block,9)), true, false).
final_goal(5, in_tower((block,8),(block,1)), false, true).
final_goal(5, in_tower((block,8),(block,1)), true, false).
final_goal(5, in_tower((block,8),(block,10)), false, true).
final_goal(5, in_tower((block,8),(block,10)), true, false).
final_goal(5, in_tower((block,8),(block,11)), false, true).
final_goal(5, in_tower((block,8),(block,11)), true, false).
final_goal(5, in_tower((block,8),(block,12)), false, true).
final_goal(5, in_tower((block,8),(block,12)), true, false).
final_goal(5, in_tower((block,8),(block,13)), false, true).
final_goal(5, in_tower((block,8),(block,13)), true, false).
final_goal(5, in_tower((block,8),(block,14)), false, true).
final_goal(5, in_tower((block,8),(block,14)), true, false).
final_goal(5, in_tower((block,8),(block,15)), false, true).
final_goal(5, in_tower((block,8),(block,15)), true, false).
final_goal(5, in_tower((block,8),(block,16)), false, true).
final_goal(5, in_tower((block,8),(block,16)), true, false).
final_goal(5, in_tower((block,8),(block,17)), false, true).
final_goal(5, in_tower((block,8),(block,17)), true, false).
final_goal(5, in_tower((block,8),(block,18)), false, true).
final_goal(5, in_tower((block,8),(block,18)), true, false).
final_goal(5, in_tower((block,8),(block,2)), false, true).
final_goal(5, in_tower((block,8),(block,2)), true, false).
final_goal(5, in_tower((block,8),(block,3)), false, true).
final_goal(5, in_tower((block,8),(block,3)), true, false).
final_goal(5, in_tower((block,8),(block,4)), false, true).
final_goal(5, in_tower((block,8),(block,4)), true, false).
final_goal(5, in_tower((block,8),(block,5)), false, true).
final_goal(5, in_tower((block,8),(block,5)), true, false).
final_goal(5, in_tower((block,8),(block,6)), false, true).
final_goal(5, in_tower((block,8),(block,6)), true, false).
final_goal(5, in_tower((block,8),(block,7)), false, true).
final_goal(5, in_tower((block,8),(block,7)), true, false).
final_goal(5, in_tower((block,8),(block,8)), false, true).
final_goal(5, in_tower((block,8),(block,8)), true, false).
final_goal(5, in_tower((block,8),(block,9)), false, true).
final_goal(5, in_tower((block,8),(block,9)), true, false).
final_goal(5, in_tower((block,9),(block,1)), false, true).
final_goal(5, in_tower((block,9),(block,1)), true, false).
final_goal(5, in_tower((block,9),(block,10)), false, true).
final_goal(5, in_tower((block,9),(block,10)), true, false).
final_goal(5, in_tower((block,9),(block,11)), false, true).
final_goal(5, in_tower((block,9),(block,11)), true, false).
final_goal(5, in_tower((block,9),(block,12)), false, true).
final_goal(5, in_tower((block,9),(block,12)), true, false).
final_goal(5, in_tower((block,9),(block,13)), false, true).
final_goal(5, in_tower((block,9),(block,13)), true, false).
final_goal(5, in_tower((block,9),(block,14)), false, true).
final_goal(5, in_tower((block,9),(block,14)), true, false).
final_goal(5, in_tower((block,9),(block,15)), false, true).
final_goal(5, in_tower((block,9),(block,15)), true, false).
final_goal(5, in_tower((block,9),(block,16)), false, true).
final_goal(5, in_tower((block,9),(block,16)), true, false).
final_goal(5, in_tower((block,9),(block,17)), false, true).
final_goal(5, in_tower((block,9),(block,17)), true, false).
final_goal(5, in_tower((block,9),(block,18)), false, true).
final_goal(5, in_tower((block,9),(block,18)), true, false).
final_goal(5, in_tower((block,9),(block,2)), false, true).
final_goal(5, in_tower((block,9),(block,2)), true, false).
final_goal(5, in_tower((block,9),(block,3)), false, true).
final_goal(5, in_tower((block,9),(block,3)), true, false).
final_goal(5, in_tower((block,9),(block,4)), false, true).
final_goal(5, in_tower((block,9),(block,4)), true, false).
final_goal(5, in_tower((block,9),(block,5)), false, true).
final_goal(5, in_tower((block,9),(block,5)), true, false).
final_goal(5, in_tower((block,9),(block,6)), false, true).
final_goal(5, in_tower((block,9),(block,6)), true, false).
final_goal(5, in_tower((block,9),(block,7)), false, false).
final_goal(5, in_tower((block,9),(block,7)), true, true).
final_goal(5, in_tower((block,9),(block,8)), false, false).
final_goal(5, in_tower((block,9),(block,8)), true, true).
final_goal(5, in_tower((block,9),(block,9)), false, false).
final_goal(5, in_tower((block,9),(block,9)), true, true).
final_goal(5, on((block,1)), (block,10), false).
final_goal(5, on((block,1)), (block,11), false).
final_goal(5, on((block,1)), (block,12), false).
final_goal(5, on((block,1)), (block,13), false).
final_goal(5, on((block,1)), (block,14), false).
final_goal(5, on((block,1)), (block,15), false).
final_goal(5, on((block,1)), (block,16), false).
final_goal(5, on((block,1)), (block,17), false).
final_goal(5, on((block,1)), (block,18), false).
final_goal(5, on((block,1)), (block,2), true).
final_goal(5, on((block,1)), (block,3), false).
final_goal(5, on((block,1)), (block,4), false).
final_goal(5, on((block,1)), (block,5), false).
final_goal(5, on((block,1)), (block,6), false).
final_goal(5, on((block,1)), (block,7), false).
final_goal(5, on((block,1)), (block,8), false).
final_goal(5, on((block,1)), (block,9), false).
final_goal(5, on((block,1)), nothing, false).
final_goal(5, on((block,1)), puzzle_room_1_table, false).
final_goal(5, on((block,1)), puzzle_room_2_table, false).
final_goal(5, on((block,10)), (block,1), false).
final_goal(5, on((block,10)), (block,11), true).
final_goal(5, on((block,10)), (block,12), false).
final_goal(5, on((block,10)), (block,13), false).
final_goal(5, on((block,10)), (block,14), false).
final_goal(5, on((block,10)), (block,15), false).
final_goal(5, on((block,10)), (block,16), false).
final_goal(5, on((block,10)), (block,17), false).
final_goal(5, on((block,10)), (block,18), false).
final_goal(5, on((block,10)), (block,2), false).
final_goal(5, on((block,10)), (block,3), false).
final_goal(5, on((block,10)), (block,4), false).
final_goal(5, on((block,10)), (block,5), false).
final_goal(5, on((block,10)), (block,6), false).
final_goal(5, on((block,10)), (block,7), false).
final_goal(5, on((block,10)), (block,8), false).
final_goal(5, on((block,10)), (block,9), false).
final_goal(5, on((block,10)), nothing, false).
final_goal(5, on((block,10)), puzzle_room_1_table, false).
final_goal(5, on((block,10)), puzzle_room_2_table, false).
final_goal(5, on((block,11)), (block,1), false).
final_goal(5, on((block,11)), (block,10), false).
final_goal(5, on((block,11)), (block,12), true).
final_goal(5, on((block,11)), (block,13), false).
final_goal(5, on((block,11)), (block,14), false).
final_goal(5, on((block,11)), (block,15), false).
final_goal(5, on((block,11)), (block,16), false).
final_goal(5, on((block,11)), (block,17), false).
final_goal(5, on((block,11)), (block,18), false).
final_goal(5, on((block,11)), (block,2), false).
final_goal(5, on((block,11)), (block,3), false).
final_goal(5, on((block,11)), (block,4), false).
final_goal(5, on((block,11)), (block,5), false).
final_goal(5, on((block,11)), (block,6), false).
final_goal(5, on((block,11)), (block,7), false).
final_goal(5, on((block,11)), (block,8), false).
final_goal(5, on((block,11)), (block,9), false).
final_goal(5, on((block,11)), nothing, false).
final_goal(5, on((block,11)), puzzle_room_1_table, false).
final_goal(5, on((block,11)), puzzle_room_2_table, false).
final_goal(5, on((block,12)), (block,1), false).
final_goal(5, on((block,12)), (block,10), false).
final_goal(5, on((block,12)), (block,11), false).
final_goal(5, on((block,12)), (block,13), false).
final_goal(5, on((block,12)), (block,14), false).
final_goal(5, on((block,12)), (block,15), false).
final_goal(5, on((block,12)), (block,16), false).
final_goal(5, on((block,12)), (block,17), false).
final_goal(5, on((block,12)), (block,18), false).
final_goal(5, on((block,12)), (block,2), false).
final_goal(5, on((block,12)), (block,3), false).
final_goal(5, on((block,12)), (block,4), false).
final_goal(5, on((block,12)), (block,5), false).
final_goal(5, on((block,12)), (block,6), false).
final_goal(5, on((block,12)), (block,7), false).
final_goal(5, on((block,12)), (block,8), false).
final_goal(5, on((block,12)), (block,9), false).
final_goal(5, on((block,12)), nothing, false).
final_goal(5, on((block,12)), puzzle_room_1_table, false).
final_goal(5, on((block,12)), puzzle_room_2_table, true).
final_goal(5, on((block,13)), (block,1), false).
final_goal(5, on((block,13)), (block,10), false).
final_goal(5, on((block,13)), (block,11), false).
final_goal(5, on((block,13)), (block,12), false).
final_goal(5, on((block,13)), (block,14), true).
final_goal(5, on((block,13)), (block,15), false).
final_goal(5, on((block,13)), (block,16), false).
final_goal(5, on((block,13)), (block,17), false).
final_goal(5, on((block,13)), (block,18), false).
final_goal(5, on((block,13)), (block,2), false).
final_goal(5, on((block,13)), (block,3), false).
final_goal(5, on((block,13)), (block,4), false).
final_goal(5, on((block,13)), (block,5), false).
final_goal(5, on((block,13)), (block,6), false).
final_goal(5, on((block,13)), (block,7), false).
final_goal(5, on((block,13)), (block,8), false).
final_goal(5, on((block,13)), (block,9), false).
final_goal(5, on((block,13)), nothing, false).
final_goal(5, on((block,13)), puzzle_room_1_table, false).
final_goal(5, on((block,13)), puzzle_room_2_table, false).
final_goal(5, on((block,14)), (block,1), false).
final_goal(5, on((block,14)), (block,10), false).
final_goal(5, on((block,14)), (block,11), false).
final_goal(5, on((block,14)), (block,12), false).
final_goal(5, on((block,14)), (block,13), false).
final_goal(5, on((block,14)), (block,15), true).
final_goal(5, on((block,14)), (block,16), false).
final_goal(5, on((block,14)), (block,17), false).
final_goal(5, on((block,14)), (block,18), false).
final_goal(5, on((block,14)), (block,2), false).
final_goal(5, on((block,14)), (block,3), false).
final_goal(5, on((block,14)), (block,4), false).
final_goal(5, on((block,14)), (block,5), false).
final_goal(5, on((block,14)), (block,6), false).
final_goal(5, on((block,14)), (block,7), false).
final_goal(5, on((block,14)), (block,8), false).
final_goal(5, on((block,14)), (block,9), false).
final_goal(5, on((block,14)), nothing, false).
final_goal(5, on((block,14)), puzzle_room_1_table, false).
final_goal(5, on((block,14)), puzzle_room_2_table, false).
final_goal(5, on((block,15)), (block,1), false).
final_goal(5, on((block,15)), (block,10), false).
final_goal(5, on((block,15)), (block,11), false).
final_goal(5, on((block,15)), (block,12), false).
final_goal(5, on((block,15)), (block,13), false).
final_goal(5, on((block,15)), (block,14), false).
final_goal(5, on((block,15)), (block,16), false).
final_goal(5, on((block,15)), (block,17), false).
final_goal(5, on((block,15)), (block,18), false).
final_goal(5, on((block,15)), (block,2), false).
final_goal(5, on((block,15)), (block,3), false).
final_goal(5, on((block,15)), (block,4), false).
final_goal(5, on((block,15)), (block,5), false).
final_goal(5, on((block,15)), (block,6), false).
final_goal(5, on((block,15)), (block,7), false).
final_goal(5, on((block,15)), (block,8), false).
final_goal(5, on((block,15)), (block,9), false).
final_goal(5, on((block,15)), nothing, false).
final_goal(5, on((block,15)), puzzle_room_1_table, false).
final_goal(5, on((block,15)), puzzle_room_2_table, true).
final_goal(5, on((block,16)), (block,1), false).
final_goal(5, on((block,16)), (block,10), false).
final_goal(5, on((block,16)), (block,11), false).
final_goal(5, on((block,16)), (block,12), false).
final_goal(5, on((block,16)), (block,13), false).
final_goal(5, on((block,16)), (block,14), false).
final_goal(5, on((block,16)), (block,15), false).
final_goal(5, on((block,16)), (block,17), true).
final_goal(5, on((block,16)), (block,18), false).
final_goal(5, on((block,16)), (block,2), false).
final_goal(5, on((block,16)), (block,3), false).
final_goal(5, on((block,16)), (block,4), false).
final_goal(5, on((block,16)), (block,5), false).
final_goal(5, on((block,16)), (block,6), false).
final_goal(5, on((block,16)), (block,7), false).
final_goal(5, on((block,16)), (block,8), false).
final_goal(5, on((block,16)), (block,9), false).
final_goal(5, on((block,16)), nothing, false).
final_goal(5, on((block,16)), puzzle_room_1_table, false).
final_goal(5, on((block,16)), puzzle_room_2_table, false).
final_goal(5, on((block,17)), (block,1), false).
final_goal(5, on((block,17)), (block,10), false).
final_goal(5, on((block,17)), (block,11), false).
final_goal(5, on((block,17)), (block,12), false).
final_goal(5, on((block,17)), (block,13), false).
final_goal(5, on((block,17)), (block,14), false).
final_goal(5, on((block,17)), (block,15), false).
final_goal(5, on((block,17)), (block,16), false).
final_goal(5, on((block,17)), (block,18), true).
final_goal(5, on((block,17)), (block,2), false).
final_goal(5, on((block,17)), (block,3), false).
final_goal(5, on((block,17)), (block,4), false).
final_goal(5, on((block,17)), (block,5), false).
final_goal(5, on((block,17)), (block,6), false).
final_goal(5, on((block,17)), (block,7), false).
final_goal(5, on((block,17)), (block,8), false).
final_goal(5, on((block,17)), (block,9), false).
final_goal(5, on((block,17)), nothing, false).
final_goal(5, on((block,17)), puzzle_room_1_table, false).
final_goal(5, on((block,17)), puzzle_room_2_table, false).
final_goal(5, on((block,18)), (block,1), false).
final_goal(5, on((block,18)), (block,10), false).
final_goal(5, on((block,18)), (block,11), false).
final_goal(5, on((block,18)), (block,12), false).
final_goal(5, on((block,18)), (block,13), false).
final_goal(5, on((block,18)), (block,14), false).
final_goal(5, on((block,18)), (block,15), false).
final_goal(5, on((block,18)), (block,16), false).
final_goal(5, on((block,18)), (block,17), false).
final_goal(5, on((block,18)), (block,2), false).
final_goal(5, on((block,18)), (block,3), false).
final_goal(5, on((block,18)), (block,4), false).
final_goal(5, on((block,18)), (block,5), false).
final_goal(5, on((block,18)), (block,6), false).
final_goal(5, on((block,18)), (block,7), false).
final_goal(5, on((block,18)), (block,8), false).
final_goal(5, on((block,18)), (block,9), false).
final_goal(5, on((block,18)), nothing, false).
final_goal(5, on((block,18)), puzzle_room_1_table, false).
final_goal(5, on((block,18)), puzzle_room_2_table, true).
final_goal(5, on((block,2)), (block,1), false).
final_goal(5, on((block,2)), (block,10), false).
final_goal(5, on((block,2)), (block,11), false).
final_goal(5, on((block,2)), (block,12), false).
final_goal(5, on((block,2)), (block,13), false).
final_goal(5, on((block,2)), (block,14), false).
final_goal(5, on((block,2)), (block,15), false).
final_goal(5, on((block,2)), (block,16), false).
final_goal(5, on((block,2)), (block,17), false).
final_goal(5, on((block,2)), (block,18), false).
final_goal(5, on((block,2)), (block,3), true).
final_goal(5, on((block,2)), (block,4), false).
final_goal(5, on((block,2)), (block,5), false).
final_goal(5, on((block,2)), (block,6), false).
final_goal(5, on((block,2)), (block,7), false).
final_goal(5, on((block,2)), (block,8), false).
final_goal(5, on((block,2)), (block,9), false).
final_goal(5, on((block,2)), nothing, false).
final_goal(5, on((block,2)), puzzle_room_1_table, false).
final_goal(5, on((block,2)), puzzle_room_2_table, false).
final_goal(5, on((block,3)), (block,1), false).
final_goal(5, on((block,3)), (block,10), false).
final_goal(5, on((block,3)), (block,11), false).
final_goal(5, on((block,3)), (block,12), false).
final_goal(5, on((block,3)), (block,13), false).
final_goal(5, on((block,3)), (block,14), false).
final_goal(5, on((block,3)), (block,15), false).
final_goal(5, on((block,3)), (block,16), false).
final_goal(5, on((block,3)), (block,17), false).
final_goal(5, on((block,3)), (block,18), false).
final_goal(5, on((block,3)), (block,2), false).
final_goal(5, on((block,3)), (block,4), false).
final_goal(5, on((block,3)), (block,5), false).
final_goal(5, on((block,3)), (block,6), false).
final_goal(5, on((block,3)), (block,7), false).
final_goal(5, on((block,3)), (block,8), false).
final_goal(5, on((block,3)), (block,9), false).
final_goal(5, on((block,3)), nothing, false).
final_goal(5, on((block,3)), puzzle_room_1_table, true).
final_goal(5, on((block,3)), puzzle_room_2_table, false).
final_goal(5, on((block,4)), (block,1), false).
final_goal(5, on((block,4)), (block,10), false).
final_goal(5, on((block,4)), (block,11), false).
final_goal(5, on((block,4)), (block,12), false).
final_goal(5, on((block,4)), (block,13), false).
final_goal(5, on((block,4)), (block,14), false).
final_goal(5, on((block,4)), (block,15), false).
final_goal(5, on((block,4)), (block,16), false).
final_goal(5, on((block,4)), (block,17), false).
final_goal(5, on((block,4)), (block,18), false).
final_goal(5, on((block,4)), (block,2), false).
final_goal(5, on((block,4)), (block,3), false).
final_goal(5, on((block,4)), (block,5), true).
final_goal(5, on((block,4)), (block,6), false).
final_goal(5, on((block,4)), (block,7), false).
final_goal(5, on((block,4)), (block,8), false).
final_goal(5, on((block,4)), (block,9), false).
final_goal(5, on((block,4)), nothing, false).
final_goal(5, on((block,4)), puzzle_room_1_table, false).
final_goal(5, on((block,4)), puzzle_room_2_table, false).
final_goal(5, on((block,5)), (block,1), false).
final_goal(5, on((block,5)), (block,10), false).
final_goal(5, on((block,5)), (block,11), false).
final_goal(5, on((block,5)), (block,12), false).
final_goal(5, on((block,5)), (block,13), false).
final_goal(5, on((block,5)), (block,14), false).
final_goal(5, on((block,5)), (block,15), false).
final_goal(5, on((block,5)), (block,16), false).
final_goal(5, on((block,5)), (block,17), false).
final_goal(5, on((block,5)), (block,18), false).
final_goal(5, on((block,5)), (block,2), false).
final_goal(5, on((block,5)), (block,3), false).
final_goal(5, on((block,5)), (block,4), false).
final_goal(5, on((block,5)), (block,6), true).
final_goal(5, on((block,5)), (block,7), false).
final_goal(5, on((block,5)), (block,8), false).
final_goal(5, on((block,5)), (block,9), false).
final_goal(5, on((block,5)), nothing, false).
final_goal(5, on((block,5)), puzzle_room_1_table, false).
final_goal(5, on((block,5)), puzzle_room_2_table, false).
final_goal(5, on((block,6)), (block,1), false).
final_goal(5, on((block,6)), (block,10), false).
final_goal(5, on((block,6)), (block,11), false).
final_goal(5, on((block,6)), (block,12), false).
final_goal(5, on((block,6)), (block,13), false).
final_goal(5, on((block,6)), (block,14), false).
final_goal(5, on((block,6)), (block,15), false).
final_goal(5, on((block,6)), (block,16), false).
final_goal(5, on((block,6)), (block,17), false).
final_goal(5, on((block,6)), (block,18), false).
final_goal(5, on((block,6)), (block,2), false).
final_goal(5, on((block,6)), (block,3), false).
final_goal(5, on((block,6)), (block,4), false).
final_goal(5, on((block,6)), (block,5), false).
final_goal(5, on((block,6)), (block,7), false).
final_goal(5, on((block,6)), (block,8), false).
final_goal(5, on((block,6)), (block,9), false).
final_goal(5, on((block,6)), nothing, false).
final_goal(5, on((block,6)), puzzle_room_1_table, true).
final_goal(5, on((block,6)), puzzle_room_2_table, false).
final_goal(5, on((block,7)), (block,1), false).
final_goal(5, on((block,7)), (block,10), false).
final_goal(5, on((block,7)), (block,11), false).
final_goal(5, on((block,7)), (block,12), false).
final_goal(5, on((block,7)), (block,13), false).
final_goal(5, on((block,7)), (block,14), false).
final_goal(5, on((block,7)), (block,15), false).
final_goal(5, on((block,7)), (block,16), false).
final_goal(5, on((block,7)), (block,17), false).
final_goal(5, on((block,7)), (block,18), false).
final_goal(5, on((block,7)), (block,2), false).
final_goal(5, on((block,7)), (block,3), false).
final_goal(5, on((block,7)), (block,4), false).
final_goal(5, on((block,7)), (block,5), false).
final_goal(5, on((block,7)), (block,6), false).
final_goal(5, on((block,7)), (block,8), true).
final_goal(5, on((block,7)), (block,9), false).
final_goal(5, on((block,7)), nothing, false).
final_goal(5, on((block,7)), puzzle_room_1_table, false).
final_goal(5, on((block,7)), puzzle_room_2_table, false).
final_goal(5, on((block,8)), (block,1), false).
final_goal(5, on((block,8)), (block,10), false).
final_goal(5, on((block,8)), (block,11), false).
final_goal(5, on((block,8)), (block,12), false).
final_goal(5, on((block,8)), (block,13), false).
final_goal(5, on((block,8)), (block,14), false).
final_goal(5, on((block,8)), (block,15), false).
final_goal(5, on((block,8)), (block,16), false).
final_goal(5, on((block,8)), (block,17), false).
final_goal(5, on((block,8)), (block,18), false).
final_goal(5, on((block,8)), (block,2), false).
final_goal(5, on((block,8)), (block,3), false).
final_goal(5, on((block,8)), (block,4), false).
final_goal(5, on((block,8)), (block,5), false).
final_goal(5, on((block,8)), (block,6), false).
final_goal(5, on((block,8)), (block,7), false).
final_goal(5, on((block,8)), (block,9), true).
final_goal(5, on((block,8)), nothing, false).
final_goal(5, on((block,8)), puzzle_room_1_table, false).
final_goal(5, on((block,8)), puzzle_room_2_table, false).
final_goal(5, on((block,9)), (block,1), false).
final_goal(5, on((block,9)), (block,10), false).
final_goal(5, on((block,9)), (block,11), false).
final_goal(5, on((block,9)), (block,12), false).
final_goal(5, on((block,9)), (block,13), false).
final_goal(5, on((block,9)), (block,14), false).
final_goal(5, on((block,9)), (block,15), false).
final_goal(5, on((block,9)), (block,16), false).
final_goal(5, on((block,9)), (block,17), false).
final_goal(5, on((block,9)), (block,18), false).
final_goal(5, on((block,9)), (block,2), false).
final_goal(5, on((block,9)), (block,3), false).
final_goal(5, on((block,9)), (block,4), false).
final_goal(5, on((block,9)), (block,5), false).
final_goal(5, on((block,9)), (block,6), false).
final_goal(5, on((block,9)), (block,7), false).
final_goal(5, on((block,9)), (block,8), false).
final_goal(5, on((block,9)), nothing, false).
final_goal(5, on((block,9)), puzzle_room_1_table, true).
final_goal(5, on((block,9)), puzzle_room_2_table, false).
final_goal(5, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), true, false).

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[04-03-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000021F9A64DE50>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800.0, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(5, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 2070 rules

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.01067989999999952s

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(5, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[04-03-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(5), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[04-03-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.448309s.

[04-03-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.116415s with result Satisfiable.

[04-03-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[04-03-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000021F9E48D040>

[04-03-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 5)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Hasty object at 0x0000021F9E41DE80>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000021F9E48D040>)

[04-03-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, true). %* None *%
#program optimisation_module(#inc, 0, true, true, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[04-03-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[04-03-2022_16-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.230045s.

[04-03-2022_16-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039299s with result Unsatisfiable.

[04-03-2022_16-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.2693445000000008, Incremental time limit = None
Running cumulative time = 2.2693445000000008, Cumulative time limit = 1800.0
Used memory = (RSS = 210.476562Mb, VMS = 202.035156Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[04-03-2022_16-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.003837s.

[04-03-2022_16-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021809s with result Unsatisfiable.

[04-03-2022_16-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0256462000000006, Incremental time limit = None
Running cumulative time = 3.2949907000000014, Cumulative time limit = 1800.0
Used memory = (RSS = 215.464844Mb, VMS = 207.531250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[04-03-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.632054s.

[04-03-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042269s with result Unsatisfiable.

[04-03-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.6743233999999951, Incremental time limit = None
Running cumulative time = 4.9693140999999965, Cumulative time limit = 1800.0
Used memory = (RSS = 241.148438Mb, VMS = 232.714844Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[04-03-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.919790s.

[04-03-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053675s with result Unsatisfiable.

[04-03-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9734649999999974, Incremental time limit = None
Running cumulative time = 6.942779099999994, Cumulative time limit = 1800.0
Used memory = (RSS = 273.000000Mb, VMS = 268.781250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[04-03-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.907734s.

[04-03-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059496s with result Unsatisfiable.

[04-03-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9672303999999983, Incremental time limit = None
Running cumulative time = 8.910009499999992, Cumulative time limit = 1800.0
Used memory = (RSS = 303.097656Mb, VMS = 298.875000Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[04-03-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.853306s.

[04-03-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.086863s with result Unsatisfiable.

[04-03-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.940168700000001, Incremental time limit = None
Running cumulative time = 10.850178199999993, Cumulative time limit = 1800.0
Used memory = (RSS = 334.191406Mb, VMS = 337.308594Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[04-03-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.864371s.

[04-03-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.096351s with result Unsatisfiable.

[04-03-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9607224000000016, Incremental time limit = None
Running cumulative time = 12.810900599999995, Cumulative time limit = 1800.0
Used memory = (RSS = 364.937500Mb, VMS = 363.839844Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[04-03-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.961486s.

[04-03-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.116396s with result Unsatisfiable.

[04-03-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.0778813000000014, Incremental time limit = None
Running cumulative time = 14.888781899999996, Cumulative time limit = 1800.0
Used memory = (RSS = 394.566406Mb, VMS = 406.507812Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[04-03-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.918798s.

[04-03-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.150314s with result Unsatisfiable.

[04-03-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.0691121999999993, Incremental time limit = None
Running cumulative time = 16.957894099999997, Cumulative time limit = 1800.0
Used memory = (RSS = 429.519531Mb, VMS = 435.828125Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[04-03-2022_16-21-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.907872s.

[04-03-2022_16-21-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.377795s with result Unsatisfiable.

[04-03-2022_16-21-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.2856673, Incremental time limit = None
Running cumulative time = 19.243561399999997, Cumulative time limit = 1800.0
Used memory = (RSS = 456.398438Mb, VMS = 460.656250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[04-03-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.041366s.

[04-03-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.232846s with result Unsatisfiable.

[04-03-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.2742123999999997, Incremental time limit = None
Running cumulative time = 21.517773799999993, Cumulative time limit = 1800.0
Used memory = (RSS = 486.792969Mb, VMS = 513.648438Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[04-03-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.042385s.

[04-03-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.342541s with result Satisfiable.

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.384925899999999, Incremental time limit = None
Running cumulative time = 25.902699699999992, Cumulative time limit = 1800.0
Used memory = (RSS = 600.996094Mb, VMS = 620.574219Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 22.283045s, Solving = 3.619655s, Total = 25.902700s, Memory = (RSS = 600.996094Mb, VMS = 620.574219Mb), Step range = [0-12]), Calls = 12
Final Model :: Total atoms = 88556, Cost = (-567, 30, 0), Optimality proven = False, Number = 7, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 2.230045s, Solving = 0.039299s, Total = 2.269345s, Memory = (RSS = 210.476562Mb, VMS = 202.035156Mb), Step range = [0-1]
2 : Statistics :: Grounding = 1.003837s, Solving = 0.021809s, Total = 1.025646s, Memory = (RSS = 215.464844Mb, VMS = 207.531250Mb), Step range = [2-2]
3 : Statistics :: Grounding = 1.632054s, Solving = 0.042269s, Total = 1.674323s, Memory = (RSS = 241.148438Mb, VMS = 232.714844Mb), Step range = [3-3]
4 : Statistics :: Grounding = 1.919790s, Solving = 0.053675s, Total = 1.973465s, Memory = (RSS = 273.000000Mb, VMS = 268.781250Mb), Step range = [4-4]
5 : Statistics :: Grounding = 1.907734s, Solving = 0.059496s, Total = 1.967230s, Memory = (RSS = 303.097656Mb, VMS = 298.875000Mb), Step range = [5-5]
6 : Statistics :: Grounding = 1.853306s, Solving = 0.086863s, Total = 1.940169s, Memory = (RSS = 334.191406Mb, VMS = 337.308594Mb), Step range = [6-6]
7 : Statistics :: Grounding = 1.864371s, Solving = 0.096351s, Total = 1.960722s, Memory = (RSS = 364.937500Mb, VMS = 363.839844Mb), Step range = [7-7]
8 : Statistics :: Grounding = 1.961486s, Solving = 0.116396s, Total = 2.077881s, Memory = (RSS = 394.566406Mb, VMS = 406.507812Mb), Step range = [8-8]
9 : Statistics :: Grounding = 1.918798s, Solving = 0.150314s, Total = 2.069112s, Memory = (RSS = 429.519531Mb, VMS = 435.828125Mb), Step range = [9-9]
10 : Statistics :: Grounding = 1.907872s, Solving = 0.377795s, Total = 2.285667s, Memory = (RSS = 456.398438Mb, VMS = 460.656250Mb), Step range = [10-10]
11 : Statistics :: Grounding = 2.041366s, Solving = 0.232846s, Total = 2.274212s, Memory = (RSS = 486.792969Mb, VMS = 513.648438Mb), Step range = [11-11]
12 : Statistics :: Grounding = 2.042385s, Solving = 2.342541s, Total = 4.384926s, Memory = (RSS = 600.996094Mb, VMS = 620.574219Mb), Step range = [12-12]

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 25.902700s due to: Stop condition reached.

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[04-03-2022_16-21-53] INFO :: ASH Planner Main #1 >> Final-goal intermediate ordering:
Achievement steps = [6, 12]
Correct = True

[04-03-2022_16-21-53] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[04-03-2022_16-21-53] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 22.283045s, Solving = 3.619655s, Total = 25.902700s, Memory = (RSS = 600.996094Mb, VMS = 620.574219Mb), Step range = [0-12]), Calls = 12
Model :: Total atoms = 88556, Cost = (-567, 30, 0), Optimality proven = False, Number = 7, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 5                 
          ========================================          
                 Steps = 12 :: Actions = 30                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room_1)
Step 2:
    Planned actions:
        talos : collect((block,4))
        talos : collect((block,5))
        talos : collect((block,6))
        talos : collect((block,8))
Step 3:
    Planned actions:
        talos : move(puzzle_room_1)
Step 4:
    Planned actions:
        talos : place_upon((block,3),puzzle_room_1_table)
        talos : place_upon((block,6),puzzle_room_1_table)
        talos : place_upon((block,9),puzzle_room_1_table)
Step 5:
    Planned actions:
        talos : place_upon((block,2),(block,3))
        talos : place_upon((block,5),(block,6))
        talos : place_upon((block,8),(block,9))
Step 6:
    Planned actions:
        talos : place_upon((block,1),(block,2))
        talos : place_upon((block,4),(block,5))
        talos : place_upon((block,7),(block,8))
Step 7:
    Planned actions:
        talos : move(store_room_2)
Step 8:
    Planned actions:
        talos : collect((block,13))
        talos : collect((block,14))
        talos : collect((block,15))
        talos : collect((block,17))
Step 9:
    Planned actions:
        talos : move(puzzle_room_2)
Step 10:
    Planned actions:
        talos : place_upon((block,12),puzzle_room_2_table)
        talos : place_upon((block,15),puzzle_room_2_table)
        talos : place_upon((block,18),puzzle_room_2_table)
Step 11:
    Planned actions:
        talos : place_upon((block,11),(block,12))
        talos : place_upon((block,14),(block,15))
        talos : place_upon((block,17),(block,18))
Step 12:
    Planned actions:
        talos : place_upon((block,10),(block,11))
        talos : place_upon((block,13),(block,14))
        talos : place_upon((block,16),(block,17))

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 5 (classic), LE =  12, AC =  30, CF = 0.4, GT =  22.73s, ST =   3.74s, OT = 0.00s, TT =  26.47s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[04-03-2022_16-21-53] DEBUG :: core.Strategies >> Proactively dividing plan: Lvl = 5 (classic), LE =  12, AC =  30, CF = 0.4, GT =  22.73s, ST =   3.74s, OT = 0.00s, TT =  26.47s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0).

[04-03-2022_16-21-53] DEBUG :: core.Strategies >> Making heterogenous divisions: division_points=[], plan_length=12, start_step=0, blend=Blend(left=0, right=0)

[04-03-2022_16-21-53] DEBUG :: core.Strategies >> Division points generated:
[]

[04-03-2022_16-21-53] DEBUG :: core.Strategies >> plan_length=12, true_size_bound=6, partial_problems=2

[04-03-2022_16-21-53] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=12, start_step=0, blend=Blend(left=0, right=0)

[04-03-2022_16-21-53] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=6, large_group_size=7

[04-03-2022_16-21-53] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=6, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 12, Sub-goal Stage Range = [1-12]
Division points [total=1] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-03-2022_16-21-53] INFO :: ASH Planner Main #1 >> Monolevel problem 1 at level 5 solved.

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 5 to proactively divide planning problem 1 at level 4:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 12, Sub-goal Stage Range = [1-12]
Division points [total=1] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-6]

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 4, sgoals range = [1-6], problem number = 1, increment number = 1

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 6)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Hasty object at 0x0000021F9E41DE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1773.5325767)
	('length_limit', 300)
	('level', 4)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[04-03-2022_16-21-53] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 4] partial conformance refinement (sequential) with sgoals range [1-6] : Concurrency enabled : Minimum search length bound disabled with value 5

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 4
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 6
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 5

[04-03-2022_16-21-53] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[04-03-2022_16-21-53] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[04-03-2022_16-21-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 904 rules into program part ash_initial_state:

holds(4, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(4, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(4, complete_tower(red,puzzle_room_1_table), false, 0).
holds(4, complete_tower(red,puzzle_room_2_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(4, grasping(manipulator_arm_1), nothing, 0).
holds(4, grasping(manipulator_arm_2), nothing, 0).
holds(4, in((block,1)), puzzle_room_1, 0).
holds(4, in((block,10)), puzzle_room_2, 0).
holds(4, in((block,11)), puzzle_room_2, 0).
holds(4, in((block,12)), puzzle_room_2, 0).
holds(4, in((block,13)), store_room_2, 0).
holds(4, in((block,14)), store_room_2, 0).
holds(4, in((block,15)), store_room_2, 0).
holds(4, in((block,16)), puzzle_room_2, 0).
holds(4, in((block,17)), store_room_2, 0).
holds(4, in((block,18)), puzzle_room_2, 0).
holds(4, in((block,2)), puzzle_room_1, 0).
holds(4, in((block,3)), puzzle_room_1, 0).
holds(4, in((block,4)), store_room_1, 0).
holds(4, in((block,5)), store_room_1, 0).
holds(4, in((block,6)), store_room_1, 0).
holds(4, in((block,7)), puzzle_room_1, 0).
holds(4, in((block,8)), store_room_1, 0).
holds(4, in((block,9)), puzzle_room_1, 0).
holds(4, in(manipulator_arm_1), starting_room_1, 0).
holds(4, in(manipulator_arm_2), starting_room_1, 0).
holds(4, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(4, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(4, in(talos), starting_room_1, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,10)), false, 0).
holds(4, in_tower((block,1),(block,11)), false, 0).
holds(4, in_tower((block,1),(block,12)), false, 0).
holds(4, in_tower((block,1),(block,13)), false, 0).
holds(4, in_tower((block,1),(block,14)), false, 0).
holds(4, in_tower((block,1),(block,15)), false, 0).
holds(4, in_tower((block,1),(block,16)), false, 0).
holds(4, in_tower((block,1),(block,17)), false, 0).
holds(4, in_tower((block,1),(block,18)), false, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,10),(block,1)), false, 0).
holds(4, in_tower((block,10),(block,10)), true, 0).
holds(4, in_tower((block,10),(block,11)), false, 0).
holds(4, in_tower((block,10),(block,12)), true, 0).
holds(4, in_tower((block,10),(block,13)), false, 0).
holds(4, in_tower((block,10),(block,14)), false, 0).
holds(4, in_tower((block,10),(block,15)), false, 0).
holds(4, in_tower((block,10),(block,16)), false, 0).
holds(4, in_tower((block,10),(block,17)), false, 0).
holds(4, in_tower((block,10),(block,18)), false, 0).
holds(4, in_tower((block,10),(block,2)), false, 0).
holds(4, in_tower((block,10),(block,3)), false, 0).
holds(4, in_tower((block,10),(block,4)), false, 0).
holds(4, in_tower((block,10),(block,5)), false, 0).
holds(4, in_tower((block,10),(block,6)), false, 0).
holds(4, in_tower((block,10),(block,7)), false, 0).
holds(4, in_tower((block,10),(block,8)), false, 0).
holds(4, in_tower((block,10),(block,9)), false, 0).
holds(4, in_tower((block,11),(block,1)), false, 0).
holds(4, in_tower((block,11),(block,10)), false, 0).
holds(4, in_tower((block,11),(block,11)), true, 0).
holds(4, in_tower((block,11),(block,12)), false, 0).
holds(4, in_tower((block,11),(block,13)), false, 0).
holds(4, in_tower((block,11),(block,14)), false, 0).
holds(4, in_tower((block,11),(block,15)), false, 0).
holds(4, in_tower((block,11),(block,16)), false, 0).
holds(4, in_tower((block,11),(block,17)), false, 0).
holds(4, in_tower((block,11),(block,18)), false, 0).
holds(4, in_tower((block,11),(block,2)), false, 0).
holds(4, in_tower((block,11),(block,3)), false, 0).
holds(4, in_tower((block,11),(block,4)), false, 0).
holds(4, in_tower((block,11),(block,5)), false, 0).
holds(4, in_tower((block,11),(block,6)), false, 0).
holds(4, in_tower((block,11),(block,7)), false, 0).
holds(4, in_tower((block,11),(block,8)), false, 0).
holds(4, in_tower((block,11),(block,9)), false, 0).
holds(4, in_tower((block,12),(block,1)), false, 0).
holds(4, in_tower((block,12),(block,10)), false, 0).
holds(4, in_tower((block,12),(block,11)), false, 0).
holds(4, in_tower((block,12),(block,12)), false, 0).
holds(4, in_tower((block,12),(block,13)), false, 0).
holds(4, in_tower((block,12),(block,14)), false, 0).
holds(4, in_tower((block,12),(block,15)), false, 0).
holds(4, in_tower((block,12),(block,16)), false, 0).
holds(4, in_tower((block,12),(block,17)), false, 0).
holds(4, in_tower((block,12),(block,18)), false, 0).
holds(4, in_tower((block,12),(block,2)), false, 0).
holds(4, in_tower((block,12),(block,3)), false, 0).
holds(4, in_tower((block,12),(block,4)), false, 0).
holds(4, in_tower((block,12),(block,5)), false, 0).
holds(4, in_tower((block,12),(block,6)), false, 0).
holds(4, in_tower((block,12),(block,7)), false, 0).
holds(4, in_tower((block,12),(block,8)), false, 0).
holds(4, in_tower((block,12),(block,9)), false, 0).
holds(4, in_tower((block,13),(block,1)), false, 0).
holds(4, in_tower((block,13),(block,10)), false, 0).
holds(4, in_tower((block,13),(block,11)), false, 0).
holds(4, in_tower((block,13),(block,12)), false, 0).
holds(4, in_tower((block,13),(block,13)), false, 0).
holds(4, in_tower((block,13),(block,14)), false, 0).
holds(4, in_tower((block,13),(block,15)), false, 0).
holds(4, in_tower((block,13),(block,16)), false, 0).
holds(4, in_tower((block,13),(block,17)), false, 0).
holds(4, in_tower((block,13),(block,18)), false, 0).
holds(4, in_tower((block,13),(block,2)), false, 0).
holds(4, in_tower((block,13),(block,3)), false, 0).
holds(4, in_tower((block,13),(block,4)), false, 0).
holds(4, in_tower((block,13),(block,5)), false, 0).
holds(4, in_tower((block,13),(block,6)), false, 0).
holds(4, in_tower((block,13),(block,7)), false, 0).
holds(4, in_tower((block,13),(block,8)), false, 0).
holds(4, in_tower((block,13),(block,9)), false, 0).
holds(4, in_tower((block,14),(block,1)), false, 0).
holds(4, in_tower((block,14),(block,10)), false, 0).
holds(4, in_tower((block,14),(block,11)), false, 0).
holds(4, in_tower((block,14),(block,12)), false, 0).
holds(4, in_tower((block,14),(block,13)), false, 0).
holds(4, in_tower((block,14),(block,14)), false, 0).
holds(4, in_tower((block,14),(block,15)), false, 0).
holds(4, in_tower((block,14),(block,16)), false, 0).
holds(4, in_tower((block,14),(block,17)), false, 0).
holds(4, in_tower((block,14),(block,18)), false, 0).
holds(4, in_tower((block,14),(block,2)), false, 0).
holds(4, in_tower((block,14),(block,3)), false, 0).
holds(4, in_tower((block,14),(block,4)), false, 0).
holds(4, in_tower((block,14),(block,5)), false, 0).
holds(4, in_tower((block,14),(block,6)), false, 0).
holds(4, in_tower((block,14),(block,7)), false, 0).
holds(4, in_tower((block,14),(block,8)), false, 0).
holds(4, in_tower((block,14),(block,9)), false, 0).
holds(4, in_tower((block,15),(block,1)), false, 0).
holds(4, in_tower((block,15),(block,10)), false, 0).
holds(4, in_tower((block,15),(block,11)), false, 0).
holds(4, in_tower((block,15),(block,12)), false, 0).
holds(4, in_tower((block,15),(block,13)), false, 0).
holds(4, in_tower((block,15),(block,14)), false, 0).
holds(4, in_tower((block,15),(block,15)), false, 0).
holds(4, in_tower((block,15),(block,16)), false, 0).
holds(4, in_tower((block,15),(block,17)), false, 0).
holds(4, in_tower((block,15),(block,18)), false, 0).
holds(4, in_tower((block,15),(block,2)), false, 0).
holds(4, in_tower((block,15),(block,3)), false, 0).
holds(4, in_tower((block,15),(block,4)), false, 0).
holds(4, in_tower((block,15),(block,5)), false, 0).
holds(4, in_tower((block,15),(block,6)), false, 0).
holds(4, in_tower((block,15),(block,7)), false, 0).
holds(4, in_tower((block,15),(block,8)), false, 0).
holds(4, in_tower((block,15),(block,9)), false, 0).
holds(4, in_tower((block,16),(block,1)), false, 0).
holds(4, in_tower((block,16),(block,10)), false, 0).
holds(4, in_tower((block,16),(block,11)), false, 0).
holds(4, in_tower((block,16),(block,12)), false, 0).
holds(4, in_tower((block,16),(block,13)), false, 0).
holds(4, in_tower((block,16),(block,14)), false, 0).
holds(4, in_tower((block,16),(block,15)), false, 0).
holds(4, in_tower((block,16),(block,16)), true, 0).
holds(4, in_tower((block,16),(block,17)), false, 0).
holds(4, in_tower((block,16),(block,18)), true, 0).
holds(4, in_tower((block,16),(block,2)), false, 0).
holds(4, in_tower((block,16),(block,3)), false, 0).
holds(4, in_tower((block,16),(block,4)), false, 0).
holds(4, in_tower((block,16),(block,5)), false, 0).
holds(4, in_tower((block,16),(block,6)), false, 0).
holds(4, in_tower((block,16),(block,7)), false, 0).
holds(4, in_tower((block,16),(block,8)), false, 0).
holds(4, in_tower((block,16),(block,9)), false, 0).
holds(4, in_tower((block,17),(block,1)), false, 0).
holds(4, in_tower((block,17),(block,10)), false, 0).
holds(4, in_tower((block,17),(block,11)), false, 0).
holds(4, in_tower((block,17),(block,12)), false, 0).
holds(4, in_tower((block,17),(block,13)), false, 0).
holds(4, in_tower((block,17),(block,14)), false, 0).
holds(4, in_tower((block,17),(block,15)), false, 0).
holds(4, in_tower((block,17),(block,16)), false, 0).
holds(4, in_tower((block,17),(block,17)), false, 0).
holds(4, in_tower((block,17),(block,18)), false, 0).
holds(4, in_tower((block,17),(block,2)), false, 0).
holds(4, in_tower((block,17),(block,3)), false, 0).
holds(4, in_tower((block,17),(block,4)), false, 0).
holds(4, in_tower((block,17),(block,5)), false, 0).
holds(4, in_tower((block,17),(block,6)), false, 0).
holds(4, in_tower((block,17),(block,7)), false, 0).
holds(4, in_tower((block,17),(block,8)), false, 0).
holds(4, in_tower((block,17),(block,9)), false, 0).
holds(4, in_tower((block,18),(block,1)), false, 0).
holds(4, in_tower((block,18),(block,10)), false, 0).
holds(4, in_tower((block,18),(block,11)), false, 0).
holds(4, in_tower((block,18),(block,12)), false, 0).
holds(4, in_tower((block,18),(block,13)), false, 0).
holds(4, in_tower((block,18),(block,14)), false, 0).
holds(4, in_tower((block,18),(block,15)), false, 0).
holds(4, in_tower((block,18),(block,16)), false, 0).
holds(4, in_tower((block,18),(block,17)), false, 0).
holds(4, in_tower((block,18),(block,18)), false, 0).
holds(4, in_tower((block,18),(block,2)), false, 0).
holds(4, in_tower((block,18),(block,3)), false, 0).
holds(4, in_tower((block,18),(block,4)), false, 0).
holds(4, in_tower((block,18),(block,5)), false, 0).
holds(4, in_tower((block,18),(block,6)), false, 0).
holds(4, in_tower((block,18),(block,7)), false, 0).
holds(4, in_tower((block,18),(block,8)), false, 0).
holds(4, in_tower((block,18),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,10)), false, 0).
holds(4, in_tower((block,2),(block,11)), false, 0).
holds(4, in_tower((block,2),(block,12)), false, 0).
holds(4, in_tower((block,2),(block,13)), false, 0).
holds(4, in_tower((block,2),(block,14)), false, 0).
holds(4, in_tower((block,2),(block,15)), false, 0).
holds(4, in_tower((block,2),(block,16)), false, 0).
holds(4, in_tower((block,2),(block,17)), false, 0).
holds(4, in_tower((block,2),(block,18)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,10)), false, 0).
holds(4, in_tower((block,3),(block,11)), false, 0).
holds(4, in_tower((block,3),(block,12)), false, 0).
holds(4, in_tower((block,3),(block,13)), false, 0).
holds(4, in_tower((block,3),(block,14)), false, 0).
holds(4, in_tower((block,3),(block,15)), false, 0).
holds(4, in_tower((block,3),(block,16)), false, 0).
holds(4, in_tower((block,3),(block,17)), false, 0).
holds(4, in_tower((block,3),(block,18)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,10)), false, 0).
holds(4, in_tower((block,4),(block,11)), false, 0).
holds(4, in_tower((block,4),(block,12)), false, 0).
holds(4, in_tower((block,4),(block,13)), false, 0).
holds(4, in_tower((block,4),(block,14)), false, 0).
holds(4, in_tower((block,4),(block,15)), false, 0).
holds(4, in_tower((block,4),(block,16)), false, 0).
holds(4, in_tower((block,4),(block,17)), false, 0).
holds(4, in_tower((block,4),(block,18)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,10)), false, 0).
holds(4, in_tower((block,5),(block,11)), false, 0).
holds(4, in_tower((block,5),(block,12)), false, 0).
holds(4, in_tower((block,5),(block,13)), false, 0).
holds(4, in_tower((block,5),(block,14)), false, 0).
holds(4, in_tower((block,5),(block,15)), false, 0).
holds(4, in_tower((block,5),(block,16)), false, 0).
holds(4, in_tower((block,5),(block,17)), false, 0).
holds(4, in_tower((block,5),(block,18)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,10)), false, 0).
holds(4, in_tower((block,6),(block,11)), false, 0).
holds(4, in_tower((block,6),(block,12)), false, 0).
holds(4, in_tower((block,6),(block,13)), false, 0).
holds(4, in_tower((block,6),(block,14)), false, 0).
holds(4, in_tower((block,6),(block,15)), false, 0).
holds(4, in_tower((block,6),(block,16)), false, 0).
holds(4, in_tower((block,6),(block,17)), false, 0).
holds(4, in_tower((block,6),(block,18)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,10)), false, 0).
holds(4, in_tower((block,7),(block,11)), false, 0).
holds(4, in_tower((block,7),(block,12)), false, 0).
holds(4, in_tower((block,7),(block,13)), false, 0).
holds(4, in_tower((block,7),(block,14)), false, 0).
holds(4, in_tower((block,7),(block,15)), false, 0).
holds(4, in_tower((block,7),(block,16)), false, 0).
holds(4, in_tower((block,7),(block,17)), false, 0).
holds(4, in_tower((block,7),(block,18)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,10)), false, 0).
holds(4, in_tower((block,8),(block,11)), false, 0).
holds(4, in_tower((block,8),(block,12)), false, 0).
holds(4, in_tower((block,8),(block,13)), false, 0).
holds(4, in_tower((block,8),(block,14)), false, 0).
holds(4, in_tower((block,8),(block,15)), false, 0).
holds(4, in_tower((block,8),(block,16)), false, 0).
holds(4, in_tower((block,8),(block,17)), false, 0).
holds(4, in_tower((block,8),(block,18)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,10)), false, 0).
holds(4, in_tower((block,9),(block,11)), false, 0).
holds(4, in_tower((block,9),(block,12)), false, 0).
holds(4, in_tower((block,9),(block,13)), false, 0).
holds(4, in_tower((block,9),(block,14)), false, 0).
holds(4, in_tower((block,9),(block,15)), false, 0).
holds(4, in_tower((block,9),(block,16)), false, 0).
holds(4, in_tower((block,9),(block,17)), false, 0).
holds(4, in_tower((block,9),(block,18)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_1_table, 0).
holds(4, on((block,10)), puzzle_room_2_table, 0).
holds(4, on((block,11)), puzzle_room_2_table, 0).
holds(4, on((block,12)), (block,10), 0).
holds(4, on((block,13)), nothing, 0).
holds(4, on((block,14)), nothing, 0).
holds(4, on((block,15)), nothing, 0).
holds(4, on((block,16)), puzzle_room_2_table, 0).
holds(4, on((block,17)), nothing, 0).
holds(4, on((block,18)), (block,16), 0).
holds(4, on((block,2)), puzzle_room_1_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_1_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(4, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(4, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(4, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(4, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_2_table), false, 0).
holds(5, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(5, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(5, complete_tower(red,puzzle_room_1_table), false, 0).
holds(5, complete_tower(red,puzzle_room_2_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(5, in((block,1)), puzzle_room_1, 0).
holds(5, in((block,10)), puzzle_room_2, 0).
holds(5, in((block,11)), puzzle_room_2, 0).
holds(5, in((block,12)), puzzle_room_2, 0).
holds(5, in((block,13)), store_room_2, 0).
holds(5, in((block,14)), store_room_2, 0).
holds(5, in((block,15)), store_room_2, 0).
holds(5, in((block,16)), puzzle_room_2, 0).
holds(5, in((block,17)), store_room_2, 0).
holds(5, in((block,18)), puzzle_room_2, 0).
holds(5, in((block,2)), puzzle_room_1, 0).
holds(5, in((block,3)), puzzle_room_1, 0).
holds(5, in((block,4)), store_room_1, 0).
holds(5, in((block,5)), store_room_1, 0).
holds(5, in((block,6)), store_room_1, 0).
holds(5, in((block,7)), puzzle_room_1, 0).
holds(5, in((block,8)), store_room_1, 0).
holds(5, in((block,9)), puzzle_room_1, 0).
holds(5, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(5, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(5, in(talos), starting_room_1, 0).
holds(5, in_tower((block,1),(block,1)), true, 0).
holds(5, in_tower((block,1),(block,10)), false, 0).
holds(5, in_tower((block,1),(block,11)), false, 0).
holds(5, in_tower((block,1),(block,12)), false, 0).
holds(5, in_tower((block,1),(block,13)), false, 0).
holds(5, in_tower((block,1),(block,14)), false, 0).
holds(5, in_tower((block,1),(block,15)), false, 0).
holds(5, in_tower((block,1),(block,16)), false, 0).
holds(5, in_tower((block,1),(block,17)), false, 0).
holds(5, in_tower((block,1),(block,18)), false, 0).
holds(5, in_tower((block,1),(block,2)), false, 0).
holds(5, in_tower((block,1),(block,3)), true, 0).
holds(5, in_tower((block,1),(block,4)), false, 0).
holds(5, in_tower((block,1),(block,5)), false, 0).
holds(5, in_tower((block,1),(block,6)), false, 0).
holds(5, in_tower((block,1),(block,7)), false, 0).
holds(5, in_tower((block,1),(block,8)), false, 0).
holds(5, in_tower((block,1),(block,9)), false, 0).
holds(5, in_tower((block,10),(block,1)), false, 0).
holds(5, in_tower((block,10),(block,10)), true, 0).
holds(5, in_tower((block,10),(block,11)), false, 0).
holds(5, in_tower((block,10),(block,12)), true, 0).
holds(5, in_tower((block,10),(block,13)), false, 0).
holds(5, in_tower((block,10),(block,14)), false, 0).
holds(5, in_tower((block,10),(block,15)), false, 0).
holds(5, in_tower((block,10),(block,16)), false, 0).
holds(5, in_tower((block,10),(block,17)), false, 0).
holds(5, in_tower((block,10),(block,18)), false, 0).
holds(5, in_tower((block,10),(block,2)), false, 0).
holds(5, in_tower((block,10),(block,3)), false, 0).
holds(5, in_tower((block,10),(block,4)), false, 0).
holds(5, in_tower((block,10),(block,5)), false, 0).
holds(5, in_tower((block,10),(block,6)), false, 0).
holds(5, in_tower((block,10),(block,7)), false, 0).
holds(5, in_tower((block,10),(block,8)), false, 0).
holds(5, in_tower((block,10),(block,9)), false, 0).
holds(5, in_tower((block,11),(block,1)), false, 0).
holds(5, in_tower((block,11),(block,10)), false, 0).
holds(5, in_tower((block,11),(block,11)), true, 0).
holds(5, in_tower((block,11),(block,12)), false, 0).
holds(5, in_tower((block,11),(block,13)), false, 0).
holds(5, in_tower((block,11),(block,14)), false, 0).
holds(5, in_tower((block,11),(block,15)), false, 0).
holds(5, in_tower((block,11),(block,16)), false, 0).
holds(5, in_tower((block,11),(block,17)), false, 0).
holds(5, in_tower((block,11),(block,18)), false, 0).
holds(5, in_tower((block,11),(block,2)), false, 0).
holds(5, in_tower((block,11),(block,3)), false, 0).
holds(5, in_tower((block,11),(block,4)), false, 0).
holds(5, in_tower((block,11),(block,5)), false, 0).
holds(5, in_tower((block,11),(block,6)), false, 0).
holds(5, in_tower((block,11),(block,7)), false, 0).
holds(5, in_tower((block,11),(block,8)), false, 0).
holds(5, in_tower((block,11),(block,9)), false, 0).
holds(5, in_tower((block,12),(block,1)), false, 0).
holds(5, in_tower((block,12),(block,10)), false, 0).
holds(5, in_tower((block,12),(block,11)), false, 0).
holds(5, in_tower((block,12),(block,12)), false, 0).
holds(5, in_tower((block,12),(block,13)), false, 0).
holds(5, in_tower((block,12),(block,14)), false, 0).
holds(5, in_tower((block,12),(block,15)), false, 0).
holds(5, in_tower((block,12),(block,16)), false, 0).
holds(5, in_tower((block,12),(block,17)), false, 0).
holds(5, in_tower((block,12),(block,18)), false, 0).
holds(5, in_tower((block,12),(block,2)), false, 0).
holds(5, in_tower((block,12),(block,3)), false, 0).
holds(5, in_tower((block,12),(block,4)), false, 0).
holds(5, in_tower((block,12),(block,5)), false, 0).
holds(5, in_tower((block,12),(block,6)), false, 0).
holds(5, in_tower((block,12),(block,7)), false, 0).
holds(5, in_tower((block,12),(block,8)), false, 0).
holds(5, in_tower((block,12),(block,9)), false, 0).
holds(5, in_tower((block,13),(block,1)), false, 0).
holds(5, in_tower((block,13),(block,10)), false, 0).
holds(5, in_tower((block,13),(block,11)), false, 0).
holds(5, in_tower((block,13),(block,12)), false, 0).
holds(5, in_tower((block,13),(block,13)), false, 0).
holds(5, in_tower((block,13),(block,14)), false, 0).
holds(5, in_tower((block,13),(block,15)), false, 0).
holds(5, in_tower((block,13),(block,16)), false, 0).
holds(5, in_tower((block,13),(block,17)), false, 0).
holds(5, in_tower((block,13),(block,18)), false, 0).
holds(5, in_tower((block,13),(block,2)), false, 0).
holds(5, in_tower((block,13),(block,3)), false, 0).
holds(5, in_tower((block,13),(block,4)), false, 0).
holds(5, in_tower((block,13),(block,5)), false, 0).
holds(5, in_tower((block,13),(block,6)), false, 0).
holds(5, in_tower((block,13),(block,7)), false, 0).
holds(5, in_tower((block,13),(block,8)), false, 0).
holds(5, in_tower((block,13),(block,9)), false, 0).
holds(5, in_tower((block,14),(block,1)), false, 0).
holds(5, in_tower((block,14),(block,10)), false, 0).
holds(5, in_tower((block,14),(block,11)), false, 0).
holds(5, in_tower((block,14),(block,12)), false, 0).
holds(5, in_tower((block,14),(block,13)), false, 0).
holds(5, in_tower((block,14),(block,14)), false, 0).
holds(5, in_tower((block,14),(block,15)), false, 0).
holds(5, in_tower((block,14),(block,16)), false, 0).
holds(5, in_tower((block,14),(block,17)), false, 0).
holds(5, in_tower((block,14),(block,18)), false, 0).
holds(5, in_tower((block,14),(block,2)), false, 0).
holds(5, in_tower((block,14),(block,3)), false, 0).
holds(5, in_tower((block,14),(block,4)), false, 0).
holds(5, in_tower((block,14),(block,5)), false, 0).
holds(5, in_tower((block,14),(block,6)), false, 0).
holds(5, in_tower((block,14),(block,7)), false, 0).
holds(5, in_tower((block,14),(block,8)), false, 0).
holds(5, in_tower((block,14),(block,9)), false, 0).
holds(5, in_tower((block,15),(block,1)), false, 0).
holds(5, in_tower((block,15),(block,10)), false, 0).
holds(5, in_tower((block,15),(block,11)), false, 0).
holds(5, in_tower((block,15),(block,12)), false, 0).
holds(5, in_tower((block,15),(block,13)), false, 0).
holds(5, in_tower((block,15),(block,14)), false, 0).
holds(5, in_tower((block,15),(block,15)), false, 0).
holds(5, in_tower((block,15),(block,16)), false, 0).
holds(5, in_tower((block,15),(block,17)), false, 0).
holds(5, in_tower((block,15),(block,18)), false, 0).
holds(5, in_tower((block,15),(block,2)), false, 0).
holds(5, in_tower((block,15),(block,3)), false, 0).
holds(5, in_tower((block,15),(block,4)), false, 0).
holds(5, in_tower((block,15),(block,5)), false, 0).
holds(5, in_tower((block,15),(block,6)), false, 0).
holds(5, in_tower((block,15),(block,7)), false, 0).
holds(5, in_tower((block,15),(block,8)), false, 0).
holds(5, in_tower((block,15),(block,9)), false, 0).
holds(5, in_tower((block,16),(block,1)), false, 0).
holds(5, in_tower((block,16),(block,10)), false, 0).
holds(5, in_tower((block,16),(block,11)), false, 0).
holds(5, in_tower((block,16),(block,12)), false, 0).
holds(5, in_tower((block,16),(block,13)), false, 0).
holds(5, in_tower((block,16),(block,14)), false, 0).
holds(5, in_tower((block,16),(block,15)), false, 0).
holds(5, in_tower((block,16),(block,16)), true, 0).
holds(5, in_tower((block,16),(block,17)), false, 0).
holds(5, in_tower((block,16),(block,18)), true, 0).
holds(5, in_tower((block,16),(block,2)), false, 0).
holds(5, in_tower((block,16),(block,3)), false, 0).
holds(5, in_tower((block,16),(block,4)), false, 0).
holds(5, in_tower((block,16),(block,5)), false, 0).
holds(5, in_tower((block,16),(block,6)), false, 0).
holds(5, in_tower((block,16),(block,7)), false, 0).
holds(5, in_tower((block,16),(block,8)), false, 0).
holds(5, in_tower((block,16),(block,9)), false, 0).
holds(5, in_tower((block,17),(block,1)), false, 0).
holds(5, in_tower((block,17),(block,10)), false, 0).
holds(5, in_tower((block,17),(block,11)), false, 0).
holds(5, in_tower((block,17),(block,12)), false, 0).
holds(5, in_tower((block,17),(block,13)), false, 0).
holds(5, in_tower((block,17),(block,14)), false, 0).
holds(5, in_tower((block,17),(block,15)), false, 0).
holds(5, in_tower((block,17),(block,16)), false, 0).
holds(5, in_tower((block,17),(block,17)), false, 0).
holds(5, in_tower((block,17),(block,18)), false, 0).
holds(5, in_tower((block,17),(block,2)), false, 0).
holds(5, in_tower((block,17),(block,3)), false, 0).
holds(5, in_tower((block,17),(block,4)), false, 0).
holds(5, in_tower((block,17),(block,5)), false, 0).
holds(5, in_tower((block,17),(block,6)), false, 0).
holds(5, in_tower((block,17),(block,7)), false, 0).
holds(5, in_tower((block,17),(block,8)), false, 0).
holds(5, in_tower((block,17),(block,9)), false, 0).
holds(5, in_tower((block,18),(block,1)), false, 0).
holds(5, in_tower((block,18),(block,10)), false, 0).
holds(5, in_tower((block,18),(block,11)), false, 0).
holds(5, in_tower((block,18),(block,12)), false, 0).
holds(5, in_tower((block,18),(block,13)), false, 0).
holds(5, in_tower((block,18),(block,14)), false, 0).
holds(5, in_tower((block,18),(block,15)), false, 0).
holds(5, in_tower((block,18),(block,16)), false, 0).
holds(5, in_tower((block,18),(block,17)), false, 0).
holds(5, in_tower((block,18),(block,18)), false, 0).
holds(5, in_tower((block,18),(block,2)), false, 0).
holds(5, in_tower((block,18),(block,3)), false, 0).
holds(5, in_tower((block,18),(block,4)), false, 0).
holds(5, in_tower((block,18),(block,5)), false, 0).
holds(5, in_tower((block,18),(block,6)), false, 0).
holds(5, in_tower((block,18),(block,7)), false, 0).
holds(5, in_tower((block,18),(block,8)), false, 0).
holds(5, in_tower((block,18),(block,9)), false, 0).
holds(5, in_tower((block,2),(block,1)), false, 0).
holds(5, in_tower((block,2),(block,10)), false, 0).
holds(5, in_tower((block,2),(block,11)), false, 0).
holds(5, in_tower((block,2),(block,12)), false, 0).
holds(5, in_tower((block,2),(block,13)), false, 0).
holds(5, in_tower((block,2),(block,14)), false, 0).
holds(5, in_tower((block,2),(block,15)), false, 0).
holds(5, in_tower((block,2),(block,16)), false, 0).
holds(5, in_tower((block,2),(block,17)), false, 0).
holds(5, in_tower((block,2),(block,18)), false, 0).
holds(5, in_tower((block,2),(block,2)), true, 0).
holds(5, in_tower((block,2),(block,3)), false, 0).
holds(5, in_tower((block,2),(block,4)), false, 0).
holds(5, in_tower((block,2),(block,5)), false, 0).
holds(5, in_tower((block,2),(block,6)), false, 0).
holds(5, in_tower((block,2),(block,7)), false, 0).
holds(5, in_tower((block,2),(block,8)), false, 0).
holds(5, in_tower((block,2),(block,9)), false, 0).
holds(5, in_tower((block,3),(block,1)), false, 0).
holds(5, in_tower((block,3),(block,10)), false, 0).
holds(5, in_tower((block,3),(block,11)), false, 0).
holds(5, in_tower((block,3),(block,12)), false, 0).
holds(5, in_tower((block,3),(block,13)), false, 0).
holds(5, in_tower((block,3),(block,14)), false, 0).
holds(5, in_tower((block,3),(block,15)), false, 0).
holds(5, in_tower((block,3),(block,16)), false, 0).
holds(5, in_tower((block,3),(block,17)), false, 0).
holds(5, in_tower((block,3),(block,18)), false, 0).
holds(5, in_tower((block,3),(block,2)), false, 0).
holds(5, in_tower((block,3),(block,3)), false, 0).
holds(5, in_tower((block,3),(block,4)), false, 0).
holds(5, in_tower((block,3),(block,5)), false, 0).
holds(5, in_tower((block,3),(block,6)), false, 0).
holds(5, in_tower((block,3),(block,7)), false, 0).
holds(5, in_tower((block,3),(block,8)), false, 0).
holds(5, in_tower((block,3),(block,9)), false, 0).
holds(5, in_tower((block,4),(block,1)), false, 0).
holds(5, in_tower((block,4),(block,10)), false, 0).
holds(5, in_tower((block,4),(block,11)), false, 0).
holds(5, in_tower((block,4),(block,12)), false, 0).
holds(5, in_tower((block,4),(block,13)), false, 0).
holds(5, in_tower((block,4),(block,14)), false, 0).
holds(5, in_tower((block,4),(block,15)), false, 0).
holds(5, in_tower((block,4),(block,16)), false, 0).
holds(5, in_tower((block,4),(block,17)), false, 0).
holds(5, in_tower((block,4),(block,18)), false, 0).
holds(5, in_tower((block,4),(block,2)), false, 0).
holds(5, in_tower((block,4),(block,3)), false, 0).
holds(5, in_tower((block,4),(block,4)), false, 0).
holds(5, in_tower((block,4),(block,5)), false, 0).
holds(5, in_tower((block,4),(block,6)), false, 0).
holds(5, in_tower((block,4),(block,7)), false, 0).
holds(5, in_tower((block,4),(block,8)), false, 0).
holds(5, in_tower((block,4),(block,9)), false, 0).
holds(5, in_tower((block,5),(block,1)), false, 0).
holds(5, in_tower((block,5),(block,10)), false, 0).
holds(5, in_tower((block,5),(block,11)), false, 0).
holds(5, in_tower((block,5),(block,12)), false, 0).
holds(5, in_tower((block,5),(block,13)), false, 0).
holds(5, in_tower((block,5),(block,14)), false, 0).
holds(5, in_tower((block,5),(block,15)), false, 0).
holds(5, in_tower((block,5),(block,16)), false, 0).
holds(5, in_tower((block,5),(block,17)), false, 0).
holds(5, in_tower((block,5),(block,18)), false, 0).
holds(5, in_tower((block,5),(block,2)), false, 0).
holds(5, in_tower((block,5),(block,3)), false, 0).
holds(5, in_tower((block,5),(block,4)), false, 0).
holds(5, in_tower((block,5),(block,5)), false, 0).
holds(5, in_tower((block,5),(block,6)), false, 0).
holds(5, in_tower((block,5),(block,7)), false, 0).
holds(5, in_tower((block,5),(block,8)), false, 0).
holds(5, in_tower((block,5),(block,9)), false, 0).
holds(5, in_tower((block,6),(block,1)), false, 0).
holds(5, in_tower((block,6),(block,10)), false, 0).
holds(5, in_tower((block,6),(block,11)), false, 0).
holds(5, in_tower((block,6),(block,12)), false, 0).
holds(5, in_tower((block,6),(block,13)), false, 0).
holds(5, in_tower((block,6),(block,14)), false, 0).
holds(5, in_tower((block,6),(block,15)), false, 0).
holds(5, in_tower((block,6),(block,16)), false, 0).
holds(5, in_tower((block,6),(block,17)), false, 0).
holds(5, in_tower((block,6),(block,18)), false, 0).
holds(5, in_tower((block,6),(block,2)), false, 0).
holds(5, in_tower((block,6),(block,3)), false, 0).
holds(5, in_tower((block,6),(block,4)), false, 0).
holds(5, in_tower((block,6),(block,5)), false, 0).
holds(5, in_tower((block,6),(block,6)), false, 0).
holds(5, in_tower((block,6),(block,7)), false, 0).
holds(5, in_tower((block,6),(block,8)), false, 0).
holds(5, in_tower((block,6),(block,9)), false, 0).
holds(5, in_tower((block,7),(block,1)), false, 0).
holds(5, in_tower((block,7),(block,10)), false, 0).
holds(5, in_tower((block,7),(block,11)), false, 0).
holds(5, in_tower((block,7),(block,12)), false, 0).
holds(5, in_tower((block,7),(block,13)), false, 0).
holds(5, in_tower((block,7),(block,14)), false, 0).
holds(5, in_tower((block,7),(block,15)), false, 0).
holds(5, in_tower((block,7),(block,16)), false, 0).
holds(5, in_tower((block,7),(block,17)), false, 0).
holds(5, in_tower((block,7),(block,18)), false, 0).
holds(5, in_tower((block,7),(block,2)), false, 0).
holds(5, in_tower((block,7),(block,3)), false, 0).
holds(5, in_tower((block,7),(block,4)), false, 0).
holds(5, in_tower((block,7),(block,5)), false, 0).
holds(5, in_tower((block,7),(block,6)), false, 0).
holds(5, in_tower((block,7),(block,7)), true, 0).
holds(5, in_tower((block,7),(block,8)), false, 0).
holds(5, in_tower((block,7),(block,9)), true, 0).
holds(5, in_tower((block,8),(block,1)), false, 0).
holds(5, in_tower((block,8),(block,10)), false, 0).
holds(5, in_tower((block,8),(block,11)), false, 0).
holds(5, in_tower((block,8),(block,12)), false, 0).
holds(5, in_tower((block,8),(block,13)), false, 0).
holds(5, in_tower((block,8),(block,14)), false, 0).
holds(5, in_tower((block,8),(block,15)), false, 0).
holds(5, in_tower((block,8),(block,16)), false, 0).
holds(5, in_tower((block,8),(block,17)), false, 0).
holds(5, in_tower((block,8),(block,18)), false, 0).
holds(5, in_tower((block,8),(block,2)), false, 0).
holds(5, in_tower((block,8),(block,3)), false, 0).
holds(5, in_tower((block,8),(block,4)), false, 0).
holds(5, in_tower((block,8),(block,5)), false, 0).
holds(5, in_tower((block,8),(block,6)), false, 0).
holds(5, in_tower((block,8),(block,7)), false, 0).
holds(5, in_tower((block,8),(block,8)), false, 0).
holds(5, in_tower((block,8),(block,9)), false, 0).
holds(5, in_tower((block,9),(block,1)), false, 0).
holds(5, in_tower((block,9),(block,10)), false, 0).
holds(5, in_tower((block,9),(block,11)), false, 0).
holds(5, in_tower((block,9),(block,12)), false, 0).
holds(5, in_tower((block,9),(block,13)), false, 0).
holds(5, in_tower((block,9),(block,14)), false, 0).
holds(5, in_tower((block,9),(block,15)), false, 0).
holds(5, in_tower((block,9),(block,16)), false, 0).
holds(5, in_tower((block,9),(block,17)), false, 0).
holds(5, in_tower((block,9),(block,18)), false, 0).
holds(5, in_tower((block,9),(block,2)), false, 0).
holds(5, in_tower((block,9),(block,3)), false, 0).
holds(5, in_tower((block,9),(block,4)), false, 0).
holds(5, in_tower((block,9),(block,5)), false, 0).
holds(5, in_tower((block,9),(block,6)), false, 0).
holds(5, in_tower((block,9),(block,7)), false, 0).
holds(5, in_tower((block,9),(block,8)), false, 0).
holds(5, in_tower((block,9),(block,9)), false, 0).
holds(5, on((block,1)), puzzle_room_1_table, 0).
holds(5, on((block,10)), puzzle_room_2_table, 0).
holds(5, on((block,11)), puzzle_room_2_table, 0).
holds(5, on((block,12)), (block,10), 0).
holds(5, on((block,13)), nothing, 0).
holds(5, on((block,14)), nothing, 0).
holds(5, on((block,15)), nothing, 0).
holds(5, on((block,16)), puzzle_room_2_table, 0).
holds(5, on((block,17)), nothing, 0).
holds(5, on((block,18)), (block,16), 0).
holds(5, on((block,2)), puzzle_room_1_table, 0).
holds(5, on((block,3)), (block,1), 0).
holds(5, on((block,4)), nothing, 0).
holds(5, on((block,5)), nothing, 0).
holds(5, on((block,6)), nothing, 0).
holds(5, on((block,7)), puzzle_room_1_table, 0).
holds(5, on((block,8)), nothing, 0).
holds(5, on((block,9)), (block,7), 0).
holds(5, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(5, transporting(talos,(block,1)), false, 0).
holds(5, transporting(talos,(block,10)), false, 0).
holds(5, transporting(talos,(block,11)), false, 0).
holds(5, transporting(talos,(block,12)), false, 0).
holds(5, transporting(talos,(block,13)), false, 0).
holds(5, transporting(talos,(block,14)), false, 0).
holds(5, transporting(talos,(block,15)), false, 0).
holds(5, transporting(talos,(block,16)), false, 0).
holds(5, transporting(talos,(block,17)), false, 0).
holds(5, transporting(talos,(block,18)), false, 0).
holds(5, transporting(talos,(block,2)), false, 0).
holds(5, transporting(talos,(block,3)), false, 0).
holds(5, transporting(talos,(block,4)), false, 0).
holds(5, transporting(talos,(block,5)), false, 0).
holds(5, transporting(talos,(block,6)), false, 0).
holds(5, transporting(talos,(block,7)), false, 0).
holds(5, transporting(talos,(block,8)), false, 0).
holds(5, transporting(talos,(block,9)), false, 0).
holds(5, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_2_table), false, 0).

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2328 rules into program part ash_goal_state:

final_goal(4, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,10)), false, true).
final_goal(4, in_tower((block,1),(block,10)), true, false).
final_goal(4, in_tower((block,1),(block,11)), false, true).
final_goal(4, in_tower((block,1),(block,11)), true, false).
final_goal(4, in_tower((block,1),(block,12)), false, true).
final_goal(4, in_tower((block,1),(block,12)), true, false).
final_goal(4, in_tower((block,1),(block,13)), false, true).
final_goal(4, in_tower((block,1),(block,13)), true, false).
final_goal(4, in_tower((block,1),(block,14)), false, true).
final_goal(4, in_tower((block,1),(block,14)), true, false).
final_goal(4, in_tower((block,1),(block,15)), false, true).
final_goal(4, in_tower((block,1),(block,15)), true, false).
final_goal(4, in_tower((block,1),(block,16)), false, true).
final_goal(4, in_tower((block,1),(block,16)), true, false).
final_goal(4, in_tower((block,1),(block,17)), false, true).
final_goal(4, in_tower((block,1),(block,17)), true, false).
final_goal(4, in_tower((block,1),(block,18)), false, true).
final_goal(4, in_tower((block,1),(block,18)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,10),(block,1)), false, true).
final_goal(4, in_tower((block,10),(block,1)), true, false).
final_goal(4, in_tower((block,10),(block,10)), false, true).
final_goal(4, in_tower((block,10),(block,10)), true, false).
final_goal(4, in_tower((block,10),(block,11)), false, true).
final_goal(4, in_tower((block,10),(block,11)), true, false).
final_goal(4, in_tower((block,10),(block,12)), false, true).
final_goal(4, in_tower((block,10),(block,12)), true, false).
final_goal(4, in_tower((block,10),(block,13)), false, true).
final_goal(4, in_tower((block,10),(block,13)), true, false).
final_goal(4, in_tower((block,10),(block,14)), false, true).
final_goal(4, in_tower((block,10),(block,14)), true, false).
final_goal(4, in_tower((block,10),(block,15)), false, true).
final_goal(4, in_tower((block,10),(block,15)), true, false).
final_goal(4, in_tower((block,10),(block,16)), false, true).
final_goal(4, in_tower((block,10),(block,16)), true, false).
final_goal(4, in_tower((block,10),(block,17)), false, true).
final_goal(4, in_tower((block,10),(block,17)), true, false).
final_goal(4, in_tower((block,10),(block,18)), false, true).
final_goal(4, in_tower((block,10),(block,18)), true, false).
final_goal(4, in_tower((block,10),(block,2)), false, true).
final_goal(4, in_tower((block,10),(block,2)), true, false).
final_goal(4, in_tower((block,10),(block,3)), false, true).
final_goal(4, in_tower((block,10),(block,3)), true, false).
final_goal(4, in_tower((block,10),(block,4)), false, true).
final_goal(4, in_tower((block,10),(block,4)), true, false).
final_goal(4, in_tower((block,10),(block,5)), false, true).
final_goal(4, in_tower((block,10),(block,5)), true, false).
final_goal(4, in_tower((block,10),(block,6)), false, true).
final_goal(4, in_tower((block,10),(block,6)), true, false).
final_goal(4, in_tower((block,10),(block,7)), false, true).
final_goal(4, in_tower((block,10),(block,7)), true, false).
final_goal(4, in_tower((block,10),(block,8)), false, true).
final_goal(4, in_tower((block,10),(block,8)), true, false).
final_goal(4, in_tower((block,10),(block,9)), false, true).
final_goal(4, in_tower((block,10),(block,9)), true, false).
final_goal(4, in_tower((block,11),(block,1)), false, true).
final_goal(4, in_tower((block,11),(block,1)), true, false).
final_goal(4, in_tower((block,11),(block,10)), false, true).
final_goal(4, in_tower((block,11),(block,10)), true, false).
final_goal(4, in_tower((block,11),(block,11)), false, true).
final_goal(4, in_tower((block,11),(block,11)), true, false).
final_goal(4, in_tower((block,11),(block,12)), false, true).
final_goal(4, in_tower((block,11),(block,12)), true, false).
final_goal(4, in_tower((block,11),(block,13)), false, true).
final_goal(4, in_tower((block,11),(block,13)), true, false).
final_goal(4, in_tower((block,11),(block,14)), false, true).
final_goal(4, in_tower((block,11),(block,14)), true, false).
final_goal(4, in_tower((block,11),(block,15)), false, true).
final_goal(4, in_tower((block,11),(block,15)), true, false).
final_goal(4, in_tower((block,11),(block,16)), false, true).
final_goal(4, in_tower((block,11),(block,16)), true, false).
final_goal(4, in_tower((block,11),(block,17)), false, true).
final_goal(4, in_tower((block,11),(block,17)), true, false).
final_goal(4, in_tower((block,11),(block,18)), false, true).
final_goal(4, in_tower((block,11),(block,18)), true, false).
final_goal(4, in_tower((block,11),(block,2)), false, true).
final_goal(4, in_tower((block,11),(block,2)), true, false).
final_goal(4, in_tower((block,11),(block,3)), false, true).
final_goal(4, in_tower((block,11),(block,3)), true, false).
final_goal(4, in_tower((block,11),(block,4)), false, true).
final_goal(4, in_tower((block,11),(block,4)), true, false).
final_goal(4, in_tower((block,11),(block,5)), false, true).
final_goal(4, in_tower((block,11),(block,5)), true, false).
final_goal(4, in_tower((block,11),(block,6)), false, true).
final_goal(4, in_tower((block,11),(block,6)), true, false).
final_goal(4, in_tower((block,11),(block,7)), false, true).
final_goal(4, in_tower((block,11),(block,7)), true, false).
final_goal(4, in_tower((block,11),(block,8)), false, true).
final_goal(4, in_tower((block,11),(block,8)), true, false).
final_goal(4, in_tower((block,11),(block,9)), false, true).
final_goal(4, in_tower((block,11),(block,9)), true, false).
final_goal(4, in_tower((block,12),(block,1)), false, true).
final_goal(4, in_tower((block,12),(block,1)), true, false).
final_goal(4, in_tower((block,12),(block,10)), false, false).
final_goal(4, in_tower((block,12),(block,10)), true, true).
final_goal(4, in_tower((block,12),(block,11)), false, false).
final_goal(4, in_tower((block,12),(block,11)), true, true).
final_goal(4, in_tower((block,12),(block,12)), false, false).
final_goal(4, in_tower((block,12),(block,12)), true, true).
final_goal(4, in_tower((block,12),(block,13)), false, true).
final_goal(4, in_tower((block,12),(block,13)), true, false).
final_goal(4, in_tower((block,12),(block,14)), false, true).
final_goal(4, in_tower((block,12),(block,14)), true, false).
final_goal(4, in_tower((block,12),(block,15)), false, true).
final_goal(4, in_tower((block,12),(block,15)), true, false).
final_goal(4, in_tower((block,12),(block,16)), false, true).
final_goal(4, in_tower((block,12),(block,16)), true, false).
final_goal(4, in_tower((block,12),(block,17)), false, true).
final_goal(4, in_tower((block,12),(block,17)), true, false).
final_goal(4, in_tower((block,12),(block,18)), false, true).
final_goal(4, in_tower((block,12),(block,18)), true, false).
final_goal(4, in_tower((block,12),(block,2)), false, true).
final_goal(4, in_tower((block,12),(block,2)), true, false).
final_goal(4, in_tower((block,12),(block,3)), false, true).
final_goal(4, in_tower((block,12),(block,3)), true, false).
final_goal(4, in_tower((block,12),(block,4)), false, true).
final_goal(4, in_tower((block,12),(block,4)), true, false).
final_goal(4, in_tower((block,12),(block,5)), false, true).
final_goal(4, in_tower((block,12),(block,5)), true, false).
final_goal(4, in_tower((block,12),(block,6)), false, true).
final_goal(4, in_tower((block,12),(block,6)), true, false).
final_goal(4, in_tower((block,12),(block,7)), false, true).
final_goal(4, in_tower((block,12),(block,7)), true, false).
final_goal(4, in_tower((block,12),(block,8)), false, true).
final_goal(4, in_tower((block,12),(block,8)), true, false).
final_goal(4, in_tower((block,12),(block,9)), false, true).
final_goal(4, in_tower((block,12),(block,9)), true, false).
final_goal(4, in_tower((block,13),(block,1)), false, true).
final_goal(4, in_tower((block,13),(block,1)), true, false).
final_goal(4, in_tower((block,13),(block,10)), false, true).
final_goal(4, in_tower((block,13),(block,10)), true, false).
final_goal(4, in_tower((block,13),(block,11)), false, true).
final_goal(4, in_tower((block,13),(block,11)), true, false).
final_goal(4, in_tower((block,13),(block,12)), false, true).
final_goal(4, in_tower((block,13),(block,12)), true, false).
final_goal(4, in_tower((block,13),(block,13)), false, true).
final_goal(4, in_tower((block,13),(block,13)), true, false).
final_goal(4, in_tower((block,13),(block,14)), false, true).
final_goal(4, in_tower((block,13),(block,14)), true, false).
final_goal(4, in_tower((block,13),(block,15)), false, true).
final_goal(4, in_tower((block,13),(block,15)), true, false).
final_goal(4, in_tower((block,13),(block,16)), false, true).
final_goal(4, in_tower((block,13),(block,16)), true, false).
final_goal(4, in_tower((block,13),(block,17)), false, true).
final_goal(4, in_tower((block,13),(block,17)), true, false).
final_goal(4, in_tower((block,13),(block,18)), false, true).
final_goal(4, in_tower((block,13),(block,18)), true, false).
final_goal(4, in_tower((block,13),(block,2)), false, true).
final_goal(4, in_tower((block,13),(block,2)), true, false).
final_goal(4, in_tower((block,13),(block,3)), false, true).
final_goal(4, in_tower((block,13),(block,3)), true, false).
final_goal(4, in_tower((block,13),(block,4)), false, true).
final_goal(4, in_tower((block,13),(block,4)), true, false).
final_goal(4, in_tower((block,13),(block,5)), false, true).
final_goal(4, in_tower((block,13),(block,5)), true, false).
final_goal(4, in_tower((block,13),(block,6)), false, true).
final_goal(4, in_tower((block,13),(block,6)), true, false).
final_goal(4, in_tower((block,13),(block,7)), false, true).
final_goal(4, in_tower((block,13),(block,7)), true, false).
final_goal(4, in_tower((block,13),(block,8)), false, true).
final_goal(4, in_tower((block,13),(block,8)), true, false).
final_goal(4, in_tower((block,13),(block,9)), false, true).
final_goal(4, in_tower((block,13),(block,9)), true, false).
final_goal(4, in_tower((block,14),(block,1)), false, true).
final_goal(4, in_tower((block,14),(block,1)), true, false).
final_goal(4, in_tower((block,14),(block,10)), false, true).
final_goal(4, in_tower((block,14),(block,10)), true, false).
final_goal(4, in_tower((block,14),(block,11)), false, true).
final_goal(4, in_tower((block,14),(block,11)), true, false).
final_goal(4, in_tower((block,14),(block,12)), false, true).
final_goal(4, in_tower((block,14),(block,12)), true, false).
final_goal(4, in_tower((block,14),(block,13)), false, true).
final_goal(4, in_tower((block,14),(block,13)), true, false).
final_goal(4, in_tower((block,14),(block,14)), false, true).
final_goal(4, in_tower((block,14),(block,14)), true, false).
final_goal(4, in_tower((block,14),(block,15)), false, true).
final_goal(4, in_tower((block,14),(block,15)), true, false).
final_goal(4, in_tower((block,14),(block,16)), false, true).
final_goal(4, in_tower((block,14),(block,16)), true, false).
final_goal(4, in_tower((block,14),(block,17)), false, true).
final_goal(4, in_tower((block,14),(block,17)), true, false).
final_goal(4, in_tower((block,14),(block,18)), false, true).
final_goal(4, in_tower((block,14),(block,18)), true, false).
final_goal(4, in_tower((block,14),(block,2)), false, true).
final_goal(4, in_tower((block,14),(block,2)), true, false).
final_goal(4, in_tower((block,14),(block,3)), false, true).
final_goal(4, in_tower((block,14),(block,3)), true, false).
final_goal(4, in_tower((block,14),(block,4)), false, true).
final_goal(4, in_tower((block,14),(block,4)), true, false).
final_goal(4, in_tower((block,14),(block,5)), false, true).
final_goal(4, in_tower((block,14),(block,5)), true, false).
final_goal(4, in_tower((block,14),(block,6)), false, true).
final_goal(4, in_tower((block,14),(block,6)), true, false).
final_goal(4, in_tower((block,14),(block,7)), false, true).
final_goal(4, in_tower((block,14),(block,7)), true, false).
final_goal(4, in_tower((block,14),(block,8)), false, true).
final_goal(4, in_tower((block,14),(block,8)), true, false).
final_goal(4, in_tower((block,14),(block,9)), false, true).
final_goal(4, in_tower((block,14),(block,9)), true, false).
final_goal(4, in_tower((block,15),(block,1)), false, true).
final_goal(4, in_tower((block,15),(block,1)), true, false).
final_goal(4, in_tower((block,15),(block,10)), false, true).
final_goal(4, in_tower((block,15),(block,10)), true, false).
final_goal(4, in_tower((block,15),(block,11)), false, true).
final_goal(4, in_tower((block,15),(block,11)), true, false).
final_goal(4, in_tower((block,15),(block,12)), false, true).
final_goal(4, in_tower((block,15),(block,12)), true, false).
final_goal(4, in_tower((block,15),(block,13)), false, false).
final_goal(4, in_tower((block,15),(block,13)), true, true).
final_goal(4, in_tower((block,15),(block,14)), false, false).
final_goal(4, in_tower((block,15),(block,14)), true, true).
final_goal(4, in_tower((block,15),(block,15)), false, false).
final_goal(4, in_tower((block,15),(block,15)), true, true).
final_goal(4, in_tower((block,15),(block,16)), false, true).
final_goal(4, in_tower((block,15),(block,16)), true, false).
final_goal(4, in_tower((block,15),(block,17)), false, true).
final_goal(4, in_tower((block,15),(block,17)), true, false).
final_goal(4, in_tower((block,15),(block,18)), false, true).
final_goal(4, in_tower((block,15),(block,18)), true, false).
final_goal(4, in_tower((block,15),(block,2)), false, true).
final_goal(4, in_tower((block,15),(block,2)), true, false).
final_goal(4, in_tower((block,15),(block,3)), false, true).
final_goal(4, in_tower((block,15),(block,3)), true, false).
final_goal(4, in_tower((block,15),(block,4)), false, true).
final_goal(4, in_tower((block,15),(block,4)), true, false).
final_goal(4, in_tower((block,15),(block,5)), false, true).
final_goal(4, in_tower((block,15),(block,5)), true, false).
final_goal(4, in_tower((block,15),(block,6)), false, true).
final_goal(4, in_tower((block,15),(block,6)), true, false).
final_goal(4, in_tower((block,15),(block,7)), false, true).
final_goal(4, in_tower((block,15),(block,7)), true, false).
final_goal(4, in_tower((block,15),(block,8)), false, true).
final_goal(4, in_tower((block,15),(block,8)), true, false).
final_goal(4, in_tower((block,15),(block,9)), false, true).
final_goal(4, in_tower((block,15),(block,9)), true, false).
final_goal(4, in_tower((block,16),(block,1)), false, true).
final_goal(4, in_tower((block,16),(block,1)), true, false).
final_goal(4, in_tower((block,16),(block,10)), false, true).
final_goal(4, in_tower((block,16),(block,10)), true, false).
final_goal(4, in_tower((block,16),(block,11)), false, true).
final_goal(4, in_tower((block,16),(block,11)), true, false).
final_goal(4, in_tower((block,16),(block,12)), false, true).
final_goal(4, in_tower((block,16),(block,12)), true, false).
final_goal(4, in_tower((block,16),(block,13)), false, true).
final_goal(4, in_tower((block,16),(block,13)), true, false).
final_goal(4, in_tower((block,16),(block,14)), false, true).
final_goal(4, in_tower((block,16),(block,14)), true, false).
final_goal(4, in_tower((block,16),(block,15)), false, true).
final_goal(4, in_tower((block,16),(block,15)), true, false).
final_goal(4, in_tower((block,16),(block,16)), false, true).
final_goal(4, in_tower((block,16),(block,16)), true, false).
final_goal(4, in_tower((block,16),(block,17)), false, true).
final_goal(4, in_tower((block,16),(block,17)), true, false).
final_goal(4, in_tower((block,16),(block,18)), false, true).
final_goal(4, in_tower((block,16),(block,18)), true, false).
final_goal(4, in_tower((block,16),(block,2)), false, true).
final_goal(4, in_tower((block,16),(block,2)), true, false).
final_goal(4, in_tower((block,16),(block,3)), false, true).
final_goal(4, in_tower((block,16),(block,3)), true, false).
final_goal(4, in_tower((block,16),(block,4)), false, true).
final_goal(4, in_tower((block,16),(block,4)), true, false).
final_goal(4, in_tower((block,16),(block,5)), false, true).
final_goal(4, in_tower((block,16),(block,5)), true, false).
final_goal(4, in_tower((block,16),(block,6)), false, true).
final_goal(4, in_tower((block,16),(block,6)), true, false).
final_goal(4, in_tower((block,16),(block,7)), false, true).
final_goal(4, in_tower((block,16),(block,7)), true, false).
final_goal(4, in_tower((block,16),(block,8)), false, true).
final_goal(4, in_tower((block,16),(block,8)), true, false).
final_goal(4, in_tower((block,16),(block,9)), false, true).
final_goal(4, in_tower((block,16),(block,9)), true, false).
final_goal(4, in_tower((block,17),(block,1)), false, true).
final_goal(4, in_tower((block,17),(block,1)), true, false).
final_goal(4, in_tower((block,17),(block,10)), false, true).
final_goal(4, in_tower((block,17),(block,10)), true, false).
final_goal(4, in_tower((block,17),(block,11)), false, true).
final_goal(4, in_tower((block,17),(block,11)), true, false).
final_goal(4, in_tower((block,17),(block,12)), false, true).
final_goal(4, in_tower((block,17),(block,12)), true, false).
final_goal(4, in_tower((block,17),(block,13)), false, true).
final_goal(4, in_tower((block,17),(block,13)), true, false).
final_goal(4, in_tower((block,17),(block,14)), false, true).
final_goal(4, in_tower((block,17),(block,14)), true, false).
final_goal(4, in_tower((block,17),(block,15)), false, true).
final_goal(4, in_tower((block,17),(block,15)), true, false).
final_goal(4, in_tower((block,17),(block,16)), false, true).
final_goal(4, in_tower((block,17),(block,16)), true, false).
final_goal(4, in_tower((block,17),(block,17)), false, true).
final_goal(4, in_tower((block,17),(block,17)), true, false).
final_goal(4, in_tower((block,17),(block,18)), false, true).
final_goal(4, in_tower((block,17),(block,18)), true, false).
final_goal(4, in_tower((block,17),(block,2)), false, true).
final_goal(4, in_tower((block,17),(block,2)), true, false).
final_goal(4, in_tower((block,17),(block,3)), false, true).
final_goal(4, in_tower((block,17),(block,3)), true, false).
final_goal(4, in_tower((block,17),(block,4)), false, true).
final_goal(4, in_tower((block,17),(block,4)), true, false).
final_goal(4, in_tower((block,17),(block,5)), false, true).
final_goal(4, in_tower((block,17),(block,5)), true, false).
final_goal(4, in_tower((block,17),(block,6)), false, true).
final_goal(4, in_tower((block,17),(block,6)), true, false).
final_goal(4, in_tower((block,17),(block,7)), false, true).
final_goal(4, in_tower((block,17),(block,7)), true, false).
final_goal(4, in_tower((block,17),(block,8)), false, true).
final_goal(4, in_tower((block,17),(block,8)), true, false).
final_goal(4, in_tower((block,17),(block,9)), false, true).
final_goal(4, in_tower((block,17),(block,9)), true, false).
final_goal(4, in_tower((block,18),(block,1)), false, true).
final_goal(4, in_tower((block,18),(block,1)), true, false).
final_goal(4, in_tower((block,18),(block,10)), false, true).
final_goal(4, in_tower((block,18),(block,10)), true, false).
final_goal(4, in_tower((block,18),(block,11)), false, true).
final_goal(4, in_tower((block,18),(block,11)), true, false).
final_goal(4, in_tower((block,18),(block,12)), false, true).
final_goal(4, in_tower((block,18),(block,12)), true, false).
final_goal(4, in_tower((block,18),(block,13)), false, true).
final_goal(4, in_tower((block,18),(block,13)), true, false).
final_goal(4, in_tower((block,18),(block,14)), false, true).
final_goal(4, in_tower((block,18),(block,14)), true, false).
final_goal(4, in_tower((block,18),(block,15)), false, true).
final_goal(4, in_tower((block,18),(block,15)), true, false).
final_goal(4, in_tower((block,18),(block,16)), false, false).
final_goal(4, in_tower((block,18),(block,16)), true, true).
final_goal(4, in_tower((block,18),(block,17)), false, false).
final_goal(4, in_tower((block,18),(block,17)), true, true).
final_goal(4, in_tower((block,18),(block,18)), false, false).
final_goal(4, in_tower((block,18),(block,18)), true, true).
final_goal(4, in_tower((block,18),(block,2)), false, true).
final_goal(4, in_tower((block,18),(block,2)), true, false).
final_goal(4, in_tower((block,18),(block,3)), false, true).
final_goal(4, in_tower((block,18),(block,3)), true, false).
final_goal(4, in_tower((block,18),(block,4)), false, true).
final_goal(4, in_tower((block,18),(block,4)), true, false).
final_goal(4, in_tower((block,18),(block,5)), false, true).
final_goal(4, in_tower((block,18),(block,5)), true, false).
final_goal(4, in_tower((block,18),(block,6)), false, true).
final_goal(4, in_tower((block,18),(block,6)), true, false).
final_goal(4, in_tower((block,18),(block,7)), false, true).
final_goal(4, in_tower((block,18),(block,7)), true, false).
final_goal(4, in_tower((block,18),(block,8)), false, true).
final_goal(4, in_tower((block,18),(block,8)), true, false).
final_goal(4, in_tower((block,18),(block,9)), false, true).
final_goal(4, in_tower((block,18),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,10)), false, true).
final_goal(4, in_tower((block,2),(block,10)), true, false).
final_goal(4, in_tower((block,2),(block,11)), false, true).
final_goal(4, in_tower((block,2),(block,11)), true, false).
final_goal(4, in_tower((block,2),(block,12)), false, true).
final_goal(4, in_tower((block,2),(block,12)), true, false).
final_goal(4, in_tower((block,2),(block,13)), false, true).
final_goal(4, in_tower((block,2),(block,13)), true, false).
final_goal(4, in_tower((block,2),(block,14)), false, true).
final_goal(4, in_tower((block,2),(block,14)), true, false).
final_goal(4, in_tower((block,2),(block,15)), false, true).
final_goal(4, in_tower((block,2),(block,15)), true, false).
final_goal(4, in_tower((block,2),(block,16)), false, true).
final_goal(4, in_tower((block,2),(block,16)), true, false).
final_goal(4, in_tower((block,2),(block,17)), false, true).
final_goal(4, in_tower((block,2),(block,17)), true, false).
final_goal(4, in_tower((block,2),(block,18)), false, true).
final_goal(4, in_tower((block,2),(block,18)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,10)), false, true).
final_goal(4, in_tower((block,3),(block,10)), true, false).
final_goal(4, in_tower((block,3),(block,11)), false, true).
final_goal(4, in_tower((block,3),(block,11)), true, false).
final_goal(4, in_tower((block,3),(block,12)), false, true).
final_goal(4, in_tower((block,3),(block,12)), true, false).
final_goal(4, in_tower((block,3),(block,13)), false, true).
final_goal(4, in_tower((block,3),(block,13)), true, false).
final_goal(4, in_tower((block,3),(block,14)), false, true).
final_goal(4, in_tower((block,3),(block,14)), true, false).
final_goal(4, in_tower((block,3),(block,15)), false, true).
final_goal(4, in_tower((block,3),(block,15)), true, false).
final_goal(4, in_tower((block,3),(block,16)), false, true).
final_goal(4, in_tower((block,3),(block,16)), true, false).
final_goal(4, in_tower((block,3),(block,17)), false, true).
final_goal(4, in_tower((block,3),(block,17)), true, false).
final_goal(4, in_tower((block,3),(block,18)), false, true).
final_goal(4, in_tower((block,3),(block,18)), true, false).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,10)), false, true).
final_goal(4, in_tower((block,4),(block,10)), true, false).
final_goal(4, in_tower((block,4),(block,11)), false, true).
final_goal(4, in_tower((block,4),(block,11)), true, false).
final_goal(4, in_tower((block,4),(block,12)), false, true).
final_goal(4, in_tower((block,4),(block,12)), true, false).
final_goal(4, in_tower((block,4),(block,13)), false, true).
final_goal(4, in_tower((block,4),(block,13)), true, false).
final_goal(4, in_tower((block,4),(block,14)), false, true).
final_goal(4, in_tower((block,4),(block,14)), true, false).
final_goal(4, in_tower((block,4),(block,15)), false, true).
final_goal(4, in_tower((block,4),(block,15)), true, false).
final_goal(4, in_tower((block,4),(block,16)), false, true).
final_goal(4, in_tower((block,4),(block,16)), true, false).
final_goal(4, in_tower((block,4),(block,17)), false, true).
final_goal(4, in_tower((block,4),(block,17)), true, false).
final_goal(4, in_tower((block,4),(block,18)), false, true).
final_goal(4, in_tower((block,4),(block,18)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,10)), false, true).
final_goal(4, in_tower((block,5),(block,10)), true, false).
final_goal(4, in_tower((block,5),(block,11)), false, true).
final_goal(4, in_tower((block,5),(block,11)), true, false).
final_goal(4, in_tower((block,5),(block,12)), false, true).
final_goal(4, in_tower((block,5),(block,12)), true, false).
final_goal(4, in_tower((block,5),(block,13)), false, true).
final_goal(4, in_tower((block,5),(block,13)), true, false).
final_goal(4, in_tower((block,5),(block,14)), false, true).
final_goal(4, in_tower((block,5),(block,14)), true, false).
final_goal(4, in_tower((block,5),(block,15)), false, true).
final_goal(4, in_tower((block,5),(block,15)), true, false).
final_goal(4, in_tower((block,5),(block,16)), false, true).
final_goal(4, in_tower((block,5),(block,16)), true, false).
final_goal(4, in_tower((block,5),(block,17)), false, true).
final_goal(4, in_tower((block,5),(block,17)), true, false).
final_goal(4, in_tower((block,5),(block,18)), false, true).
final_goal(4, in_tower((block,5),(block,18)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,10)), false, true).
final_goal(4, in_tower((block,6),(block,10)), true, false).
final_goal(4, in_tower((block,6),(block,11)), false, true).
final_goal(4, in_tower((block,6),(block,11)), true, false).
final_goal(4, in_tower((block,6),(block,12)), false, true).
final_goal(4, in_tower((block,6),(block,12)), true, false).
final_goal(4, in_tower((block,6),(block,13)), false, true).
final_goal(4, in_tower((block,6),(block,13)), true, false).
final_goal(4, in_tower((block,6),(block,14)), false, true).
final_goal(4, in_tower((block,6),(block,14)), true, false).
final_goal(4, in_tower((block,6),(block,15)), false, true).
final_goal(4, in_tower((block,6),(block,15)), true, false).
final_goal(4, in_tower((block,6),(block,16)), false, true).
final_goal(4, in_tower((block,6),(block,16)), true, false).
final_goal(4, in_tower((block,6),(block,17)), false, true).
final_goal(4, in_tower((block,6),(block,17)), true, false).
final_goal(4, in_tower((block,6),(block,18)), false, true).
final_goal(4, in_tower((block,6),(block,18)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,10)), false, true).
final_goal(4, in_tower((block,7),(block,10)), true, false).
final_goal(4, in_tower((block,7),(block,11)), false, true).
final_goal(4, in_tower((block,7),(block,11)), true, false).
final_goal(4, in_tower((block,7),(block,12)), false, true).
final_goal(4, in_tower((block,7),(block,12)), true, false).
final_goal(4, in_tower((block,7),(block,13)), false, true).
final_goal(4, in_tower((block,7),(block,13)), true, false).
final_goal(4, in_tower((block,7),(block,14)), false, true).
final_goal(4, in_tower((block,7),(block,14)), true, false).
final_goal(4, in_tower((block,7),(block,15)), false, true).
final_goal(4, in_tower((block,7),(block,15)), true, false).
final_goal(4, in_tower((block,7),(block,16)), false, true).
final_goal(4, in_tower((block,7),(block,16)), true, false).
final_goal(4, in_tower((block,7),(block,17)), false, true).
final_goal(4, in_tower((block,7),(block,17)), true, false).
final_goal(4, in_tower((block,7),(block,18)), false, true).
final_goal(4, in_tower((block,7),(block,18)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,10)), false, true).
final_goal(4, in_tower((block,8),(block,10)), true, false).
final_goal(4, in_tower((block,8),(block,11)), false, true).
final_goal(4, in_tower((block,8),(block,11)), true, false).
final_goal(4, in_tower((block,8),(block,12)), false, true).
final_goal(4, in_tower((block,8),(block,12)), true, false).
final_goal(4, in_tower((block,8),(block,13)), false, true).
final_goal(4, in_tower((block,8),(block,13)), true, false).
final_goal(4, in_tower((block,8),(block,14)), false, true).
final_goal(4, in_tower((block,8),(block,14)), true, false).
final_goal(4, in_tower((block,8),(block,15)), false, true).
final_goal(4, in_tower((block,8),(block,15)), true, false).
final_goal(4, in_tower((block,8),(block,16)), false, true).
final_goal(4, in_tower((block,8),(block,16)), true, false).
final_goal(4, in_tower((block,8),(block,17)), false, true).
final_goal(4, in_tower((block,8),(block,17)), true, false).
final_goal(4, in_tower((block,8),(block,18)), false, true).
final_goal(4, in_tower((block,8),(block,18)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,10)), false, true).
final_goal(4, in_tower((block,9),(block,10)), true, false).
final_goal(4, in_tower((block,9),(block,11)), false, true).
final_goal(4, in_tower((block,9),(block,11)), true, false).
final_goal(4, in_tower((block,9),(block,12)), false, true).
final_goal(4, in_tower((block,9),(block,12)), true, false).
final_goal(4, in_tower((block,9),(block,13)), false, true).
final_goal(4, in_tower((block,9),(block,13)), true, false).
final_goal(4, in_tower((block,9),(block,14)), false, true).
final_goal(4, in_tower((block,9),(block,14)), true, false).
final_goal(4, in_tower((block,9),(block,15)), false, true).
final_goal(4, in_tower((block,9),(block,15)), true, false).
final_goal(4, in_tower((block,9),(block,16)), false, true).
final_goal(4, in_tower((block,9),(block,16)), true, false).
final_goal(4, in_tower((block,9),(block,17)), false, true).
final_goal(4, in_tower((block,9),(block,17)), true, false).
final_goal(4, in_tower((block,9),(block,18)), false, true).
final_goal(4, in_tower((block,9),(block,18)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,10), false).
final_goal(4, on((block,1)), (block,11), false).
final_goal(4, on((block,1)), (block,12), false).
final_goal(4, on((block,1)), (block,13), false).
final_goal(4, on((block,1)), (block,14), false).
final_goal(4, on((block,1)), (block,15), false).
final_goal(4, on((block,1)), (block,16), false).
final_goal(4, on((block,1)), (block,17), false).
final_goal(4, on((block,1)), (block,18), false).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_1_table, false).
final_goal(4, on((block,1)), puzzle_room_2_table, false).
final_goal(4, on((block,10)), (block,1), false).
final_goal(4, on((block,10)), (block,11), true).
final_goal(4, on((block,10)), (block,12), false).
final_goal(4, on((block,10)), (block,13), false).
final_goal(4, on((block,10)), (block,14), false).
final_goal(4, on((block,10)), (block,15), false).
final_goal(4, on((block,10)), (block,16), false).
final_goal(4, on((block,10)), (block,17), false).
final_goal(4, on((block,10)), (block,18), false).
final_goal(4, on((block,10)), (block,2), false).
final_goal(4, on((block,10)), (block,3), false).
final_goal(4, on((block,10)), (block,4), false).
final_goal(4, on((block,10)), (block,5), false).
final_goal(4, on((block,10)), (block,6), false).
final_goal(4, on((block,10)), (block,7), false).
final_goal(4, on((block,10)), (block,8), false).
final_goal(4, on((block,10)), (block,9), false).
final_goal(4, on((block,10)), nothing, false).
final_goal(4, on((block,10)), puzzle_room_1_table, false).
final_goal(4, on((block,10)), puzzle_room_2_table, false).
final_goal(4, on((block,11)), (block,1), false).
final_goal(4, on((block,11)), (block,10), false).
final_goal(4, on((block,11)), (block,12), true).
final_goal(4, on((block,11)), (block,13), false).
final_goal(4, on((block,11)), (block,14), false).
final_goal(4, on((block,11)), (block,15), false).
final_goal(4, on((block,11)), (block,16), false).
final_goal(4, on((block,11)), (block,17), false).
final_goal(4, on((block,11)), (block,18), false).
final_goal(4, on((block,11)), (block,2), false).
final_goal(4, on((block,11)), (block,3), false).
final_goal(4, on((block,11)), (block,4), false).
final_goal(4, on((block,11)), (block,5), false).
final_goal(4, on((block,11)), (block,6), false).
final_goal(4, on((block,11)), (block,7), false).
final_goal(4, on((block,11)), (block,8), false).
final_goal(4, on((block,11)), (block,9), false).
final_goal(4, on((block,11)), nothing, false).
final_goal(4, on((block,11)), puzzle_room_1_table, false).
final_goal(4, on((block,11)), puzzle_room_2_table, false).
final_goal(4, on((block,12)), (block,1), false).
final_goal(4, on((block,12)), (block,10), false).
final_goal(4, on((block,12)), (block,11), false).
final_goal(4, on((block,12)), (block,13), false).
final_goal(4, on((block,12)), (block,14), false).
final_goal(4, on((block,12)), (block,15), false).
final_goal(4, on((block,12)), (block,16), false).
final_goal(4, on((block,12)), (block,17), false).
final_goal(4, on((block,12)), (block,18), false).
final_goal(4, on((block,12)), (block,2), false).
final_goal(4, on((block,12)), (block,3), false).
final_goal(4, on((block,12)), (block,4), false).
final_goal(4, on((block,12)), (block,5), false).
final_goal(4, on((block,12)), (block,6), false).
final_goal(4, on((block,12)), (block,7), false).
final_goal(4, on((block,12)), (block,8), false).
final_goal(4, on((block,12)), (block,9), false).
final_goal(4, on((block,12)), nothing, false).
final_goal(4, on((block,12)), puzzle_room_1_table, false).
final_goal(4, on((block,12)), puzzle_room_2_table, true).
final_goal(4, on((block,13)), (block,1), false).
final_goal(4, on((block,13)), (block,10), false).
final_goal(4, on((block,13)), (block,11), false).
final_goal(4, on((block,13)), (block,12), false).
final_goal(4, on((block,13)), (block,14), true).
final_goal(4, on((block,13)), (block,15), false).
final_goal(4, on((block,13)), (block,16), false).
final_goal(4, on((block,13)), (block,17), false).
final_goal(4, on((block,13)), (block,18), false).
final_goal(4, on((block,13)), (block,2), false).
final_goal(4, on((block,13)), (block,3), false).
final_goal(4, on((block,13)), (block,4), false).
final_goal(4, on((block,13)), (block,5), false).
final_goal(4, on((block,13)), (block,6), false).
final_goal(4, on((block,13)), (block,7), false).
final_goal(4, on((block,13)), (block,8), false).
final_goal(4, on((block,13)), (block,9), false).
final_goal(4, on((block,13)), nothing, false).
final_goal(4, on((block,13)), puzzle_room_1_table, false).
final_goal(4, on((block,13)), puzzle_room_2_table, false).
final_goal(4, on((block,14)), (block,1), false).
final_goal(4, on((block,14)), (block,10), false).
final_goal(4, on((block,14)), (block,11), false).
final_goal(4, on((block,14)), (block,12), false).
final_goal(4, on((block,14)), (block,13), false).
final_goal(4, on((block,14)), (block,15), true).
final_goal(4, on((block,14)), (block,16), false).
final_goal(4, on((block,14)), (block,17), false).
final_goal(4, on((block,14)), (block,18), false).
final_goal(4, on((block,14)), (block,2), false).
final_goal(4, on((block,14)), (block,3), false).
final_goal(4, on((block,14)), (block,4), false).
final_goal(4, on((block,14)), (block,5), false).
final_goal(4, on((block,14)), (block,6), false).
final_goal(4, on((block,14)), (block,7), false).
final_goal(4, on((block,14)), (block,8), false).
final_goal(4, on((block,14)), (block,9), false).
final_goal(4, on((block,14)), nothing, false).
final_goal(4, on((block,14)), puzzle_room_1_table, false).
final_goal(4, on((block,14)), puzzle_room_2_table, false).
final_goal(4, on((block,15)), (block,1), false).
final_goal(4, on((block,15)), (block,10), false).
final_goal(4, on((block,15)), (block,11), false).
final_goal(4, on((block,15)), (block,12), false).
final_goal(4, on((block,15)), (block,13), false).
final_goal(4, on((block,15)), (block,14), false).
final_goal(4, on((block,15)), (block,16), false).
final_goal(4, on((block,15)), (block,17), false).
final_goal(4, on((block,15)), (block,18), false).
final_goal(4, on((block,15)), (block,2), false).
final_goal(4, on((block,15)), (block,3), false).
final_goal(4, on((block,15)), (block,4), false).
final_goal(4, on((block,15)), (block,5), false).
final_goal(4, on((block,15)), (block,6), false).
final_goal(4, on((block,15)), (block,7), false).
final_goal(4, on((block,15)), (block,8), false).
final_goal(4, on((block,15)), (block,9), false).
final_goal(4, on((block,15)), nothing, false).
final_goal(4, on((block,15)), puzzle_room_1_table, false).
final_goal(4, on((block,15)), puzzle_room_2_table, true).
final_goal(4, on((block,16)), (block,1), false).
final_goal(4, on((block,16)), (block,10), false).
final_goal(4, on((block,16)), (block,11), false).
final_goal(4, on((block,16)), (block,12), false).
final_goal(4, on((block,16)), (block,13), false).
final_goal(4, on((block,16)), (block,14), false).
final_goal(4, on((block,16)), (block,15), false).
final_goal(4, on((block,16)), (block,17), true).
final_goal(4, on((block,16)), (block,18), false).
final_goal(4, on((block,16)), (block,2), false).
final_goal(4, on((block,16)), (block,3), false).
final_goal(4, on((block,16)), (block,4), false).
final_goal(4, on((block,16)), (block,5), false).
final_goal(4, on((block,16)), (block,6), false).
final_goal(4, on((block,16)), (block,7), false).
final_goal(4, on((block,16)), (block,8), false).
final_goal(4, on((block,16)), (block,9), false).
final_goal(4, on((block,16)), nothing, false).
final_goal(4, on((block,16)), puzzle_room_1_table, false).
final_goal(4, on((block,16)), puzzle_room_2_table, false).
final_goal(4, on((block,17)), (block,1), false).
final_goal(4, on((block,17)), (block,10), false).
final_goal(4, on((block,17)), (block,11), false).
final_goal(4, on((block,17)), (block,12), false).
final_goal(4, on((block,17)), (block,13), false).
final_goal(4, on((block,17)), (block,14), false).
final_goal(4, on((block,17)), (block,15), false).
final_goal(4, on((block,17)), (block,16), false).
final_goal(4, on((block,17)), (block,18), true).
final_goal(4, on((block,17)), (block,2), false).
final_goal(4, on((block,17)), (block,3), false).
final_goal(4, on((block,17)), (block,4), false).
final_goal(4, on((block,17)), (block,5), false).
final_goal(4, on((block,17)), (block,6), false).
final_goal(4, on((block,17)), (block,7), false).
final_goal(4, on((block,17)), (block,8), false).
final_goal(4, on((block,17)), (block,9), false).
final_goal(4, on((block,17)), nothing, false).
final_goal(4, on((block,17)), puzzle_room_1_table, false).
final_goal(4, on((block,17)), puzzle_room_2_table, false).
final_goal(4, on((block,18)), (block,1), false).
final_goal(4, on((block,18)), (block,10), false).
final_goal(4, on((block,18)), (block,11), false).
final_goal(4, on((block,18)), (block,12), false).
final_goal(4, on((block,18)), (block,13), false).
final_goal(4, on((block,18)), (block,14), false).
final_goal(4, on((block,18)), (block,15), false).
final_goal(4, on((block,18)), (block,16), false).
final_goal(4, on((block,18)), (block,17), false).
final_goal(4, on((block,18)), (block,2), false).
final_goal(4, on((block,18)), (block,3), false).
final_goal(4, on((block,18)), (block,4), false).
final_goal(4, on((block,18)), (block,5), false).
final_goal(4, on((block,18)), (block,6), false).
final_goal(4, on((block,18)), (block,7), false).
final_goal(4, on((block,18)), (block,8), false).
final_goal(4, on((block,18)), (block,9), false).
final_goal(4, on((block,18)), nothing, false).
final_goal(4, on((block,18)), puzzle_room_1_table, false).
final_goal(4, on((block,18)), puzzle_room_2_table, true).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,10), false).
final_goal(4, on((block,2)), (block,11), false).
final_goal(4, on((block,2)), (block,12), false).
final_goal(4, on((block,2)), (block,13), false).
final_goal(4, on((block,2)), (block,14), false).
final_goal(4, on((block,2)), (block,15), false).
final_goal(4, on((block,2)), (block,16), false).
final_goal(4, on((block,2)), (block,17), false).
final_goal(4, on((block,2)), (block,18), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_1_table, false).
final_goal(4, on((block,2)), puzzle_room_2_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,10), false).
final_goal(4, on((block,3)), (block,11), false).
final_goal(4, on((block,3)), (block,12), false).
final_goal(4, on((block,3)), (block,13), false).
final_goal(4, on((block,3)), (block,14), false).
final_goal(4, on((block,3)), (block,15), false).
final_goal(4, on((block,3)), (block,16), false).
final_goal(4, on((block,3)), (block,17), false).
final_goal(4, on((block,3)), (block,18), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_1_table, true).
final_goal(4, on((block,3)), puzzle_room_2_table, false).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,10), false).
final_goal(4, on((block,4)), (block,11), false).
final_goal(4, on((block,4)), (block,12), false).
final_goal(4, on((block,4)), (block,13), false).
final_goal(4, on((block,4)), (block,14), false).
final_goal(4, on((block,4)), (block,15), false).
final_goal(4, on((block,4)), (block,16), false).
final_goal(4, on((block,4)), (block,17), false).
final_goal(4, on((block,4)), (block,18), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_1_table, false).
final_goal(4, on((block,4)), puzzle_room_2_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,10), false).
final_goal(4, on((block,5)), (block,11), false).
final_goal(4, on((block,5)), (block,12), false).
final_goal(4, on((block,5)), (block,13), false).
final_goal(4, on((block,5)), (block,14), false).
final_goal(4, on((block,5)), (block,15), false).
final_goal(4, on((block,5)), (block,16), false).
final_goal(4, on((block,5)), (block,17), false).
final_goal(4, on((block,5)), (block,18), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_1_table, false).
final_goal(4, on((block,5)), puzzle_room_2_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,10), false).
final_goal(4, on((block,6)), (block,11), false).
final_goal(4, on((block,6)), (block,12), false).
final_goal(4, on((block,6)), (block,13), false).
final_goal(4, on((block,6)), (block,14), false).
final_goal(4, on((block,6)), (block,15), false).
final_goal(4, on((block,6)), (block,16), false).
final_goal(4, on((block,6)), (block,17), false).
final_goal(4, on((block,6)), (block,18), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_1_table, true).
final_goal(4, on((block,6)), puzzle_room_2_table, false).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,10), false).
final_goal(4, on((block,7)), (block,11), false).
final_goal(4, on((block,7)), (block,12), false).
final_goal(4, on((block,7)), (block,13), false).
final_goal(4, on((block,7)), (block,14), false).
final_goal(4, on((block,7)), (block,15), false).
final_goal(4, on((block,7)), (block,16), false).
final_goal(4, on((block,7)), (block,17), false).
final_goal(4, on((block,7)), (block,18), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_1_table, false).
final_goal(4, on((block,7)), puzzle_room_2_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,10), false).
final_goal(4, on((block,8)), (block,11), false).
final_goal(4, on((block,8)), (block,12), false).
final_goal(4, on((block,8)), (block,13), false).
final_goal(4, on((block,8)), (block,14), false).
final_goal(4, on((block,8)), (block,15), false).
final_goal(4, on((block,8)), (block,16), false).
final_goal(4, on((block,8)), (block,17), false).
final_goal(4, on((block,8)), (block,18), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_1_table, false).
final_goal(4, on((block,8)), puzzle_room_2_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,10), false).
final_goal(4, on((block,9)), (block,11), false).
final_goal(4, on((block,9)), (block,12), false).
final_goal(4, on((block,9)), (block,13), false).
final_goal(4, on((block,9)), (block,14), false).
final_goal(4, on((block,9)), (block,15), false).
final_goal(4, on((block,9)), (block,16), false).
final_goal(4, on((block,9)), (block,17), false).
final_goal(4, on((block,9)), (block,18), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_1_table, true).
final_goal(4, on((block,9)), puzzle_room_2_table, false).
final_goal(4, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), true, false).
final_goal(5, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(5, in_tower((block,1),(block,1)), false, true).
final_goal(5, in_tower((block,1),(block,1)), true, false).
final_goal(5, in_tower((block,1),(block,10)), false, true).
final_goal(5, in_tower((block,1),(block,10)), true, false).
final_goal(5, in_tower((block,1),(block,11)), false, true).
final_goal(5, in_tower((block,1),(block,11)), true, false).
final_goal(5, in_tower((block,1),(block,12)), false, true).
final_goal(5, in_tower((block,1),(block,12)), true, false).
final_goal(5, in_tower((block,1),(block,13)), false, true).
final_goal(5, in_tower((block,1),(block,13)), true, false).
final_goal(5, in_tower((block,1),(block,14)), false, true).
final_goal(5, in_tower((block,1),(block,14)), true, false).
final_goal(5, in_tower((block,1),(block,15)), false, true).
final_goal(5, in_tower((block,1),(block,15)), true, false).
final_goal(5, in_tower((block,1),(block,16)), false, true).
final_goal(5, in_tower((block,1),(block,16)), true, false).
final_goal(5, in_tower((block,1),(block,17)), false, true).
final_goal(5, in_tower((block,1),(block,17)), true, false).
final_goal(5, in_tower((block,1),(block,18)), false, true).
final_goal(5, in_tower((block,1),(block,18)), true, false).
final_goal(5, in_tower((block,1),(block,2)), false, true).
final_goal(5, in_tower((block,1),(block,2)), true, false).
final_goal(5, in_tower((block,1),(block,3)), false, true).
final_goal(5, in_tower((block,1),(block,3)), true, false).
final_goal(5, in_tower((block,1),(block,4)), false, true).
final_goal(5, in_tower((block,1),(block,4)), true, false).
final_goal(5, in_tower((block,1),(block,5)), false, true).
final_goal(5, in_tower((block,1),(block,5)), true, false).
final_goal(5, in_tower((block,1),(block,6)), false, true).
final_goal(5, in_tower((block,1),(block,6)), true, false).
final_goal(5, in_tower((block,1),(block,7)), false, true).
final_goal(5, in_tower((block,1),(block,7)), true, false).
final_goal(5, in_tower((block,1),(block,8)), false, true).
final_goal(5, in_tower((block,1),(block,8)), true, false).
final_goal(5, in_tower((block,1),(block,9)), false, true).
final_goal(5, in_tower((block,1),(block,9)), true, false).
final_goal(5, in_tower((block,10),(block,1)), false, true).
final_goal(5, in_tower((block,10),(block,1)), true, false).
final_goal(5, in_tower((block,10),(block,10)), false, true).
final_goal(5, in_tower((block,10),(block,10)), true, false).
final_goal(5, in_tower((block,10),(block,11)), false, true).
final_goal(5, in_tower((block,10),(block,11)), true, false).
final_goal(5, in_tower((block,10),(block,12)), false, true).
final_goal(5, in_tower((block,10),(block,12)), true, false).
final_goal(5, in_tower((block,10),(block,13)), false, true).
final_goal(5, in_tower((block,10),(block,13)), true, false).
final_goal(5, in_tower((block,10),(block,14)), false, true).
final_goal(5, in_tower((block,10),(block,14)), true, false).
final_goal(5, in_tower((block,10),(block,15)), false, true).
final_goal(5, in_tower((block,10),(block,15)), true, false).
final_goal(5, in_tower((block,10),(block,16)), false, true).
final_goal(5, in_tower((block,10),(block,16)), true, false).
final_goal(5, in_tower((block,10),(block,17)), false, true).
final_goal(5, in_tower((block,10),(block,17)), true, false).
final_goal(5, in_tower((block,10),(block,18)), false, true).
final_goal(5, in_tower((block,10),(block,18)), true, false).
final_goal(5, in_tower((block,10),(block,2)), false, true).
final_goal(5, in_tower((block,10),(block,2)), true, false).
final_goal(5, in_tower((block,10),(block,3)), false, true).
final_goal(5, in_tower((block,10),(block,3)), true, false).
final_goal(5, in_tower((block,10),(block,4)), false, true).
final_goal(5, in_tower((block,10),(block,4)), true, false).
final_goal(5, in_tower((block,10),(block,5)), false, true).
final_goal(5, in_tower((block,10),(block,5)), true, false).
final_goal(5, in_tower((block,10),(block,6)), false, true).
final_goal(5, in_tower((block,10),(block,6)), true, false).
final_goal(5, in_tower((block,10),(block,7)), false, true).
final_goal(5, in_tower((block,10),(block,7)), true, false).
final_goal(5, in_tower((block,10),(block,8)), false, true).
final_goal(5, in_tower((block,10),(block,8)), true, false).
final_goal(5, in_tower((block,10),(block,9)), false, true).
final_goal(5, in_tower((block,10),(block,9)), true, false).
final_goal(5, in_tower((block,11),(block,1)), false, true).
final_goal(5, in_tower((block,11),(block,1)), true, false).
final_goal(5, in_tower((block,11),(block,10)), false, true).
final_goal(5, in_tower((block,11),(block,10)), true, false).
final_goal(5, in_tower((block,11),(block,11)), false, true).
final_goal(5, in_tower((block,11),(block,11)), true, false).
final_goal(5, in_tower((block,11),(block,12)), false, true).
final_goal(5, in_tower((block,11),(block,12)), true, false).
final_goal(5, in_tower((block,11),(block,13)), false, true).
final_goal(5, in_tower((block,11),(block,13)), true, false).
final_goal(5, in_tower((block,11),(block,14)), false, true).
final_goal(5, in_tower((block,11),(block,14)), true, false).
final_goal(5, in_tower((block,11),(block,15)), false, true).
final_goal(5, in_tower((block,11),(block,15)), true, false).
final_goal(5, in_tower((block,11),(block,16)), false, true).
final_goal(5, in_tower((block,11),(block,16)), true, false).
final_goal(5, in_tower((block,11),(block,17)), false, true).
final_goal(5, in_tower((block,11),(block,17)), true, false).
final_goal(5, in_tower((block,11),(block,18)), false, true).
final_goal(5, in_tower((block,11),(block,18)), true, false).
final_goal(5, in_tower((block,11),(block,2)), false, true).
final_goal(5, in_tower((block,11),(block,2)), true, false).
final_goal(5, in_tower((block,11),(block,3)), false, true).
final_goal(5, in_tower((block,11),(block,3)), true, false).
final_goal(5, in_tower((block,11),(block,4)), false, true).
final_goal(5, in_tower((block,11),(block,4)), true, false).
final_goal(5, in_tower((block,11),(block,5)), false, true).
final_goal(5, in_tower((block,11),(block,5)), true, false).
final_goal(5, in_tower((block,11),(block,6)), false, true).
final_goal(5, in_tower((block,11),(block,6)), true, false).
final_goal(5, in_tower((block,11),(block,7)), false, true).
final_goal(5, in_tower((block,11),(block,7)), true, false).
final_goal(5, in_tower((block,11),(block,8)), false, true).
final_goal(5, in_tower((block,11),(block,8)), true, false).
final_goal(5, in_tower((block,11),(block,9)), false, true).
final_goal(5, in_tower((block,11),(block,9)), true, false).
final_goal(5, in_tower((block,12),(block,1)), false, true).
final_goal(5, in_tower((block,12),(block,1)), true, false).
final_goal(5, in_tower((block,12),(block,10)), false, false).
final_goal(5, in_tower((block,12),(block,10)), true, true).
final_goal(5, in_tower((block,12),(block,11)), false, false).
final_goal(5, in_tower((block,12),(block,11)), true, true).
final_goal(5, in_tower((block,12),(block,12)), false, false).
final_goal(5, in_tower((block,12),(block,12)), true, true).
final_goal(5, in_tower((block,12),(block,13)), false, true).
final_goal(5, in_tower((block,12),(block,13)), true, false).
final_goal(5, in_tower((block,12),(block,14)), false, true).
final_goal(5, in_tower((block,12),(block,14)), true, false).
final_goal(5, in_tower((block,12),(block,15)), false, true).
final_goal(5, in_tower((block,12),(block,15)), true, false).
final_goal(5, in_tower((block,12),(block,16)), false, true).
final_goal(5, in_tower((block,12),(block,16)), true, false).
final_goal(5, in_tower((block,12),(block,17)), false, true).
final_goal(5, in_tower((block,12),(block,17)), true, false).
final_goal(5, in_tower((block,12),(block,18)), false, true).
final_goal(5, in_tower((block,12),(block,18)), true, false).
final_goal(5, in_tower((block,12),(block,2)), false, true).
final_goal(5, in_tower((block,12),(block,2)), true, false).
final_goal(5, in_tower((block,12),(block,3)), false, true).
final_goal(5, in_tower((block,12),(block,3)), true, false).
final_goal(5, in_tower((block,12),(block,4)), false, true).
final_goal(5, in_tower((block,12),(block,4)), true, false).
final_goal(5, in_tower((block,12),(block,5)), false, true).
final_goal(5, in_tower((block,12),(block,5)), true, false).
final_goal(5, in_tower((block,12),(block,6)), false, true).
final_goal(5, in_tower((block,12),(block,6)), true, false).
final_goal(5, in_tower((block,12),(block,7)), false, true).
final_goal(5, in_tower((block,12),(block,7)), true, false).
final_goal(5, in_tower((block,12),(block,8)), false, true).
final_goal(5, in_tower((block,12),(block,8)), true, false).
final_goal(5, in_tower((block,12),(block,9)), false, true).
final_goal(5, in_tower((block,12),(block,9)), true, false).
final_goal(5, in_tower((block,13),(block,1)), false, true).
final_goal(5, in_tower((block,13),(block,1)), true, false).
final_goal(5, in_tower((block,13),(block,10)), false, true).
final_goal(5, in_tower((block,13),(block,10)), true, false).
final_goal(5, in_tower((block,13),(block,11)), false, true).
final_goal(5, in_tower((block,13),(block,11)), true, false).
final_goal(5, in_tower((block,13),(block,12)), false, true).
final_goal(5, in_tower((block,13),(block,12)), true, false).
final_goal(5, in_tower((block,13),(block,13)), false, true).
final_goal(5, in_tower((block,13),(block,13)), true, false).
final_goal(5, in_tower((block,13),(block,14)), false, true).
final_goal(5, in_tower((block,13),(block,14)), true, false).
final_goal(5, in_tower((block,13),(block,15)), false, true).
final_goal(5, in_tower((block,13),(block,15)), true, false).
final_goal(5, in_tower((block,13),(block,16)), false, true).
final_goal(5, in_tower((block,13),(block,16)), true, false).
final_goal(5, in_tower((block,13),(block,17)), false, true).
final_goal(5, in_tower((block,13),(block,17)), true, false).
final_goal(5, in_tower((block,13),(block,18)), false, true).
final_goal(5, in_tower((block,13),(block,18)), true, false).
final_goal(5, in_tower((block,13),(block,2)), false, true).
final_goal(5, in_tower((block,13),(block,2)), true, false).
final_goal(5, in_tower((block,13),(block,3)), false, true).
final_goal(5, in_tower((block,13),(block,3)), true, false).
final_goal(5, in_tower((block,13),(block,4)), false, true).
final_goal(5, in_tower((block,13),(block,4)), true, false).
final_goal(5, in_tower((block,13),(block,5)), false, true).
final_goal(5, in_tower((block,13),(block,5)), true, false).
final_goal(5, in_tower((block,13),(block,6)), false, true).
final_goal(5, in_tower((block,13),(block,6)), true, false).
final_goal(5, in_tower((block,13),(block,7)), false, true).
final_goal(5, in_tower((block,13),(block,7)), true, false).
final_goal(5, in_tower((block,13),(block,8)), false, true).
final_goal(5, in_tower((block,13),(block,8)), true, false).
final_goal(5, in_tower((block,13),(block,9)), false, true).
final_goal(5, in_tower((block,13),(block,9)), true, false).
final_goal(5, in_tower((block,14),(block,1)), false, true).
final_goal(5, in_tower((block,14),(block,1)), true, false).
final_goal(5, in_tower((block,14),(block,10)), false, true).
final_goal(5, in_tower((block,14),(block,10)), true, false).
final_goal(5, in_tower((block,14),(block,11)), false, true).
final_goal(5, in_tower((block,14),(block,11)), true, false).
final_goal(5, in_tower((block,14),(block,12)), false, true).
final_goal(5, in_tower((block,14),(block,12)), true, false).
final_goal(5, in_tower((block,14),(block,13)), false, true).
final_goal(5, in_tower((block,14),(block,13)), true, false).
final_goal(5, in_tower((block,14),(block,14)), false, true).
final_goal(5, in_tower((block,14),(block,14)), true, false).
final_goal(5, in_tower((block,14),(block,15)), false, true).
final_goal(5, in_tower((block,14),(block,15)), true, false).
final_goal(5, in_tower((block,14),(block,16)), false, true).
final_goal(5, in_tower((block,14),(block,16)), true, false).
final_goal(5, in_tower((block,14),(block,17)), false, true).
final_goal(5, in_tower((block,14),(block,17)), true, false).
final_goal(5, in_tower((block,14),(block,18)), false, true).
final_goal(5, in_tower((block,14),(block,18)), true, false).
final_goal(5, in_tower((block,14),(block,2)), false, true).
final_goal(5, in_tower((block,14),(block,2)), true, false).
final_goal(5, in_tower((block,14),(block,3)), false, true).
final_goal(5, in_tower((block,14),(block,3)), true, false).
final_goal(5, in_tower((block,14),(block,4)), false, true).
final_goal(5, in_tower((block,14),(block,4)), true, false).
final_goal(5, in_tower((block,14),(block,5)), false, true).
final_goal(5, in_tower((block,14),(block,5)), true, false).
final_goal(5, in_tower((block,14),(block,6)), false, true).
final_goal(5, in_tower((block,14),(block,6)), true, false).
final_goal(5, in_tower((block,14),(block,7)), false, true).
final_goal(5, in_tower((block,14),(block,7)), true, false).
final_goal(5, in_tower((block,14),(block,8)), false, true).
final_goal(5, in_tower((block,14),(block,8)), true, false).
final_goal(5, in_tower((block,14),(block,9)), false, true).
final_goal(5, in_tower((block,14),(block,9)), true, false).
final_goal(5, in_tower((block,15),(block,1)), false, true).
final_goal(5, in_tower((block,15),(block,1)), true, false).
final_goal(5, in_tower((block,15),(block,10)), false, true).
final_goal(5, in_tower((block,15),(block,10)), true, false).
final_goal(5, in_tower((block,15),(block,11)), false, true).
final_goal(5, in_tower((block,15),(block,11)), true, false).
final_goal(5, in_tower((block,15),(block,12)), false, true).
final_goal(5, in_tower((block,15),(block,12)), true, false).
final_goal(5, in_tower((block,15),(block,13)), false, false).
final_goal(5, in_tower((block,15),(block,13)), true, true).
final_goal(5, in_tower((block,15),(block,14)), false, false).
final_goal(5, in_tower((block,15),(block,14)), true, true).
final_goal(5, in_tower((block,15),(block,15)), false, false).
final_goal(5, in_tower((block,15),(block,15)), true, true).
final_goal(5, in_tower((block,15),(block,16)), false, true).
final_goal(5, in_tower((block,15),(block,16)), true, false).
final_goal(5, in_tower((block,15),(block,17)), false, true).
final_goal(5, in_tower((block,15),(block,17)), true, false).
final_goal(5, in_tower((block,15),(block,18)), false, true).
final_goal(5, in_tower((block,15),(block,18)), true, false).
final_goal(5, in_tower((block,15),(block,2)), false, true).
final_goal(5, in_tower((block,15),(block,2)), true, false).
final_goal(5, in_tower((block,15),(block,3)), false, true).
final_goal(5, in_tower((block,15),(block,3)), true, false).
final_goal(5, in_tower((block,15),(block,4)), false, true).
final_goal(5, in_tower((block,15),(block,4)), true, false).
final_goal(5, in_tower((block,15),(block,5)), false, true).
final_goal(5, in_tower((block,15),(block,5)), true, false).
final_goal(5, in_tower((block,15),(block,6)), false, true).
final_goal(5, in_tower((block,15),(block,6)), true, false).
final_goal(5, in_tower((block,15),(block,7)), false, true).
final_goal(5, in_tower((block,15),(block,7)), true, false).
final_goal(5, in_tower((block,15),(block,8)), false, true).
final_goal(5, in_tower((block,15),(block,8)), true, false).
final_goal(5, in_tower((block,15),(block,9)), false, true).
final_goal(5, in_tower((block,15),(block,9)), true, false).
final_goal(5, in_tower((block,16),(block,1)), false, true).
final_goal(5, in_tower((block,16),(block,1)), true, false).
final_goal(5, in_tower((block,16),(block,10)), false, true).
final_goal(5, in_tower((block,16),(block,10)), true, false).
final_goal(5, in_tower((block,16),(block,11)), false, true).
final_goal(5, in_tower((block,16),(block,11)), true, false).
final_goal(5, in_tower((block,16),(block,12)), false, true).
final_goal(5, in_tower((block,16),(block,12)), true, false).
final_goal(5, in_tower((block,16),(block,13)), false, true).
final_goal(5, in_tower((block,16),(block,13)), true, false).
final_goal(5, in_tower((block,16),(block,14)), false, true).
final_goal(5, in_tower((block,16),(block,14)), true, false).
final_goal(5, in_tower((block,16),(block,15)), false, true).
final_goal(5, in_tower((block,16),(block,15)), true, false).
final_goal(5, in_tower((block,16),(block,16)), false, true).
final_goal(5, in_tower((block,16),(block,16)), true, false).
final_goal(5, in_tower((block,16),(block,17)), false, true).
final_goal(5, in_tower((block,16),(block,17)), true, false).
final_goal(5, in_tower((block,16),(block,18)), false, true).
final_goal(5, in_tower((block,16),(block,18)), true, false).
final_goal(5, in_tower((block,16),(block,2)), false, true).
final_goal(5, in_tower((block,16),(block,2)), true, false).
final_goal(5, in_tower((block,16),(block,3)), false, true).
final_goal(5, in_tower((block,16),(block,3)), true, false).
final_goal(5, in_tower((block,16),(block,4)), false, true).
final_goal(5, in_tower((block,16),(block,4)), true, false).
final_goal(5, in_tower((block,16),(block,5)), false, true).
final_goal(5, in_tower((block,16),(block,5)), true, false).
final_goal(5, in_tower((block,16),(block,6)), false, true).
final_goal(5, in_tower((block,16),(block,6)), true, false).
final_goal(5, in_tower((block,16),(block,7)), false, true).
final_goal(5, in_tower((block,16),(block,7)), true, false).
final_goal(5, in_tower((block,16),(block,8)), false, true).
final_goal(5, in_tower((block,16),(block,8)), true, false).
final_goal(5, in_tower((block,16),(block,9)), false, true).
final_goal(5, in_tower((block,16),(block,9)), true, false).
final_goal(5, in_tower((block,17),(block,1)), false, true).
final_goal(5, in_tower((block,17),(block,1)), true, false).
final_goal(5, in_tower((block,17),(block,10)), false, true).
final_goal(5, in_tower((block,17),(block,10)), true, false).
final_goal(5, in_tower((block,17),(block,11)), false, true).
final_goal(5, in_tower((block,17),(block,11)), true, false).
final_goal(5, in_tower((block,17),(block,12)), false, true).
final_goal(5, in_tower((block,17),(block,12)), true, false).
final_goal(5, in_tower((block,17),(block,13)), false, true).
final_goal(5, in_tower((block,17),(block,13)), true, false).
final_goal(5, in_tower((block,17),(block,14)), false, true).
final_goal(5, in_tower((block,17),(block,14)), true, false).
final_goal(5, in_tower((block,17),(block,15)), false, true).
final_goal(5, in_tower((block,17),(block,15)), true, false).
final_goal(5, in_tower((block,17),(block,16)), false, true).
final_goal(5, in_tower((block,17),(block,16)), true, false).
final_goal(5, in_tower((block,17),(block,17)), false, true).
final_goal(5, in_tower((block,17),(block,17)), true, false).
final_goal(5, in_tower((block,17),(block,18)), false, true).
final_goal(5, in_tower((block,17),(block,18)), true, false).
final_goal(5, in_tower((block,17),(block,2)), false, true).
final_goal(5, in_tower((block,17),(block,2)), true, false).
final_goal(5, in_tower((block,17),(block,3)), false, true).
final_goal(5, in_tower((block,17),(block,3)), true, false).
final_goal(5, in_tower((block,17),(block,4)), false, true).
final_goal(5, in_tower((block,17),(block,4)), true, false).
final_goal(5, in_tower((block,17),(block,5)), false, true).
final_goal(5, in_tower((block,17),(block,5)), true, false).
final_goal(5, in_tower((block,17),(block,6)), false, true).
final_goal(5, in_tower((block,17),(block,6)), true, false).
final_goal(5, in_tower((block,17),(block,7)), false, true).
final_goal(5, in_tower((block,17),(block,7)), true, false).
final_goal(5, in_tower((block,17),(block,8)), false, true).
final_goal(5, in_tower((block,17),(block,8)), true, false).
final_goal(5, in_tower((block,17),(block,9)), false, true).
final_goal(5, in_tower((block,17),(block,9)), true, false).
final_goal(5, in_tower((block,18),(block,1)), false, true).
final_goal(5, in_tower((block,18),(block,1)), true, false).
final_goal(5, in_tower((block,18),(block,10)), false, true).
final_goal(5, in_tower((block,18),(block,10)), true, false).
final_goal(5, in_tower((block,18),(block,11)), false, true).
final_goal(5, in_tower((block,18),(block,11)), true, false).
final_goal(5, in_tower((block,18),(block,12)), false, true).
final_goal(5, in_tower((block,18),(block,12)), true, false).
final_goal(5, in_tower((block,18),(block,13)), false, true).
final_goal(5, in_tower((block,18),(block,13)), true, false).
final_goal(5, in_tower((block,18),(block,14)), false, true).
final_goal(5, in_tower((block,18),(block,14)), true, false).
final_goal(5, in_tower((block,18),(block,15)), false, true).
final_goal(5, in_tower((block,18),(block,15)), true, false).
final_goal(5, in_tower((block,18),(block,16)), false, false).
final_goal(5, in_tower((block,18),(block,16)), true, true).
final_goal(5, in_tower((block,18),(block,17)), false, false).
final_goal(5, in_tower((block,18),(block,17)), true, true).
final_goal(5, in_tower((block,18),(block,18)), false, false).
final_goal(5, in_tower((block,18),(block,18)), true, true).
final_goal(5, in_tower((block,18),(block,2)), false, true).
final_goal(5, in_tower((block,18),(block,2)), true, false).
final_goal(5, in_tower((block,18),(block,3)), false, true).
final_goal(5, in_tower((block,18),(block,3)), true, false).
final_goal(5, in_tower((block,18),(block,4)), false, true).
final_goal(5, in_tower((block,18),(block,4)), true, false).
final_goal(5, in_tower((block,18),(block,5)), false, true).
final_goal(5, in_tower((block,18),(block,5)), true, false).
final_goal(5, in_tower((block,18),(block,6)), false, true).
final_goal(5, in_tower((block,18),(block,6)), true, false).
final_goal(5, in_tower((block,18),(block,7)), false, true).
final_goal(5, in_tower((block,18),(block,7)), true, false).
final_goal(5, in_tower((block,18),(block,8)), false, true).
final_goal(5, in_tower((block,18),(block,8)), true, false).
final_goal(5, in_tower((block,18),(block,9)), false, true).
final_goal(5, in_tower((block,18),(block,9)), true, false).
final_goal(5, in_tower((block,2),(block,1)), false, true).
final_goal(5, in_tower((block,2),(block,1)), true, false).
final_goal(5, in_tower((block,2),(block,10)), false, true).
final_goal(5, in_tower((block,2),(block,10)), true, false).
final_goal(5, in_tower((block,2),(block,11)), false, true).
final_goal(5, in_tower((block,2),(block,11)), true, false).
final_goal(5, in_tower((block,2),(block,12)), false, true).
final_goal(5, in_tower((block,2),(block,12)), true, false).
final_goal(5, in_tower((block,2),(block,13)), false, true).
final_goal(5, in_tower((block,2),(block,13)), true, false).
final_goal(5, in_tower((block,2),(block,14)), false, true).
final_goal(5, in_tower((block,2),(block,14)), true, false).
final_goal(5, in_tower((block,2),(block,15)), false, true).
final_goal(5, in_tower((block,2),(block,15)), true, false).
final_goal(5, in_tower((block,2),(block,16)), false, true).
final_goal(5, in_tower((block,2),(block,16)), true, false).
final_goal(5, in_tower((block,2),(block,17)), false, true).
final_goal(5, in_tower((block,2),(block,17)), true, false).
final_goal(5, in_tower((block,2),(block,18)), false, true).
final_goal(5, in_tower((block,2),(block,18)), true, false).
final_goal(5, in_tower((block,2),(block,2)), false, true).
final_goal(5, in_tower((block,2),(block,2)), true, false).
final_goal(5, in_tower((block,2),(block,3)), false, true).
final_goal(5, in_tower((block,2),(block,3)), true, false).
final_goal(5, in_tower((block,2),(block,4)), false, true).
final_goal(5, in_tower((block,2),(block,4)), true, false).
final_goal(5, in_tower((block,2),(block,5)), false, true).
final_goal(5, in_tower((block,2),(block,5)), true, false).
final_goal(5, in_tower((block,2),(block,6)), false, true).
final_goal(5, in_tower((block,2),(block,6)), true, false).
final_goal(5, in_tower((block,2),(block,7)), false, true).
final_goal(5, in_tower((block,2),(block,7)), true, false).
final_goal(5, in_tower((block,2),(block,8)), false, true).
final_goal(5, in_tower((block,2),(block,8)), true, false).
final_goal(5, in_tower((block,2),(block,9)), false, true).
final_goal(5, in_tower((block,2),(block,9)), true, false).
final_goal(5, in_tower((block,3),(block,1)), false, false).
final_goal(5, in_tower((block,3),(block,1)), true, true).
final_goal(5, in_tower((block,3),(block,10)), false, true).
final_goal(5, in_tower((block,3),(block,10)), true, false).
final_goal(5, in_tower((block,3),(block,11)), false, true).
final_goal(5, in_tower((block,3),(block,11)), true, false).
final_goal(5, in_tower((block,3),(block,12)), false, true).
final_goal(5, in_tower((block,3),(block,12)), true, false).
final_goal(5, in_tower((block,3),(block,13)), false, true).
final_goal(5, in_tower((block,3),(block,13)), true, false).
final_goal(5, in_tower((block,3),(block,14)), false, true).
final_goal(5, in_tower((block,3),(block,14)), true, false).
final_goal(5, in_tower((block,3),(block,15)), false, true).
final_goal(5, in_tower((block,3),(block,15)), true, false).
final_goal(5, in_tower((block,3),(block,16)), false, true).
final_goal(5, in_tower((block,3),(block,16)), true, false).
final_goal(5, in_tower((block,3),(block,17)), false, true).
final_goal(5, in_tower((block,3),(block,17)), true, false).
final_goal(5, in_tower((block,3),(block,18)), false, true).
final_goal(5, in_tower((block,3),(block,18)), true, false).
final_goal(5, in_tower((block,3),(block,2)), false, false).
final_goal(5, in_tower((block,3),(block,2)), true, true).
final_goal(5, in_tower((block,3),(block,3)), false, false).
final_goal(5, in_tower((block,3),(block,3)), true, true).
final_goal(5, in_tower((block,3),(block,4)), false, true).
final_goal(5, in_tower((block,3),(block,4)), true, false).
final_goal(5, in_tower((block,3),(block,5)), false, true).
final_goal(5, in_tower((block,3),(block,5)), true, false).
final_goal(5, in_tower((block,3),(block,6)), false, true).
final_goal(5, in_tower((block,3),(block,6)), true, false).
final_goal(5, in_tower((block,3),(block,7)), false, true).
final_goal(5, in_tower((block,3),(block,7)), true, false).
final_goal(5, in_tower((block,3),(block,8)), false, true).
final_goal(5, in_tower((block,3),(block,8)), true, false).
final_goal(5, in_tower((block,3),(block,9)), false, true).
final_goal(5, in_tower((block,3),(block,9)), true, false).
final_goal(5, in_tower((block,4),(block,1)), false, true).
final_goal(5, in_tower((block,4),(block,1)), true, false).
final_goal(5, in_tower((block,4),(block,10)), false, true).
final_goal(5, in_tower((block,4),(block,10)), true, false).
final_goal(5, in_tower((block,4),(block,11)), false, true).
final_goal(5, in_tower((block,4),(block,11)), true, false).
final_goal(5, in_tower((block,4),(block,12)), false, true).
final_goal(5, in_tower((block,4),(block,12)), true, false).
final_goal(5, in_tower((block,4),(block,13)), false, true).
final_goal(5, in_tower((block,4),(block,13)), true, false).
final_goal(5, in_tower((block,4),(block,14)), false, true).
final_goal(5, in_tower((block,4),(block,14)), true, false).
final_goal(5, in_tower((block,4),(block,15)), false, true).
final_goal(5, in_tower((block,4),(block,15)), true, false).
final_goal(5, in_tower((block,4),(block,16)), false, true).
final_goal(5, in_tower((block,4),(block,16)), true, false).
final_goal(5, in_tower((block,4),(block,17)), false, true).
final_goal(5, in_tower((block,4),(block,17)), true, false).
final_goal(5, in_tower((block,4),(block,18)), false, true).
final_goal(5, in_tower((block,4),(block,18)), true, false).
final_goal(5, in_tower((block,4),(block,2)), false, true).
final_goal(5, in_tower((block,4),(block,2)), true, false).
final_goal(5, in_tower((block,4),(block,3)), false, true).
final_goal(5, in_tower((block,4),(block,3)), true, false).
final_goal(5, in_tower((block,4),(block,4)), false, true).
final_goal(5, in_tower((block,4),(block,4)), true, false).
final_goal(5, in_tower((block,4),(block,5)), false, true).
final_goal(5, in_tower((block,4),(block,5)), true, false).
final_goal(5, in_tower((block,4),(block,6)), false, true).
final_goal(5, in_tower((block,4),(block,6)), true, false).
final_goal(5, in_tower((block,4),(block,7)), false, true).
final_goal(5, in_tower((block,4),(block,7)), true, false).
final_goal(5, in_tower((block,4),(block,8)), false, true).
final_goal(5, in_tower((block,4),(block,8)), true, false).
final_goal(5, in_tower((block,4),(block,9)), false, true).
final_goal(5, in_tower((block,4),(block,9)), true, false).
final_goal(5, in_tower((block,5),(block,1)), false, true).
final_goal(5, in_tower((block,5),(block,1)), true, false).
final_goal(5, in_tower((block,5),(block,10)), false, true).
final_goal(5, in_tower((block,5),(block,10)), true, false).
final_goal(5, in_tower((block,5),(block,11)), false, true).
final_goal(5, in_tower((block,5),(block,11)), true, false).
final_goal(5, in_tower((block,5),(block,12)), false, true).
final_goal(5, in_tower((block,5),(block,12)), true, false).
final_goal(5, in_tower((block,5),(block,13)), false, true).
final_goal(5, in_tower((block,5),(block,13)), true, false).
final_goal(5, in_tower((block,5),(block,14)), false, true).
final_goal(5, in_tower((block,5),(block,14)), true, false).
final_goal(5, in_tower((block,5),(block,15)), false, true).
final_goal(5, in_tower((block,5),(block,15)), true, false).
final_goal(5, in_tower((block,5),(block,16)), false, true).
final_goal(5, in_tower((block,5),(block,16)), true, false).
final_goal(5, in_tower((block,5),(block,17)), false, true).
final_goal(5, in_tower((block,5),(block,17)), true, false).
final_goal(5, in_tower((block,5),(block,18)), false, true).
final_goal(5, in_tower((block,5),(block,18)), true, false).
final_goal(5, in_tower((block,5),(block,2)), false, true).
final_goal(5, in_tower((block,5),(block,2)), true, false).
final_goal(5, in_tower((block,5),(block,3)), false, true).
final_goal(5, in_tower((block,5),(block,3)), true, false).
final_goal(5, in_tower((block,5),(block,4)), false, true).
final_goal(5, in_tower((block,5),(block,4)), true, false).
final_goal(5, in_tower((block,5),(block,5)), false, true).
final_goal(5, in_tower((block,5),(block,5)), true, false).
final_goal(5, in_tower((block,5),(block,6)), false, true).
final_goal(5, in_tower((block,5),(block,6)), true, false).
final_goal(5, in_tower((block,5),(block,7)), false, true).
final_goal(5, in_tower((block,5),(block,7)), true, false).
final_goal(5, in_tower((block,5),(block,8)), false, true).
final_goal(5, in_tower((block,5),(block,8)), true, false).
final_goal(5, in_tower((block,5),(block,9)), false, true).
final_goal(5, in_tower((block,5),(block,9)), true, false).
final_goal(5, in_tower((block,6),(block,1)), false, true).
final_goal(5, in_tower((block,6),(block,1)), true, false).
final_goal(5, in_tower((block,6),(block,10)), false, true).
final_goal(5, in_tower((block,6),(block,10)), true, false).
final_goal(5, in_tower((block,6),(block,11)), false, true).
final_goal(5, in_tower((block,6),(block,11)), true, false).
final_goal(5, in_tower((block,6),(block,12)), false, true).
final_goal(5, in_tower((block,6),(block,12)), true, false).
final_goal(5, in_tower((block,6),(block,13)), false, true).
final_goal(5, in_tower((block,6),(block,13)), true, false).
final_goal(5, in_tower((block,6),(block,14)), false, true).
final_goal(5, in_tower((block,6),(block,14)), true, false).
final_goal(5, in_tower((block,6),(block,15)), false, true).
final_goal(5, in_tower((block,6),(block,15)), true, false).
final_goal(5, in_tower((block,6),(block,16)), false, true).
final_goal(5, in_tower((block,6),(block,16)), true, false).
final_goal(5, in_tower((block,6),(block,17)), false, true).
final_goal(5, in_tower((block,6),(block,17)), true, false).
final_goal(5, in_tower((block,6),(block,18)), false, true).
final_goal(5, in_tower((block,6),(block,18)), true, false).
final_goal(5, in_tower((block,6),(block,2)), false, true).
final_goal(5, in_tower((block,6),(block,2)), true, false).
final_goal(5, in_tower((block,6),(block,3)), false, true).
final_goal(5, in_tower((block,6),(block,3)), true, false).
final_goal(5, in_tower((block,6),(block,4)), false, false).
final_goal(5, in_tower((block,6),(block,4)), true, true).
final_goal(5, in_tower((block,6),(block,5)), false, false).
final_goal(5, in_tower((block,6),(block,5)), true, true).
final_goal(5, in_tower((block,6),(block,6)), false, false).
final_goal(5, in_tower((block,6),(block,6)), true, true).
final_goal(5, in_tower((block,6),(block,7)), false, true).
final_goal(5, in_tower((block,6),(block,7)), true, false).
final_goal(5, in_tower((block,6),(block,8)), false, true).
final_goal(5, in_tower((block,6),(block,8)), true, false).
final_goal(5, in_tower((block,6),(block,9)), false, true).
final_goal(5, in_tower((block,6),(block,9)), true, false).
final_goal(5, in_tower((block,7),(block,1)), false, true).
final_goal(5, in_tower((block,7),(block,1)), true, false).
final_goal(5, in_tower((block,7),(block,10)), false, true).
final_goal(5, in_tower((block,7),(block,10)), true, false).
final_goal(5, in_tower((block,7),(block,11)), false, true).
final_goal(5, in_tower((block,7),(block,11)), true, false).
final_goal(5, in_tower((block,7),(block,12)), false, true).
final_goal(5, in_tower((block,7),(block,12)), true, false).
final_goal(5, in_tower((block,7),(block,13)), false, true).
final_goal(5, in_tower((block,7),(block,13)), true, false).
final_goal(5, in_tower((block,7),(block,14)), false, true).
final_goal(5, in_tower((block,7),(block,14)), true, false).
final_goal(5, in_tower((block,7),(block,15)), false, true).
final_goal(5, in_tower((block,7),(block,15)), true, false).
final_goal(5, in_tower((block,7),(block,16)), false, true).
final_goal(5, in_tower((block,7),(block,16)), true, false).
final_goal(5, in_tower((block,7),(block,17)), false, true).
final_goal(5, in_tower((block,7),(block,17)), true, false).
final_goal(5, in_tower((block,7),(block,18)), false, true).
final_goal(5, in_tower((block,7),(block,18)), true, false).
final_goal(5, in_tower((block,7),(block,2)), false, true).
final_goal(5, in_tower((block,7),(block,2)), true, false).
final_goal(5, in_tower((block,7),(block,3)), false, true).
final_goal(5, in_tower((block,7),(block,3)), true, false).
final_goal(5, in_tower((block,7),(block,4)), false, true).
final_goal(5, in_tower((block,7),(block,4)), true, false).
final_goal(5, in_tower((block,7),(block,5)), false, true).
final_goal(5, in_tower((block,7),(block,5)), true, false).
final_goal(5, in_tower((block,7),(block,6)), false, true).
final_goal(5, in_tower((block,7),(block,6)), true, false).
final_goal(5, in_tower((block,7),(block,7)), false, true).
final_goal(5, in_tower((block,7),(block,7)), true, false).
final_goal(5, in_tower((block,7),(block,8)), false, true).
final_goal(5, in_tower((block,7),(block,8)), true, false).
final_goal(5, in_tower((block,7),(block,9)), false, true).
final_goal(5, in_tower((block,7),(block,9)), true, false).
final_goal(5, in_tower((block,8),(block,1)), false, true).
final_goal(5, in_tower((block,8),(block,1)), true, false).
final_goal(5, in_tower((block,8),(block,10)), false, true).
final_goal(5, in_tower((block,8),(block,10)), true, false).
final_goal(5, in_tower((block,8),(block,11)), false, true).
final_goal(5, in_tower((block,8),(block,11)), true, false).
final_goal(5, in_tower((block,8),(block,12)), false, true).
final_goal(5, in_tower((block,8),(block,12)), true, false).
final_goal(5, in_tower((block,8),(block,13)), false, true).
final_goal(5, in_tower((block,8),(block,13)), true, false).
final_goal(5, in_tower((block,8),(block,14)), false, true).
final_goal(5, in_tower((block,8),(block,14)), true, false).
final_goal(5, in_tower((block,8),(block,15)), false, true).
final_goal(5, in_tower((block,8),(block,15)), true, false).
final_goal(5, in_tower((block,8),(block,16)), false, true).
final_goal(5, in_tower((block,8),(block,16)), true, false).
final_goal(5, in_tower((block,8),(block,17)), false, true).
final_goal(5, in_tower((block,8),(block,17)), true, false).
final_goal(5, in_tower((block,8),(block,18)), false, true).
final_goal(5, in_tower((block,8),(block,18)), true, false).
final_goal(5, in_tower((block,8),(block,2)), false, true).
final_goal(5, in_tower((block,8),(block,2)), true, false).
final_goal(5, in_tower((block,8),(block,3)), false, true).
final_goal(5, in_tower((block,8),(block,3)), true, false).
final_goal(5, in_tower((block,8),(block,4)), false, true).
final_goal(5, in_tower((block,8),(block,4)), true, false).
final_goal(5, in_tower((block,8),(block,5)), false, true).
final_goal(5, in_tower((block,8),(block,5)), true, false).
final_goal(5, in_tower((block,8),(block,6)), false, true).
final_goal(5, in_tower((block,8),(block,6)), true, false).
final_goal(5, in_tower((block,8),(block,7)), false, true).
final_goal(5, in_tower((block,8),(block,7)), true, false).
final_goal(5, in_tower((block,8),(block,8)), false, true).
final_goal(5, in_tower((block,8),(block,8)), true, false).
final_goal(5, in_tower((block,8),(block,9)), false, true).
final_goal(5, in_tower((block,8),(block,9)), true, false).
final_goal(5, in_tower((block,9),(block,1)), false, true).
final_goal(5, in_tower((block,9),(block,1)), true, false).
final_goal(5, in_tower((block,9),(block,10)), false, true).
final_goal(5, in_tower((block,9),(block,10)), true, false).
final_goal(5, in_tower((block,9),(block,11)), false, true).
final_goal(5, in_tower((block,9),(block,11)), true, false).
final_goal(5, in_tower((block,9),(block,12)), false, true).
final_goal(5, in_tower((block,9),(block,12)), true, false).
final_goal(5, in_tower((block,9),(block,13)), false, true).
final_goal(5, in_tower((block,9),(block,13)), true, false).
final_goal(5, in_tower((block,9),(block,14)), false, true).
final_goal(5, in_tower((block,9),(block,14)), true, false).
final_goal(5, in_tower((block,9),(block,15)), false, true).
final_goal(5, in_tower((block,9),(block,15)), true, false).
final_goal(5, in_tower((block,9),(block,16)), false, true).
final_goal(5, in_tower((block,9),(block,16)), true, false).
final_goal(5, in_tower((block,9),(block,17)), false, true).
final_goal(5, in_tower((block,9),(block,17)), true, false).
final_goal(5, in_tower((block,9),(block,18)), false, true).
final_goal(5, in_tower((block,9),(block,18)), true, false).
final_goal(5, in_tower((block,9),(block,2)), false, true).
final_goal(5, in_tower((block,9),(block,2)), true, false).
final_goal(5, in_tower((block,9),(block,3)), false, true).
final_goal(5, in_tower((block,9),(block,3)), true, false).
final_goal(5, in_tower((block,9),(block,4)), false, true).
final_goal(5, in_tower((block,9),(block,4)), true, false).
final_goal(5, in_tower((block,9),(block,5)), false, true).
final_goal(5, in_tower((block,9),(block,5)), true, false).
final_goal(5, in_tower((block,9),(block,6)), false, true).
final_goal(5, in_tower((block,9),(block,6)), true, false).
final_goal(5, in_tower((block,9),(block,7)), false, false).
final_goal(5, in_tower((block,9),(block,7)), true, true).
final_goal(5, in_tower((block,9),(block,8)), false, false).
final_goal(5, in_tower((block,9),(block,8)), true, true).
final_goal(5, in_tower((block,9),(block,9)), false, false).
final_goal(5, in_tower((block,9),(block,9)), true, true).
final_goal(5, on((block,1)), (block,10), false).
final_goal(5, on((block,1)), (block,11), false).
final_goal(5, on((block,1)), (block,12), false).
final_goal(5, on((block,1)), (block,13), false).
final_goal(5, on((block,1)), (block,14), false).
final_goal(5, on((block,1)), (block,15), false).
final_goal(5, on((block,1)), (block,16), false).
final_goal(5, on((block,1)), (block,17), false).
final_goal(5, on((block,1)), (block,18), false).
final_goal(5, on((block,1)), (block,2), true).
final_goal(5, on((block,1)), (block,3), false).
final_goal(5, on((block,1)), (block,4), false).
final_goal(5, on((block,1)), (block,5), false).
final_goal(5, on((block,1)), (block,6), false).
final_goal(5, on((block,1)), (block,7), false).
final_goal(5, on((block,1)), (block,8), false).
final_goal(5, on((block,1)), (block,9), false).
final_goal(5, on((block,1)), nothing, false).
final_goal(5, on((block,1)), puzzle_room_1_table, false).
final_goal(5, on((block,1)), puzzle_room_2_table, false).
final_goal(5, on((block,10)), (block,1), false).
final_goal(5, on((block,10)), (block,11), true).
final_goal(5, on((block,10)), (block,12), false).
final_goal(5, on((block,10)), (block,13), false).
final_goal(5, on((block,10)), (block,14), false).
final_goal(5, on((block,10)), (block,15), false).
final_goal(5, on((block,10)), (block,16), false).
final_goal(5, on((block,10)), (block,17), false).
final_goal(5, on((block,10)), (block,18), false).
final_goal(5, on((block,10)), (block,2), false).
final_goal(5, on((block,10)), (block,3), false).
final_goal(5, on((block,10)), (block,4), false).
final_goal(5, on((block,10)), (block,5), false).
final_goal(5, on((block,10)), (block,6), false).
final_goal(5, on((block,10)), (block,7), false).
final_goal(5, on((block,10)), (block,8), false).
final_goal(5, on((block,10)), (block,9), false).
final_goal(5, on((block,10)), nothing, false).
final_goal(5, on((block,10)), puzzle_room_1_table, false).
final_goal(5, on((block,10)), puzzle_room_2_table, false).
final_goal(5, on((block,11)), (block,1), false).
final_goal(5, on((block,11)), (block,10), false).
final_goal(5, on((block,11)), (block,12), true).
final_goal(5, on((block,11)), (block,13), false).
final_goal(5, on((block,11)), (block,14), false).
final_goal(5, on((block,11)), (block,15), false).
final_goal(5, on((block,11)), (block,16), false).
final_goal(5, on((block,11)), (block,17), false).
final_goal(5, on((block,11)), (block,18), false).
final_goal(5, on((block,11)), (block,2), false).
final_goal(5, on((block,11)), (block,3), false).
final_goal(5, on((block,11)), (block,4), false).
final_goal(5, on((block,11)), (block,5), false).
final_goal(5, on((block,11)), (block,6), false).
final_goal(5, on((block,11)), (block,7), false).
final_goal(5, on((block,11)), (block,8), false).
final_goal(5, on((block,11)), (block,9), false).
final_goal(5, on((block,11)), nothing, false).
final_goal(5, on((block,11)), puzzle_room_1_table, false).
final_goal(5, on((block,11)), puzzle_room_2_table, false).
final_goal(5, on((block,12)), (block,1), false).
final_goal(5, on((block,12)), (block,10), false).
final_goal(5, on((block,12)), (block,11), false).
final_goal(5, on((block,12)), (block,13), false).
final_goal(5, on((block,12)), (block,14), false).
final_goal(5, on((block,12)), (block,15), false).
final_goal(5, on((block,12)), (block,16), false).
final_goal(5, on((block,12)), (block,17), false).
final_goal(5, on((block,12)), (block,18), false).
final_goal(5, on((block,12)), (block,2), false).
final_goal(5, on((block,12)), (block,3), false).
final_goal(5, on((block,12)), (block,4), false).
final_goal(5, on((block,12)), (block,5), false).
final_goal(5, on((block,12)), (block,6), false).
final_goal(5, on((block,12)), (block,7), false).
final_goal(5, on((block,12)), (block,8), false).
final_goal(5, on((block,12)), (block,9), false).
final_goal(5, on((block,12)), nothing, false).
final_goal(5, on((block,12)), puzzle_room_1_table, false).
final_goal(5, on((block,12)), puzzle_room_2_table, true).
final_goal(5, on((block,13)), (block,1), false).
final_goal(5, on((block,13)), (block,10), false).
final_goal(5, on((block,13)), (block,11), false).
final_goal(5, on((block,13)), (block,12), false).
final_goal(5, on((block,13)), (block,14), true).
final_goal(5, on((block,13)), (block,15), false).
final_goal(5, on((block,13)), (block,16), false).
final_goal(5, on((block,13)), (block,17), false).
final_goal(5, on((block,13)), (block,18), false).
final_goal(5, on((block,13)), (block,2), false).
final_goal(5, on((block,13)), (block,3), false).
final_goal(5, on((block,13)), (block,4), false).
final_goal(5, on((block,13)), (block,5), false).
final_goal(5, on((block,13)), (block,6), false).
final_goal(5, on((block,13)), (block,7), false).
final_goal(5, on((block,13)), (block,8), false).
final_goal(5, on((block,13)), (block,9), false).
final_goal(5, on((block,13)), nothing, false).
final_goal(5, on((block,13)), puzzle_room_1_table, false).
final_goal(5, on((block,13)), puzzle_room_2_table, false).
final_goal(5, on((block,14)), (block,1), false).
final_goal(5, on((block,14)), (block,10), false).
final_goal(5, on((block,14)), (block,11), false).
final_goal(5, on((block,14)), (block,12), false).
final_goal(5, on((block,14)), (block,13), false).
final_goal(5, on((block,14)), (block,15), true).
final_goal(5, on((block,14)), (block,16), false).
final_goal(5, on((block,14)), (block,17), false).
final_goal(5, on((block,14)), (block,18), false).
final_goal(5, on((block,14)), (block,2), false).
final_goal(5, on((block,14)), (block,3), false).
final_goal(5, on((block,14)), (block,4), false).
final_goal(5, on((block,14)), (block,5), false).
final_goal(5, on((block,14)), (block,6), false).
final_goal(5, on((block,14)), (block,7), false).
final_goal(5, on((block,14)), (block,8), false).
final_goal(5, on((block,14)), (block,9), false).
final_goal(5, on((block,14)), nothing, false).
final_goal(5, on((block,14)), puzzle_room_1_table, false).
final_goal(5, on((block,14)), puzzle_room_2_table, false).
final_goal(5, on((block,15)), (block,1), false).
final_goal(5, on((block,15)), (block,10), false).
final_goal(5, on((block,15)), (block,11), false).
final_goal(5, on((block,15)), (block,12), false).
final_goal(5, on((block,15)), (block,13), false).
final_goal(5, on((block,15)), (block,14), false).
final_goal(5, on((block,15)), (block,16), false).
final_goal(5, on((block,15)), (block,17), false).
final_goal(5, on((block,15)), (block,18), false).
final_goal(5, on((block,15)), (block,2), false).
final_goal(5, on((block,15)), (block,3), false).
final_goal(5, on((block,15)), (block,4), false).
final_goal(5, on((block,15)), (block,5), false).
final_goal(5, on((block,15)), (block,6), false).
final_goal(5, on((block,15)), (block,7), false).
final_goal(5, on((block,15)), (block,8), false).
final_goal(5, on((block,15)), (block,9), false).
final_goal(5, on((block,15)), nothing, false).
final_goal(5, on((block,15)), puzzle_room_1_table, false).
final_goal(5, on((block,15)), puzzle_room_2_table, true).
final_goal(5, on((block,16)), (block,1), false).
final_goal(5, on((block,16)), (block,10), false).
final_goal(5, on((block,16)), (block,11), false).
final_goal(5, on((block,16)), (block,12), false).
final_goal(5, on((block,16)), (block,13), false).
final_goal(5, on((block,16)), (block,14), false).
final_goal(5, on((block,16)), (block,15), false).
final_goal(5, on((block,16)), (block,17), true).
final_goal(5, on((block,16)), (block,18), false).
final_goal(5, on((block,16)), (block,2), false).
final_goal(5, on((block,16)), (block,3), false).
final_goal(5, on((block,16)), (block,4), false).
final_goal(5, on((block,16)), (block,5), false).
final_goal(5, on((block,16)), (block,6), false).
final_goal(5, on((block,16)), (block,7), false).
final_goal(5, on((block,16)), (block,8), false).
final_goal(5, on((block,16)), (block,9), false).
final_goal(5, on((block,16)), nothing, false).
final_goal(5, on((block,16)), puzzle_room_1_table, false).
final_goal(5, on((block,16)), puzzle_room_2_table, false).
final_goal(5, on((block,17)), (block,1), false).
final_goal(5, on((block,17)), (block,10), false).
final_goal(5, on((block,17)), (block,11), false).
final_goal(5, on((block,17)), (block,12), false).
final_goal(5, on((block,17)), (block,13), false).
final_goal(5, on((block,17)), (block,14), false).
final_goal(5, on((block,17)), (block,15), false).
final_goal(5, on((block,17)), (block,16), false).
final_goal(5, on((block,17)), (block,18), true).
final_goal(5, on((block,17)), (block,2), false).
final_goal(5, on((block,17)), (block,3), false).
final_goal(5, on((block,17)), (block,4), false).
final_goal(5, on((block,17)), (block,5), false).
final_goal(5, on((block,17)), (block,6), false).
final_goal(5, on((block,17)), (block,7), false).
final_goal(5, on((block,17)), (block,8), false).
final_goal(5, on((block,17)), (block,9), false).
final_goal(5, on((block,17)), nothing, false).
final_goal(5, on((block,17)), puzzle_room_1_table, false).
final_goal(5, on((block,17)), puzzle_room_2_table, false).
final_goal(5, on((block,18)), (block,1), false).
final_goal(5, on((block,18)), (block,10), false).
final_goal(5, on((block,18)), (block,11), false).
final_goal(5, on((block,18)), (block,12), false).
final_goal(5, on((block,18)), (block,13), false).
final_goal(5, on((block,18)), (block,14), false).
final_goal(5, on((block,18)), (block,15), false).
final_goal(5, on((block,18)), (block,16), false).
final_goal(5, on((block,18)), (block,17), false).
final_goal(5, on((block,18)), (block,2), false).
final_goal(5, on((block,18)), (block,3), false).
final_goal(5, on((block,18)), (block,4), false).
final_goal(5, on((block,18)), (block,5), false).
final_goal(5, on((block,18)), (block,6), false).
final_goal(5, on((block,18)), (block,7), false).
final_goal(5, on((block,18)), (block,8), false).
final_goal(5, on((block,18)), (block,9), false).
final_goal(5, on((block,18)), nothing, false).
final_goal(5, on((block,18)), puzzle_room_1_table, false).
final_goal(5, on((block,18)), puzzle_room_2_table, true).
final_goal(5, on((block,2)), (block,1), false).
final_goal(5, on((block,2)), (block,10), false).
final_goal(5, on((block,2)), (block,11), false).
final_goal(5, on((block,2)), (block,12), false).
final_goal(5, on((block,2)), (block,13), false).
final_goal(5, on((block,2)), (block,14), false).
final_goal(5, on((block,2)), (block,15), false).
final_goal(5, on((block,2)), (block,16), false).
final_goal(5, on((block,2)), (block,17), false).
final_goal(5, on((block,2)), (block,18), false).
final_goal(5, on((block,2)), (block,3), true).
final_goal(5, on((block,2)), (block,4), false).
final_goal(5, on((block,2)), (block,5), false).
final_goal(5, on((block,2)), (block,6), false).
final_goal(5, on((block,2)), (block,7), false).
final_goal(5, on((block,2)), (block,8), false).
final_goal(5, on((block,2)), (block,9), false).
final_goal(5, on((block,2)), nothing, false).
final_goal(5, on((block,2)), puzzle_room_1_table, false).
final_goal(5, on((block,2)), puzzle_room_2_table, false).
final_goal(5, on((block,3)), (block,1), false).
final_goal(5, on((block,3)), (block,10), false).
final_goal(5, on((block,3)), (block,11), false).
final_goal(5, on((block,3)), (block,12), false).
final_goal(5, on((block,3)), (block,13), false).
final_goal(5, on((block,3)), (block,14), false).
final_goal(5, on((block,3)), (block,15), false).
final_goal(5, on((block,3)), (block,16), false).
final_goal(5, on((block,3)), (block,17), false).
final_goal(5, on((block,3)), (block,18), false).
final_goal(5, on((block,3)), (block,2), false).
final_goal(5, on((block,3)), (block,4), false).
final_goal(5, on((block,3)), (block,5), false).
final_goal(5, on((block,3)), (block,6), false).
final_goal(5, on((block,3)), (block,7), false).
final_goal(5, on((block,3)), (block,8), false).
final_goal(5, on((block,3)), (block,9), false).
final_goal(5, on((block,3)), nothing, false).
final_goal(5, on((block,3)), puzzle_room_1_table, true).
final_goal(5, on((block,3)), puzzle_room_2_table, false).
final_goal(5, on((block,4)), (block,1), false).
final_goal(5, on((block,4)), (block,10), false).
final_goal(5, on((block,4)), (block,11), false).
final_goal(5, on((block,4)), (block,12), false).
final_goal(5, on((block,4)), (block,13), false).
final_goal(5, on((block,4)), (block,14), false).
final_goal(5, on((block,4)), (block,15), false).
final_goal(5, on((block,4)), (block,16), false).
final_goal(5, on((block,4)), (block,17), false).
final_goal(5, on((block,4)), (block,18), false).
final_goal(5, on((block,4)), (block,2), false).
final_goal(5, on((block,4)), (block,3), false).
final_goal(5, on((block,4)), (block,5), true).
final_goal(5, on((block,4)), (block,6), false).
final_goal(5, on((block,4)), (block,7), false).
final_goal(5, on((block,4)), (block,8), false).
final_goal(5, on((block,4)), (block,9), false).
final_goal(5, on((block,4)), nothing, false).
final_goal(5, on((block,4)), puzzle_room_1_table, false).
final_goal(5, on((block,4)), puzzle_room_2_table, false).
final_goal(5, on((block,5)), (block,1), false).
final_goal(5, on((block,5)), (block,10), false).
final_goal(5, on((block,5)), (block,11), false).
final_goal(5, on((block,5)), (block,12), false).
final_goal(5, on((block,5)), (block,13), false).
final_goal(5, on((block,5)), (block,14), false).
final_goal(5, on((block,5)), (block,15), false).
final_goal(5, on((block,5)), (block,16), false).
final_goal(5, on((block,5)), (block,17), false).
final_goal(5, on((block,5)), (block,18), false).
final_goal(5, on((block,5)), (block,2), false).
final_goal(5, on((block,5)), (block,3), false).
final_goal(5, on((block,5)), (block,4), false).
final_goal(5, on((block,5)), (block,6), true).
final_goal(5, on((block,5)), (block,7), false).
final_goal(5, on((block,5)), (block,8), false).
final_goal(5, on((block,5)), (block,9), false).
final_goal(5, on((block,5)), nothing, false).
final_goal(5, on((block,5)), puzzle_room_1_table, false).
final_goal(5, on((block,5)), puzzle_room_2_table, false).
final_goal(5, on((block,6)), (block,1), false).
final_goal(5, on((block,6)), (block,10), false).
final_goal(5, on((block,6)), (block,11), false).
final_goal(5, on((block,6)), (block,12), false).
final_goal(5, on((block,6)), (block,13), false).
final_goal(5, on((block,6)), (block,14), false).
final_goal(5, on((block,6)), (block,15), false).
final_goal(5, on((block,6)), (block,16), false).
final_goal(5, on((block,6)), (block,17), false).
final_goal(5, on((block,6)), (block,18), false).
final_goal(5, on((block,6)), (block,2), false).
final_goal(5, on((block,6)), (block,3), false).
final_goal(5, on((block,6)), (block,4), false).
final_goal(5, on((block,6)), (block,5), false).
final_goal(5, on((block,6)), (block,7), false).
final_goal(5, on((block,6)), (block,8), false).
final_goal(5, on((block,6)), (block,9), false).
final_goal(5, on((block,6)), nothing, false).
final_goal(5, on((block,6)), puzzle_room_1_table, true).
final_goal(5, on((block,6)), puzzle_room_2_table, false).
final_goal(5, on((block,7)), (block,1), false).
final_goal(5, on((block,7)), (block,10), false).
final_goal(5, on((block,7)), (block,11), false).
final_goal(5, on((block,7)), (block,12), false).
final_goal(5, on((block,7)), (block,13), false).
final_goal(5, on((block,7)), (block,14), false).
final_goal(5, on((block,7)), (block,15), false).
final_goal(5, on((block,7)), (block,16), false).
final_goal(5, on((block,7)), (block,17), false).
final_goal(5, on((block,7)), (block,18), false).
final_goal(5, on((block,7)), (block,2), false).
final_goal(5, on((block,7)), (block,3), false).
final_goal(5, on((block,7)), (block,4), false).
final_goal(5, on((block,7)), (block,5), false).
final_goal(5, on((block,7)), (block,6), false).
final_goal(5, on((block,7)), (block,8), true).
final_goal(5, on((block,7)), (block,9), false).
final_goal(5, on((block,7)), nothing, false).
final_goal(5, on((block,7)), puzzle_room_1_table, false).
final_goal(5, on((block,7)), puzzle_room_2_table, false).
final_goal(5, on((block,8)), (block,1), false).
final_goal(5, on((block,8)), (block,10), false).
final_goal(5, on((block,8)), (block,11), false).
final_goal(5, on((block,8)), (block,12), false).
final_goal(5, on((block,8)), (block,13), false).
final_goal(5, on((block,8)), (block,14), false).
final_goal(5, on((block,8)), (block,15), false).
final_goal(5, on((block,8)), (block,16), false).
final_goal(5, on((block,8)), (block,17), false).
final_goal(5, on((block,8)), (block,18), false).
final_goal(5, on((block,8)), (block,2), false).
final_goal(5, on((block,8)), (block,3), false).
final_goal(5, on((block,8)), (block,4), false).
final_goal(5, on((block,8)), (block,5), false).
final_goal(5, on((block,8)), (block,6), false).
final_goal(5, on((block,8)), (block,7), false).
final_goal(5, on((block,8)), (block,9), true).
final_goal(5, on((block,8)), nothing, false).
final_goal(5, on((block,8)), puzzle_room_1_table, false).
final_goal(5, on((block,8)), puzzle_room_2_table, false).
final_goal(5, on((block,9)), (block,1), false).
final_goal(5, on((block,9)), (block,10), false).
final_goal(5, on((block,9)), (block,11), false).
final_goal(5, on((block,9)), (block,12), false).
final_goal(5, on((block,9)), (block,13), false).
final_goal(5, on((block,9)), (block,14), false).
final_goal(5, on((block,9)), (block,15), false).
final_goal(5, on((block,9)), (block,16), false).
final_goal(5, on((block,9)), (block,17), false).
final_goal(5, on((block,9)), (block,18), false).
final_goal(5, on((block,9)), (block,2), false).
final_goal(5, on((block,9)), (block,3), false).
final_goal(5, on((block,9)), (block,4), false).
final_goal(5, on((block,9)), (block,5), false).
final_goal(5, on((block,9)), (block,6), false).
final_goal(5, on((block,9)), (block,7), false).
final_goal(5, on((block,9)), (block,8), false).
final_goal(5, on((block,9)), nothing, false).
final_goal(5, on((block,9)), puzzle_room_1_table, true).
final_goal(5, on((block,9)), puzzle_room_2_table, false).
final_goal(5, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), true, false).

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 5, 'R': 'talos', 'A': 'move(store_room_1)', 'F': 'in(talos)', 'V': 'store_room_1', 'I': 1})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'on((block,4))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'transporting(talos,(block,4))', 'V': 'true', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'on((block,5))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'transporting(talos,(block,5))', 'V': 'true', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'on((block,6))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'transporting(talos,(block,6))', 'V': 'true', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'on((block,8))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'transporting(talos,(block,8))', 'V': 'true', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'move(puzzle_room_1)', 'F': 'in(talos)', 'V': 'puzzle_room_1', 'I': 3})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_1_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_1_table)', 'F': 'transporting(talos,(block,3))', 'V': 'false', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_1_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_1_table)', 'F': 'transporting(talos,(block,6))', 'V': 'false', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_1_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_1_table)', 'F': 'transporting(talos,(block,9))', 'V': 'false', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'transporting(talos,(block,2))', 'V': 'false', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'transporting(talos,(block,5))', 'V': 'false', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'transporting(talos,(block,8))', 'V': 'false', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'transporting(talos,(block,1))', 'V': 'false', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'transporting(talos,(block,4))', 'V': 'false', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'transporting(talos,(block,7))', 'V': 'false', 'I': 6})

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 28 rules into program part base:

sub_goal(5, talos, move(store_room_1), in(talos), store_room_1, 1).
sub_goal(5, talos, collect((block,4)), on((block,4)), nothing, 2).
sub_goal(5, talos, collect((block,4)), transporting(talos,(block,4)), true, 2).
sub_goal(5, talos, collect((block,5)), on((block,5)), nothing, 2).
sub_goal(5, talos, collect((block,5)), transporting(talos,(block,5)), true, 2).
sub_goal(5, talos, collect((block,6)), on((block,6)), nothing, 2).
sub_goal(5, talos, collect((block,6)), transporting(talos,(block,6)), true, 2).
sub_goal(5, talos, collect((block,8)), on((block,8)), nothing, 2).
sub_goal(5, talos, collect((block,8)), transporting(talos,(block,8)), true, 2).
sub_goal(5, talos, move(puzzle_room_1), in(talos), puzzle_room_1, 3).
sub_goal(5, talos, place_upon((block,3),puzzle_room_1_table), on((block,3)), puzzle_room_1_table, 4).
sub_goal(5, talos, place_upon((block,3),puzzle_room_1_table), transporting(talos,(block,3)), false, 4).
sub_goal(5, talos, place_upon((block,6),puzzle_room_1_table), on((block,6)), puzzle_room_1_table, 4).
sub_goal(5, talos, place_upon((block,6),puzzle_room_1_table), transporting(talos,(block,6)), false, 4).
sub_goal(5, talos, place_upon((block,9),puzzle_room_1_table), on((block,9)), puzzle_room_1_table, 4).
sub_goal(5, talos, place_upon((block,9),puzzle_room_1_table), transporting(talos,(block,9)), false, 4).
sub_goal(5, talos, place_upon((block,2),(block,3)), on((block,2)), (block,3), 5).
sub_goal(5, talos, place_upon((block,2),(block,3)), transporting(talos,(block,2)), false, 5).
sub_goal(5, talos, place_upon((block,5),(block,6)), on((block,5)), (block,6), 5).
sub_goal(5, talos, place_upon((block,5),(block,6)), transporting(talos,(block,5)), false, 5).
sub_goal(5, talos, place_upon((block,8),(block,9)), on((block,8)), (block,9), 5).
sub_goal(5, talos, place_upon((block,8),(block,9)), transporting(talos,(block,8)), false, 5).
sub_goal(5, talos, place_upon((block,1),(block,2)), on((block,1)), (block,2), 6).
sub_goal(5, talos, place_upon((block,1),(block,2)), transporting(talos,(block,1)), false, 6).
sub_goal(5, talos, place_upon((block,4),(block,5)), on((block,4)), (block,5), 6).
sub_goal(5, talos, place_upon((block,4),(block,5)), transporting(talos,(block,4)), false, 6).
sub_goal(5, talos, place_upon((block,7),(block,8)), on((block,7)), (block,8), 6).
sub_goal(5, talos, place_upon((block,7),(block,8)), transporting(talos,(block,7)), false, 6).

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[04-03-2022_16-21-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000021F9E4835E0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=6, step_end_max=300, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1773.5325767, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 6, 'sequential', 'true'), range_=None)]

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 3709 rules

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.01644449999999864s

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[04-03-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(4), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.480065s.

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.119527s with result Satisfiable.

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000021F9BA8BB30>

[04-03-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 4)
	('start_step', 0)
	('last_sgoals', 6)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Hasty object at 0x0000021F9E41DE80>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000021F9BA8BB30>)

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 6, sequential, true). %* None *%

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.952127s.

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.204084s with result Satisfiable.

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 4.156210899999998, Incremental time limit = None
Running cumulative time = 4.156210899999998, Cumulative time limit = 1773.5325767
Used memory = (RSS = 319.175781Mb, VMS = 323.015625Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.952127s, Solving = 0.204084s, Total = 4.156211s, Memory = (RSS = 319.175781Mb, VMS = 323.015625Mb), Step range = [0-1]), Calls = 1
Final Model :: Total atoms = 75943, Cost = (1, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-21-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.952127399999995, solving_time=0.20408350000000297, total_time=4.156210899999998, memory=Memory(rss=319.17578125, vms=323.015625), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.952127399999995, solving_time=0.20408350000000297, total_time=4.156210899999998, memory=Memory(rss=319.17578125, vms=323.015625), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 133684.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 136340.0, 'bodies_tr': 136340.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 1215.0, 'count_bodies_tr': 1215.0, 'sccs': 55.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7766.0, 'rules': 278911.0, 'rules_normal': 277108.0, 'rules_choice': 1801.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 278911.0, 'rules_tr_normal': 277108.0, 'rules_tr_choice': 1801.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 220612.0, 'eqs_atom': 85934.0, 'eqs_body': 7665.0, 'eqs_other': 127013.0}, 'lpStep': {'atoms': 38238.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 127136.0, 'bodies_tr': 127136.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 1215.0, 'count_bodies_tr': 1215.0, 'sccs': 55.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7766.0, 'rules': 179711.0, 'rules_normal': 177908.0, 'rules_choice': 1801.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 179711.0, 'rules_tr_normal': 177908.0, 'rules_tr_choice': 1801.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 62913.0, 'eqs_atom': 12583.0, 'eqs_body': 2839.0, 'eqs_other': 47491.0}, 'generator': {'vars': 24682.0, 'vars_eliminated': 0.0, 'vars_frozen': 12706.0, 'constraints': 34.0, 'constraints_binary': 6159.0, 'constraints_ternary': 1122.0, 'acyc_edges': 0.0, 'complexity': 7323.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 18.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 1.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 1.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 136.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 4.152595520019531, 'cpu': 4.125, 'solve': 0.09969902038574219, 'unsat': 0.0947418212890625, 'sat': 0.0049571990966796875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.768579483032227, 'cpu': 4.734375, 'solve': 0.1754932403564453, 'unsat': 0.0947418212890625, 'sat': 0.006927490234375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 19.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 1.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 1.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.171875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 144.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-21-58] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1}

[04-03-2022_16-21-58] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 2 ( 33.33% solved)

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 1)', truth=True, inc_range=None)

[04-03-2022_16-21-58] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 1]:
sub_goal(5, talos, collect((block,4)), on((block,4)), nothing, 2)
sub_goal(5, talos, collect((block,4)), transporting(talos,(block,4)), true, 2)
sub_goal(5, talos, collect((block,5)), on((block,5)), nothing, 2)
sub_goal(5, talos, collect((block,5)), transporting(talos,(block,5)), true, 2)
sub_goal(5, talos, collect((block,6)), on((block,6)), nothing, 2)
sub_goal(5, talos, collect((block,6)), transporting(talos,(block,6)), true, 2)
sub_goal(5, talos, collect((block,8)), on((block,8)), nothing, 2)
sub_goal(5, talos, collect((block,8)), transporting(talos,(block,8)), true, 2)

[04-03-2022_16-21-58] DEBUG :: ASH Planner Main #1 >> Reaction at search length 1:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.884065s.

[04-03-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 2: original = External(symbol='current_last_sgoals(2, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(2,1).

[04-03-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050059s with result Unsatisfiable.

[04-03-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 2.9341244000000017, Incremental time limit = None
Running cumulative time = 7.0903353, Cumulative time limit = 1773.5325767
Used memory = (RSS = 322.105469Mb, VMS = 329.355469Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.836192499999996, solving_time=0.2541428000000039, total_time=7.0903353, memory=Memory(rss=322.10546875, vms=329.35546875), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=2.884065100000001, solving_time=0.05005930000000092, total_time=2.9341244000000017, memory=Memory(rss=322.10546875, vms=329.35546875), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 147950.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 220706.0, 'bodies_tr': 220706.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 2284.0, 'count_bodies_tr': 2284.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7836.0, 'rules': 390232.0, 'rules_normal': 387628.0, 'rules_choice': 2600.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 390232.0, 'rules_tr_normal': 387628.0, 'rules_tr_choice': 2600.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 247298.0, 'eqs_atom': 94731.0, 'eqs_body': 10687.0, 'eqs_other': 141880.0}, 'lpStep': {'atoms': 14266.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 84366.0, 'bodies_tr': 84366.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 7.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 70.0, 'rules': 111321.0, 'rules_normal': 110520.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 111321.0, 'rules_tr_normal': 110520.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26686.0, 'eqs_atom': 8797.0, 'eqs_body': 3022.0, 'eqs_other': 14867.0}, 'generator': {'vars': 25441.0, 'vars_eliminated': 0.0, 'vars_frozen': 13084.0, 'constraints': 200.0, 'constraints_binary': 5909.0, 'constraints_ternary': 425.0, 'acyc_edges': 0.0, 'complexity': 7323.0}}, 'solving': {'solvers': {'choices': 15.0, 'conflicts': 9.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 6.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 150.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 6.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 21.0, 'levels_bounded': 6.0, 'max': 9.0, 'max_executed': 7.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 2.937528610229492, 'cpu': 2.921875, 'solve': 0.0053501129150390625, 'unsat': 0.0053501129150390625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.706108093261719, 'cpu': 7.65625, 'solve': 0.18084335327148438, 'unsat': 0.10009193420410156, 'sat': 0.006927490234375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 15.0, 'conflicts': 10.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 2.0, 'models_level': 19.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 5.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 7.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.171875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 294.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 3.0, 'levels': 22.0, 'levels_bounded': 6.0, 'max': 9.0, 'max_executed': 7.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.289535s.

[04-03-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.081092s with result Unsatisfiable.

[04-03-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 3.370627000000006, Incremental time limit = None
Running cumulative time = 10.460962300000006, Cumulative time limit = 1773.5325767
Used memory = (RSS = 343.976562Mb, VMS = 352.351562Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-04] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.125727099999999, solving_time=0.33523520000000673, total_time=10.460962300000006, memory=Memory(rss=343.9765625, vms=352.3515625), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.289534600000003, solving_time=0.08109240000000284, total_time=3.370627000000006, memory=Memory(rss=343.9765625, vms=352.3515625), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 164097.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 310976.0, 'bodies_tr': 310976.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 3353.0, 'count_bodies_tr': 3353.0, 'sccs': 105.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14578.0, 'rules': 509152.0, 'rules_normal': 505747.0, 'rules_choice': 3399.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 509152.0, 'rules_tr_normal': 505747.0, 'rules_tr_choice': 3399.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 282699.0, 'eqs_atom': 104253.0, 'eqs_body': 12797.0, 'eqs_other': 165649.0}, 'lpStep': {'atoms': 16147.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 90270.0, 'bodies_tr': 90270.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6742.0, 'rules': 118920.0, 'rules_normal': 118119.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 118920.0, 'rules_tr_normal': 118119.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35401.0, 'eqs_atom': 9522.0, 'eqs_body': 2110.0, 'eqs_other': 23769.0}, 'generator': {'vars': 42311.0, 'vars_eliminated': 0.0, 'vars_frozen': 22628.0, 'constraints': 7065.0, 'constraints_binary': 87327.0, 'constraints_ternary': 15154.0, 'acyc_edges': 0.0, 'complexity': 109914.0}}, 'solving': {'solvers': {'choices': 594.0, 'conflicts': 27.0, 'conflicts_analyzed': 23.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 18.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 27.0, 'distributed_sum_lbd': 64.0, 'integrated': 101.0, 'lemmas': 2018.0, 'lits_learnt': 77335.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.109375, 'integrated_imps': 38.0, 'integrated_jumps': 291.0, 'guiding_paths_lits': 231.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 1894.0, 'lemmas_other': 101.0, 'lits_conflict': 129.0, 'lits_loop': 76771.0, 'lits_other': 435.0, 'jumps': {'jumps': 23.0, 'jumps_bounded': 9.0, 'levels': 314.0, 'levels_bounded': 11.0, 'max': 118.0, 'max_executed': 118.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, -28.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 3.374673843383789, 'cpu': 3.453125, 'solve': 0.018976211547851562, 'unsat': 0.018976211547851562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.080781936645508, 'cpu': 11.109375, 'solve': 0.19981956481933594, 'unsat': 0.11906814575195312, 'sat': 0.006927490234375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 609.0, 'conflicts': 37.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 19.0, 'models': 2.0, 'models_level': 19.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 30.0, 'distributed_sum_lbd': 69.0, 'integrated': 101.0, 'lemmas': 2021.0, 'lits_learnt': 77342.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.28125, 'integrated_imps': 38.0, 'integrated_jumps': 291.0, 'guiding_paths_lits': 525.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 1894.0, 'lemmas_other': 101.0, 'lits_conflict': 136.0, 'lits_loop': 76771.0, 'lits_other': 435.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 12.0, 'levels': 336.0, 'levels_bounded': 17.0, 'max': 118.0, 'max_executed': 118.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-04] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.714179s.

[04-03-2022_16-22-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.211416s with result Satisfiable.

[04-03-2022_16-22-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 3.9255950000000013, Incremental time limit = None
Running cumulative time = 14.386557300000007, Cumulative time limit = 1773.5325767
Used memory = (RSS = 389.261719Mb, VMS = 399.171875Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 13.839906s, Solving = 0.546651s, Total = 14.386557s, Memory = (RSS = 389.261719Mb, VMS = 399.171875Mb), Step range = [0-4]), Calls = 4
Final Model :: Total atoms = 83030, Cost = (7, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[04-03-2022_16-22-08] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=13.839906, solving_time=0.5466513000000077, total_time=14.386557300000007, memory=Memory(rss=389.26171875, vms=399.171875), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.7141789000000003, solving_time=0.211416100000001, total_time=3.9255950000000013, memory=Memory(rss=389.26171875, vms=399.171875), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 182071.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 411107.0, 'bodies_tr': 411107.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 4422.0, 'count_bodies_tr': 4422.0, 'sccs': 148.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21372.0, 'rules': 639216.0, 'rules_normal': 635010.0, 'rules_choice': 4198.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 639216.0, 'rules_tr_normal': 635010.0, 'rules_tr_choice': 4198.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 324201.0, 'eqs_atom': 115238.0, 'eqs_body': 14101.0, 'eqs_other': 194862.0}, 'lpStep': {'atoms': 17974.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 100131.0, 'bodies_tr': 100131.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6794.0, 'rules': 130064.0, 'rules_normal': 129263.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 130064.0, 'rules_tr_normal': 129263.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41502.0, 'eqs_atom': 10985.0, 'eqs_body': 1304.0, 'eqs_other': 29213.0}, 'generator': {'vars': 60432.0, 'vars_eliminated': 0.0, 'vars_frozen': 32666.0, 'constraints': 14172.0, 'constraints_binary': 185899.0, 'constraints_ternary': 33012.0, 'acyc_edges': 0.0, 'complexity': 233767.0}}, 'solving': {'solvers': {'choices': 1861.0, 'conflicts': 291.0, 'conflicts_analyzed': 285.0, 'restarts': 1.0, 'restarts_last': 59.0, 'extra': {'domain_choices': 44.0, 'models': 1.0, 'models_level': 45.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 218.0, 'distributed_sum_lbd': 623.0, 'integrated': 921.0, 'lemmas': 4275.0, 'lits_learnt': 122581.0, 'lemmas_binary': 212.0, 'lemmas_ternary': 114.0, 'cpu_time': 0.625, 'integrated_imps': 174.0, 'integrated_jumps': 993.0, 'guiding_paths_lits': 287.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 285.0, 'lemmas_loop': 3083.0, 'lemmas_other': 907.0, 'lits_conflict': 3162.0, 'lits_loop': 112103.0, 'lits_other': 7316.0, 'jumps': {'jumps': 285.0, 'jumps_bounded': 12.0, 'levels': 904.0, 'levels_bounded': 64.0, 'max': 112.0, 'max_executed': 112.0, 'max_bounded': 42.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [7.0, 0.0], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 3.9295578002929688, 'cpu': 4.375, 'solve': 0.1361522674560547, 'unsat': 0.07679367065429688, 'sat': 0.05935859680175781}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 15.010339736938477, 'cpu': 15.484375, 'solve': 0.3359718322753906, 'unsat': 0.19586181640625, 'sat': 0.06628608703613281}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 2470.0, 'conflicts': 328.0, 'conflicts_analyzed': 312.0, 'restarts': 1.0, 'restarts_last': 59.0, 'extra': {'domain_choices': 63.0, 'models': 3.0, 'models_level': 64.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 248.0, 'distributed_sum_lbd': 692.0, 'integrated': 1022.0, 'lemmas': 6296.0, 'lits_learnt': 199923.0, 'lemmas_binary': 240.0, 'lemmas_ternary': 122.0, 'cpu_time': 0.90625, 'integrated_imps': 212.0, 'integrated_jumps': 1284.0, 'guiding_paths_lits': 812.0, 'guiding_paths': 42.0, 'splits': 0.0, 'lemmas_conflict': 311.0, 'lemmas_loop': 4977.0, 'lemmas_other': 1008.0, 'lits_conflict': 3298.0, 'lits_loop': 188874.0, 'lits_other': 7751.0, 'jumps': {'jumps': 312.0, 'jumps_bounded': 24.0, 'levels': 1240.0, 'levels_bounded': 81.0, 'max': 118.0, 'max_executed': 118.0, 'max_bounded': 42.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-08] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1, 2: 4}

[04-03-2022_16-22-08] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 3 ( 50.00% solved)

[04-03-2022_16-22-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None)

[04-03-2022_16-22-08] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 4]:
sub_goal(5, talos, move(puzzle_room_1), in(talos), puzzle_room_1, 3)

[04-03-2022_16-22-08] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.774157s.

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 5: original = External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None), conversion = current_last_sgoals(3,4).

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.325352s with result Satisfiable.

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 4.0995092, Incremental time limit = None
Running cumulative time = 18.486066500000007, Cumulative time limit = 1773.5325767
Used memory = (RSS = 456.855469Mb, VMS = 474.843750Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 17.614063s, Solving = 0.872003s, Total = 18.486067s, Memory = (RSS = 456.855469Mb, VMS = 474.843750Mb), Step range = [0-5]), Calls = 5
Final Model :: Total atoms = 85388, Cost = (8, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[04-03-2022_16-22-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=17.614063300000005, solving_time=0.8720032000000018, total_time=18.486066500000007, memory=Memory(rss=456.85546875, vms=474.84375), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.774157300000006, solving_time=0.32535189999999403, total_time=4.0995092, memory=Memory(rss=456.85546875, vms=474.84375), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 200198.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 515550.0, 'bodies_tr': 515550.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 5491.0, 'count_bodies_tr': 5491.0, 'sccs': 191.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 32458.0, 'rules': 773623.0, 'rules_normal': 768616.0, 'rules_choice': 4997.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 773623.0, 'rules_tr_normal': 768616.0, 'rules_tr_choice': 4997.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 360696.0, 'eqs_atom': 125889.0, 'eqs_body': 14556.0, 'eqs_other': 220251.0}, 'lpStep': {'atoms': 18127.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 104443.0, 'bodies_tr': 104443.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 134407.0, 'rules_normal': 133606.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 134407.0, 'rules_tr_normal': 133606.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 36495.0, 'eqs_atom': 10651.0, 'eqs_body': 455.0, 'eqs_other': 25389.0}, 'generator': {'vars': 89185.0, 'vars_eliminated': 0.0, 'vars_frozen': 47819.0, 'constraints': 26776.0, 'constraints_binary': 346185.0, 'constraints_ternary': 59184.0, 'acyc_edges': 0.0, 'complexity': 433273.0}}, 'solving': {'solvers': {'choices': 168.0, 'conflicts': 94.0, 'conflicts_analyzed': 90.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 5.0, 'models': 1.0, 'models_level': 61.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 65.0, 'distributed_sum_lbd': 203.0, 'integrated': 255.0, 'lemmas': 1107.0, 'lits_learnt': 68605.0, 'lemmas_binary': 29.0, 'lemmas_ternary': 5.0, 'cpu_time': 0.671875, 'integrated_imps': 46.0, 'integrated_jumps': 44.0, 'guiding_paths_lits': 343.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 88.0, 'lemmas_loop': 819.0, 'lemmas_other': 200.0, 'lits_conflict': 9633.0, 'lits_loop': 41459.0, 'lits_other': 17513.0, 'jumps': {'jumps': 90.0, 'jumps_bounded': 6.0, 'levels': 113.0, 'levels_bounded': 11.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [8.0, 0.0], 'lower': [8.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 4.104761123657227, 'cpu': 4.546875, 'solve': 0.23391151428222656, 'unsat': 0.19899940490722656, 'sat': 0.034912109375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 19.115100860595703, 'cpu': 20.03125, 'solve': 0.5698833465576172, 'unsat': 0.39486122131347656, 'sat': 0.10119819641113281}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 2638.0, 'conflicts': 422.0, 'conflicts_analyzed': 402.0, 'restarts': 1.0, 'restarts_last': 59.0, 'extra': {'domain_choices': 68.0, 'models': 4.0, 'models_level': 125.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 313.0, 'distributed_sum_lbd': 895.0, 'integrated': 1277.0, 'lemmas': 7403.0, 'lits_learnt': 268528.0, 'lemmas_binary': 269.0, 'lemmas_ternary': 127.0, 'cpu_time': 1.578125, 'integrated_imps': 258.0, 'integrated_jumps': 1328.0, 'guiding_paths_lits': 1155.0, 'guiding_paths': 50.0, 'splits': 0.0, 'lemmas_conflict': 399.0, 'lemmas_loop': 5796.0, 'lemmas_other': 1208.0, 'lits_conflict': 12931.0, 'lits_loop': 230333.0, 'lits_other': 25264.0, 'jumps': {'jumps': 402.0, 'jumps_bounded': 30.0, 'levels': 1353.0, 'levels_bounded': 92.0, 'max': 118.0, 'max_executed': 118.0, 'max_bounded': 42.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1, 2: 4, 3: 5}

[04-03-2022_16-22-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 4 ( 66.67% solved)

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 5)', truth=True, inc_range=None)

[04-03-2022_16-22-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 5]:
sub_goal(5, talos, place_upon((block,3),puzzle_room_1_table), on((block,3)), puzzle_room_1_table, 4)
sub_goal(5, talos, place_upon((block,3),puzzle_room_1_table), transporting(talos,(block,3)), false, 4)
sub_goal(5, talos, place_upon((block,6),puzzle_room_1_table), on((block,6)), puzzle_room_1_table, 4)
sub_goal(5, talos, place_upon((block,6),puzzle_room_1_table), transporting(talos,(block,6)), false, 4)
sub_goal(5, talos, place_upon((block,9),puzzle_room_1_table), on((block,9)), puzzle_room_1_table, 4)
sub_goal(5, talos, place_upon((block,9),puzzle_room_1_table), transporting(talos,(block,9)), false, 4)

[04-03-2022_16-22-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.336503s.

[04-03-2022_16-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 6: original = External(symbol='current_last_sgoals(4, 5)', truth=True, inc_range=None), conversion = current_last_sgoals(4,5).

[04-03-2022_16-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.176883s with result Unsatisfiable.

[04-03-2022_16-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.51338650000001, Incremental time limit = None
Running cumulative time = 22.999453000000017, Cumulative time limit = 1773.5325767
Used memory = (RSS = 508.281250Mb, VMS = 509.371094Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=21.950566400000007, solving_time=1.04888660000001, total_time=22.999453000000017, memory=Memory(rss=508.28125, vms=509.37109375), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.336503100000002, solving_time=0.17688340000000835, total_time=4.51338650000001, memory=Memory(rss=508.28125, vms=509.37109375), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 219432.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 623933.0, 'bodies_tr': 623933.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 6560.0, 'count_bodies_tr': 6560.0, 'sccs': 234.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 43544.0, 'rules': 912837.0, 'rules_normal': 907029.0, 'rules_choice': 5796.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 912837.0, 'rules_tr_normal': 907029.0, 'rules_tr_choice': 5796.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 399929.0, 'eqs_atom': 137508.0, 'eqs_body': 14904.0, 'eqs_other': 247517.0}, 'lpStep': {'atoms': 19234.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108383.0, 'bodies_tr': 108383.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139214.0, 'rules_normal': 138413.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139214.0, 'rules_tr_normal': 138413.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39233.0, 'eqs_atom': 11619.0, 'eqs_body': 348.0, 'eqs_other': 27266.0}, 'generator': {'vars': 118261.0, 'vars_eliminated': 0.0, 'vars_frozen': 63059.0, 'constraints': 39477.0, 'constraints_binary': 508851.0, 'constraints_ternary': 87615.0, 'acyc_edges': 0.0, 'complexity': 637515.0}}, 'solving': {'solvers': {'choices': 125.0, 'conflicts': 72.0, 'conflicts_analyzed': 61.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 14.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 48.0, 'distributed_sum_lbd': 136.0, 'integrated': 203.0, 'lemmas': 1592.0, 'lits_learnt': 99758.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.59375, 'integrated_imps': 52.0, 'integrated_jumps': 38.0, 'guiding_paths_lits': 399.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 61.0, 'lemmas_loop': 1348.0, 'lemmas_other': 183.0, 'lits_conflict': 1715.0, 'lits_loop': 93274.0, 'lits_other': 4769.0, 'jumps': {'jumps': 61.0, 'jumps_bounded': 3.0, 'levels': 91.0, 'levels_bounded': 5.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, -128.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 4.520191192626953, 'cpu': 4.9375, 'solve': 0.08577156066894531, 'unsat': 0.08577156066894531, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 23.635292053222656, 'cpu': 24.96875, 'solve': 0.6556549072265625, 'unsat': 0.4806327819824219, 'sat': 0.10119819641113281}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 2763.0, 'conflicts': 494.0, 'conflicts_analyzed': 463.0, 'restarts': 1.0, 'restarts_last': 59.0, 'extra': {'domain_choices': 82.0, 'models': 4.0, 'models_level': 125.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 361.0, 'distributed_sum_lbd': 1031.0, 'integrated': 1480.0, 'lemmas': 8995.0, 'lits_learnt': 368286.0, 'lemmas_binary': 278.0, 'lemmas_ternary': 127.0, 'cpu_time': 2.171875, 'integrated_imps': 310.0, 'integrated_jumps': 1366.0, 'guiding_paths_lits': 1554.0, 'guiding_paths': 63.0, 'splits': 0.0, 'lemmas_conflict': 460.0, 'lemmas_loop': 7144.0, 'lemmas_other': 1391.0, 'lits_conflict': 14646.0, 'lits_loop': 323607.0, 'lits_other': 30033.0, 'jumps': {'jumps': 463.0, 'jumps_bounded': 33.0, 'levels': 1444.0, 'levels_bounded': 97.0, 'max': 118.0, 'max_executed': 118.0, 'max_bounded': 42.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.750975s.

[04-03-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.418052s with result Unsatisfiable.

[04-03-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.169026500000015, Incremental time limit = None
Running cumulative time = 27.168479500000032, Cumulative time limit = 1773.5325767
Used memory = (RSS = 585.343750Mb, VMS = 609.039062Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=25.701541000000013, solving_time=1.466938500000019, total_time=27.168479500000032, memory=Memory(rss=585.34375, vms=609.0390625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.7509746000000064, solving_time=0.4180519000000089, total_time=4.169026500000015, memory=Memory(rss=585.34375, vms=609.0390625), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 238694.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 732352.0, 'bodies_tr': 732352.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 7629.0, 'count_bodies_tr': 7629.0, 'sccs': 277.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 54630.0, 'rules': 1052107.0, 'rules_normal': 1045498.0, 'rules_choice': 6595.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1052107.0, 'rules_tr_normal': 1045498.0, 'rules_tr_choice': 6595.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 439242.0, 'eqs_atom': 149149.0, 'eqs_body': 15243.0, 'eqs_other': 274850.0}, 'lpStep': {'atoms': 19262.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108419.0, 'bodies_tr': 108419.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139270.0, 'rules_normal': 138469.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139270.0, 'rules_tr_normal': 138469.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39313.0, 'eqs_atom': 11641.0, 'eqs_body': 339.0, 'eqs_other': 27333.0}, 'generator': {'vars': 147356.0, 'vars_eliminated': 0.0, 'vars_frozen': 78305.0, 'constraints': 52185.0, 'constraints_binary': 671587.0, 'constraints_ternary': 116058.0, 'acyc_edges': 0.0, 'complexity': 841846.0}}, 'solving': {'solvers': {'choices': 634.0, 'conflicts': 296.0, 'conflicts_analyzed': 288.0, 'restarts': 1.0, 'restarts_last': 55.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 215.0, 'distributed_sum_lbd': 682.0, 'integrated': 1265.0, 'lemmas': 6340.0, 'lits_learnt': 342492.0, 'lemmas_binary': 88.0, 'lemmas_ternary': 93.0, 'cpu_time': 2.171875, 'integrated_imps': 162.0, 'integrated_jumps': 214.0, 'guiding_paths_lits': 455.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 288.0, 'lemmas_loop': 4805.0, 'lemmas_other': 1247.0, 'lits_conflict': 11063.0, 'lits_loop': 281221.0, 'lits_other': 50208.0, 'jumps': {'jumps': 288.0, 'jumps_bounded': 1.0, 'levels': 417.0, 'levels_bounded': 1.0, 'max': 13.0, 'max_executed': 13.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, -164.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 4.17896842956543, 'cpu': 6.03125, 'solve': 0.31906700134277344, 'unsat': 0.31906700134277344, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 27.814260482788086, 'cpu': 31.0, 'solve': 0.9747219085693359, 'unsat': 0.7996997833251953, 'sat': 0.10119819641113281}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 3397.0, 'conflicts': 790.0, 'conflicts_analyzed': 751.0, 'restarts': 2.0, 'restarts_last': 59.0, 'extra': {'domain_choices': 83.0, 'models': 4.0, 'models_level': 125.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 576.0, 'distributed_sum_lbd': 1713.0, 'integrated': 2745.0, 'lemmas': 15335.0, 'lits_learnt': 710778.0, 'lemmas_binary': 366.0, 'lemmas_ternary': 220.0, 'cpu_time': 4.34375, 'integrated_imps': 472.0, 'integrated_jumps': 1580.0, 'guiding_paths_lits': 2009.0, 'guiding_paths': 76.0, 'splits': 0.0, 'lemmas_conflict': 748.0, 'lemmas_loop': 11949.0, 'lemmas_other': 2638.0, 'lits_conflict': 25709.0, 'lits_loop': 604828.0, 'lits_other': 80241.0, 'jumps': {'jumps': 751.0, 'jumps_bounded': 34.0, 'levels': 1861.0, 'levels_bounded': 98.0, 'max': 118.0, 'max_executed': 118.0, 'max_bounded': 42.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.769363s.

[04-03-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.986783s with result Unsatisfiable.

[04-03-2022_16-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.7561457999999845, Incremental time limit = None
Running cumulative time = 31.924625300000017, Cumulative time limit = 1773.5325767
Used memory = (RSS = 644.144531Mb, VMS = 656.550781Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=29.47090380000001, solving_time=2.4537215000000074, total_time=31.924625300000017, memory=Memory(rss=644.14453125, vms=656.55078125), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.769362799999996, solving_time=0.9867829999999884, total_time=4.7561457999999845, memory=Memory(rss=644.14453125, vms=656.55078125), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 257984.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 840806.0, 'bodies_tr': 840806.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 8698.0, 'count_bodies_tr': 8698.0, 'sccs': 320.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 65716.0, 'rules': 1191427.0, 'rules_normal': 1184017.0, 'rules_choice': 7394.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1191427.0, 'rules_tr_normal': 1184017.0, 'rules_tr_choice': 7394.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 478651.0, 'eqs_atom': 160818.0, 'eqs_body': 15580.0, 'eqs_other': 302253.0}, 'lpStep': {'atoms': 19290.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108454.0, 'bodies_tr': 108454.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139320.0, 'rules_normal': 138519.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139320.0, 'rules_tr_normal': 138519.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39409.0, 'eqs_atom': 11669.0, 'eqs_body': 337.0, 'eqs_other': 27403.0}, 'generator': {'vars': 176451.0, 'vars_eliminated': 0.0, 'vars_frozen': 93551.0, 'constraints': 64893.0, 'constraints_binary': 834345.0, 'constraints_ternary': 144501.0, 'acyc_edges': 0.0, 'complexity': 1046199.0}}, 'solving': {'solvers': {'choices': 2796.0, 'conflicts': 894.0, 'conflicts_analyzed': 880.0, 'restarts': 3.0, 'restarts_last': 110.0, 'extra': {'domain_choices': 25.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 606.0, 'distributed_sum_lbd': 1752.0, 'integrated': 3623.0, 'lemmas': 15055.0, 'lits_learnt': 751067.0, 'lemmas_binary': 1134.0, 'lemmas_ternary': 337.0, 'cpu_time': 6.0625, 'integrated_imps': 468.0, 'integrated_jumps': 723.0, 'guiding_paths_lits': 511.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 880.0, 'lemmas_loop': 10633.0, 'lemmas_other': 3542.0, 'lits_conflict': 32997.0, 'lits_loop': 622864.0, 'lits_other': 95206.0, 'jumps': {'jumps': 880.0, 'jumps_bounded': 4.0, 'levels': 2156.0, 'levels_bounded': 82.0, 'max': 76.0, 'max_executed': 76.0, 'max_bounded': 73.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, -200.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 4.767492294311523, 'cpu': 9.875, 'solve': 0.8806972503662109, 'unsat': 0.8806972503662109, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 32.58175277709961, 'cpu': 40.875, 'solve': 1.8554191589355469, 'unsat': 1.6803970336914062, 'sat': 0.10119819641113281}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6193.0, 'conflicts': 1684.0, 'conflicts_analyzed': 1631.0, 'restarts': 5.0, 'restarts_last': 110.0, 'extra': {'domain_choices': 108.0, 'models': 4.0, 'models_level': 125.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1182.0, 'distributed_sum_lbd': 3465.0, 'integrated': 6368.0, 'lemmas': 30390.0, 'lits_learnt': 1461845.0, 'lemmas_binary': 1500.0, 'lemmas_ternary': 557.0, 'cpu_time': 10.40625, 'integrated_imps': 940.0, 'integrated_jumps': 2303.0, 'guiding_paths_lits': 2520.0, 'guiding_paths': 89.0, 'splits': 0.0, 'lemmas_conflict': 1628.0, 'lemmas_loop': 22582.0, 'lemmas_other': 6180.0, 'lits_conflict': 58706.0, 'lits_loop': 1227692.0, 'lits_other': 175447.0, 'jumps': {'jumps': 1631.0, 'jumps_bounded': 38.0, 'levels': 4017.0, 'levels_bounded': 180.0, 'max': 118.0, 'max_executed': 118.0, 'max_bounded': 73.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.626516s.

[04-03-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.332881s with result Satisfiable.

[04-03-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 5.959396899999987, Incremental time limit = None
Running cumulative time = 37.884022200000004, Cumulative time limit = 1773.5325767
Used memory = (RSS = 735.636719Mb, VMS = 785.671875Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 33.097420s, Solving = 4.786603s, Total = 37.884022s, Memory = (RSS = 735.636719Mb, VMS = 785.671875Mb), Step range = [0-9]), Calls = 9
Final Model :: Total atoms = 94835, Cost = (15, -3), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-22-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=33.09741950000001, solving_time=4.786602699999996, total_time=37.884022200000004, memory=Memory(rss=735.63671875, vms=785.671875), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.626515699999999, solving_time=2.3328811999999886, total_time=5.959396899999987, memory=Memory(rss=735.63671875, vms=785.671875), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 277302.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 949295.0, 'bodies_tr': 949295.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 9767.0, 'count_bodies_tr': 9767.0, 'sccs': 363.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76802.0, 'rules': 1330797.0, 'rules_normal': 1322586.0, 'rules_choice': 8193.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1330797.0, 'rules_tr_normal': 1322586.0, 'rules_tr_choice': 8193.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 518160.0, 'eqs_atom': 172515.0, 'eqs_body': 15919.0, 'eqs_other': 329726.0}, 'lpStep': {'atoms': 19318.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108489.0, 'bodies_tr': 108489.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139370.0, 'rules_normal': 138569.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139370.0, 'rules_tr_normal': 138569.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39509.0, 'eqs_atom': 11697.0, 'eqs_body': 339.0, 'eqs_other': 27473.0}, 'generator': {'vars': 205546.0, 'vars_eliminated': 0.0, 'vars_frozen': 108797.0, 'constraints': 76777.0, 'constraints_binary': 983947.0, 'constraints_ternary': 171819.0, 'acyc_edges': 0.0, 'complexity': 1235437.0}}, 'solving': {'solvers': {'choices': 5732.0, 'conflicts': 2310.0, 'conflicts_analyzed': 2297.0, 'restarts': 10.0, 'restarts_last': 211.0, 'extra': {'domain_choices': 133.0, 'models': 2.0, 'models_level': 1195.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1328.0, 'distributed_sum_lbd': 3323.0, 'integrated': 8315.0, 'lemmas': 25987.0, 'lits_learnt': 1247134.0, 'lemmas_binary': 1232.0, 'lemmas_ternary': 555.0, 'cpu_time': 15.421875, 'integrated_imps': 2961.0, 'integrated_jumps': 1363.0, 'guiding_paths_lits': 567.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 2297.0, 'lemmas_loop': 15650.0, 'lemmas_other': 8040.0, 'lits_conflict': 102446.0, 'lits_loop': 954301.0, 'lits_other': 190387.0, 'jumps': {'jumps': 2297.0, 'jumps_bounded': 7.0, 'levels': 4921.0, 'levels_bounded': 241.0, 'max': 321.0, 'max_executed': 321.0, 'max_bounded': 82.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [15.0, -3.0], 'lower': [15.0, -3.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 5.97728157043457, 'cpu': 19.171875, 'solve': 2.2202320098876953, 'unsat': 1.1919536590576172, 'sat': 0.5824680328369141}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 38.55903434753418, 'cpu': 60.046875, 'solve': 4.075651168823242, 'unsat': 2.8723506927490234, 'sat': 0.6836662292480469}, 'models': {'enumerated': 6.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 11925.0, 'conflicts': 3994.0, 'conflicts_analyzed': 3928.0, 'restarts': 15.0, 'restarts_last': 211.0, 'extra': {'domain_choices': 241.0, 'models': 6.0, 'models_level': 1320.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2510.0, 'distributed_sum_lbd': 6788.0, 'integrated': 14683.0, 'lemmas': 56377.0, 'lits_learnt': 2708979.0, 'lemmas_binary': 2732.0, 'lemmas_ternary': 1112.0, 'cpu_time': 25.828125, 'integrated_imps': 3901.0, 'integrated_jumps': 3666.0, 'guiding_paths_lits': 3087.0, 'guiding_paths': 106.0, 'splits': 0.0, 'lemmas_conflict': 3925.0, 'lemmas_loop': 38232.0, 'lemmas_other': 14220.0, 'lits_conflict': 161152.0, 'lits_loop': 2181993.0, 'lits_other': 365834.0, 'jumps': {'jumps': 3928.0, 'jumps_bounded': 45.0, 'levels': 8938.0, 'levels_bounded': 421.0, 'max': 321.0, 'max_executed': 321.0, 'max_bounded': 82.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-32] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1, 2: 4, 3: 5, 4: 9}

[04-03-2022_16-22-32] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 5 ( 83.33% solved)

[04-03-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 9)', truth=True, inc_range=None)

[04-03-2022_16-22-32] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 9]:
sub_goal(5, talos, place_upon((block,2),(block,3)), on((block,2)), (block,3), 5)
sub_goal(5, talos, place_upon((block,2),(block,3)), transporting(talos,(block,2)), false, 5)
sub_goal(5, talos, place_upon((block,5),(block,6)), on((block,5)), (block,6), 5)
sub_goal(5, talos, place_upon((block,5),(block,6)), transporting(talos,(block,5)), false, 5)
sub_goal(5, talos, place_upon((block,8),(block,9)), on((block,8)), (block,9), 5)
sub_goal(5, talos, place_upon((block,8),(block,9)), transporting(talos,(block,8)), false, 5)

[04-03-2022_16-22-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.709238s.

[04-03-2022_16-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(5, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(5,9).

[04-03-2022_16-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.397670s with result Unsatisfiable.

[04-03-2022_16-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.106908699999991, Incremental time limit = None
Running cumulative time = 41.990930899999995, Cumulative time limit = 1773.5325767
Used memory = (RSS = 787.300781Mb, VMS = 823.410156Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=36.8066578, solving_time=5.1842730999999915, total_time=41.990930899999995, memory=Memory(rss=787.30078125, vms=823.41015625), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.7092382999999955, solving_time=0.39767039999999554, total_time=4.106908699999991, memory=Memory(rss=787.30078125, vms=823.41015625), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 296648.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1057819.0, 'bodies_tr': 1057819.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 10836.0, 'count_bodies_tr': 10836.0, 'sccs': 406.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87888.0, 'rules': 1470217.0, 'rules_normal': 1461205.0, 'rules_choice': 8992.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1470217.0, 'rules_tr_normal': 1461205.0, 'rules_tr_choice': 8992.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 557765.0, 'eqs_atom': 184240.0, 'eqs_body': 16256.0, 'eqs_other': 357269.0}, 'lpStep': {'atoms': 19346.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108524.0, 'bodies_tr': 108524.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139420.0, 'rules_normal': 138619.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139420.0, 'rules_tr_normal': 138619.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39605.0, 'eqs_atom': 11725.0, 'eqs_body': 337.0, 'eqs_other': 27543.0}, 'generator': {'vars': 234641.0, 'vars_eliminated': 0.0, 'vars_frozen': 124043.0, 'constraints': 83713.0, 'constraints_binary': 1081476.0, 'constraints_ternary': 190049.0, 'acyc_edges': 0.0, 'complexity': 1358452.0}}, 'solving': {'solvers': {'choices': 630.0, 'conflicts': 104.0, 'conflicts_analyzed': 95.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 226.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 60.0, 'distributed_sum_lbd': 169.0, 'integrated': 308.0, 'lemmas': 2251.0, 'lits_learnt': 137052.0, 'lemmas_binary': 61.0, 'lemmas_ternary': 7.0, 'cpu_time': 1.625, 'integrated_imps': 93.0, 'integrated_jumps': 265.0, 'guiding_paths_lits': 623.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 93.0, 'lemmas_loop': 1879.0, 'lemmas_other': 279.0, 'lits_conflict': 6749.0, 'lits_loop': 112246.0, 'lits_other': 18057.0, 'jumps': {'jumps': 95.0, 'jumps_bounded': 9.0, 'levels': 452.0, 'levels_bounded': 94.0, 'max': 84.0, 'max_executed': 84.0, 'max_bounded': 81.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, -256.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 4.154529571533203, 'cpu': 5.46875, 'solve': 0.2772560119628906, 'unsat': 0.2772560119628906, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 42.71356391906738, 'cpu': 65.515625, 'solve': 4.352907180786133, 'unsat': 3.149606704711914, 'sat': 0.6836662292480469}, 'models': {'enumerated': 6.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 12555.0, 'conflicts': 4098.0, 'conflicts_analyzed': 4023.0, 'restarts': 15.0, 'restarts_last': 211.0, 'extra': {'domain_choices': 467.0, 'models': 6.0, 'models_level': 1320.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2570.0, 'distributed_sum_lbd': 6957.0, 'integrated': 14991.0, 'lemmas': 58628.0, 'lits_learnt': 2846031.0, 'lemmas_binary': 2793.0, 'lemmas_ternary': 1119.0, 'cpu_time': 27.453125, 'integrated_imps': 3994.0, 'integrated_jumps': 3931.0, 'guiding_paths_lits': 3710.0, 'guiding_paths': 120.0, 'splits': 0.0, 'lemmas_conflict': 4018.0, 'lemmas_loop': 40111.0, 'lemmas_other': 14499.0, 'lits_conflict': 167901.0, 'lits_loop': 2294239.0, 'lits_other': 383891.0, 'jumps': {'jumps': 4023.0, 'jumps_bounded': 54.0, 'levels': 9390.0, 'levels_bounded': 515.0, 'max': 321.0, 'max_executed': 321.0, 'max_bounded': 82.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.791826s.

[04-03-2022_16-22-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.487945s with result Unsatisfiable.

[04-03-2022_16-22-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 5.279770999999997, Incremental time limit = None
Running cumulative time = 47.27070189999999, Cumulative time limit = 1773.5325767
Used memory = (RSS = 842.566406Mb, VMS = 869.933594Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=40.598483699999996, solving_time=6.672218199999996, total_time=47.27070189999999, memory=Memory(rss=842.56640625, vms=869.93359375), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.791825899999992, solving_time=1.4879451000000046, total_time=5.279770999999997, memory=Memory(rss=842.56640625, vms=869.93359375), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 316022.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1166378.0, 'bodies_tr': 1166378.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 11905.0, 'count_bodies_tr': 11905.0, 'sccs': 449.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 98974.0, 'rules': 1609687.0, 'rules_normal': 1599874.0, 'rules_choice': 9791.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1609687.0, 'rules_tr_normal': 1599874.0, 'rules_tr_choice': 9791.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 597470.0, 'eqs_atom': 195993.0, 'eqs_body': 16595.0, 'eqs_other': 384882.0}, 'lpStep': {'atoms': 19374.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108559.0, 'bodies_tr': 108559.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139470.0, 'rules_normal': 138669.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139470.0, 'rules_tr_normal': 138669.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39705.0, 'eqs_atom': 11753.0, 'eqs_body': 339.0, 'eqs_other': 27613.0}, 'generator': {'vars': 263736.0, 'vars_eliminated': 0.0, 'vars_frozen': 139289.0, 'constraints': 96421.0, 'constraints_binary': 1244300.0, 'constraints_ternary': 218492.0, 'acyc_edges': 0.0, 'complexity': 1562871.0}}, 'solving': {'solvers': {'choices': 2550.0, 'conflicts': 1021.0, 'conflicts_analyzed': 1009.0, 'restarts': 5.0, 'restarts_last': 135.0, 'extra': {'domain_choices': 77.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 504.0, 'distributed_sum_lbd': 1617.0, 'integrated': 3002.0, 'lemmas': 11294.0, 'lits_learnt': 635492.0, 'lemmas_binary': 263.0, 'lemmas_ternary': 119.0, 'cpu_time': 9.453125, 'integrated_imps': 286.0, 'integrated_jumps': 713.0, 'guiding_paths_lits': 679.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 1008.0, 'lemmas_loop': 7372.0, 'lemmas_other': 2914.0, 'lits_conflict': 58299.0, 'lits_loop': 446681.0, 'lits_other': 130512.0, 'jumps': {'jumps': 1009.0, 'jumps_bounded': 5.0, 'levels': 2942.0, 'levels_bounded': 1108.0, 'max': 1103.0, 'max_executed': 1103.0, 'max_bounded': 1102.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [8.0, -292.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 5.298898696899414, 'cpu': 13.375, 'solve': 1.3494529724121094, 'unsat': 1.3494529724121094, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 48.0124626159668, 'cpu': 78.890625, 'solve': 5.702360153198242, 'unsat': 4.499059677124023, 'sat': 0.6836662292480469}, 'models': {'enumerated': 6.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 15105.0, 'conflicts': 5119.0, 'conflicts_analyzed': 5032.0, 'restarts': 20.0, 'restarts_last': 211.0, 'extra': {'domain_choices': 544.0, 'models': 6.0, 'models_level': 1320.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3074.0, 'distributed_sum_lbd': 8574.0, 'integrated': 17993.0, 'lemmas': 69922.0, 'lits_learnt': 3481523.0, 'lemmas_binary': 3056.0, 'lemmas_ternary': 1238.0, 'cpu_time': 36.90625, 'integrated_imps': 4280.0, 'integrated_jumps': 4644.0, 'guiding_paths_lits': 4389.0, 'guiding_paths': 135.0, 'splits': 0.0, 'lemmas_conflict': 5026.0, 'lemmas_loop': 47483.0, 'lemmas_other': 17413.0, 'lits_conflict': 226200.0, 'lits_loop': 2740920.0, 'lits_other': 514403.0, 'jumps': {'jumps': 5032.0, 'jumps_bounded': 59.0, 'levels': 12332.0, 'levels_bounded': 1623.0, 'max': 1103.0, 'max_executed': 1103.0, 'max_bounded': 1102.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.168128s.

[04-03-2022_16-22-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-22-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 4.358493s with result Unsatisfiable.

[04-03-2022_16-22-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 8.526621599999984, Incremental time limit = None
Running cumulative time = 55.797323499999976, Cumulative time limit = 1773.5325767
Used memory = (RSS = 907.175781Mb, VMS = 1000.140625Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-22-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=44.76661199999999, solving_time=11.030711499999988, total_time=55.797323499999976, memory=Memory(rss=907.17578125, vms=1000.140625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.168128299999992, solving_time=4.358493299999992, total_time=8.526621599999984, memory=Memory(rss=907.17578125, vms=1000.140625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 335424.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1274972.0, 'bodies_tr': 1274972.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 12974.0, 'count_bodies_tr': 12974.0, 'sccs': 492.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 110060.0, 'rules': 1749207.0, 'rules_normal': 1738593.0, 'rules_choice': 10590.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1749207.0, 'rules_tr_normal': 1738593.0, 'rules_tr_choice': 10590.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 637271.0, 'eqs_atom': 207774.0, 'eqs_body': 16932.0, 'eqs_other': 412565.0}, 'lpStep': {'atoms': 19402.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108594.0, 'bodies_tr': 108594.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139520.0, 'rules_normal': 138719.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139520.0, 'rules_tr_normal': 138719.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39801.0, 'eqs_atom': 11781.0, 'eqs_body': 337.0, 'eqs_other': 27683.0}, 'generator': {'vars': 292831.0, 'vars_eliminated': 0.0, 'vars_frozen': 154535.0, 'constraints': 109127.0, 'constraints_binary': 1407134.0, 'constraints_ternary': 246923.0, 'acyc_edges': 0.0, 'complexity': 1767286.0}}, 'solving': {'solvers': {'choices': 8751.0, 'conflicts': 3757.0, 'conflicts_analyzed': 3741.0, 'restarts': 14.0, 'restarts_last': 451.0, 'extra': {'domain_choices': 265.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 7536.0, 'distributed': 1825.0, 'distributed_sum_lbd': 5136.0, 'integrated': 11150.0, 'lemmas': 37657.0, 'lits_learnt': 1897194.0, 'lemmas_binary': 2236.0, 'lemmas_ternary': 1320.0, 'cpu_time': 30.484375, 'integrated_imps': 2254.0, 'integrated_jumps': 1933.0, 'guiding_paths_lits': 735.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 3740.0, 'lemmas_loop': 22920.0, 'lemmas_other': 10997.0, 'lits_conflict': 203085.0, 'lits_loop': 1338091.0, 'lits_other': 356018.0, 'jumps': {'jumps': 3741.0, 'jumps_bounded': 4.0, 'levels': 7102.0, 'levels_bounded': 103.0, 'max': 105.0, 'max_executed': 105.0, 'max_bounded': 98.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, -328.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 8.547529220581055, 'cpu': 34.734375, 'solve': 4.235227584838867, 'unsat': 4.235227584838867, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 56.55999183654785, 'cpu': 113.625, 'solve': 9.93758773803711, 'unsat': 8.73428726196289, 'sat': 0.6836662292480469}, 'models': {'enumerated': 6.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 23856.0, 'conflicts': 8876.0, 'conflicts_analyzed': 8773.0, 'restarts': 34.0, 'restarts_last': 451.0, 'extra': {'domain_choices': 809.0, 'models': 6.0, 'models_level': 1320.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 7536.0, 'distributed': 4899.0, 'distributed_sum_lbd': 13710.0, 'integrated': 29143.0, 'lemmas': 107579.0, 'lits_learnt': 5378717.0, 'lemmas_binary': 5292.0, 'lemmas_ternary': 2558.0, 'cpu_time': 67.390625, 'integrated_imps': 6534.0, 'integrated_jumps': 6577.0, 'guiding_paths_lits': 5124.0, 'guiding_paths': 149.0, 'splits': 0.0, 'lemmas_conflict': 8766.0, 'lemmas_loop': 70403.0, 'lemmas_other': 28410.0, 'lits_conflict': 429285.0, 'lits_loop': 4079011.0, 'lits_other': 870421.0, 'jumps': {'jumps': 8773.0, 'jumps_bounded': 63.0, 'levels': 19434.0, 'levels_bounded': 1726.0, 'max': 1103.0, 'max_executed': 1103.0, 'max_bounded': 1102.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-22-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-22-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-22-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-22-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.842805s.

[04-03-2022_16-22-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-23-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 7.248986s with result Unsatisfiable.

[04-03-2022_16-23-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 11.091791099999995, Incremental time limit = None
Running cumulative time = 66.88911459999997, Cumulative time limit = 1773.5325767
Used memory = (RSS = 970.140625Mb, VMS = 1046.660156Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-23-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=48.60941719999999, solving_time=18.279697399999982, total_time=66.88911459999997, memory=Memory(rss=970.140625, vms=1046.66015625), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.842805200000001, solving_time=7.248985899999994, total_time=11.091791099999995, memory=Memory(rss=970.140625, vms=1046.66015625), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 354853.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1383597.0, 'bodies_tr': 1383597.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 14043.0, 'count_bodies_tr': 14043.0, 'sccs': 535.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 121146.0, 'rules': 1888758.0, 'rules_normal': 1877343.0, 'rules_choice': 11389.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1888758.0, 'rules_tr_normal': 1877343.0, 'rules_tr_choice': 11389.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 677130.0, 'eqs_atom': 219564.0, 'eqs_body': 17271.0, 'eqs_other': 440295.0}, 'lpStep': {'atoms': 19429.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108625.0, 'bodies_tr': 108625.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139551.0, 'rules_normal': 138750.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139551.0, 'rules_tr_normal': 138750.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39859.0, 'eqs_atom': 11790.0, 'eqs_body': 339.0, 'eqs_other': 27730.0}, 'generator': {'vars': 321926.0, 'vars_eliminated': 0.0, 'vars_frozen': 169781.0, 'constraints': 116670.0, 'constraints_binary': 1510823.0, 'constraints_ternary': 264248.0, 'acyc_edges': 0.0, 'complexity': 1896231.0}}, 'solving': {'solvers': {'choices': 14725.0, 'conflicts': 6491.0, 'conflicts_analyzed': 6477.0, 'restarts': 24.0, 'restarts_last': 905.0, 'extra': {'domain_choices': 137.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 7513.0, 'distributed': 2212.0, 'distributed_sum_lbd': 7098.0, 'integrated': 13263.0, 'lemmas': 51326.0, 'lits_learnt': 2475942.0, 'lemmas_binary': 2236.0, 'lemmas_ternary': 1346.0, 'cpu_time': 51.171875, 'integrated_imps': 682.0, 'integrated_jumps': 2146.0, 'guiding_paths_lits': 791.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 6475.0, 'lemmas_loop': 31751.0, 'lemmas_other': 13100.0, 'lits_conflict': 370609.0, 'lits_loop': 1723462.0, 'lits_other': 381871.0, 'jumps': {'jumps': 6477.0, 'jumps_bounded': 9.0, 'levels': 14249.0, 'levels_bounded': 1784.0, 'max': 1388.0, 'max_executed': 1388.0, 'max_bounded': 1360.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [8.0, -356.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 11.14047622680664, 'cpu': 55.15625, 'solve': 7.1268768310546875, 'unsat': 7.1268768310546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 67.70046806335449, 'cpu': 168.78125, 'solve': 17.064464569091797, 'unsat': 15.861164093017578, 'sat': 0.6836662292480469}, 'models': {'enumerated': 6.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 38581.0, 'conflicts': 15367.0, 'conflicts_analyzed': 15250.0, 'restarts': 58.0, 'restarts_last': 905.0, 'extra': {'domain_choices': 946.0, 'models': 6.0, 'models_level': 1320.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 15049.0, 'distributed': 7111.0, 'distributed_sum_lbd': 20808.0, 'integrated': 42406.0, 'lemmas': 158905.0, 'lits_learnt': 7854659.0, 'lemmas_binary': 7528.0, 'lemmas_ternary': 3904.0, 'cpu_time': 118.5625, 'integrated_imps': 7216.0, 'integrated_jumps': 8723.0, 'guiding_paths_lits': 5915.0, 'guiding_paths': 164.0, 'splits': 0.0, 'lemmas_conflict': 15241.0, 'lemmas_loop': 102154.0, 'lemmas_other': 41510.0, 'lits_conflict': 799894.0, 'lits_loop': 5802473.0, 'lits_other': 1252292.0, 'jumps': {'jumps': 15250.0, 'jumps_bounded': 72.0, 'levels': 33683.0, 'levels_bounded': 3510.0, 'max': 1388.0, 'max_executed': 1388.0, 'max_bounded': 1360.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-23-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-23-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-23-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-23-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.053067s.

[04-03-2022_16-23-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-23-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 15.833620s with result Unsatisfiable.

[04-03-2022_16-23-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 19.886686200000014, Incremental time limit = None
Running cumulative time = 86.77580079999998, Cumulative time limit = 1773.5325767
Used memory = (RSS = 1043.085938Mb, VMS = 1098.523438Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-23-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=52.66248379999998, solving_time=34.113317, total_time=86.77580079999998, memory=Memory(rss=1043.0859375, vms=1098.5234375), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.053066599999994, solving_time=15.83361960000002, total_time=19.886686200000014, memory=Memory(rss=1043.0859375, vms=1098.5234375), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 374292.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1492257.0, 'bodies_tr': 1492257.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 15112.0, 'count_bodies_tr': 15112.0, 'sccs': 578.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 132232.0, 'rules': 2028359.0, 'rules_normal': 2016143.0, 'rules_choice': 12188.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2028359.0, 'rules_tr_normal': 2016143.0, 'rules_tr_choice': 12188.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 717085.0, 'eqs_atom': 231382.0, 'eqs_body': 17608.0, 'eqs_other': 468095.0}, 'lpStep': {'atoms': 19439.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108660.0, 'bodies_tr': 108660.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139601.0, 'rules_normal': 138800.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139601.0, 'rules_tr_normal': 138800.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39955.0, 'eqs_atom': 11818.0, 'eqs_body': 337.0, 'eqs_other': 27800.0}, 'generator': {'vars': 351021.0, 'vars_eliminated': 0.0, 'vars_frozen': 185027.0, 'constraints': 128087.0, 'constraints_binary': 1661927.0, 'constraints_ternary': 291678.0, 'acyc_edges': 0.0, 'complexity': 2086624.0}}, 'solving': {'solvers': {'choices': 31780.0, 'conflicts': 14052.0, 'conflicts_analyzed': 14041.0, 'restarts': 40.0, 'restarts_last': 1913.0, 'extra': {'domain_choices': 545.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 65703.0, 'distributed': 4080.0, 'distributed_sum_lbd': 13157.0, 'integrated': 24458.0, 'lemmas': 101711.0, 'lits_learnt': 5381941.0, 'lemmas_binary': 3989.0, 'lemmas_ternary': 2824.0, 'cpu_time': 112.6875, 'integrated_imps': 759.0, 'integrated_jumps': 2896.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 14041.0, 'lemmas_loop': 63459.0, 'lemmas_other': 24211.0, 'lits_conflict': 1007147.0, 'lits_loop': 3350364.0, 'lits_other': 1024430.0, 'jumps': {'jumps': 14041.0, 'jumps_bounded': 22.0, 'levels': 28759.0, 'levels_bounded': 39.0, 'max': 1026.0, 'max_executed': 1026.0, 'max_bounded': 6.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [8.0, -392.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 19.92331886291504, 'cpu': 116.859375, 'solve': 15.706642150878906, 'unsat': 15.706642150878906, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 87.62378692626953, 'cpu': 285.640625, 'solve': 32.7711067199707, 'unsat': 31.567806243896484, 'sat': 0.6836662292480469}, 'models': {'enumerated': 6.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 70361.0, 'conflicts': 29419.0, 'conflicts_analyzed': 29291.0, 'restarts': 98.0, 'restarts_last': 1913.0, 'extra': {'domain_choices': 1491.0, 'models': 6.0, 'models_level': 1320.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 80752.0, 'distributed': 11191.0, 'distributed_sum_lbd': 33965.0, 'integrated': 66864.0, 'lemmas': 260616.0, 'lits_learnt': 13236600.0, 'lemmas_binary': 11517.0, 'lemmas_ternary': 6728.0, 'cpu_time': 231.25, 'integrated_imps': 7975.0, 'integrated_jumps': 11619.0, 'guiding_paths_lits': 6762.0, 'guiding_paths': 179.0, 'splits': 0.0, 'lemmas_conflict': 29282.0, 'lemmas_loop': 165613.0, 'lemmas_other': 65721.0, 'lits_conflict': 1807041.0, 'lits_loop': 9152837.0, 'lits_other': 2276722.0, 'jumps': {'jumps': 29291.0, 'jumps_bounded': 94.0, 'levels': 62442.0, 'levels_bounded': 3549.0, 'max': 1388.0, 'max_executed': 1388.0, 'max_bounded': 1360.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-23-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-23-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-23-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-23-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.795582s.

[04-03-2022_16-23-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-24-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 40.628311s with result Satisfiable.

[04-03-2022_16-24-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 44.42389309999999, Incremental time limit = None
Running cumulative time = 131.19969389999997, Cumulative time limit = 1773.5325767
Used memory = (RSS = 1180.878906Mb, VMS = 1238.156250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-24-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 56.458066s, Solving = 74.741628s, Total = 131.199694s, Memory = (RSS = 1180.878906Mb, VMS = 1238.156250Mb), Step range = [0-15]), Calls = 15
Final Model :: Total atoms = 108999, Cost = (23, -6), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[04-03-2022_16-24-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=56.45806589999997, solving_time=74.74162799999999, total_time=131.19969389999997, memory=Memory(rss=1180.87890625, vms=1238.15625), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.79558209999999, solving_time=40.628311, total_time=44.42389309999999, memory=Memory(rss=1180.87890625, vms=1238.15625), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 393759.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1600952.0, 'bodies_tr': 1600952.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 16181.0, 'count_bodies_tr': 16181.0, 'sccs': 621.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 143318.0, 'rules': 2168010.0, 'rules_normal': 2154993.0, 'rules_choice': 12987.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2168010.0, 'rules_tr_normal': 2154993.0, 'rules_tr_choice': 12987.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 757140.0, 'eqs_atom': 243228.0, 'eqs_body': 17947.0, 'eqs_other': 495965.0}, 'lpStep': {'atoms': 19467.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108695.0, 'bodies_tr': 108695.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139651.0, 'rules_normal': 138850.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139651.0, 'rules_tr_normal': 138850.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40055.0, 'eqs_atom': 11846.0, 'eqs_body': 339.0, 'eqs_other': 27870.0}, 'generator': {'vars': 380116.0, 'vars_eliminated': 0.0, 'vars_frozen': 200273.0, 'constraints': 139765.0, 'constraints_binary': 1815331.0, 'constraints_ternary': 319818.0, 'acyc_edges': 0.0, 'complexity': 2280290.0}}, 'solving': {'solvers': {'choices': 225616.0, 'conflicts': 39036.0, 'conflicts_analyzed': 39017.0, 'restarts': 88.0, 'restarts_last': 1199.0, 'extra': {'domain_choices': 2390.0, 'models': 3.0, 'models_level': 3249.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 171193.0, 'distributed': 8219.0, 'distributed_sum_lbd': 26153.0, 'integrated': 49329.0, 'lemmas': 229529.0, 'lits_learnt': 16905388.0, 'lemmas_binary': 9278.0, 'lemmas_ternary': 6893.0, 'cpu_time': 278.90625, 'integrated_imps': 1431.0, 'integrated_jumps': 13080.0, 'guiding_paths_lits': 903.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 39017.0, 'lemmas_loop': 141576.0, 'lemmas_other': 48936.0, 'lits_conflict': 6399471.0, 'lits_loop': 7999779.0, 'lits_other': 2506138.0, 'jumps': {'jumps': 39017.0, 'jumps_bounded': 30.0, 'levels': 210008.0, 'levels_bounded': 529.0, 'max': 2111.0, 'max_executed': 2111.0, 'max_bounded': 130.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [23.0, -6.0], 'lower': [23.0, -6.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 44.48376655578613, 'cpu': 282.921875, 'solve': 40.487632751464844, 'unsat': 16.229515075683594, 'sat': 19.514616012573242}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 132.10755348205566, 'cpu': 568.5625, 'solve': 73.25873947143555, 'unsat': 47.79732131958008, 'sat': 20.19828224182129}, 'models': {'enumerated': 9.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 295977.0, 'conflicts': 68455.0, 'conflicts_analyzed': 68308.0, 'restarts': 186.0, 'restarts_last': 1913.0, 'extra': {'domain_choices': 3881.0, 'models': 9.0, 'models_level': 4569.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 251945.0, 'distributed': 19410.0, 'distributed_sum_lbd': 60118.0, 'integrated': 116193.0, 'lemmas': 490145.0, 'lits_learnt': 30141988.0, 'lemmas_binary': 20795.0, 'lemmas_ternary': 13621.0, 'cpu_time': 510.15625, 'integrated_imps': 9406.0, 'integrated_jumps': 24699.0, 'guiding_paths_lits': 7665.0, 'guiding_paths': 205.0, 'splits': 0.0, 'lemmas_conflict': 68299.0, 'lemmas_loop': 307189.0, 'lemmas_other': 114657.0, 'lits_conflict': 8206512.0, 'lits_loop': 17152616.0, 'lits_other': 4782860.0, 'jumps': {'jumps': 68308.0, 'jumps_bounded': 124.0, 'levels': 272450.0, 'levels_bounded': 4078.0, 'max': 2111.0, 'max_executed': 2111.0, 'max_bounded': 1360.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-24-06] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1, 2: 4, 3: 5, 4: 9, 5: 15}

[04-03-2022_16-24-06] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 6 (100.00% solved)

[04-03-2022_16-24-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None)

[04-03-2022_16-24-06] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 15]:
sub_goal(5, talos, place_upon((block,1),(block,2)), on((block,1)), (block,2), 6)
sub_goal(5, talos, place_upon((block,1),(block,2)), transporting(talos,(block,1)), false, 6)
sub_goal(5, talos, place_upon((block,4),(block,5)), on((block,4)), (block,5), 6)
sub_goal(5, talos, place_upon((block,4),(block,5)), transporting(talos,(block,4)), false, 6)
sub_goal(5, talos, place_upon((block,7),(block,8)), on((block,7)), (block,8), 6)
sub_goal(5, talos, place_upon((block,7),(block,8)), transporting(talos,(block,7)), false, 6)

[04-03-2022_16-24-06] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-24-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-24-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-24-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.875515s.

[04-03-2022_16-24-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(6,15).

[04-03-2022_16-24-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-24-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.571243s with result Unsatisfiable.

[04-03-2022_16-24-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 5.446757699999978, Incremental time limit = None
Running cumulative time = 136.64645159999995, Cumulative time limit = 1773.5325767
Used memory = (RSS = 1233.148438Mb, VMS = 1272.863281Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-24-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=60.33358059999997, solving_time=76.31287099999997, total_time=136.64645159999995, memory=Memory(rss=1233.1484375, vms=1272.86328125), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.8755146999999965, solving_time=1.5712429999999813, total_time=5.446757699999978, memory=Memory(rss=1233.1484375, vms=1272.86328125), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 413254.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1709682.0, 'bodies_tr': 1709682.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 17250.0, 'count_bodies_tr': 17250.0, 'sccs': 664.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 154404.0, 'rules': 2307711.0, 'rules_normal': 2293893.0, 'rules_choice': 13786.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2307711.0, 'rules_tr_normal': 2293893.0, 'rules_tr_choice': 13786.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 797291.0, 'eqs_atom': 255102.0, 'eqs_body': 18284.0, 'eqs_other': 523905.0}, 'lpStep': {'atoms': 19495.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108730.0, 'bodies_tr': 108730.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139701.0, 'rules_normal': 138900.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139701.0, 'rules_tr_normal': 138900.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40151.0, 'eqs_atom': 11874.0, 'eqs_body': 337.0, 'eqs_other': 27940.0}, 'generator': {'vars': 409211.0, 'vars_eliminated': 0.0, 'vars_frozen': 215519.0, 'constraints': 151561.0, 'constraints_binary': 1961153.0, 'constraints_ternary': 347157.0, 'acyc_edges': 0.0, 'complexity': 2465691.0}}, 'solving': {'solvers': {'choices': 3010.0, 'conflicts': 1060.0, 'conflicts_analyzed': 1042.0, 'restarts': 5.0, 'restarts_last': 122.0, 'extra': {'domain_choices': 119.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 1211.0, 'distributed': 472.0, 'distributed_sum_lbd': 1374.0, 'integrated': 2750.0, 'lemmas': 12983.0, 'lits_learnt': 938341.0, 'lemmas_binary': 794.0, 'lemmas_ternary': 362.0, 'cpu_time': 9.6875, 'integrated_imps': 167.0, 'integrated_jumps': 634.0, 'guiding_paths_lits': 959.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 1042.0, 'lemmas_loop': 9353.0, 'lemmas_other': 2588.0, 'lits_conflict': 140861.0, 'lits_loop': 596828.0, 'lits_other': 200652.0, 'jumps': {'jumps': 1042.0, 'jumps_bounded': 14.0, 'levels': 2837.0, 'levels_bounded': 484.0, 'max': 196.0, 'max_executed': 196.0, 'max_bounded': 190.0}}}}, 'summary': {'call': 16.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [14.0, -462.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 5.501457214355469, 'cpu': 13.75, 'solve': 1.4257774353027344, 'unsat': 1.4257774353027344, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 137.60901069641113, 'cpu': 582.3125, 'solve': 74.68451690673828, 'unsat': 49.22309875488281, 'sat': 20.19828224182129}, 'models': {'enumerated': 9.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 298987.0, 'conflicts': 69515.0, 'conflicts_analyzed': 69350.0, 'restarts': 191.0, 'restarts_last': 1913.0, 'extra': {'domain_choices': 4000.0, 'models': 9.0, 'models_level': 4569.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 253156.0, 'distributed': 19882.0, 'distributed_sum_lbd': 61492.0, 'integrated': 118943.0, 'lemmas': 503128.0, 'lits_learnt': 31080329.0, 'lemmas_binary': 21589.0, 'lemmas_ternary': 13983.0, 'cpu_time': 519.84375, 'integrated_imps': 9573.0, 'integrated_jumps': 25333.0, 'guiding_paths_lits': 8624.0, 'guiding_paths': 226.0, 'splits': 0.0, 'lemmas_conflict': 69341.0, 'lemmas_loop': 316542.0, 'lemmas_other': 117245.0, 'lits_conflict': 8347373.0, 'lits_loop': 17749444.0, 'lits_other': 4983512.0, 'jumps': {'jumps': 69350.0, 'jumps_bounded': 138.0, 'levels': 275287.0, 'levels_bounded': 4562.0, 'max': 2111.0, 'max_executed': 2111.0, 'max_bounded': 1360.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-24-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-24-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-24-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.999729s.

[04-03-2022_16-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 5.305332s with result Unsatisfiable.

[04-03-2022_16-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 9.305061300000006, Incremental time limit = None
Running cumulative time = 145.95151289999995, Cumulative time limit = 1773.5325767
Used memory = (RSS = 1296.773438Mb, VMS = 1444.843750Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-24-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=64.33330959999998, solving_time=81.61820329999998, total_time=145.95151289999995, memory=Memory(rss=1296.7734375, vms=1444.84375), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.999729000000002, solving_time=5.305332300000003, total_time=9.305061300000006, memory=Memory(rss=1296.7734375, vms=1444.84375), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 432777.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1818447.0, 'bodies_tr': 1818447.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 18319.0, 'count_bodies_tr': 18319.0, 'sccs': 707.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 165490.0, 'rules': 2447462.0, 'rules_normal': 2432843.0, 'rules_choice': 14585.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2447462.0, 'rules_tr_normal': 2432843.0, 'rules_tr_choice': 14585.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 837542.0, 'eqs_atom': 267004.0, 'eqs_body': 18623.0, 'eqs_other': 551915.0}, 'lpStep': {'atoms': 19523.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108765.0, 'bodies_tr': 108765.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139751.0, 'rules_normal': 138950.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139751.0, 'rules_tr_normal': 138950.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40251.0, 'eqs_atom': 11902.0, 'eqs_body': 339.0, 'eqs_other': 28010.0}, 'generator': {'vars': 438306.0, 'vars_eliminated': 0.0, 'vars_frozen': 230765.0, 'constraints': 164269.0, 'constraints_binary': 2124109.0, 'constraints_ternary': 375606.0, 'acyc_edges': 0.0, 'complexity': 2670248.0}}, 'solving': {'solvers': {'choices': 11833.0, 'conflicts': 3652.0, 'conflicts_analyzed': 3635.0, 'restarts': 15.0, 'restarts_last': 380.0, 'extra': {'domain_choices': 268.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 21390.0, 'distributed': 1630.0, 'distributed_sum_lbd': 5074.0, 'integrated': 9755.0, 'lemmas': 35239.0, 'lits_learnt': 2007391.0, 'lemmas_binary': 1954.0, 'lemmas_ternary': 928.0, 'cpu_time': 36.296875, 'integrated_imps': 475.0, 'integrated_jumps': 2053.0, 'guiding_paths_lits': 1015.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 3635.0, 'lemmas_loop': 22206.0, 'lemmas_other': 9398.0, 'lits_conflict': 239127.0, 'lits_loop': 1354163.0, 'lits_other': 414101.0, 'jumps': {'jumps': 3635.0, 'jumps_bounded': 23.0, 'levels': 29279.0, 'levels_bounded': 19612.0, 'max': 5300.0, 'max_executed': 5300.0, 'max_bounded': 5292.0}}}}, 'summary': {'call': 17.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [15.0, -498.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 9.349580764770508, 'cpu': 40.453125, 'solve': 5.142675399780273, 'unsat': 5.142675399780273, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 146.95859146118164, 'cpu': 622.765625, 'solve': 79.82719230651855, 'unsat': 54.365774154663086, 'sat': 20.19828224182129}, 'models': {'enumerated': 9.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 310820.0, 'conflicts': 73167.0, 'conflicts_analyzed': 72985.0, 'restarts': 206.0, 'restarts_last': 1913.0, 'extra': {'domain_choices': 4268.0, 'models': 9.0, 'models_level': 4569.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 274546.0, 'distributed': 21512.0, 'distributed_sum_lbd': 66566.0, 'integrated': 128698.0, 'lemmas': 538367.0, 'lits_learnt': 33087720.0, 'lemmas_binary': 23543.0, 'lemmas_ternary': 14911.0, 'cpu_time': 556.140625, 'integrated_imps': 10048.0, 'integrated_jumps': 27386.0, 'guiding_paths_lits': 9639.0, 'guiding_paths': 248.0, 'splits': 0.0, 'lemmas_conflict': 72976.0, 'lemmas_loop': 338748.0, 'lemmas_other': 126643.0, 'lits_conflict': 8586500.0, 'lits_loop': 19103607.0, 'lits_other': 5397613.0, 'jumps': {'jumps': 72985.0, 'jumps_bounded': 161.0, 'levels': 304566.0, 'levels_bounded': 24174.0, 'max': 5300.0, 'max_executed': 5300.0, 'max_bounded': 5292.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-24-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-24-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.158088s.

[04-03-2022_16-24-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 45.444290s with result Satisfiable.

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 49.60237839999999, Incremental time limit = None
Running cumulative time = 195.55389129999995, Cumulative time limit = 1773.5325767
Used memory = (RSS = 1403.503906Mb, VMS = 1535.519531Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 68.491397s, Solving = 127.062494s, Total = 195.553891s, Memory = (RSS = 1403.503906Mb, VMS = 1535.519531Mb), Step range = [0-18]), Calls = 18
Final Model :: Total atoms = 116095, Cost = (31, -9), Optimality proven = False, Number = 2, Thread ID = 7, Model type = ModelType.StableModel

[04-03-2022_16-25-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=68.49139749999998, solving_time=127.06249379999997, total_time=195.55389129999995, memory=Memory(rss=1403.50390625, vms=1535.51953125), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.158087899999998, solving_time=45.444290499999994, total_time=49.60237839999999, memory=Memory(rss=1403.50390625, vms=1535.51953125), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 452328.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1927247.0, 'bodies_tr': 1927247.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 19388.0, 'count_bodies_tr': 19388.0, 'sccs': 750.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176576.0, 'rules': 2587263.0, 'rules_normal': 2571843.0, 'rules_choice': 15384.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2587263.0, 'rules_tr_normal': 2571843.0, 'rules_tr_choice': 15384.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 877889.0, 'eqs_atom': 278934.0, 'eqs_body': 18960.0, 'eqs_other': 579995.0}, 'lpStep': {'atoms': 19551.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108800.0, 'bodies_tr': 108800.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139801.0, 'rules_normal': 139000.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139801.0, 'rules_tr_normal': 139000.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40347.0, 'eqs_atom': 11930.0, 'eqs_body': 337.0, 'eqs_other': 28080.0}, 'generator': {'vars': 467401.0, 'vars_eliminated': 0.0, 'vars_frozen': 246011.0, 'constraints': 176973.0, 'constraints_binary': 2286402.0, 'constraints_ternary': 403974.0, 'acyc_edges': 0.0, 'complexity': 2874057.0}}, 'solving': {'solvers': {'choices': 118653.0, 'conflicts': 30047.0, 'conflicts_analyzed': 30031.0, 'restarts': 70.0, 'restarts_last': 2689.0, 'extra': {'domain_choices': 2192.0, 'models': 2.0, 'models_level': 329.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 128519.0, 'distributed': 6488.0, 'distributed_sum_lbd': 21244.0, 'integrated': 38901.0, 'lemmas': 189858.0, 'lits_learnt': 13922106.0, 'lemmas_binary': 5049.0, 'lemmas_ternary': 4588.0, 'cpu_time': 300.09375, 'integrated_imps': 1351.0, 'integrated_jumps': 11794.0, 'guiding_paths_lits': 1071.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 30030.0, 'lemmas_loop': 121190.0, 'lemmas_other': 38638.0, 'lits_conflict': 4002684.0, 'lits_loop': 7182275.0, 'lits_other': 2737147.0, 'jumps': {'jumps': 30031.0, 'jumps_bounded': 17.0, 'levels': 108657.0, 'levels_bounded': 4156.0, 'max': 2649.0, 'max_executed': 2649.0, 'max_bounded': 2638.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, -9.0], 'lower': [31.0, -9.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 49.64850616455078, 'cpu': 304.4375, 'solve': 45.28742027282715, 'unsat': 21.317035675048828, 'sat': 18.98987579345703}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 196.60709762573242, 'cpu': 927.203125, 'solve': 125.1146125793457, 'unsat': 75.68280982971191, 'sat': 39.18815803527832}, 'models': {'enumerated': 11.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 429473.0, 'conflicts': 103214.0, 'conflicts_analyzed': 103016.0, 'restarts': 276.0, 'restarts_last': 2689.0, 'extra': {'domain_choices': 6460.0, 'models': 11.0, 'models_level': 4898.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 403065.0, 'distributed': 28000.0, 'distributed_sum_lbd': 87810.0, 'integrated': 167599.0, 'lemmas': 728225.0, 'lits_learnt': 47009826.0, 'lemmas_binary': 28592.0, 'lemmas_ternary': 19499.0, 'cpu_time': 856.234375, 'integrated_imps': 11399.0, 'integrated_jumps': 39180.0, 'guiding_paths_lits': 10710.0, 'guiding_paths': 271.0, 'splits': 0.0, 'lemmas_conflict': 103006.0, 'lemmas_loop': 459938.0, 'lemmas_other': 165281.0, 'lits_conflict': 12589184.0, 'lits_loop': 26285882.0, 'lits_other': 8134760.0, 'jumps': {'jumps': 103016.0, 'jumps_bounded': 178.0, 'levels': 413223.0, 'levels_bounded': 28330.0, 'max': 5300.0, 'max_executed': 5300.0, 'max_bounded': 5292.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-10] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1, 2: 4, 3: 5, 4: 9, 5: 15, 6: 18}

[04-03-2022_16-25-10] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 7 (116.67% solved)

[04-03-2022_16-25-10] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 6 was achieved successfully.

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 3.952127s, Solving = 0.204084s, Total = 4.156211s, Memory = (RSS = 319.175781Mb, VMS = 323.015625Mb), Step range = [0-1]
2 : Statistics :: Grounding = 2.884065s, Solving = 0.050059s, Total = 2.934124s, Memory = (RSS = 322.105469Mb, VMS = 329.355469Mb), Step range = [2-2]
3 : Statistics :: Grounding = 3.289535s, Solving = 0.081092s, Total = 3.370627s, Memory = (RSS = 343.976562Mb, VMS = 352.351562Mb), Step range = [3-3]
4 : Statistics :: Grounding = 3.714179s, Solving = 0.211416s, Total = 3.925595s, Memory = (RSS = 389.261719Mb, VMS = 399.171875Mb), Step range = [4-4]
5 : Statistics :: Grounding = 3.774157s, Solving = 0.325352s, Total = 4.099509s, Memory = (RSS = 456.855469Mb, VMS = 474.843750Mb), Step range = [5-5]
6 : Statistics :: Grounding = 4.336503s, Solving = 0.176883s, Total = 4.513387s, Memory = (RSS = 508.281250Mb, VMS = 509.371094Mb), Step range = [6-6]
7 : Statistics :: Grounding = 3.750975s, Solving = 0.418052s, Total = 4.169027s, Memory = (RSS = 585.343750Mb, VMS = 609.039062Mb), Step range = [7-7]
8 : Statistics :: Grounding = 3.769363s, Solving = 0.986783s, Total = 4.756146s, Memory = (RSS = 644.144531Mb, VMS = 656.550781Mb), Step range = [8-8]
9 : Statistics :: Grounding = 3.626516s, Solving = 2.332881s, Total = 5.959397s, Memory = (RSS = 735.636719Mb, VMS = 785.671875Mb), Step range = [9-9]
10 : Statistics :: Grounding = 3.709238s, Solving = 0.397670s, Total = 4.106909s, Memory = (RSS = 787.300781Mb, VMS = 823.410156Mb), Step range = [10-10]
11 : Statistics :: Grounding = 3.791826s, Solving = 1.487945s, Total = 5.279771s, Memory = (RSS = 842.566406Mb, VMS = 869.933594Mb), Step range = [11-11]
12 : Statistics :: Grounding = 4.168128s, Solving = 4.358493s, Total = 8.526622s, Memory = (RSS = 907.175781Mb, VMS = 1000.140625Mb), Step range = [12-12]
13 : Statistics :: Grounding = 3.842805s, Solving = 7.248986s, Total = 11.091791s, Memory = (RSS = 970.140625Mb, VMS = 1046.660156Mb), Step range = [13-13]
14 : Statistics :: Grounding = 4.053067s, Solving = 15.833620s, Total = 19.886686s, Memory = (RSS = 1043.085938Mb, VMS = 1098.523438Mb), Step range = [14-14]
15 : Statistics :: Grounding = 3.795582s, Solving = 40.628311s, Total = 44.423893s, Memory = (RSS = 1180.878906Mb, VMS = 1238.156250Mb), Step range = [15-15]
16 : Statistics :: Grounding = 3.875515s, Solving = 1.571243s, Total = 5.446758s, Memory = (RSS = 1233.148438Mb, VMS = 1272.863281Mb), Step range = [16-16]
17 : Statistics :: Grounding = 3.999729s, Solving = 5.305332s, Total = 9.305061s, Memory = (RSS = 1296.773438Mb, VMS = 1444.843750Mb), Step range = [17-17]
18 : Statistics :: Grounding = 4.158088s, Solving = 45.444290s, Total = 49.602378s, Memory = (RSS = 1403.503906Mb, VMS = 1535.519531Mb), Step range = [18-18]

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 195.553891s due to: External generator exit.

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-25-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[04-03-2022_16-25-13] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 5 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 4 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 3, 12: 4, 13: 5, 14: 5, 15: 5, 16: 6, 17: 6, 18: 6}
Sub-goal achievement steps: {1: 1, 2: 10, 3: 11, 4: 12, 5: 15, 6: 18}

Level = 5 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-03-2022_16-25-14] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 6, Last requested goal index = 6, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[04-03-2022_16-25-14] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 68.491397s, Solving = 127.062494s, Total = 195.553891s, Memory = (RSS = 1403.503906Mb, VMS = 1535.519531Mb), Step range = [0-18]), Calls = 18
Model :: Total atoms = 116095, Cost = (31, -9), Optimality proven = False, Number = 2, Thread ID = 7, Model type = ModelType.StableModel

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 4                 
          ========================================          
                 Steps = 18 :: Actions = 31                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room_1) -> in(talos) = store_room_1
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room_1) -> in(talos) = store_room_1
    Planned actions:
        talos : move(store_room_1)
Step 2:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,4))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room_1)
Step 4:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_1_table)
        talos : release(manipulator_arm_2,(block,4))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : release(manipulator_arm_1,(block,6))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,9))
        talos : put(manipulator_arm_2,(block,3),puzzle_room_1_table)
Step 7:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_1,(block,9),puzzle_room_1_table)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,9))
        talos : release(manipulator_arm_2,(block,3))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : move(store_room_1)
Step 10:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))
        talos : grasp(manipulator_arm_2,(block,5))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room_1) -> in(talos) = puzzle_room_1
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room_1) -> in(talos) = puzzle_room_1
    Planned actions:
        talos : move(puzzle_room_1)
Step 12:
    Current Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_1_table) -> on((block,3)) = puzzle_room_1_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_1_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_1_table) -> on((block,6)) = puzzle_room_1_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_1_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_1_table) -> on((block,9)) = puzzle_room_1_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_1_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_1_table) -> on((block,3)) = puzzle_room_1_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_1_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_1_table) -> on((block,6)) = puzzle_room_1_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_1_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_1_table) -> on((block,9)) = puzzle_room_1_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_1_table) -> transporting(talos,(block,9)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,8),(block,9))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 13:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,8))
        talos : release(manipulator_arm_2,(block,5))
Step 14:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,7))
        talos : grasp(manipulator_arm_2,(block,2))
Step 15:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,7),(block,8))
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 6] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
        [Index = 6] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 6] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
        [Index = 6] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 6] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,7))
        talos : release(manipulator_arm_2,(block,2))
Step 17:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 6] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
        [Index = 6] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 6] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
        [Index = 6] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 6] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
        talos : grasp(manipulator_arm_2,(block,4))
Step 18:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 6] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
        [Index = 6] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 6] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
        [Index = 6] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 6] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Achieved Sub-goals:
        [Index = 6] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 6] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
        [Index = 6] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 6] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
        [Index = 6] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 6] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,4),(block,5))

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=4, start_step=0, total_plan_length=18, step_range=range(0, 19)

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 18, Total actions = 31, Produced sub-goal stages = 31
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 4 (par-ref), LE =  18, AC =  31, CF = 0.6, GT =  68.97s, ST = 127.18s, OT = 0.01s, TT = 196.16s, EF = (LE = 3.0, AC = 2.1), ED = (LE = 3.1, AC = 0.5), EB = (LE = 1.0, AC = 0.5)

[04-03-2022_16-25-14] DEBUG :: core.Strategies >> Proactively dividing plan: Lvl = 4 (par-ref), LE =  18, AC =  31, CF = 0.6, GT =  68.97s, ST = 127.18s, OT = 0.01s, TT = 196.16s, EF = (LE = 3.0, AC = 2.1), ED = (LE = 3.1, AC = 0.5), EB = (LE = 1.0, AC = 0.5).

[04-03-2022_16-25-14] DEBUG :: core.Strategies >> plan_length=18, true_size_bound=9, partial_problems=2

[04-03-2022_16-25-14] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=18, start_step=0, blend=Blend(left=0, right=0)

[04-03-2022_16-25-14] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=9, large_group_size=10

[04-03-2022_16-25-14] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=9, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 18, Sub-goal Stage Range = [1-18]
Division points [total=1] : [(Index = 9, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-03-2022_16-25-14] INFO :: ASH Planner Main #1 >> Monolevel problem 1 at level 4 solved.

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 4 to proactively divide planning problem 1 at level 3:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 18, Sub-goal Stage Range = [1-18]
Division points [total=1] : [(Index = 9, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-9]

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=4, start_step=0, total_plan_length=18, step_range=range(0, 19)

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 18, Total actions = 31, Produced sub-goal stages = 31
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 18, Total actions = 31, Produced sub-goal stages = 31
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 3, sgoals range = [1-9], problem number = 1, increment number = 1

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 9)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Hasty object at 0x0000021F9E41DE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1577.3716841)
	('length_limit', 300)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[04-03-2022_16-25-14] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 3] partial conformance refinement (sequential) with sgoals range [1-9] : Concurrency enabled : Minimum search length bound disabled with value 8

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 9
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 8

[04-03-2022_16-25-14] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[04-03-2022_16-25-14] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[04-03-2022_16-25-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[04-03-2022_16-25-14] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-25-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[04-03-2022_16-25-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[04-03-2022_16-25-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_1_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_2_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 3, 'F': 'configuration(store_room_1_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 3, 'F': 'configuration(store_room_2_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 896 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(3, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(3, complete_tower(red,puzzle_room_1_table), false, 0).
holds(3, complete_tower(red,puzzle_room_2_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(3, configuration(manipulator_arm_1), retracted, 0).
holds(3, configuration(manipulator_arm_2), retracted, 0).
holds(3, configuration(puzzle_room_1_door), closed, 0).
holds(3, configuration(puzzle_room_2_door), closed, 0).
holds(3, configuration(store_room_1_door), closed, 0).
holds(3, configuration(store_room_2_door), closed, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room_1, 0).
holds(3, in((block,10)), puzzle_room_2, 0).
holds(3, in((block,11)), puzzle_room_2, 0).
holds(3, in((block,12)), puzzle_room_2, 0).
holds(3, in((block,13)), store_room_2, 0).
holds(3, in((block,14)), store_room_2, 0).
holds(3, in((block,15)), store_room_2, 0).
holds(3, in((block,16)), puzzle_room_2, 0).
holds(3, in((block,17)), store_room_2, 0).
holds(3, in((block,18)), puzzle_room_2, 0).
holds(3, in((block,2)), puzzle_room_1, 0).
holds(3, in((block,3)), puzzle_room_1, 0).
holds(3, in((block,4)), store_room_1, 0).
holds(3, in((block,5)), store_room_1, 0).
holds(3, in((block,6)), store_room_1, 0).
holds(3, in((block,7)), puzzle_room_1, 0).
holds(3, in((block,8)), store_room_1, 0).
holds(3, in((block,9)), puzzle_room_1, 0).
holds(3, in(manipulator_arm_1), starting_room_1, 0).
holds(3, in(manipulator_arm_2), starting_room_1, 0).
holds(3, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(3, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(3, in(talos), starting_room_1, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,10)), false, 0).
holds(3, in_tower((block,1),(block,11)), false, 0).
holds(3, in_tower((block,1),(block,12)), false, 0).
holds(3, in_tower((block,1),(block,13)), false, 0).
holds(3, in_tower((block,1),(block,14)), false, 0).
holds(3, in_tower((block,1),(block,15)), false, 0).
holds(3, in_tower((block,1),(block,16)), false, 0).
holds(3, in_tower((block,1),(block,17)), false, 0).
holds(3, in_tower((block,1),(block,18)), false, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,10),(block,1)), false, 0).
holds(3, in_tower((block,10),(block,10)), true, 0).
holds(3, in_tower((block,10),(block,11)), false, 0).
holds(3, in_tower((block,10),(block,12)), true, 0).
holds(3, in_tower((block,10),(block,13)), false, 0).
holds(3, in_tower((block,10),(block,14)), false, 0).
holds(3, in_tower((block,10),(block,15)), false, 0).
holds(3, in_tower((block,10),(block,16)), false, 0).
holds(3, in_tower((block,10),(block,17)), false, 0).
holds(3, in_tower((block,10),(block,18)), false, 0).
holds(3, in_tower((block,10),(block,2)), false, 0).
holds(3, in_tower((block,10),(block,3)), false, 0).
holds(3, in_tower((block,10),(block,4)), false, 0).
holds(3, in_tower((block,10),(block,5)), false, 0).
holds(3, in_tower((block,10),(block,6)), false, 0).
holds(3, in_tower((block,10),(block,7)), false, 0).
holds(3, in_tower((block,10),(block,8)), false, 0).
holds(3, in_tower((block,10),(block,9)), false, 0).
holds(3, in_tower((block,11),(block,1)), false, 0).
holds(3, in_tower((block,11),(block,10)), false, 0).
holds(3, in_tower((block,11),(block,11)), true, 0).
holds(3, in_tower((block,11),(block,12)), false, 0).
holds(3, in_tower((block,11),(block,13)), false, 0).
holds(3, in_tower((block,11),(block,14)), false, 0).
holds(3, in_tower((block,11),(block,15)), false, 0).
holds(3, in_tower((block,11),(block,16)), false, 0).
holds(3, in_tower((block,11),(block,17)), false, 0).
holds(3, in_tower((block,11),(block,18)), false, 0).
holds(3, in_tower((block,11),(block,2)), false, 0).
holds(3, in_tower((block,11),(block,3)), false, 0).
holds(3, in_tower((block,11),(block,4)), false, 0).
holds(3, in_tower((block,11),(block,5)), false, 0).
holds(3, in_tower((block,11),(block,6)), false, 0).
holds(3, in_tower((block,11),(block,7)), false, 0).
holds(3, in_tower((block,11),(block,8)), false, 0).
holds(3, in_tower((block,11),(block,9)), false, 0).
holds(3, in_tower((block,12),(block,1)), false, 0).
holds(3, in_tower((block,12),(block,10)), false, 0).
holds(3, in_tower((block,12),(block,11)), false, 0).
holds(3, in_tower((block,12),(block,12)), false, 0).
holds(3, in_tower((block,12),(block,13)), false, 0).
holds(3, in_tower((block,12),(block,14)), false, 0).
holds(3, in_tower((block,12),(block,15)), false, 0).
holds(3, in_tower((block,12),(block,16)), false, 0).
holds(3, in_tower((block,12),(block,17)), false, 0).
holds(3, in_tower((block,12),(block,18)), false, 0).
holds(3, in_tower((block,12),(block,2)), false, 0).
holds(3, in_tower((block,12),(block,3)), false, 0).
holds(3, in_tower((block,12),(block,4)), false, 0).
holds(3, in_tower((block,12),(block,5)), false, 0).
holds(3, in_tower((block,12),(block,6)), false, 0).
holds(3, in_tower((block,12),(block,7)), false, 0).
holds(3, in_tower((block,12),(block,8)), false, 0).
holds(3, in_tower((block,12),(block,9)), false, 0).
holds(3, in_tower((block,13),(block,1)), false, 0).
holds(3, in_tower((block,13),(block,10)), false, 0).
holds(3, in_tower((block,13),(block,11)), false, 0).
holds(3, in_tower((block,13),(block,12)), false, 0).
holds(3, in_tower((block,13),(block,13)), false, 0).
holds(3, in_tower((block,13),(block,14)), false, 0).
holds(3, in_tower((block,13),(block,15)), false, 0).
holds(3, in_tower((block,13),(block,16)), false, 0).
holds(3, in_tower((block,13),(block,17)), false, 0).
holds(3, in_tower((block,13),(block,18)), false, 0).
holds(3, in_tower((block,13),(block,2)), false, 0).
holds(3, in_tower((block,13),(block,3)), false, 0).
holds(3, in_tower((block,13),(block,4)), false, 0).
holds(3, in_tower((block,13),(block,5)), false, 0).
holds(3, in_tower((block,13),(block,6)), false, 0).
holds(3, in_tower((block,13),(block,7)), false, 0).
holds(3, in_tower((block,13),(block,8)), false, 0).
holds(3, in_tower((block,13),(block,9)), false, 0).
holds(3, in_tower((block,14),(block,1)), false, 0).
holds(3, in_tower((block,14),(block,10)), false, 0).
holds(3, in_tower((block,14),(block,11)), false, 0).
holds(3, in_tower((block,14),(block,12)), false, 0).
holds(3, in_tower((block,14),(block,13)), false, 0).
holds(3, in_tower((block,14),(block,14)), false, 0).
holds(3, in_tower((block,14),(block,15)), false, 0).
holds(3, in_tower((block,14),(block,16)), false, 0).
holds(3, in_tower((block,14),(block,17)), false, 0).
holds(3, in_tower((block,14),(block,18)), false, 0).
holds(3, in_tower((block,14),(block,2)), false, 0).
holds(3, in_tower((block,14),(block,3)), false, 0).
holds(3, in_tower((block,14),(block,4)), false, 0).
holds(3, in_tower((block,14),(block,5)), false, 0).
holds(3, in_tower((block,14),(block,6)), false, 0).
holds(3, in_tower((block,14),(block,7)), false, 0).
holds(3, in_tower((block,14),(block,8)), false, 0).
holds(3, in_tower((block,14),(block,9)), false, 0).
holds(3, in_tower((block,15),(block,1)), false, 0).
holds(3, in_tower((block,15),(block,10)), false, 0).
holds(3, in_tower((block,15),(block,11)), false, 0).
holds(3, in_tower((block,15),(block,12)), false, 0).
holds(3, in_tower((block,15),(block,13)), false, 0).
holds(3, in_tower((block,15),(block,14)), false, 0).
holds(3, in_tower((block,15),(block,15)), false, 0).
holds(3, in_tower((block,15),(block,16)), false, 0).
holds(3, in_tower((block,15),(block,17)), false, 0).
holds(3, in_tower((block,15),(block,18)), false, 0).
holds(3, in_tower((block,15),(block,2)), false, 0).
holds(3, in_tower((block,15),(block,3)), false, 0).
holds(3, in_tower((block,15),(block,4)), false, 0).
holds(3, in_tower((block,15),(block,5)), false, 0).
holds(3, in_tower((block,15),(block,6)), false, 0).
holds(3, in_tower((block,15),(block,7)), false, 0).
holds(3, in_tower((block,15),(block,8)), false, 0).
holds(3, in_tower((block,15),(block,9)), false, 0).
holds(3, in_tower((block,16),(block,1)), false, 0).
holds(3, in_tower((block,16),(block,10)), false, 0).
holds(3, in_tower((block,16),(block,11)), false, 0).
holds(3, in_tower((block,16),(block,12)), false, 0).
holds(3, in_tower((block,16),(block,13)), false, 0).
holds(3, in_tower((block,16),(block,14)), false, 0).
holds(3, in_tower((block,16),(block,15)), false, 0).
holds(3, in_tower((block,16),(block,16)), true, 0).
holds(3, in_tower((block,16),(block,17)), false, 0).
holds(3, in_tower((block,16),(block,18)), true, 0).
holds(3, in_tower((block,16),(block,2)), false, 0).
holds(3, in_tower((block,16),(block,3)), false, 0).
holds(3, in_tower((block,16),(block,4)), false, 0).
holds(3, in_tower((block,16),(block,5)), false, 0).
holds(3, in_tower((block,16),(block,6)), false, 0).
holds(3, in_tower((block,16),(block,7)), false, 0).
holds(3, in_tower((block,16),(block,8)), false, 0).
holds(3, in_tower((block,16),(block,9)), false, 0).
holds(3, in_tower((block,17),(block,1)), false, 0).
holds(3, in_tower((block,17),(block,10)), false, 0).
holds(3, in_tower((block,17),(block,11)), false, 0).
holds(3, in_tower((block,17),(block,12)), false, 0).
holds(3, in_tower((block,17),(block,13)), false, 0).
holds(3, in_tower((block,17),(block,14)), false, 0).
holds(3, in_tower((block,17),(block,15)), false, 0).
holds(3, in_tower((block,17),(block,16)), false, 0).
holds(3, in_tower((block,17),(block,17)), false, 0).
holds(3, in_tower((block,17),(block,18)), false, 0).
holds(3, in_tower((block,17),(block,2)), false, 0).
holds(3, in_tower((block,17),(block,3)), false, 0).
holds(3, in_tower((block,17),(block,4)), false, 0).
holds(3, in_tower((block,17),(block,5)), false, 0).
holds(3, in_tower((block,17),(block,6)), false, 0).
holds(3, in_tower((block,17),(block,7)), false, 0).
holds(3, in_tower((block,17),(block,8)), false, 0).
holds(3, in_tower((block,17),(block,9)), false, 0).
holds(3, in_tower((block,18),(block,1)), false, 0).
holds(3, in_tower((block,18),(block,10)), false, 0).
holds(3, in_tower((block,18),(block,11)), false, 0).
holds(3, in_tower((block,18),(block,12)), false, 0).
holds(3, in_tower((block,18),(block,13)), false, 0).
holds(3, in_tower((block,18),(block,14)), false, 0).
holds(3, in_tower((block,18),(block,15)), false, 0).
holds(3, in_tower((block,18),(block,16)), false, 0).
holds(3, in_tower((block,18),(block,17)), false, 0).
holds(3, in_tower((block,18),(block,18)), false, 0).
holds(3, in_tower((block,18),(block,2)), false, 0).
holds(3, in_tower((block,18),(block,3)), false, 0).
holds(3, in_tower((block,18),(block,4)), false, 0).
holds(3, in_tower((block,18),(block,5)), false, 0).
holds(3, in_tower((block,18),(block,6)), false, 0).
holds(3, in_tower((block,18),(block,7)), false, 0).
holds(3, in_tower((block,18),(block,8)), false, 0).
holds(3, in_tower((block,18),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,10)), false, 0).
holds(3, in_tower((block,2),(block,11)), false, 0).
holds(3, in_tower((block,2),(block,12)), false, 0).
holds(3, in_tower((block,2),(block,13)), false, 0).
holds(3, in_tower((block,2),(block,14)), false, 0).
holds(3, in_tower((block,2),(block,15)), false, 0).
holds(3, in_tower((block,2),(block,16)), false, 0).
holds(3, in_tower((block,2),(block,17)), false, 0).
holds(3, in_tower((block,2),(block,18)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,10)), false, 0).
holds(3, in_tower((block,3),(block,11)), false, 0).
holds(3, in_tower((block,3),(block,12)), false, 0).
holds(3, in_tower((block,3),(block,13)), false, 0).
holds(3, in_tower((block,3),(block,14)), false, 0).
holds(3, in_tower((block,3),(block,15)), false, 0).
holds(3, in_tower((block,3),(block,16)), false, 0).
holds(3, in_tower((block,3),(block,17)), false, 0).
holds(3, in_tower((block,3),(block,18)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,10)), false, 0).
holds(3, in_tower((block,4),(block,11)), false, 0).
holds(3, in_tower((block,4),(block,12)), false, 0).
holds(3, in_tower((block,4),(block,13)), false, 0).
holds(3, in_tower((block,4),(block,14)), false, 0).
holds(3, in_tower((block,4),(block,15)), false, 0).
holds(3, in_tower((block,4),(block,16)), false, 0).
holds(3, in_tower((block,4),(block,17)), false, 0).
holds(3, in_tower((block,4),(block,18)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,10)), false, 0).
holds(3, in_tower((block,5),(block,11)), false, 0).
holds(3, in_tower((block,5),(block,12)), false, 0).
holds(3, in_tower((block,5),(block,13)), false, 0).
holds(3, in_tower((block,5),(block,14)), false, 0).
holds(3, in_tower((block,5),(block,15)), false, 0).
holds(3, in_tower((block,5),(block,16)), false, 0).
holds(3, in_tower((block,5),(block,17)), false, 0).
holds(3, in_tower((block,5),(block,18)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,10)), false, 0).
holds(3, in_tower((block,6),(block,11)), false, 0).
holds(3, in_tower((block,6),(block,12)), false, 0).
holds(3, in_tower((block,6),(block,13)), false, 0).
holds(3, in_tower((block,6),(block,14)), false, 0).
holds(3, in_tower((block,6),(block,15)), false, 0).
holds(3, in_tower((block,6),(block,16)), false, 0).
holds(3, in_tower((block,6),(block,17)), false, 0).
holds(3, in_tower((block,6),(block,18)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,10)), false, 0).
holds(3, in_tower((block,7),(block,11)), false, 0).
holds(3, in_tower((block,7),(block,12)), false, 0).
holds(3, in_tower((block,7),(block,13)), false, 0).
holds(3, in_tower((block,7),(block,14)), false, 0).
holds(3, in_tower((block,7),(block,15)), false, 0).
holds(3, in_tower((block,7),(block,16)), false, 0).
holds(3, in_tower((block,7),(block,17)), false, 0).
holds(3, in_tower((block,7),(block,18)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,10)), false, 0).
holds(3, in_tower((block,8),(block,11)), false, 0).
holds(3, in_tower((block,8),(block,12)), false, 0).
holds(3, in_tower((block,8),(block,13)), false, 0).
holds(3, in_tower((block,8),(block,14)), false, 0).
holds(3, in_tower((block,8),(block,15)), false, 0).
holds(3, in_tower((block,8),(block,16)), false, 0).
holds(3, in_tower((block,8),(block,17)), false, 0).
holds(3, in_tower((block,8),(block,18)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,10)), false, 0).
holds(3, in_tower((block,9),(block,11)), false, 0).
holds(3, in_tower((block,9),(block,12)), false, 0).
holds(3, in_tower((block,9),(block,13)), false, 0).
holds(3, in_tower((block,9),(block,14)), false, 0).
holds(3, in_tower((block,9),(block,15)), false, 0).
holds(3, in_tower((block,9),(block,16)), false, 0).
holds(3, in_tower((block,9),(block,17)), false, 0).
holds(3, in_tower((block,9),(block,18)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_1_table, 0).
holds(3, on((block,10)), puzzle_room_2_table, 0).
holds(3, on((block,11)), puzzle_room_2_table, 0).
holds(3, on((block,12)), (block,10), 0).
holds(3, on((block,13)), nothing, 0).
holds(3, on((block,14)), nothing, 0).
holds(3, on((block,15)), nothing, 0).
holds(3, on((block,16)), puzzle_room_2_table, 0).
holds(3, on((block,17)), nothing, 0).
holds(3, on((block,18)), (block,16), 0).
holds(3, on((block,2)), puzzle_room_1_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_1_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(3, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(3, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(3, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(3, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(3, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(3, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(3, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(3, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(3, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_2_table), false, 0).
holds(4, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(4, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(4, complete_tower(red,puzzle_room_1_table), false, 0).
holds(4, complete_tower(red,puzzle_room_2_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(4, grasping(manipulator_arm_1), nothing, 0).
holds(4, grasping(manipulator_arm_2), nothing, 0).
holds(4, in((block,1)), puzzle_room_1, 0).
holds(4, in((block,10)), puzzle_room_2, 0).
holds(4, in((block,11)), puzzle_room_2, 0).
holds(4, in((block,12)), puzzle_room_2, 0).
holds(4, in((block,13)), store_room_2, 0).
holds(4, in((block,14)), store_room_2, 0).
holds(4, in((block,15)), store_room_2, 0).
holds(4, in((block,16)), puzzle_room_2, 0).
holds(4, in((block,17)), store_room_2, 0).
holds(4, in((block,18)), puzzle_room_2, 0).
holds(4, in((block,2)), puzzle_room_1, 0).
holds(4, in((block,3)), puzzle_room_1, 0).
holds(4, in((block,4)), store_room_1, 0).
holds(4, in((block,5)), store_room_1, 0).
holds(4, in((block,6)), store_room_1, 0).
holds(4, in((block,7)), puzzle_room_1, 0).
holds(4, in((block,8)), store_room_1, 0).
holds(4, in((block,9)), puzzle_room_1, 0).
holds(4, in(manipulator_arm_1), starting_room_1, 0).
holds(4, in(manipulator_arm_2), starting_room_1, 0).
holds(4, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(4, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(4, in(talos), starting_room_1, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,10)), false, 0).
holds(4, in_tower((block,1),(block,11)), false, 0).
holds(4, in_tower((block,1),(block,12)), false, 0).
holds(4, in_tower((block,1),(block,13)), false, 0).
holds(4, in_tower((block,1),(block,14)), false, 0).
holds(4, in_tower((block,1),(block,15)), false, 0).
holds(4, in_tower((block,1),(block,16)), false, 0).
holds(4, in_tower((block,1),(block,17)), false, 0).
holds(4, in_tower((block,1),(block,18)), false, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,10),(block,1)), false, 0).
holds(4, in_tower((block,10),(block,10)), true, 0).
holds(4, in_tower((block,10),(block,11)), false, 0).
holds(4, in_tower((block,10),(block,12)), true, 0).
holds(4, in_tower((block,10),(block,13)), false, 0).
holds(4, in_tower((block,10),(block,14)), false, 0).
holds(4, in_tower((block,10),(block,15)), false, 0).
holds(4, in_tower((block,10),(block,16)), false, 0).
holds(4, in_tower((block,10),(block,17)), false, 0).
holds(4, in_tower((block,10),(block,18)), false, 0).
holds(4, in_tower((block,10),(block,2)), false, 0).
holds(4, in_tower((block,10),(block,3)), false, 0).
holds(4, in_tower((block,10),(block,4)), false, 0).
holds(4, in_tower((block,10),(block,5)), false, 0).
holds(4, in_tower((block,10),(block,6)), false, 0).
holds(4, in_tower((block,10),(block,7)), false, 0).
holds(4, in_tower((block,10),(block,8)), false, 0).
holds(4, in_tower((block,10),(block,9)), false, 0).
holds(4, in_tower((block,11),(block,1)), false, 0).
holds(4, in_tower((block,11),(block,10)), false, 0).
holds(4, in_tower((block,11),(block,11)), true, 0).
holds(4, in_tower((block,11),(block,12)), false, 0).
holds(4, in_tower((block,11),(block,13)), false, 0).
holds(4, in_tower((block,11),(block,14)), false, 0).
holds(4, in_tower((block,11),(block,15)), false, 0).
holds(4, in_tower((block,11),(block,16)), false, 0).
holds(4, in_tower((block,11),(block,17)), false, 0).
holds(4, in_tower((block,11),(block,18)), false, 0).
holds(4, in_tower((block,11),(block,2)), false, 0).
holds(4, in_tower((block,11),(block,3)), false, 0).
holds(4, in_tower((block,11),(block,4)), false, 0).
holds(4, in_tower((block,11),(block,5)), false, 0).
holds(4, in_tower((block,11),(block,6)), false, 0).
holds(4, in_tower((block,11),(block,7)), false, 0).
holds(4, in_tower((block,11),(block,8)), false, 0).
holds(4, in_tower((block,11),(block,9)), false, 0).
holds(4, in_tower((block,12),(block,1)), false, 0).
holds(4, in_tower((block,12),(block,10)), false, 0).
holds(4, in_tower((block,12),(block,11)), false, 0).
holds(4, in_tower((block,12),(block,12)), false, 0).
holds(4, in_tower((block,12),(block,13)), false, 0).
holds(4, in_tower((block,12),(block,14)), false, 0).
holds(4, in_tower((block,12),(block,15)), false, 0).
holds(4, in_tower((block,12),(block,16)), false, 0).
holds(4, in_tower((block,12),(block,17)), false, 0).
holds(4, in_tower((block,12),(block,18)), false, 0).
holds(4, in_tower((block,12),(block,2)), false, 0).
holds(4, in_tower((block,12),(block,3)), false, 0).
holds(4, in_tower((block,12),(block,4)), false, 0).
holds(4, in_tower((block,12),(block,5)), false, 0).
holds(4, in_tower((block,12),(block,6)), false, 0).
holds(4, in_tower((block,12),(block,7)), false, 0).
holds(4, in_tower((block,12),(block,8)), false, 0).
holds(4, in_tower((block,12),(block,9)), false, 0).
holds(4, in_tower((block,13),(block,1)), false, 0).
holds(4, in_tower((block,13),(block,10)), false, 0).
holds(4, in_tower((block,13),(block,11)), false, 0).
holds(4, in_tower((block,13),(block,12)), false, 0).
holds(4, in_tower((block,13),(block,13)), false, 0).
holds(4, in_tower((block,13),(block,14)), false, 0).
holds(4, in_tower((block,13),(block,15)), false, 0).
holds(4, in_tower((block,13),(block,16)), false, 0).
holds(4, in_tower((block,13),(block,17)), false, 0).
holds(4, in_tower((block,13),(block,18)), false, 0).
holds(4, in_tower((block,13),(block,2)), false, 0).
holds(4, in_tower((block,13),(block,3)), false, 0).
holds(4, in_tower((block,13),(block,4)), false, 0).
holds(4, in_tower((block,13),(block,5)), false, 0).
holds(4, in_tower((block,13),(block,6)), false, 0).
holds(4, in_tower((block,13),(block,7)), false, 0).
holds(4, in_tower((block,13),(block,8)), false, 0).
holds(4, in_tower((block,13),(block,9)), false, 0).
holds(4, in_tower((block,14),(block,1)), false, 0).
holds(4, in_tower((block,14),(block,10)), false, 0).
holds(4, in_tower((block,14),(block,11)), false, 0).
holds(4, in_tower((block,14),(block,12)), false, 0).
holds(4, in_tower((block,14),(block,13)), false, 0).
holds(4, in_tower((block,14),(block,14)), false, 0).
holds(4, in_tower((block,14),(block,15)), false, 0).
holds(4, in_tower((block,14),(block,16)), false, 0).
holds(4, in_tower((block,14),(block,17)), false, 0).
holds(4, in_tower((block,14),(block,18)), false, 0).
holds(4, in_tower((block,14),(block,2)), false, 0).
holds(4, in_tower((block,14),(block,3)), false, 0).
holds(4, in_tower((block,14),(block,4)), false, 0).
holds(4, in_tower((block,14),(block,5)), false, 0).
holds(4, in_tower((block,14),(block,6)), false, 0).
holds(4, in_tower((block,14),(block,7)), false, 0).
holds(4, in_tower((block,14),(block,8)), false, 0).
holds(4, in_tower((block,14),(block,9)), false, 0).
holds(4, in_tower((block,15),(block,1)), false, 0).
holds(4, in_tower((block,15),(block,10)), false, 0).
holds(4, in_tower((block,15),(block,11)), false, 0).
holds(4, in_tower((block,15),(block,12)), false, 0).
holds(4, in_tower((block,15),(block,13)), false, 0).
holds(4, in_tower((block,15),(block,14)), false, 0).
holds(4, in_tower((block,15),(block,15)), false, 0).
holds(4, in_tower((block,15),(block,16)), false, 0).
holds(4, in_tower((block,15),(block,17)), false, 0).
holds(4, in_tower((block,15),(block,18)), false, 0).
holds(4, in_tower((block,15),(block,2)), false, 0).
holds(4, in_tower((block,15),(block,3)), false, 0).
holds(4, in_tower((block,15),(block,4)), false, 0).
holds(4, in_tower((block,15),(block,5)), false, 0).
holds(4, in_tower((block,15),(block,6)), false, 0).
holds(4, in_tower((block,15),(block,7)), false, 0).
holds(4, in_tower((block,15),(block,8)), false, 0).
holds(4, in_tower((block,15),(block,9)), false, 0).
holds(4, in_tower((block,16),(block,1)), false, 0).
holds(4, in_tower((block,16),(block,10)), false, 0).
holds(4, in_tower((block,16),(block,11)), false, 0).
holds(4, in_tower((block,16),(block,12)), false, 0).
holds(4, in_tower((block,16),(block,13)), false, 0).
holds(4, in_tower((block,16),(block,14)), false, 0).
holds(4, in_tower((block,16),(block,15)), false, 0).
holds(4, in_tower((block,16),(block,16)), true, 0).
holds(4, in_tower((block,16),(block,17)), false, 0).
holds(4, in_tower((block,16),(block,18)), true, 0).
holds(4, in_tower((block,16),(block,2)), false, 0).
holds(4, in_tower((block,16),(block,3)), false, 0).
holds(4, in_tower((block,16),(block,4)), false, 0).
holds(4, in_tower((block,16),(block,5)), false, 0).
holds(4, in_tower((block,16),(block,6)), false, 0).
holds(4, in_tower((block,16),(block,7)), false, 0).
holds(4, in_tower((block,16),(block,8)), false, 0).
holds(4, in_tower((block,16),(block,9)), false, 0).
holds(4, in_tower((block,17),(block,1)), false, 0).
holds(4, in_tower((block,17),(block,10)), false, 0).
holds(4, in_tower((block,17),(block,11)), false, 0).
holds(4, in_tower((block,17),(block,12)), false, 0).
holds(4, in_tower((block,17),(block,13)), false, 0).
holds(4, in_tower((block,17),(block,14)), false, 0).
holds(4, in_tower((block,17),(block,15)), false, 0).
holds(4, in_tower((block,17),(block,16)), false, 0).
holds(4, in_tower((block,17),(block,17)), false, 0).
holds(4, in_tower((block,17),(block,18)), false, 0).
holds(4, in_tower((block,17),(block,2)), false, 0).
holds(4, in_tower((block,17),(block,3)), false, 0).
holds(4, in_tower((block,17),(block,4)), false, 0).
holds(4, in_tower((block,17),(block,5)), false, 0).
holds(4, in_tower((block,17),(block,6)), false, 0).
holds(4, in_tower((block,17),(block,7)), false, 0).
holds(4, in_tower((block,17),(block,8)), false, 0).
holds(4, in_tower((block,17),(block,9)), false, 0).
holds(4, in_tower((block,18),(block,1)), false, 0).
holds(4, in_tower((block,18),(block,10)), false, 0).
holds(4, in_tower((block,18),(block,11)), false, 0).
holds(4, in_tower((block,18),(block,12)), false, 0).
holds(4, in_tower((block,18),(block,13)), false, 0).
holds(4, in_tower((block,18),(block,14)), false, 0).
holds(4, in_tower((block,18),(block,15)), false, 0).
holds(4, in_tower((block,18),(block,16)), false, 0).
holds(4, in_tower((block,18),(block,17)), false, 0).
holds(4, in_tower((block,18),(block,18)), false, 0).
holds(4, in_tower((block,18),(block,2)), false, 0).
holds(4, in_tower((block,18),(block,3)), false, 0).
holds(4, in_tower((block,18),(block,4)), false, 0).
holds(4, in_tower((block,18),(block,5)), false, 0).
holds(4, in_tower((block,18),(block,6)), false, 0).
holds(4, in_tower((block,18),(block,7)), false, 0).
holds(4, in_tower((block,18),(block,8)), false, 0).
holds(4, in_tower((block,18),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,10)), false, 0).
holds(4, in_tower((block,2),(block,11)), false, 0).
holds(4, in_tower((block,2),(block,12)), false, 0).
holds(4, in_tower((block,2),(block,13)), false, 0).
holds(4, in_tower((block,2),(block,14)), false, 0).
holds(4, in_tower((block,2),(block,15)), false, 0).
holds(4, in_tower((block,2),(block,16)), false, 0).
holds(4, in_tower((block,2),(block,17)), false, 0).
holds(4, in_tower((block,2),(block,18)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,10)), false, 0).
holds(4, in_tower((block,3),(block,11)), false, 0).
holds(4, in_tower((block,3),(block,12)), false, 0).
holds(4, in_tower((block,3),(block,13)), false, 0).
holds(4, in_tower((block,3),(block,14)), false, 0).
holds(4, in_tower((block,3),(block,15)), false, 0).
holds(4, in_tower((block,3),(block,16)), false, 0).
holds(4, in_tower((block,3),(block,17)), false, 0).
holds(4, in_tower((block,3),(block,18)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,10)), false, 0).
holds(4, in_tower((block,4),(block,11)), false, 0).
holds(4, in_tower((block,4),(block,12)), false, 0).
holds(4, in_tower((block,4),(block,13)), false, 0).
holds(4, in_tower((block,4),(block,14)), false, 0).
holds(4, in_tower((block,4),(block,15)), false, 0).
holds(4, in_tower((block,4),(block,16)), false, 0).
holds(4, in_tower((block,4),(block,17)), false, 0).
holds(4, in_tower((block,4),(block,18)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,10)), false, 0).
holds(4, in_tower((block,5),(block,11)), false, 0).
holds(4, in_tower((block,5),(block,12)), false, 0).
holds(4, in_tower((block,5),(block,13)), false, 0).
holds(4, in_tower((block,5),(block,14)), false, 0).
holds(4, in_tower((block,5),(block,15)), false, 0).
holds(4, in_tower((block,5),(block,16)), false, 0).
holds(4, in_tower((block,5),(block,17)), false, 0).
holds(4, in_tower((block,5),(block,18)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,10)), false, 0).
holds(4, in_tower((block,6),(block,11)), false, 0).
holds(4, in_tower((block,6),(block,12)), false, 0).
holds(4, in_tower((block,6),(block,13)), false, 0).
holds(4, in_tower((block,6),(block,14)), false, 0).
holds(4, in_tower((block,6),(block,15)), false, 0).
holds(4, in_tower((block,6),(block,16)), false, 0).
holds(4, in_tower((block,6),(block,17)), false, 0).
holds(4, in_tower((block,6),(block,18)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,10)), false, 0).
holds(4, in_tower((block,7),(block,11)), false, 0).
holds(4, in_tower((block,7),(block,12)), false, 0).
holds(4, in_tower((block,7),(block,13)), false, 0).
holds(4, in_tower((block,7),(block,14)), false, 0).
holds(4, in_tower((block,7),(block,15)), false, 0).
holds(4, in_tower((block,7),(block,16)), false, 0).
holds(4, in_tower((block,7),(block,17)), false, 0).
holds(4, in_tower((block,7),(block,18)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,10)), false, 0).
holds(4, in_tower((block,8),(block,11)), false, 0).
holds(4, in_tower((block,8),(block,12)), false, 0).
holds(4, in_tower((block,8),(block,13)), false, 0).
holds(4, in_tower((block,8),(block,14)), false, 0).
holds(4, in_tower((block,8),(block,15)), false, 0).
holds(4, in_tower((block,8),(block,16)), false, 0).
holds(4, in_tower((block,8),(block,17)), false, 0).
holds(4, in_tower((block,8),(block,18)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,10)), false, 0).
holds(4, in_tower((block,9),(block,11)), false, 0).
holds(4, in_tower((block,9),(block,12)), false, 0).
holds(4, in_tower((block,9),(block,13)), false, 0).
holds(4, in_tower((block,9),(block,14)), false, 0).
holds(4, in_tower((block,9),(block,15)), false, 0).
holds(4, in_tower((block,9),(block,16)), false, 0).
holds(4, in_tower((block,9),(block,17)), false, 0).
holds(4, in_tower((block,9),(block,18)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_1_table, 0).
holds(4, on((block,10)), puzzle_room_2_table, 0).
holds(4, on((block,11)), puzzle_room_2_table, 0).
holds(4, on((block,12)), (block,10), 0).
holds(4, on((block,13)), nothing, 0).
holds(4, on((block,14)), nothing, 0).
holds(4, on((block,15)), nothing, 0).
holds(4, on((block,16)), puzzle_room_2_table, 0).
holds(4, on((block,17)), nothing, 0).
holds(4, on((block,18)), (block,16), 0).
holds(4, on((block,2)), puzzle_room_1_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_1_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(4, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(4, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(4, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(4, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_2_table), false, 0).

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2328 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(3, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,10)), false, true).
final_goal(3, in_tower((block,1),(block,10)), true, false).
final_goal(3, in_tower((block,1),(block,11)), false, true).
final_goal(3, in_tower((block,1),(block,11)), true, false).
final_goal(3, in_tower((block,1),(block,12)), false, true).
final_goal(3, in_tower((block,1),(block,12)), true, false).
final_goal(3, in_tower((block,1),(block,13)), false, true).
final_goal(3, in_tower((block,1),(block,13)), true, false).
final_goal(3, in_tower((block,1),(block,14)), false, true).
final_goal(3, in_tower((block,1),(block,14)), true, false).
final_goal(3, in_tower((block,1),(block,15)), false, true).
final_goal(3, in_tower((block,1),(block,15)), true, false).
final_goal(3, in_tower((block,1),(block,16)), false, true).
final_goal(3, in_tower((block,1),(block,16)), true, false).
final_goal(3, in_tower((block,1),(block,17)), false, true).
final_goal(3, in_tower((block,1),(block,17)), true, false).
final_goal(3, in_tower((block,1),(block,18)), false, true).
final_goal(3, in_tower((block,1),(block,18)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,10),(block,1)), false, true).
final_goal(3, in_tower((block,10),(block,1)), true, false).
final_goal(3, in_tower((block,10),(block,10)), false, true).
final_goal(3, in_tower((block,10),(block,10)), true, false).
final_goal(3, in_tower((block,10),(block,11)), false, true).
final_goal(3, in_tower((block,10),(block,11)), true, false).
final_goal(3, in_tower((block,10),(block,12)), false, true).
final_goal(3, in_tower((block,10),(block,12)), true, false).
final_goal(3, in_tower((block,10),(block,13)), false, true).
final_goal(3, in_tower((block,10),(block,13)), true, false).
final_goal(3, in_tower((block,10),(block,14)), false, true).
final_goal(3, in_tower((block,10),(block,14)), true, false).
final_goal(3, in_tower((block,10),(block,15)), false, true).
final_goal(3, in_tower((block,10),(block,15)), true, false).
final_goal(3, in_tower((block,10),(block,16)), false, true).
final_goal(3, in_tower((block,10),(block,16)), true, false).
final_goal(3, in_tower((block,10),(block,17)), false, true).
final_goal(3, in_tower((block,10),(block,17)), true, false).
final_goal(3, in_tower((block,10),(block,18)), false, true).
final_goal(3, in_tower((block,10),(block,18)), true, false).
final_goal(3, in_tower((block,10),(block,2)), false, true).
final_goal(3, in_tower((block,10),(block,2)), true, false).
final_goal(3, in_tower((block,10),(block,3)), false, true).
final_goal(3, in_tower((block,10),(block,3)), true, false).
final_goal(3, in_tower((block,10),(block,4)), false, true).
final_goal(3, in_tower((block,10),(block,4)), true, false).
final_goal(3, in_tower((block,10),(block,5)), false, true).
final_goal(3, in_tower((block,10),(block,5)), true, false).
final_goal(3, in_tower((block,10),(block,6)), false, true).
final_goal(3, in_tower((block,10),(block,6)), true, false).
final_goal(3, in_tower((block,10),(block,7)), false, true).
final_goal(3, in_tower((block,10),(block,7)), true, false).
final_goal(3, in_tower((block,10),(block,8)), false, true).
final_goal(3, in_tower((block,10),(block,8)), true, false).
final_goal(3, in_tower((block,10),(block,9)), false, true).
final_goal(3, in_tower((block,10),(block,9)), true, false).
final_goal(3, in_tower((block,11),(block,1)), false, true).
final_goal(3, in_tower((block,11),(block,1)), true, false).
final_goal(3, in_tower((block,11),(block,10)), false, true).
final_goal(3, in_tower((block,11),(block,10)), true, false).
final_goal(3, in_tower((block,11),(block,11)), false, true).
final_goal(3, in_tower((block,11),(block,11)), true, false).
final_goal(3, in_tower((block,11),(block,12)), false, true).
final_goal(3, in_tower((block,11),(block,12)), true, false).
final_goal(3, in_tower((block,11),(block,13)), false, true).
final_goal(3, in_tower((block,11),(block,13)), true, false).
final_goal(3, in_tower((block,11),(block,14)), false, true).
final_goal(3, in_tower((block,11),(block,14)), true, false).
final_goal(3, in_tower((block,11),(block,15)), false, true).
final_goal(3, in_tower((block,11),(block,15)), true, false).
final_goal(3, in_tower((block,11),(block,16)), false, true).
final_goal(3, in_tower((block,11),(block,16)), true, false).
final_goal(3, in_tower((block,11),(block,17)), false, true).
final_goal(3, in_tower((block,11),(block,17)), true, false).
final_goal(3, in_tower((block,11),(block,18)), false, true).
final_goal(3, in_tower((block,11),(block,18)), true, false).
final_goal(3, in_tower((block,11),(block,2)), false, true).
final_goal(3, in_tower((block,11),(block,2)), true, false).
final_goal(3, in_tower((block,11),(block,3)), false, true).
final_goal(3, in_tower((block,11),(block,3)), true, false).
final_goal(3, in_tower((block,11),(block,4)), false, true).
final_goal(3, in_tower((block,11),(block,4)), true, false).
final_goal(3, in_tower((block,11),(block,5)), false, true).
final_goal(3, in_tower((block,11),(block,5)), true, false).
final_goal(3, in_tower((block,11),(block,6)), false, true).
final_goal(3, in_tower((block,11),(block,6)), true, false).
final_goal(3, in_tower((block,11),(block,7)), false, true).
final_goal(3, in_tower((block,11),(block,7)), true, false).
final_goal(3, in_tower((block,11),(block,8)), false, true).
final_goal(3, in_tower((block,11),(block,8)), true, false).
final_goal(3, in_tower((block,11),(block,9)), false, true).
final_goal(3, in_tower((block,11),(block,9)), true, false).
final_goal(3, in_tower((block,12),(block,1)), false, true).
final_goal(3, in_tower((block,12),(block,1)), true, false).
final_goal(3, in_tower((block,12),(block,10)), false, false).
final_goal(3, in_tower((block,12),(block,10)), true, true).
final_goal(3, in_tower((block,12),(block,11)), false, false).
final_goal(3, in_tower((block,12),(block,11)), true, true).
final_goal(3, in_tower((block,12),(block,12)), false, false).
final_goal(3, in_tower((block,12),(block,12)), true, true).
final_goal(3, in_tower((block,12),(block,13)), false, true).
final_goal(3, in_tower((block,12),(block,13)), true, false).
final_goal(3, in_tower((block,12),(block,14)), false, true).
final_goal(3, in_tower((block,12),(block,14)), true, false).
final_goal(3, in_tower((block,12),(block,15)), false, true).
final_goal(3, in_tower((block,12),(block,15)), true, false).
final_goal(3, in_tower((block,12),(block,16)), false, true).
final_goal(3, in_tower((block,12),(block,16)), true, false).
final_goal(3, in_tower((block,12),(block,17)), false, true).
final_goal(3, in_tower((block,12),(block,17)), true, false).
final_goal(3, in_tower((block,12),(block,18)), false, true).
final_goal(3, in_tower((block,12),(block,18)), true, false).
final_goal(3, in_tower((block,12),(block,2)), false, true).
final_goal(3, in_tower((block,12),(block,2)), true, false).
final_goal(3, in_tower((block,12),(block,3)), false, true).
final_goal(3, in_tower((block,12),(block,3)), true, false).
final_goal(3, in_tower((block,12),(block,4)), false, true).
final_goal(3, in_tower((block,12),(block,4)), true, false).
final_goal(3, in_tower((block,12),(block,5)), false, true).
final_goal(3, in_tower((block,12),(block,5)), true, false).
final_goal(3, in_tower((block,12),(block,6)), false, true).
final_goal(3, in_tower((block,12),(block,6)), true, false).
final_goal(3, in_tower((block,12),(block,7)), false, true).
final_goal(3, in_tower((block,12),(block,7)), true, false).
final_goal(3, in_tower((block,12),(block,8)), false, true).
final_goal(3, in_tower((block,12),(block,8)), true, false).
final_goal(3, in_tower((block,12),(block,9)), false, true).
final_goal(3, in_tower((block,12),(block,9)), true, false).
final_goal(3, in_tower((block,13),(block,1)), false, true).
final_goal(3, in_tower((block,13),(block,1)), true, false).
final_goal(3, in_tower((block,13),(block,10)), false, true).
final_goal(3, in_tower((block,13),(block,10)), true, false).
final_goal(3, in_tower((block,13),(block,11)), false, true).
final_goal(3, in_tower((block,13),(block,11)), true, false).
final_goal(3, in_tower((block,13),(block,12)), false, true).
final_goal(3, in_tower((block,13),(block,12)), true, false).
final_goal(3, in_tower((block,13),(block,13)), false, true).
final_goal(3, in_tower((block,13),(block,13)), true, false).
final_goal(3, in_tower((block,13),(block,14)), false, true).
final_goal(3, in_tower((block,13),(block,14)), true, false).
final_goal(3, in_tower((block,13),(block,15)), false, true).
final_goal(3, in_tower((block,13),(block,15)), true, false).
final_goal(3, in_tower((block,13),(block,16)), false, true).
final_goal(3, in_tower((block,13),(block,16)), true, false).
final_goal(3, in_tower((block,13),(block,17)), false, true).
final_goal(3, in_tower((block,13),(block,17)), true, false).
final_goal(3, in_tower((block,13),(block,18)), false, true).
final_goal(3, in_tower((block,13),(block,18)), true, false).
final_goal(3, in_tower((block,13),(block,2)), false, true).
final_goal(3, in_tower((block,13),(block,2)), true, false).
final_goal(3, in_tower((block,13),(block,3)), false, true).
final_goal(3, in_tower((block,13),(block,3)), true, false).
final_goal(3, in_tower((block,13),(block,4)), false, true).
final_goal(3, in_tower((block,13),(block,4)), true, false).
final_goal(3, in_tower((block,13),(block,5)), false, true).
final_goal(3, in_tower((block,13),(block,5)), true, false).
final_goal(3, in_tower((block,13),(block,6)), false, true).
final_goal(3, in_tower((block,13),(block,6)), true, false).
final_goal(3, in_tower((block,13),(block,7)), false, true).
final_goal(3, in_tower((block,13),(block,7)), true, false).
final_goal(3, in_tower((block,13),(block,8)), false, true).
final_goal(3, in_tower((block,13),(block,8)), true, false).
final_goal(3, in_tower((block,13),(block,9)), false, true).
final_goal(3, in_tower((block,13),(block,9)), true, false).
final_goal(3, in_tower((block,14),(block,1)), false, true).
final_goal(3, in_tower((block,14),(block,1)), true, false).
final_goal(3, in_tower((block,14),(block,10)), false, true).
final_goal(3, in_tower((block,14),(block,10)), true, false).
final_goal(3, in_tower((block,14),(block,11)), false, true).
final_goal(3, in_tower((block,14),(block,11)), true, false).
final_goal(3, in_tower((block,14),(block,12)), false, true).
final_goal(3, in_tower((block,14),(block,12)), true, false).
final_goal(3, in_tower((block,14),(block,13)), false, true).
final_goal(3, in_tower((block,14),(block,13)), true, false).
final_goal(3, in_tower((block,14),(block,14)), false, true).
final_goal(3, in_tower((block,14),(block,14)), true, false).
final_goal(3, in_tower((block,14),(block,15)), false, true).
final_goal(3, in_tower((block,14),(block,15)), true, false).
final_goal(3, in_tower((block,14),(block,16)), false, true).
final_goal(3, in_tower((block,14),(block,16)), true, false).
final_goal(3, in_tower((block,14),(block,17)), false, true).
final_goal(3, in_tower((block,14),(block,17)), true, false).
final_goal(3, in_tower((block,14),(block,18)), false, true).
final_goal(3, in_tower((block,14),(block,18)), true, false).
final_goal(3, in_tower((block,14),(block,2)), false, true).
final_goal(3, in_tower((block,14),(block,2)), true, false).
final_goal(3, in_tower((block,14),(block,3)), false, true).
final_goal(3, in_tower((block,14),(block,3)), true, false).
final_goal(3, in_tower((block,14),(block,4)), false, true).
final_goal(3, in_tower((block,14),(block,4)), true, false).
final_goal(3, in_tower((block,14),(block,5)), false, true).
final_goal(3, in_tower((block,14),(block,5)), true, false).
final_goal(3, in_tower((block,14),(block,6)), false, true).
final_goal(3, in_tower((block,14),(block,6)), true, false).
final_goal(3, in_tower((block,14),(block,7)), false, true).
final_goal(3, in_tower((block,14),(block,7)), true, false).
final_goal(3, in_tower((block,14),(block,8)), false, true).
final_goal(3, in_tower((block,14),(block,8)), true, false).
final_goal(3, in_tower((block,14),(block,9)), false, true).
final_goal(3, in_tower((block,14),(block,9)), true, false).
final_goal(3, in_tower((block,15),(block,1)), false, true).
final_goal(3, in_tower((block,15),(block,1)), true, false).
final_goal(3, in_tower((block,15),(block,10)), false, true).
final_goal(3, in_tower((block,15),(block,10)), true, false).
final_goal(3, in_tower((block,15),(block,11)), false, true).
final_goal(3, in_tower((block,15),(block,11)), true, false).
final_goal(3, in_tower((block,15),(block,12)), false, true).
final_goal(3, in_tower((block,15),(block,12)), true, false).
final_goal(3, in_tower((block,15),(block,13)), false, false).
final_goal(3, in_tower((block,15),(block,13)), true, true).
final_goal(3, in_tower((block,15),(block,14)), false, false).
final_goal(3, in_tower((block,15),(block,14)), true, true).
final_goal(3, in_tower((block,15),(block,15)), false, false).
final_goal(3, in_tower((block,15),(block,15)), true, true).
final_goal(3, in_tower((block,15),(block,16)), false, true).
final_goal(3, in_tower((block,15),(block,16)), true, false).
final_goal(3, in_tower((block,15),(block,17)), false, true).
final_goal(3, in_tower((block,15),(block,17)), true, false).
final_goal(3, in_tower((block,15),(block,18)), false, true).
final_goal(3, in_tower((block,15),(block,18)), true, false).
final_goal(3, in_tower((block,15),(block,2)), false, true).
final_goal(3, in_tower((block,15),(block,2)), true, false).
final_goal(3, in_tower((block,15),(block,3)), false, true).
final_goal(3, in_tower((block,15),(block,3)), true, false).
final_goal(3, in_tower((block,15),(block,4)), false, true).
final_goal(3, in_tower((block,15),(block,4)), true, false).
final_goal(3, in_tower((block,15),(block,5)), false, true).
final_goal(3, in_tower((block,15),(block,5)), true, false).
final_goal(3, in_tower((block,15),(block,6)), false, true).
final_goal(3, in_tower((block,15),(block,6)), true, false).
final_goal(3, in_tower((block,15),(block,7)), false, true).
final_goal(3, in_tower((block,15),(block,7)), true, false).
final_goal(3, in_tower((block,15),(block,8)), false, true).
final_goal(3, in_tower((block,15),(block,8)), true, false).
final_goal(3, in_tower((block,15),(block,9)), false, true).
final_goal(3, in_tower((block,15),(block,9)), true, false).
final_goal(3, in_tower((block,16),(block,1)), false, true).
final_goal(3, in_tower((block,16),(block,1)), true, false).
final_goal(3, in_tower((block,16),(block,10)), false, true).
final_goal(3, in_tower((block,16),(block,10)), true, false).
final_goal(3, in_tower((block,16),(block,11)), false, true).
final_goal(3, in_tower((block,16),(block,11)), true, false).
final_goal(3, in_tower((block,16),(block,12)), false, true).
final_goal(3, in_tower((block,16),(block,12)), true, false).
final_goal(3, in_tower((block,16),(block,13)), false, true).
final_goal(3, in_tower((block,16),(block,13)), true, false).
final_goal(3, in_tower((block,16),(block,14)), false, true).
final_goal(3, in_tower((block,16),(block,14)), true, false).
final_goal(3, in_tower((block,16),(block,15)), false, true).
final_goal(3, in_tower((block,16),(block,15)), true, false).
final_goal(3, in_tower((block,16),(block,16)), false, true).
final_goal(3, in_tower((block,16),(block,16)), true, false).
final_goal(3, in_tower((block,16),(block,17)), false, true).
final_goal(3, in_tower((block,16),(block,17)), true, false).
final_goal(3, in_tower((block,16),(block,18)), false, true).
final_goal(3, in_tower((block,16),(block,18)), true, false).
final_goal(3, in_tower((block,16),(block,2)), false, true).
final_goal(3, in_tower((block,16),(block,2)), true, false).
final_goal(3, in_tower((block,16),(block,3)), false, true).
final_goal(3, in_tower((block,16),(block,3)), true, false).
final_goal(3, in_tower((block,16),(block,4)), false, true).
final_goal(3, in_tower((block,16),(block,4)), true, false).
final_goal(3, in_tower((block,16),(block,5)), false, true).
final_goal(3, in_tower((block,16),(block,5)), true, false).
final_goal(3, in_tower((block,16),(block,6)), false, true).
final_goal(3, in_tower((block,16),(block,6)), true, false).
final_goal(3, in_tower((block,16),(block,7)), false, true).
final_goal(3, in_tower((block,16),(block,7)), true, false).
final_goal(3, in_tower((block,16),(block,8)), false, true).
final_goal(3, in_tower((block,16),(block,8)), true, false).
final_goal(3, in_tower((block,16),(block,9)), false, true).
final_goal(3, in_tower((block,16),(block,9)), true, false).
final_goal(3, in_tower((block,17),(block,1)), false, true).
final_goal(3, in_tower((block,17),(block,1)), true, false).
final_goal(3, in_tower((block,17),(block,10)), false, true).
final_goal(3, in_tower((block,17),(block,10)), true, false).
final_goal(3, in_tower((block,17),(block,11)), false, true).
final_goal(3, in_tower((block,17),(block,11)), true, false).
final_goal(3, in_tower((block,17),(block,12)), false, true).
final_goal(3, in_tower((block,17),(block,12)), true, false).
final_goal(3, in_tower((block,17),(block,13)), false, true).
final_goal(3, in_tower((block,17),(block,13)), true, false).
final_goal(3, in_tower((block,17),(block,14)), false, true).
final_goal(3, in_tower((block,17),(block,14)), true, false).
final_goal(3, in_tower((block,17),(block,15)), false, true).
final_goal(3, in_tower((block,17),(block,15)), true, false).
final_goal(3, in_tower((block,17),(block,16)), false, true).
final_goal(3, in_tower((block,17),(block,16)), true, false).
final_goal(3, in_tower((block,17),(block,17)), false, true).
final_goal(3, in_tower((block,17),(block,17)), true, false).
final_goal(3, in_tower((block,17),(block,18)), false, true).
final_goal(3, in_tower((block,17),(block,18)), true, false).
final_goal(3, in_tower((block,17),(block,2)), false, true).
final_goal(3, in_tower((block,17),(block,2)), true, false).
final_goal(3, in_tower((block,17),(block,3)), false, true).
final_goal(3, in_tower((block,17),(block,3)), true, false).
final_goal(3, in_tower((block,17),(block,4)), false, true).
final_goal(3, in_tower((block,17),(block,4)), true, false).
final_goal(3, in_tower((block,17),(block,5)), false, true).
final_goal(3, in_tower((block,17),(block,5)), true, false).
final_goal(3, in_tower((block,17),(block,6)), false, true).
final_goal(3, in_tower((block,17),(block,6)), true, false).
final_goal(3, in_tower((block,17),(block,7)), false, true).
final_goal(3, in_tower((block,17),(block,7)), true, false).
final_goal(3, in_tower((block,17),(block,8)), false, true).
final_goal(3, in_tower((block,17),(block,8)), true, false).
final_goal(3, in_tower((block,17),(block,9)), false, true).
final_goal(3, in_tower((block,17),(block,9)), true, false).
final_goal(3, in_tower((block,18),(block,1)), false, true).
final_goal(3, in_tower((block,18),(block,1)), true, false).
final_goal(3, in_tower((block,18),(block,10)), false, true).
final_goal(3, in_tower((block,18),(block,10)), true, false).
final_goal(3, in_tower((block,18),(block,11)), false, true).
final_goal(3, in_tower((block,18),(block,11)), true, false).
final_goal(3, in_tower((block,18),(block,12)), false, true).
final_goal(3, in_tower((block,18),(block,12)), true, false).
final_goal(3, in_tower((block,18),(block,13)), false, true).
final_goal(3, in_tower((block,18),(block,13)), true, false).
final_goal(3, in_tower((block,18),(block,14)), false, true).
final_goal(3, in_tower((block,18),(block,14)), true, false).
final_goal(3, in_tower((block,18),(block,15)), false, true).
final_goal(3, in_tower((block,18),(block,15)), true, false).
final_goal(3, in_tower((block,18),(block,16)), false, false).
final_goal(3, in_tower((block,18),(block,16)), true, true).
final_goal(3, in_tower((block,18),(block,17)), false, false).
final_goal(3, in_tower((block,18),(block,17)), true, true).
final_goal(3, in_tower((block,18),(block,18)), false, false).
final_goal(3, in_tower((block,18),(block,18)), true, true).
final_goal(3, in_tower((block,18),(block,2)), false, true).
final_goal(3, in_tower((block,18),(block,2)), true, false).
final_goal(3, in_tower((block,18),(block,3)), false, true).
final_goal(3, in_tower((block,18),(block,3)), true, false).
final_goal(3, in_tower((block,18),(block,4)), false, true).
final_goal(3, in_tower((block,18),(block,4)), true, false).
final_goal(3, in_tower((block,18),(block,5)), false, true).
final_goal(3, in_tower((block,18),(block,5)), true, false).
final_goal(3, in_tower((block,18),(block,6)), false, true).
final_goal(3, in_tower((block,18),(block,6)), true, false).
final_goal(3, in_tower((block,18),(block,7)), false, true).
final_goal(3, in_tower((block,18),(block,7)), true, false).
final_goal(3, in_tower((block,18),(block,8)), false, true).
final_goal(3, in_tower((block,18),(block,8)), true, false).
final_goal(3, in_tower((block,18),(block,9)), false, true).
final_goal(3, in_tower((block,18),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,10)), false, true).
final_goal(3, in_tower((block,2),(block,10)), true, false).
final_goal(3, in_tower((block,2),(block,11)), false, true).
final_goal(3, in_tower((block,2),(block,11)), true, false).
final_goal(3, in_tower((block,2),(block,12)), false, true).
final_goal(3, in_tower((block,2),(block,12)), true, false).
final_goal(3, in_tower((block,2),(block,13)), false, true).
final_goal(3, in_tower((block,2),(block,13)), true, false).
final_goal(3, in_tower((block,2),(block,14)), false, true).
final_goal(3, in_tower((block,2),(block,14)), true, false).
final_goal(3, in_tower((block,2),(block,15)), false, true).
final_goal(3, in_tower((block,2),(block,15)), true, false).
final_goal(3, in_tower((block,2),(block,16)), false, true).
final_goal(3, in_tower((block,2),(block,16)), true, false).
final_goal(3, in_tower((block,2),(block,17)), false, true).
final_goal(3, in_tower((block,2),(block,17)), true, false).
final_goal(3, in_tower((block,2),(block,18)), false, true).
final_goal(3, in_tower((block,2),(block,18)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,10)), false, true).
final_goal(3, in_tower((block,3),(block,10)), true, false).
final_goal(3, in_tower((block,3),(block,11)), false, true).
final_goal(3, in_tower((block,3),(block,11)), true, false).
final_goal(3, in_tower((block,3),(block,12)), false, true).
final_goal(3, in_tower((block,3),(block,12)), true, false).
final_goal(3, in_tower((block,3),(block,13)), false, true).
final_goal(3, in_tower((block,3),(block,13)), true, false).
final_goal(3, in_tower((block,3),(block,14)), false, true).
final_goal(3, in_tower((block,3),(block,14)), true, false).
final_goal(3, in_tower((block,3),(block,15)), false, true).
final_goal(3, in_tower((block,3),(block,15)), true, false).
final_goal(3, in_tower((block,3),(block,16)), false, true).
final_goal(3, in_tower((block,3),(block,16)), true, false).
final_goal(3, in_tower((block,3),(block,17)), false, true).
final_goal(3, in_tower((block,3),(block,17)), true, false).
final_goal(3, in_tower((block,3),(block,18)), false, true).
final_goal(3, in_tower((block,3),(block,18)), true, false).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,10)), false, true).
final_goal(3, in_tower((block,4),(block,10)), true, false).
final_goal(3, in_tower((block,4),(block,11)), false, true).
final_goal(3, in_tower((block,4),(block,11)), true, false).
final_goal(3, in_tower((block,4),(block,12)), false, true).
final_goal(3, in_tower((block,4),(block,12)), true, false).
final_goal(3, in_tower((block,4),(block,13)), false, true).
final_goal(3, in_tower((block,4),(block,13)), true, false).
final_goal(3, in_tower((block,4),(block,14)), false, true).
final_goal(3, in_tower((block,4),(block,14)), true, false).
final_goal(3, in_tower((block,4),(block,15)), false, true).
final_goal(3, in_tower((block,4),(block,15)), true, false).
final_goal(3, in_tower((block,4),(block,16)), false, true).
final_goal(3, in_tower((block,4),(block,16)), true, false).
final_goal(3, in_tower((block,4),(block,17)), false, true).
final_goal(3, in_tower((block,4),(block,17)), true, false).
final_goal(3, in_tower((block,4),(block,18)), false, true).
final_goal(3, in_tower((block,4),(block,18)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,10)), false, true).
final_goal(3, in_tower((block,5),(block,10)), true, false).
final_goal(3, in_tower((block,5),(block,11)), false, true).
final_goal(3, in_tower((block,5),(block,11)), true, false).
final_goal(3, in_tower((block,5),(block,12)), false, true).
final_goal(3, in_tower((block,5),(block,12)), true, false).
final_goal(3, in_tower((block,5),(block,13)), false, true).
final_goal(3, in_tower((block,5),(block,13)), true, false).
final_goal(3, in_tower((block,5),(block,14)), false, true).
final_goal(3, in_tower((block,5),(block,14)), true, false).
final_goal(3, in_tower((block,5),(block,15)), false, true).
final_goal(3, in_tower((block,5),(block,15)), true, false).
final_goal(3, in_tower((block,5),(block,16)), false, true).
final_goal(3, in_tower((block,5),(block,16)), true, false).
final_goal(3, in_tower((block,5),(block,17)), false, true).
final_goal(3, in_tower((block,5),(block,17)), true, false).
final_goal(3, in_tower((block,5),(block,18)), false, true).
final_goal(3, in_tower((block,5),(block,18)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,10)), false, true).
final_goal(3, in_tower((block,6),(block,10)), true, false).
final_goal(3, in_tower((block,6),(block,11)), false, true).
final_goal(3, in_tower((block,6),(block,11)), true, false).
final_goal(3, in_tower((block,6),(block,12)), false, true).
final_goal(3, in_tower((block,6),(block,12)), true, false).
final_goal(3, in_tower((block,6),(block,13)), false, true).
final_goal(3, in_tower((block,6),(block,13)), true, false).
final_goal(3, in_tower((block,6),(block,14)), false, true).
final_goal(3, in_tower((block,6),(block,14)), true, false).
final_goal(3, in_tower((block,6),(block,15)), false, true).
final_goal(3, in_tower((block,6),(block,15)), true, false).
final_goal(3, in_tower((block,6),(block,16)), false, true).
final_goal(3, in_tower((block,6),(block,16)), true, false).
final_goal(3, in_tower((block,6),(block,17)), false, true).
final_goal(3, in_tower((block,6),(block,17)), true, false).
final_goal(3, in_tower((block,6),(block,18)), false, true).
final_goal(3, in_tower((block,6),(block,18)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,10)), false, true).
final_goal(3, in_tower((block,7),(block,10)), true, false).
final_goal(3, in_tower((block,7),(block,11)), false, true).
final_goal(3, in_tower((block,7),(block,11)), true, false).
final_goal(3, in_tower((block,7),(block,12)), false, true).
final_goal(3, in_tower((block,7),(block,12)), true, false).
final_goal(3, in_tower((block,7),(block,13)), false, true).
final_goal(3, in_tower((block,7),(block,13)), true, false).
final_goal(3, in_tower((block,7),(block,14)), false, true).
final_goal(3, in_tower((block,7),(block,14)), true, false).
final_goal(3, in_tower((block,7),(block,15)), false, true).
final_goal(3, in_tower((block,7),(block,15)), true, false).
final_goal(3, in_tower((block,7),(block,16)), false, true).
final_goal(3, in_tower((block,7),(block,16)), true, false).
final_goal(3, in_tower((block,7),(block,17)), false, true).
final_goal(3, in_tower((block,7),(block,17)), true, false).
final_goal(3, in_tower((block,7),(block,18)), false, true).
final_goal(3, in_tower((block,7),(block,18)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,10)), false, true).
final_goal(3, in_tower((block,8),(block,10)), true, false).
final_goal(3, in_tower((block,8),(block,11)), false, true).
final_goal(3, in_tower((block,8),(block,11)), true, false).
final_goal(3, in_tower((block,8),(block,12)), false, true).
final_goal(3, in_tower((block,8),(block,12)), true, false).
final_goal(3, in_tower((block,8),(block,13)), false, true).
final_goal(3, in_tower((block,8),(block,13)), true, false).
final_goal(3, in_tower((block,8),(block,14)), false, true).
final_goal(3, in_tower((block,8),(block,14)), true, false).
final_goal(3, in_tower((block,8),(block,15)), false, true).
final_goal(3, in_tower((block,8),(block,15)), true, false).
final_goal(3, in_tower((block,8),(block,16)), false, true).
final_goal(3, in_tower((block,8),(block,16)), true, false).
final_goal(3, in_tower((block,8),(block,17)), false, true).
final_goal(3, in_tower((block,8),(block,17)), true, false).
final_goal(3, in_tower((block,8),(block,18)), false, true).
final_goal(3, in_tower((block,8),(block,18)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,10)), false, true).
final_goal(3, in_tower((block,9),(block,10)), true, false).
final_goal(3, in_tower((block,9),(block,11)), false, true).
final_goal(3, in_tower((block,9),(block,11)), true, false).
final_goal(3, in_tower((block,9),(block,12)), false, true).
final_goal(3, in_tower((block,9),(block,12)), true, false).
final_goal(3, in_tower((block,9),(block,13)), false, true).
final_goal(3, in_tower((block,9),(block,13)), true, false).
final_goal(3, in_tower((block,9),(block,14)), false, true).
final_goal(3, in_tower((block,9),(block,14)), true, false).
final_goal(3, in_tower((block,9),(block,15)), false, true).
final_goal(3, in_tower((block,9),(block,15)), true, false).
final_goal(3, in_tower((block,9),(block,16)), false, true).
final_goal(3, in_tower((block,9),(block,16)), true, false).
final_goal(3, in_tower((block,9),(block,17)), false, true).
final_goal(3, in_tower((block,9),(block,17)), true, false).
final_goal(3, in_tower((block,9),(block,18)), false, true).
final_goal(3, in_tower((block,9),(block,18)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,10), false).
final_goal(3, on((block,1)), (block,11), false).
final_goal(3, on((block,1)), (block,12), false).
final_goal(3, on((block,1)), (block,13), false).
final_goal(3, on((block,1)), (block,14), false).
final_goal(3, on((block,1)), (block,15), false).
final_goal(3, on((block,1)), (block,16), false).
final_goal(3, on((block,1)), (block,17), false).
final_goal(3, on((block,1)), (block,18), false).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_1_table, false).
final_goal(3, on((block,1)), puzzle_room_2_table, false).
final_goal(3, on((block,10)), (block,1), false).
final_goal(3, on((block,10)), (block,11), true).
final_goal(3, on((block,10)), (block,12), false).
final_goal(3, on((block,10)), (block,13), false).
final_goal(3, on((block,10)), (block,14), false).
final_goal(3, on((block,10)), (block,15), false).
final_goal(3, on((block,10)), (block,16), false).
final_goal(3, on((block,10)), (block,17), false).
final_goal(3, on((block,10)), (block,18), false).
final_goal(3, on((block,10)), (block,2), false).
final_goal(3, on((block,10)), (block,3), false).
final_goal(3, on((block,10)), (block,4), false).
final_goal(3, on((block,10)), (block,5), false).
final_goal(3, on((block,10)), (block,6), false).
final_goal(3, on((block,10)), (block,7), false).
final_goal(3, on((block,10)), (block,8), false).
final_goal(3, on((block,10)), (block,9), false).
final_goal(3, on((block,10)), nothing, false).
final_goal(3, on((block,10)), puzzle_room_1_table, false).
final_goal(3, on((block,10)), puzzle_room_2_table, false).
final_goal(3, on((block,11)), (block,1), false).
final_goal(3, on((block,11)), (block,10), false).
final_goal(3, on((block,11)), (block,12), true).
final_goal(3, on((block,11)), (block,13), false).
final_goal(3, on((block,11)), (block,14), false).
final_goal(3, on((block,11)), (block,15), false).
final_goal(3, on((block,11)), (block,16), false).
final_goal(3, on((block,11)), (block,17), false).
final_goal(3, on((block,11)), (block,18), false).
final_goal(3, on((block,11)), (block,2), false).
final_goal(3, on((block,11)), (block,3), false).
final_goal(3, on((block,11)), (block,4), false).
final_goal(3, on((block,11)), (block,5), false).
final_goal(3, on((block,11)), (block,6), false).
final_goal(3, on((block,11)), (block,7), false).
final_goal(3, on((block,11)), (block,8), false).
final_goal(3, on((block,11)), (block,9), false).
final_goal(3, on((block,11)), nothing, false).
final_goal(3, on((block,11)), puzzle_room_1_table, false).
final_goal(3, on((block,11)), puzzle_room_2_table, false).
final_goal(3, on((block,12)), (block,1), false).
final_goal(3, on((block,12)), (block,10), false).
final_goal(3, on((block,12)), (block,11), false).
final_goal(3, on((block,12)), (block,13), false).
final_goal(3, on((block,12)), (block,14), false).
final_goal(3, on((block,12)), (block,15), false).
final_goal(3, on((block,12)), (block,16), false).
final_goal(3, on((block,12)), (block,17), false).
final_goal(3, on((block,12)), (block,18), false).
final_goal(3, on((block,12)), (block,2), false).
final_goal(3, on((block,12)), (block,3), false).
final_goal(3, on((block,12)), (block,4), false).
final_goal(3, on((block,12)), (block,5), false).
final_goal(3, on((block,12)), (block,6), false).
final_goal(3, on((block,12)), (block,7), false).
final_goal(3, on((block,12)), (block,8), false).
final_goal(3, on((block,12)), (block,9), false).
final_goal(3, on((block,12)), nothing, false).
final_goal(3, on((block,12)), puzzle_room_1_table, false).
final_goal(3, on((block,12)), puzzle_room_2_table, true).
final_goal(3, on((block,13)), (block,1), false).
final_goal(3, on((block,13)), (block,10), false).
final_goal(3, on((block,13)), (block,11), false).
final_goal(3, on((block,13)), (block,12), false).
final_goal(3, on((block,13)), (block,14), true).
final_goal(3, on((block,13)), (block,15), false).
final_goal(3, on((block,13)), (block,16), false).
final_goal(3, on((block,13)), (block,17), false).
final_goal(3, on((block,13)), (block,18), false).
final_goal(3, on((block,13)), (block,2), false).
final_goal(3, on((block,13)), (block,3), false).
final_goal(3, on((block,13)), (block,4), false).
final_goal(3, on((block,13)), (block,5), false).
final_goal(3, on((block,13)), (block,6), false).
final_goal(3, on((block,13)), (block,7), false).
final_goal(3, on((block,13)), (block,8), false).
final_goal(3, on((block,13)), (block,9), false).
final_goal(3, on((block,13)), nothing, false).
final_goal(3, on((block,13)), puzzle_room_1_table, false).
final_goal(3, on((block,13)), puzzle_room_2_table, false).
final_goal(3, on((block,14)), (block,1), false).
final_goal(3, on((block,14)), (block,10), false).
final_goal(3, on((block,14)), (block,11), false).
final_goal(3, on((block,14)), (block,12), false).
final_goal(3, on((block,14)), (block,13), false).
final_goal(3, on((block,14)), (block,15), true).
final_goal(3, on((block,14)), (block,16), false).
final_goal(3, on((block,14)), (block,17), false).
final_goal(3, on((block,14)), (block,18), false).
final_goal(3, on((block,14)), (block,2), false).
final_goal(3, on((block,14)), (block,3), false).
final_goal(3, on((block,14)), (block,4), false).
final_goal(3, on((block,14)), (block,5), false).
final_goal(3, on((block,14)), (block,6), false).
final_goal(3, on((block,14)), (block,7), false).
final_goal(3, on((block,14)), (block,8), false).
final_goal(3, on((block,14)), (block,9), false).
final_goal(3, on((block,14)), nothing, false).
final_goal(3, on((block,14)), puzzle_room_1_table, false).
final_goal(3, on((block,14)), puzzle_room_2_table, false).
final_goal(3, on((block,15)), (block,1), false).
final_goal(3, on((block,15)), (block,10), false).
final_goal(3, on((block,15)), (block,11), false).
final_goal(3, on((block,15)), (block,12), false).
final_goal(3, on((block,15)), (block,13), false).
final_goal(3, on((block,15)), (block,14), false).
final_goal(3, on((block,15)), (block,16), false).
final_goal(3, on((block,15)), (block,17), false).
final_goal(3, on((block,15)), (block,18), false).
final_goal(3, on((block,15)), (block,2), false).
final_goal(3, on((block,15)), (block,3), false).
final_goal(3, on((block,15)), (block,4), false).
final_goal(3, on((block,15)), (block,5), false).
final_goal(3, on((block,15)), (block,6), false).
final_goal(3, on((block,15)), (block,7), false).
final_goal(3, on((block,15)), (block,8), false).
final_goal(3, on((block,15)), (block,9), false).
final_goal(3, on((block,15)), nothing, false).
final_goal(3, on((block,15)), puzzle_room_1_table, false).
final_goal(3, on((block,15)), puzzle_room_2_table, true).
final_goal(3, on((block,16)), (block,1), false).
final_goal(3, on((block,16)), (block,10), false).
final_goal(3, on((block,16)), (block,11), false).
final_goal(3, on((block,16)), (block,12), false).
final_goal(3, on((block,16)), (block,13), false).
final_goal(3, on((block,16)), (block,14), false).
final_goal(3, on((block,16)), (block,15), false).
final_goal(3, on((block,16)), (block,17), true).
final_goal(3, on((block,16)), (block,18), false).
final_goal(3, on((block,16)), (block,2), false).
final_goal(3, on((block,16)), (block,3), false).
final_goal(3, on((block,16)), (block,4), false).
final_goal(3, on((block,16)), (block,5), false).
final_goal(3, on((block,16)), (block,6), false).
final_goal(3, on((block,16)), (block,7), false).
final_goal(3, on((block,16)), (block,8), false).
final_goal(3, on((block,16)), (block,9), false).
final_goal(3, on((block,16)), nothing, false).
final_goal(3, on((block,16)), puzzle_room_1_table, false).
final_goal(3, on((block,16)), puzzle_room_2_table, false).
final_goal(3, on((block,17)), (block,1), false).
final_goal(3, on((block,17)), (block,10), false).
final_goal(3, on((block,17)), (block,11), false).
final_goal(3, on((block,17)), (block,12), false).
final_goal(3, on((block,17)), (block,13), false).
final_goal(3, on((block,17)), (block,14), false).
final_goal(3, on((block,17)), (block,15), false).
final_goal(3, on((block,17)), (block,16), false).
final_goal(3, on((block,17)), (block,18), true).
final_goal(3, on((block,17)), (block,2), false).
final_goal(3, on((block,17)), (block,3), false).
final_goal(3, on((block,17)), (block,4), false).
final_goal(3, on((block,17)), (block,5), false).
final_goal(3, on((block,17)), (block,6), false).
final_goal(3, on((block,17)), (block,7), false).
final_goal(3, on((block,17)), (block,8), false).
final_goal(3, on((block,17)), (block,9), false).
final_goal(3, on((block,17)), nothing, false).
final_goal(3, on((block,17)), puzzle_room_1_table, false).
final_goal(3, on((block,17)), puzzle_room_2_table, false).
final_goal(3, on((block,18)), (block,1), false).
final_goal(3, on((block,18)), (block,10), false).
final_goal(3, on((block,18)), (block,11), false).
final_goal(3, on((block,18)), (block,12), false).
final_goal(3, on((block,18)), (block,13), false).
final_goal(3, on((block,18)), (block,14), false).
final_goal(3, on((block,18)), (block,15), false).
final_goal(3, on((block,18)), (block,16), false).
final_goal(3, on((block,18)), (block,17), false).
final_goal(3, on((block,18)), (block,2), false).
final_goal(3, on((block,18)), (block,3), false).
final_goal(3, on((block,18)), (block,4), false).
final_goal(3, on((block,18)), (block,5), false).
final_goal(3, on((block,18)), (block,6), false).
final_goal(3, on((block,18)), (block,7), false).
final_goal(3, on((block,18)), (block,8), false).
final_goal(3, on((block,18)), (block,9), false).
final_goal(3, on((block,18)), nothing, false).
final_goal(3, on((block,18)), puzzle_room_1_table, false).
final_goal(3, on((block,18)), puzzle_room_2_table, true).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,10), false).
final_goal(3, on((block,2)), (block,11), false).
final_goal(3, on((block,2)), (block,12), false).
final_goal(3, on((block,2)), (block,13), false).
final_goal(3, on((block,2)), (block,14), false).
final_goal(3, on((block,2)), (block,15), false).
final_goal(3, on((block,2)), (block,16), false).
final_goal(3, on((block,2)), (block,17), false).
final_goal(3, on((block,2)), (block,18), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_1_table, false).
final_goal(3, on((block,2)), puzzle_room_2_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,10), false).
final_goal(3, on((block,3)), (block,11), false).
final_goal(3, on((block,3)), (block,12), false).
final_goal(3, on((block,3)), (block,13), false).
final_goal(3, on((block,3)), (block,14), false).
final_goal(3, on((block,3)), (block,15), false).
final_goal(3, on((block,3)), (block,16), false).
final_goal(3, on((block,3)), (block,17), false).
final_goal(3, on((block,3)), (block,18), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_1_table, true).
final_goal(3, on((block,3)), puzzle_room_2_table, false).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,10), false).
final_goal(3, on((block,4)), (block,11), false).
final_goal(3, on((block,4)), (block,12), false).
final_goal(3, on((block,4)), (block,13), false).
final_goal(3, on((block,4)), (block,14), false).
final_goal(3, on((block,4)), (block,15), false).
final_goal(3, on((block,4)), (block,16), false).
final_goal(3, on((block,4)), (block,17), false).
final_goal(3, on((block,4)), (block,18), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_1_table, false).
final_goal(3, on((block,4)), puzzle_room_2_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,10), false).
final_goal(3, on((block,5)), (block,11), false).
final_goal(3, on((block,5)), (block,12), false).
final_goal(3, on((block,5)), (block,13), false).
final_goal(3, on((block,5)), (block,14), false).
final_goal(3, on((block,5)), (block,15), false).
final_goal(3, on((block,5)), (block,16), false).
final_goal(3, on((block,5)), (block,17), false).
final_goal(3, on((block,5)), (block,18), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_1_table, false).
final_goal(3, on((block,5)), puzzle_room_2_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,10), false).
final_goal(3, on((block,6)), (block,11), false).
final_goal(3, on((block,6)), (block,12), false).
final_goal(3, on((block,6)), (block,13), false).
final_goal(3, on((block,6)), (block,14), false).
final_goal(3, on((block,6)), (block,15), false).
final_goal(3, on((block,6)), (block,16), false).
final_goal(3, on((block,6)), (block,17), false).
final_goal(3, on((block,6)), (block,18), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_1_table, true).
final_goal(3, on((block,6)), puzzle_room_2_table, false).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,10), false).
final_goal(3, on((block,7)), (block,11), false).
final_goal(3, on((block,7)), (block,12), false).
final_goal(3, on((block,7)), (block,13), false).
final_goal(3, on((block,7)), (block,14), false).
final_goal(3, on((block,7)), (block,15), false).
final_goal(3, on((block,7)), (block,16), false).
final_goal(3, on((block,7)), (block,17), false).
final_goal(3, on((block,7)), (block,18), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_1_table, false).
final_goal(3, on((block,7)), puzzle_room_2_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,10), false).
final_goal(3, on((block,8)), (block,11), false).
final_goal(3, on((block,8)), (block,12), false).
final_goal(3, on((block,8)), (block,13), false).
final_goal(3, on((block,8)), (block,14), false).
final_goal(3, on((block,8)), (block,15), false).
final_goal(3, on((block,8)), (block,16), false).
final_goal(3, on((block,8)), (block,17), false).
final_goal(3, on((block,8)), (block,18), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_1_table, false).
final_goal(3, on((block,8)), puzzle_room_2_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,10), false).
final_goal(3, on((block,9)), (block,11), false).
final_goal(3, on((block,9)), (block,12), false).
final_goal(3, on((block,9)), (block,13), false).
final_goal(3, on((block,9)), (block,14), false).
final_goal(3, on((block,9)), (block,15), false).
final_goal(3, on((block,9)), (block,16), false).
final_goal(3, on((block,9)), (block,17), false).
final_goal(3, on((block,9)), (block,18), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_1_table, true).
final_goal(3, on((block,9)), puzzle_room_2_table, false).
final_goal(3, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(3, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(3, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(3, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(3, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(3, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(3, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(3, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(3, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(3, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(3, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_2_table), true, false).
final_goal(4, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,10)), false, true).
final_goal(4, in_tower((block,1),(block,10)), true, false).
final_goal(4, in_tower((block,1),(block,11)), false, true).
final_goal(4, in_tower((block,1),(block,11)), true, false).
final_goal(4, in_tower((block,1),(block,12)), false, true).
final_goal(4, in_tower((block,1),(block,12)), true, false).
final_goal(4, in_tower((block,1),(block,13)), false, true).
final_goal(4, in_tower((block,1),(block,13)), true, false).
final_goal(4, in_tower((block,1),(block,14)), false, true).
final_goal(4, in_tower((block,1),(block,14)), true, false).
final_goal(4, in_tower((block,1),(block,15)), false, true).
final_goal(4, in_tower((block,1),(block,15)), true, false).
final_goal(4, in_tower((block,1),(block,16)), false, true).
final_goal(4, in_tower((block,1),(block,16)), true, false).
final_goal(4, in_tower((block,1),(block,17)), false, true).
final_goal(4, in_tower((block,1),(block,17)), true, false).
final_goal(4, in_tower((block,1),(block,18)), false, true).
final_goal(4, in_tower((block,1),(block,18)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,10),(block,1)), false, true).
final_goal(4, in_tower((block,10),(block,1)), true, false).
final_goal(4, in_tower((block,10),(block,10)), false, true).
final_goal(4, in_tower((block,10),(block,10)), true, false).
final_goal(4, in_tower((block,10),(block,11)), false, true).
final_goal(4, in_tower((block,10),(block,11)), true, false).
final_goal(4, in_tower((block,10),(block,12)), false, true).
final_goal(4, in_tower((block,10),(block,12)), true, false).
final_goal(4, in_tower((block,10),(block,13)), false, true).
final_goal(4, in_tower((block,10),(block,13)), true, false).
final_goal(4, in_tower((block,10),(block,14)), false, true).
final_goal(4, in_tower((block,10),(block,14)), true, false).
final_goal(4, in_tower((block,10),(block,15)), false, true).
final_goal(4, in_tower((block,10),(block,15)), true, false).
final_goal(4, in_tower((block,10),(block,16)), false, true).
final_goal(4, in_tower((block,10),(block,16)), true, false).
final_goal(4, in_tower((block,10),(block,17)), false, true).
final_goal(4, in_tower((block,10),(block,17)), true, false).
final_goal(4, in_tower((block,10),(block,18)), false, true).
final_goal(4, in_tower((block,10),(block,18)), true, false).
final_goal(4, in_tower((block,10),(block,2)), false, true).
final_goal(4, in_tower((block,10),(block,2)), true, false).
final_goal(4, in_tower((block,10),(block,3)), false, true).
final_goal(4, in_tower((block,10),(block,3)), true, false).
final_goal(4, in_tower((block,10),(block,4)), false, true).
final_goal(4, in_tower((block,10),(block,4)), true, false).
final_goal(4, in_tower((block,10),(block,5)), false, true).
final_goal(4, in_tower((block,10),(block,5)), true, false).
final_goal(4, in_tower((block,10),(block,6)), false, true).
final_goal(4, in_tower((block,10),(block,6)), true, false).
final_goal(4, in_tower((block,10),(block,7)), false, true).
final_goal(4, in_tower((block,10),(block,7)), true, false).
final_goal(4, in_tower((block,10),(block,8)), false, true).
final_goal(4, in_tower((block,10),(block,8)), true, false).
final_goal(4, in_tower((block,10),(block,9)), false, true).
final_goal(4, in_tower((block,10),(block,9)), true, false).
final_goal(4, in_tower((block,11),(block,1)), false, true).
final_goal(4, in_tower((block,11),(block,1)), true, false).
final_goal(4, in_tower((block,11),(block,10)), false, true).
final_goal(4, in_tower((block,11),(block,10)), true, false).
final_goal(4, in_tower((block,11),(block,11)), false, true).
final_goal(4, in_tower((block,11),(block,11)), true, false).
final_goal(4, in_tower((block,11),(block,12)), false, true).
final_goal(4, in_tower((block,11),(block,12)), true, false).
final_goal(4, in_tower((block,11),(block,13)), false, true).
final_goal(4, in_tower((block,11),(block,13)), true, false).
final_goal(4, in_tower((block,11),(block,14)), false, true).
final_goal(4, in_tower((block,11),(block,14)), true, false).
final_goal(4, in_tower((block,11),(block,15)), false, true).
final_goal(4, in_tower((block,11),(block,15)), true, false).
final_goal(4, in_tower((block,11),(block,16)), false, true).
final_goal(4, in_tower((block,11),(block,16)), true, false).
final_goal(4, in_tower((block,11),(block,17)), false, true).
final_goal(4, in_tower((block,11),(block,17)), true, false).
final_goal(4, in_tower((block,11),(block,18)), false, true).
final_goal(4, in_tower((block,11),(block,18)), true, false).
final_goal(4, in_tower((block,11),(block,2)), false, true).
final_goal(4, in_tower((block,11),(block,2)), true, false).
final_goal(4, in_tower((block,11),(block,3)), false, true).
final_goal(4, in_tower((block,11),(block,3)), true, false).
final_goal(4, in_tower((block,11),(block,4)), false, true).
final_goal(4, in_tower((block,11),(block,4)), true, false).
final_goal(4, in_tower((block,11),(block,5)), false, true).
final_goal(4, in_tower((block,11),(block,5)), true, false).
final_goal(4, in_tower((block,11),(block,6)), false, true).
final_goal(4, in_tower((block,11),(block,6)), true, false).
final_goal(4, in_tower((block,11),(block,7)), false, true).
final_goal(4, in_tower((block,11),(block,7)), true, false).
final_goal(4, in_tower((block,11),(block,8)), false, true).
final_goal(4, in_tower((block,11),(block,8)), true, false).
final_goal(4, in_tower((block,11),(block,9)), false, true).
final_goal(4, in_tower((block,11),(block,9)), true, false).
final_goal(4, in_tower((block,12),(block,1)), false, true).
final_goal(4, in_tower((block,12),(block,1)), true, false).
final_goal(4, in_tower((block,12),(block,10)), false, false).
final_goal(4, in_tower((block,12),(block,10)), true, true).
final_goal(4, in_tower((block,12),(block,11)), false, false).
final_goal(4, in_tower((block,12),(block,11)), true, true).
final_goal(4, in_tower((block,12),(block,12)), false, false).
final_goal(4, in_tower((block,12),(block,12)), true, true).
final_goal(4, in_tower((block,12),(block,13)), false, true).
final_goal(4, in_tower((block,12),(block,13)), true, false).
final_goal(4, in_tower((block,12),(block,14)), false, true).
final_goal(4, in_tower((block,12),(block,14)), true, false).
final_goal(4, in_tower((block,12),(block,15)), false, true).
final_goal(4, in_tower((block,12),(block,15)), true, false).
final_goal(4, in_tower((block,12),(block,16)), false, true).
final_goal(4, in_tower((block,12),(block,16)), true, false).
final_goal(4, in_tower((block,12),(block,17)), false, true).
final_goal(4, in_tower((block,12),(block,17)), true, false).
final_goal(4, in_tower((block,12),(block,18)), false, true).
final_goal(4, in_tower((block,12),(block,18)), true, false).
final_goal(4, in_tower((block,12),(block,2)), false, true).
final_goal(4, in_tower((block,12),(block,2)), true, false).
final_goal(4, in_tower((block,12),(block,3)), false, true).
final_goal(4, in_tower((block,12),(block,3)), true, false).
final_goal(4, in_tower((block,12),(block,4)), false, true).
final_goal(4, in_tower((block,12),(block,4)), true, false).
final_goal(4, in_tower((block,12),(block,5)), false, true).
final_goal(4, in_tower((block,12),(block,5)), true, false).
final_goal(4, in_tower((block,12),(block,6)), false, true).
final_goal(4, in_tower((block,12),(block,6)), true, false).
final_goal(4, in_tower((block,12),(block,7)), false, true).
final_goal(4, in_tower((block,12),(block,7)), true, false).
final_goal(4, in_tower((block,12),(block,8)), false, true).
final_goal(4, in_tower((block,12),(block,8)), true, false).
final_goal(4, in_tower((block,12),(block,9)), false, true).
final_goal(4, in_tower((block,12),(block,9)), true, false).
final_goal(4, in_tower((block,13),(block,1)), false, true).
final_goal(4, in_tower((block,13),(block,1)), true, false).
final_goal(4, in_tower((block,13),(block,10)), false, true).
final_goal(4, in_tower((block,13),(block,10)), true, false).
final_goal(4, in_tower((block,13),(block,11)), false, true).
final_goal(4, in_tower((block,13),(block,11)), true, false).
final_goal(4, in_tower((block,13),(block,12)), false, true).
final_goal(4, in_tower((block,13),(block,12)), true, false).
final_goal(4, in_tower((block,13),(block,13)), false, true).
final_goal(4, in_tower((block,13),(block,13)), true, false).
final_goal(4, in_tower((block,13),(block,14)), false, true).
final_goal(4, in_tower((block,13),(block,14)), true, false).
final_goal(4, in_tower((block,13),(block,15)), false, true).
final_goal(4, in_tower((block,13),(block,15)), true, false).
final_goal(4, in_tower((block,13),(block,16)), false, true).
final_goal(4, in_tower((block,13),(block,16)), true, false).
final_goal(4, in_tower((block,13),(block,17)), false, true).
final_goal(4, in_tower((block,13),(block,17)), true, false).
final_goal(4, in_tower((block,13),(block,18)), false, true).
final_goal(4, in_tower((block,13),(block,18)), true, false).
final_goal(4, in_tower((block,13),(block,2)), false, true).
final_goal(4, in_tower((block,13),(block,2)), true, false).
final_goal(4, in_tower((block,13),(block,3)), false, true).
final_goal(4, in_tower((block,13),(block,3)), true, false).
final_goal(4, in_tower((block,13),(block,4)), false, true).
final_goal(4, in_tower((block,13),(block,4)), true, false).
final_goal(4, in_tower((block,13),(block,5)), false, true).
final_goal(4, in_tower((block,13),(block,5)), true, false).
final_goal(4, in_tower((block,13),(block,6)), false, true).
final_goal(4, in_tower((block,13),(block,6)), true, false).
final_goal(4, in_tower((block,13),(block,7)), false, true).
final_goal(4, in_tower((block,13),(block,7)), true, false).
final_goal(4, in_tower((block,13),(block,8)), false, true).
final_goal(4, in_tower((block,13),(block,8)), true, false).
final_goal(4, in_tower((block,13),(block,9)), false, true).
final_goal(4, in_tower((block,13),(block,9)), true, false).
final_goal(4, in_tower((block,14),(block,1)), false, true).
final_goal(4, in_tower((block,14),(block,1)), true, false).
final_goal(4, in_tower((block,14),(block,10)), false, true).
final_goal(4, in_tower((block,14),(block,10)), true, false).
final_goal(4, in_tower((block,14),(block,11)), false, true).
final_goal(4, in_tower((block,14),(block,11)), true, false).
final_goal(4, in_tower((block,14),(block,12)), false, true).
final_goal(4, in_tower((block,14),(block,12)), true, false).
final_goal(4, in_tower((block,14),(block,13)), false, true).
final_goal(4, in_tower((block,14),(block,13)), true, false).
final_goal(4, in_tower((block,14),(block,14)), false, true).
final_goal(4, in_tower((block,14),(block,14)), true, false).
final_goal(4, in_tower((block,14),(block,15)), false, true).
final_goal(4, in_tower((block,14),(block,15)), true, false).
final_goal(4, in_tower((block,14),(block,16)), false, true).
final_goal(4, in_tower((block,14),(block,16)), true, false).
final_goal(4, in_tower((block,14),(block,17)), false, true).
final_goal(4, in_tower((block,14),(block,17)), true, false).
final_goal(4, in_tower((block,14),(block,18)), false, true).
final_goal(4, in_tower((block,14),(block,18)), true, false).
final_goal(4, in_tower((block,14),(block,2)), false, true).
final_goal(4, in_tower((block,14),(block,2)), true, false).
final_goal(4, in_tower((block,14),(block,3)), false, true).
final_goal(4, in_tower((block,14),(block,3)), true, false).
final_goal(4, in_tower((block,14),(block,4)), false, true).
final_goal(4, in_tower((block,14),(block,4)), true, false).
final_goal(4, in_tower((block,14),(block,5)), false, true).
final_goal(4, in_tower((block,14),(block,5)), true, false).
final_goal(4, in_tower((block,14),(block,6)), false, true).
final_goal(4, in_tower((block,14),(block,6)), true, false).
final_goal(4, in_tower((block,14),(block,7)), false, true).
final_goal(4, in_tower((block,14),(block,7)), true, false).
final_goal(4, in_tower((block,14),(block,8)), false, true).
final_goal(4, in_tower((block,14),(block,8)), true, false).
final_goal(4, in_tower((block,14),(block,9)), false, true).
final_goal(4, in_tower((block,14),(block,9)), true, false).
final_goal(4, in_tower((block,15),(block,1)), false, true).
final_goal(4, in_tower((block,15),(block,1)), true, false).
final_goal(4, in_tower((block,15),(block,10)), false, true).
final_goal(4, in_tower((block,15),(block,10)), true, false).
final_goal(4, in_tower((block,15),(block,11)), false, true).
final_goal(4, in_tower((block,15),(block,11)), true, false).
final_goal(4, in_tower((block,15),(block,12)), false, true).
final_goal(4, in_tower((block,15),(block,12)), true, false).
final_goal(4, in_tower((block,15),(block,13)), false, false).
final_goal(4, in_tower((block,15),(block,13)), true, true).
final_goal(4, in_tower((block,15),(block,14)), false, false).
final_goal(4, in_tower((block,15),(block,14)), true, true).
final_goal(4, in_tower((block,15),(block,15)), false, false).
final_goal(4, in_tower((block,15),(block,15)), true, true).
final_goal(4, in_tower((block,15),(block,16)), false, true).
final_goal(4, in_tower((block,15),(block,16)), true, false).
final_goal(4, in_tower((block,15),(block,17)), false, true).
final_goal(4, in_tower((block,15),(block,17)), true, false).
final_goal(4, in_tower((block,15),(block,18)), false, true).
final_goal(4, in_tower((block,15),(block,18)), true, false).
final_goal(4, in_tower((block,15),(block,2)), false, true).
final_goal(4, in_tower((block,15),(block,2)), true, false).
final_goal(4, in_tower((block,15),(block,3)), false, true).
final_goal(4, in_tower((block,15),(block,3)), true, false).
final_goal(4, in_tower((block,15),(block,4)), false, true).
final_goal(4, in_tower((block,15),(block,4)), true, false).
final_goal(4, in_tower((block,15),(block,5)), false, true).
final_goal(4, in_tower((block,15),(block,5)), true, false).
final_goal(4, in_tower((block,15),(block,6)), false, true).
final_goal(4, in_tower((block,15),(block,6)), true, false).
final_goal(4, in_tower((block,15),(block,7)), false, true).
final_goal(4, in_tower((block,15),(block,7)), true, false).
final_goal(4, in_tower((block,15),(block,8)), false, true).
final_goal(4, in_tower((block,15),(block,8)), true, false).
final_goal(4, in_tower((block,15),(block,9)), false, true).
final_goal(4, in_tower((block,15),(block,9)), true, false).
final_goal(4, in_tower((block,16),(block,1)), false, true).
final_goal(4, in_tower((block,16),(block,1)), true, false).
final_goal(4, in_tower((block,16),(block,10)), false, true).
final_goal(4, in_tower((block,16),(block,10)), true, false).
final_goal(4, in_tower((block,16),(block,11)), false, true).
final_goal(4, in_tower((block,16),(block,11)), true, false).
final_goal(4, in_tower((block,16),(block,12)), false, true).
final_goal(4, in_tower((block,16),(block,12)), true, false).
final_goal(4, in_tower((block,16),(block,13)), false, true).
final_goal(4, in_tower((block,16),(block,13)), true, false).
final_goal(4, in_tower((block,16),(block,14)), false, true).
final_goal(4, in_tower((block,16),(block,14)), true, false).
final_goal(4, in_tower((block,16),(block,15)), false, true).
final_goal(4, in_tower((block,16),(block,15)), true, false).
final_goal(4, in_tower((block,16),(block,16)), false, true).
final_goal(4, in_tower((block,16),(block,16)), true, false).
final_goal(4, in_tower((block,16),(block,17)), false, true).
final_goal(4, in_tower((block,16),(block,17)), true, false).
final_goal(4, in_tower((block,16),(block,18)), false, true).
final_goal(4, in_tower((block,16),(block,18)), true, false).
final_goal(4, in_tower((block,16),(block,2)), false, true).
final_goal(4, in_tower((block,16),(block,2)), true, false).
final_goal(4, in_tower((block,16),(block,3)), false, true).
final_goal(4, in_tower((block,16),(block,3)), true, false).
final_goal(4, in_tower((block,16),(block,4)), false, true).
final_goal(4, in_tower((block,16),(block,4)), true, false).
final_goal(4, in_tower((block,16),(block,5)), false, true).
final_goal(4, in_tower((block,16),(block,5)), true, false).
final_goal(4, in_tower((block,16),(block,6)), false, true).
final_goal(4, in_tower((block,16),(block,6)), true, false).
final_goal(4, in_tower((block,16),(block,7)), false, true).
final_goal(4, in_tower((block,16),(block,7)), true, false).
final_goal(4, in_tower((block,16),(block,8)), false, true).
final_goal(4, in_tower((block,16),(block,8)), true, false).
final_goal(4, in_tower((block,16),(block,9)), false, true).
final_goal(4, in_tower((block,16),(block,9)), true, false).
final_goal(4, in_tower((block,17),(block,1)), false, true).
final_goal(4, in_tower((block,17),(block,1)), true, false).
final_goal(4, in_tower((block,17),(block,10)), false, true).
final_goal(4, in_tower((block,17),(block,10)), true, false).
final_goal(4, in_tower((block,17),(block,11)), false, true).
final_goal(4, in_tower((block,17),(block,11)), true, false).
final_goal(4, in_tower((block,17),(block,12)), false, true).
final_goal(4, in_tower((block,17),(block,12)), true, false).
final_goal(4, in_tower((block,17),(block,13)), false, true).
final_goal(4, in_tower((block,17),(block,13)), true, false).
final_goal(4, in_tower((block,17),(block,14)), false, true).
final_goal(4, in_tower((block,17),(block,14)), true, false).
final_goal(4, in_tower((block,17),(block,15)), false, true).
final_goal(4, in_tower((block,17),(block,15)), true, false).
final_goal(4, in_tower((block,17),(block,16)), false, true).
final_goal(4, in_tower((block,17),(block,16)), true, false).
final_goal(4, in_tower((block,17),(block,17)), false, true).
final_goal(4, in_tower((block,17),(block,17)), true, false).
final_goal(4, in_tower((block,17),(block,18)), false, true).
final_goal(4, in_tower((block,17),(block,18)), true, false).
final_goal(4, in_tower((block,17),(block,2)), false, true).
final_goal(4, in_tower((block,17),(block,2)), true, false).
final_goal(4, in_tower((block,17),(block,3)), false, true).
final_goal(4, in_tower((block,17),(block,3)), true, false).
final_goal(4, in_tower((block,17),(block,4)), false, true).
final_goal(4, in_tower((block,17),(block,4)), true, false).
final_goal(4, in_tower((block,17),(block,5)), false, true).
final_goal(4, in_tower((block,17),(block,5)), true, false).
final_goal(4, in_tower((block,17),(block,6)), false, true).
final_goal(4, in_tower((block,17),(block,6)), true, false).
final_goal(4, in_tower((block,17),(block,7)), false, true).
final_goal(4, in_tower((block,17),(block,7)), true, false).
final_goal(4, in_tower((block,17),(block,8)), false, true).
final_goal(4, in_tower((block,17),(block,8)), true, false).
final_goal(4, in_tower((block,17),(block,9)), false, true).
final_goal(4, in_tower((block,17),(block,9)), true, false).
final_goal(4, in_tower((block,18),(block,1)), false, true).
final_goal(4, in_tower((block,18),(block,1)), true, false).
final_goal(4, in_tower((block,18),(block,10)), false, true).
final_goal(4, in_tower((block,18),(block,10)), true, false).
final_goal(4, in_tower((block,18),(block,11)), false, true).
final_goal(4, in_tower((block,18),(block,11)), true, false).
final_goal(4, in_tower((block,18),(block,12)), false, true).
final_goal(4, in_tower((block,18),(block,12)), true, false).
final_goal(4, in_tower((block,18),(block,13)), false, true).
final_goal(4, in_tower((block,18),(block,13)), true, false).
final_goal(4, in_tower((block,18),(block,14)), false, true).
final_goal(4, in_tower((block,18),(block,14)), true, false).
final_goal(4, in_tower((block,18),(block,15)), false, true).
final_goal(4, in_tower((block,18),(block,15)), true, false).
final_goal(4, in_tower((block,18),(block,16)), false, false).
final_goal(4, in_tower((block,18),(block,16)), true, true).
final_goal(4, in_tower((block,18),(block,17)), false, false).
final_goal(4, in_tower((block,18),(block,17)), true, true).
final_goal(4, in_tower((block,18),(block,18)), false, false).
final_goal(4, in_tower((block,18),(block,18)), true, true).
final_goal(4, in_tower((block,18),(block,2)), false, true).
final_goal(4, in_tower((block,18),(block,2)), true, false).
final_goal(4, in_tower((block,18),(block,3)), false, true).
final_goal(4, in_tower((block,18),(block,3)), true, false).
final_goal(4, in_tower((block,18),(block,4)), false, true).
final_goal(4, in_tower((block,18),(block,4)), true, false).
final_goal(4, in_tower((block,18),(block,5)), false, true).
final_goal(4, in_tower((block,18),(block,5)), true, false).
final_goal(4, in_tower((block,18),(block,6)), false, true).
final_goal(4, in_tower((block,18),(block,6)), true, false).
final_goal(4, in_tower((block,18),(block,7)), false, true).
final_goal(4, in_tower((block,18),(block,7)), true, false).
final_goal(4, in_tower((block,18),(block,8)), false, true).
final_goal(4, in_tower((block,18),(block,8)), true, false).
final_goal(4, in_tower((block,18),(block,9)), false, true).
final_goal(4, in_tower((block,18),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,10)), false, true).
final_goal(4, in_tower((block,2),(block,10)), true, false).
final_goal(4, in_tower((block,2),(block,11)), false, true).
final_goal(4, in_tower((block,2),(block,11)), true, false).
final_goal(4, in_tower((block,2),(block,12)), false, true).
final_goal(4, in_tower((block,2),(block,12)), true, false).
final_goal(4, in_tower((block,2),(block,13)), false, true).
final_goal(4, in_tower((block,2),(block,13)), true, false).
final_goal(4, in_tower((block,2),(block,14)), false, true).
final_goal(4, in_tower((block,2),(block,14)), true, false).
final_goal(4, in_tower((block,2),(block,15)), false, true).
final_goal(4, in_tower((block,2),(block,15)), true, false).
final_goal(4, in_tower((block,2),(block,16)), false, true).
final_goal(4, in_tower((block,2),(block,16)), true, false).
final_goal(4, in_tower((block,2),(block,17)), false, true).
final_goal(4, in_tower((block,2),(block,17)), true, false).
final_goal(4, in_tower((block,2),(block,18)), false, true).
final_goal(4, in_tower((block,2),(block,18)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,10)), false, true).
final_goal(4, in_tower((block,3),(block,10)), true, false).
final_goal(4, in_tower((block,3),(block,11)), false, true).
final_goal(4, in_tower((block,3),(block,11)), true, false).
final_goal(4, in_tower((block,3),(block,12)), false, true).
final_goal(4, in_tower((block,3),(block,12)), true, false).
final_goal(4, in_tower((block,3),(block,13)), false, true).
final_goal(4, in_tower((block,3),(block,13)), true, false).
final_goal(4, in_tower((block,3),(block,14)), false, true).
final_goal(4, in_tower((block,3),(block,14)), true, false).
final_goal(4, in_tower((block,3),(block,15)), false, true).
final_goal(4, in_tower((block,3),(block,15)), true, false).
final_goal(4, in_tower((block,3),(block,16)), false, true).
final_goal(4, in_tower((block,3),(block,16)), true, false).
final_goal(4, in_tower((block,3),(block,17)), false, true).
final_goal(4, in_tower((block,3),(block,17)), true, false).
final_goal(4, in_tower((block,3),(block,18)), false, true).
final_goal(4, in_tower((block,3),(block,18)), true, false).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,10)), false, true).
final_goal(4, in_tower((block,4),(block,10)), true, false).
final_goal(4, in_tower((block,4),(block,11)), false, true).
final_goal(4, in_tower((block,4),(block,11)), true, false).
final_goal(4, in_tower((block,4),(block,12)), false, true).
final_goal(4, in_tower((block,4),(block,12)), true, false).
final_goal(4, in_tower((block,4),(block,13)), false, true).
final_goal(4, in_tower((block,4),(block,13)), true, false).
final_goal(4, in_tower((block,4),(block,14)), false, true).
final_goal(4, in_tower((block,4),(block,14)), true, false).
final_goal(4, in_tower((block,4),(block,15)), false, true).
final_goal(4, in_tower((block,4),(block,15)), true, false).
final_goal(4, in_tower((block,4),(block,16)), false, true).
final_goal(4, in_tower((block,4),(block,16)), true, false).
final_goal(4, in_tower((block,4),(block,17)), false, true).
final_goal(4, in_tower((block,4),(block,17)), true, false).
final_goal(4, in_tower((block,4),(block,18)), false, true).
final_goal(4, in_tower((block,4),(block,18)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,10)), false, true).
final_goal(4, in_tower((block,5),(block,10)), true, false).
final_goal(4, in_tower((block,5),(block,11)), false, true).
final_goal(4, in_tower((block,5),(block,11)), true, false).
final_goal(4, in_tower((block,5),(block,12)), false, true).
final_goal(4, in_tower((block,5),(block,12)), true, false).
final_goal(4, in_tower((block,5),(block,13)), false, true).
final_goal(4, in_tower((block,5),(block,13)), true, false).
final_goal(4, in_tower((block,5),(block,14)), false, true).
final_goal(4, in_tower((block,5),(block,14)), true, false).
final_goal(4, in_tower((block,5),(block,15)), false, true).
final_goal(4, in_tower((block,5),(block,15)), true, false).
final_goal(4, in_tower((block,5),(block,16)), false, true).
final_goal(4, in_tower((block,5),(block,16)), true, false).
final_goal(4, in_tower((block,5),(block,17)), false, true).
final_goal(4, in_tower((block,5),(block,17)), true, false).
final_goal(4, in_tower((block,5),(block,18)), false, true).
final_goal(4, in_tower((block,5),(block,18)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,10)), false, true).
final_goal(4, in_tower((block,6),(block,10)), true, false).
final_goal(4, in_tower((block,6),(block,11)), false, true).
final_goal(4, in_tower((block,6),(block,11)), true, false).
final_goal(4, in_tower((block,6),(block,12)), false, true).
final_goal(4, in_tower((block,6),(block,12)), true, false).
final_goal(4, in_tower((block,6),(block,13)), false, true).
final_goal(4, in_tower((block,6),(block,13)), true, false).
final_goal(4, in_tower((block,6),(block,14)), false, true).
final_goal(4, in_tower((block,6),(block,14)), true, false).
final_goal(4, in_tower((block,6),(block,15)), false, true).
final_goal(4, in_tower((block,6),(block,15)), true, false).
final_goal(4, in_tower((block,6),(block,16)), false, true).
final_goal(4, in_tower((block,6),(block,16)), true, false).
final_goal(4, in_tower((block,6),(block,17)), false, true).
final_goal(4, in_tower((block,6),(block,17)), true, false).
final_goal(4, in_tower((block,6),(block,18)), false, true).
final_goal(4, in_tower((block,6),(block,18)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,10)), false, true).
final_goal(4, in_tower((block,7),(block,10)), true, false).
final_goal(4, in_tower((block,7),(block,11)), false, true).
final_goal(4, in_tower((block,7),(block,11)), true, false).
final_goal(4, in_tower((block,7),(block,12)), false, true).
final_goal(4, in_tower((block,7),(block,12)), true, false).
final_goal(4, in_tower((block,7),(block,13)), false, true).
final_goal(4, in_tower((block,7),(block,13)), true, false).
final_goal(4, in_tower((block,7),(block,14)), false, true).
final_goal(4, in_tower((block,7),(block,14)), true, false).
final_goal(4, in_tower((block,7),(block,15)), false, true).
final_goal(4, in_tower((block,7),(block,15)), true, false).
final_goal(4, in_tower((block,7),(block,16)), false, true).
final_goal(4, in_tower((block,7),(block,16)), true, false).
final_goal(4, in_tower((block,7),(block,17)), false, true).
final_goal(4, in_tower((block,7),(block,17)), true, false).
final_goal(4, in_tower((block,7),(block,18)), false, true).
final_goal(4, in_tower((block,7),(block,18)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,10)), false, true).
final_goal(4, in_tower((block,8),(block,10)), true, false).
final_goal(4, in_tower((block,8),(block,11)), false, true).
final_goal(4, in_tower((block,8),(block,11)), true, false).
final_goal(4, in_tower((block,8),(block,12)), false, true).
final_goal(4, in_tower((block,8),(block,12)), true, false).
final_goal(4, in_tower((block,8),(block,13)), false, true).
final_goal(4, in_tower((block,8),(block,13)), true, false).
final_goal(4, in_tower((block,8),(block,14)), false, true).
final_goal(4, in_tower((block,8),(block,14)), true, false).
final_goal(4, in_tower((block,8),(block,15)), false, true).
final_goal(4, in_tower((block,8),(block,15)), true, false).
final_goal(4, in_tower((block,8),(block,16)), false, true).
final_goal(4, in_tower((block,8),(block,16)), true, false).
final_goal(4, in_tower((block,8),(block,17)), false, true).
final_goal(4, in_tower((block,8),(block,17)), true, false).
final_goal(4, in_tower((block,8),(block,18)), false, true).
final_goal(4, in_tower((block,8),(block,18)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,10)), false, true).
final_goal(4, in_tower((block,9),(block,10)), true, false).
final_goal(4, in_tower((block,9),(block,11)), false, true).
final_goal(4, in_tower((block,9),(block,11)), true, false).
final_goal(4, in_tower((block,9),(block,12)), false, true).
final_goal(4, in_tower((block,9),(block,12)), true, false).
final_goal(4, in_tower((block,9),(block,13)), false, true).
final_goal(4, in_tower((block,9),(block,13)), true, false).
final_goal(4, in_tower((block,9),(block,14)), false, true).
final_goal(4, in_tower((block,9),(block,14)), true, false).
final_goal(4, in_tower((block,9),(block,15)), false, true).
final_goal(4, in_tower((block,9),(block,15)), true, false).
final_goal(4, in_tower((block,9),(block,16)), false, true).
final_goal(4, in_tower((block,9),(block,16)), true, false).
final_goal(4, in_tower((block,9),(block,17)), false, true).
final_goal(4, in_tower((block,9),(block,17)), true, false).
final_goal(4, in_tower((block,9),(block,18)), false, true).
final_goal(4, in_tower((block,9),(block,18)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,10), false).
final_goal(4, on((block,1)), (block,11), false).
final_goal(4, on((block,1)), (block,12), false).
final_goal(4, on((block,1)), (block,13), false).
final_goal(4, on((block,1)), (block,14), false).
final_goal(4, on((block,1)), (block,15), false).
final_goal(4, on((block,1)), (block,16), false).
final_goal(4, on((block,1)), (block,17), false).
final_goal(4, on((block,1)), (block,18), false).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_1_table, false).
final_goal(4, on((block,1)), puzzle_room_2_table, false).
final_goal(4, on((block,10)), (block,1), false).
final_goal(4, on((block,10)), (block,11), true).
final_goal(4, on((block,10)), (block,12), false).
final_goal(4, on((block,10)), (block,13), false).
final_goal(4, on((block,10)), (block,14), false).
final_goal(4, on((block,10)), (block,15), false).
final_goal(4, on((block,10)), (block,16), false).
final_goal(4, on((block,10)), (block,17), false).
final_goal(4, on((block,10)), (block,18), false).
final_goal(4, on((block,10)), (block,2), false).
final_goal(4, on((block,10)), (block,3), false).
final_goal(4, on((block,10)), (block,4), false).
final_goal(4, on((block,10)), (block,5), false).
final_goal(4, on((block,10)), (block,6), false).
final_goal(4, on((block,10)), (block,7), false).
final_goal(4, on((block,10)), (block,8), false).
final_goal(4, on((block,10)), (block,9), false).
final_goal(4, on((block,10)), nothing, false).
final_goal(4, on((block,10)), puzzle_room_1_table, false).
final_goal(4, on((block,10)), puzzle_room_2_table, false).
final_goal(4, on((block,11)), (block,1), false).
final_goal(4, on((block,11)), (block,10), false).
final_goal(4, on((block,11)), (block,12), true).
final_goal(4, on((block,11)), (block,13), false).
final_goal(4, on((block,11)), (block,14), false).
final_goal(4, on((block,11)), (block,15), false).
final_goal(4, on((block,11)), (block,16), false).
final_goal(4, on((block,11)), (block,17), false).
final_goal(4, on((block,11)), (block,18), false).
final_goal(4, on((block,11)), (block,2), false).
final_goal(4, on((block,11)), (block,3), false).
final_goal(4, on((block,11)), (block,4), false).
final_goal(4, on((block,11)), (block,5), false).
final_goal(4, on((block,11)), (block,6), false).
final_goal(4, on((block,11)), (block,7), false).
final_goal(4, on((block,11)), (block,8), false).
final_goal(4, on((block,11)), (block,9), false).
final_goal(4, on((block,11)), nothing, false).
final_goal(4, on((block,11)), puzzle_room_1_table, false).
final_goal(4, on((block,11)), puzzle_room_2_table, false).
final_goal(4, on((block,12)), (block,1), false).
final_goal(4, on((block,12)), (block,10), false).
final_goal(4, on((block,12)), (block,11), false).
final_goal(4, on((block,12)), (block,13), false).
final_goal(4, on((block,12)), (block,14), false).
final_goal(4, on((block,12)), (block,15), false).
final_goal(4, on((block,12)), (block,16), false).
final_goal(4, on((block,12)), (block,17), false).
final_goal(4, on((block,12)), (block,18), false).
final_goal(4, on((block,12)), (block,2), false).
final_goal(4, on((block,12)), (block,3), false).
final_goal(4, on((block,12)), (block,4), false).
final_goal(4, on((block,12)), (block,5), false).
final_goal(4, on((block,12)), (block,6), false).
final_goal(4, on((block,12)), (block,7), false).
final_goal(4, on((block,12)), (block,8), false).
final_goal(4, on((block,12)), (block,9), false).
final_goal(4, on((block,12)), nothing, false).
final_goal(4, on((block,12)), puzzle_room_1_table, false).
final_goal(4, on((block,12)), puzzle_room_2_table, true).
final_goal(4, on((block,13)), (block,1), false).
final_goal(4, on((block,13)), (block,10), false).
final_goal(4, on((block,13)), (block,11), false).
final_goal(4, on((block,13)), (block,12), false).
final_goal(4, on((block,13)), (block,14), true).
final_goal(4, on((block,13)), (block,15), false).
final_goal(4, on((block,13)), (block,16), false).
final_goal(4, on((block,13)), (block,17), false).
final_goal(4, on((block,13)), (block,18), false).
final_goal(4, on((block,13)), (block,2), false).
final_goal(4, on((block,13)), (block,3), false).
final_goal(4, on((block,13)), (block,4), false).
final_goal(4, on((block,13)), (block,5), false).
final_goal(4, on((block,13)), (block,6), false).
final_goal(4, on((block,13)), (block,7), false).
final_goal(4, on((block,13)), (block,8), false).
final_goal(4, on((block,13)), (block,9), false).
final_goal(4, on((block,13)), nothing, false).
final_goal(4, on((block,13)), puzzle_room_1_table, false).
final_goal(4, on((block,13)), puzzle_room_2_table, false).
final_goal(4, on((block,14)), (block,1), false).
final_goal(4, on((block,14)), (block,10), false).
final_goal(4, on((block,14)), (block,11), false).
final_goal(4, on((block,14)), (block,12), false).
final_goal(4, on((block,14)), (block,13), false).
final_goal(4, on((block,14)), (block,15), true).
final_goal(4, on((block,14)), (block,16), false).
final_goal(4, on((block,14)), (block,17), false).
final_goal(4, on((block,14)), (block,18), false).
final_goal(4, on((block,14)), (block,2), false).
final_goal(4, on((block,14)), (block,3), false).
final_goal(4, on((block,14)), (block,4), false).
final_goal(4, on((block,14)), (block,5), false).
final_goal(4, on((block,14)), (block,6), false).
final_goal(4, on((block,14)), (block,7), false).
final_goal(4, on((block,14)), (block,8), false).
final_goal(4, on((block,14)), (block,9), false).
final_goal(4, on((block,14)), nothing, false).
final_goal(4, on((block,14)), puzzle_room_1_table, false).
final_goal(4, on((block,14)), puzzle_room_2_table, false).
final_goal(4, on((block,15)), (block,1), false).
final_goal(4, on((block,15)), (block,10), false).
final_goal(4, on((block,15)), (block,11), false).
final_goal(4, on((block,15)), (block,12), false).
final_goal(4, on((block,15)), (block,13), false).
final_goal(4, on((block,15)), (block,14), false).
final_goal(4, on((block,15)), (block,16), false).
final_goal(4, on((block,15)), (block,17), false).
final_goal(4, on((block,15)), (block,18), false).
final_goal(4, on((block,15)), (block,2), false).
final_goal(4, on((block,15)), (block,3), false).
final_goal(4, on((block,15)), (block,4), false).
final_goal(4, on((block,15)), (block,5), false).
final_goal(4, on((block,15)), (block,6), false).
final_goal(4, on((block,15)), (block,7), false).
final_goal(4, on((block,15)), (block,8), false).
final_goal(4, on((block,15)), (block,9), false).
final_goal(4, on((block,15)), nothing, false).
final_goal(4, on((block,15)), puzzle_room_1_table, false).
final_goal(4, on((block,15)), puzzle_room_2_table, true).
final_goal(4, on((block,16)), (block,1), false).
final_goal(4, on((block,16)), (block,10), false).
final_goal(4, on((block,16)), (block,11), false).
final_goal(4, on((block,16)), (block,12), false).
final_goal(4, on((block,16)), (block,13), false).
final_goal(4, on((block,16)), (block,14), false).
final_goal(4, on((block,16)), (block,15), false).
final_goal(4, on((block,16)), (block,17), true).
final_goal(4, on((block,16)), (block,18), false).
final_goal(4, on((block,16)), (block,2), false).
final_goal(4, on((block,16)), (block,3), false).
final_goal(4, on((block,16)), (block,4), false).
final_goal(4, on((block,16)), (block,5), false).
final_goal(4, on((block,16)), (block,6), false).
final_goal(4, on((block,16)), (block,7), false).
final_goal(4, on((block,16)), (block,8), false).
final_goal(4, on((block,16)), (block,9), false).
final_goal(4, on((block,16)), nothing, false).
final_goal(4, on((block,16)), puzzle_room_1_table, false).
final_goal(4, on((block,16)), puzzle_room_2_table, false).
final_goal(4, on((block,17)), (block,1), false).
final_goal(4, on((block,17)), (block,10), false).
final_goal(4, on((block,17)), (block,11), false).
final_goal(4, on((block,17)), (block,12), false).
final_goal(4, on((block,17)), (block,13), false).
final_goal(4, on((block,17)), (block,14), false).
final_goal(4, on((block,17)), (block,15), false).
final_goal(4, on((block,17)), (block,16), false).
final_goal(4, on((block,17)), (block,18), true).
final_goal(4, on((block,17)), (block,2), false).
final_goal(4, on((block,17)), (block,3), false).
final_goal(4, on((block,17)), (block,4), false).
final_goal(4, on((block,17)), (block,5), false).
final_goal(4, on((block,17)), (block,6), false).
final_goal(4, on((block,17)), (block,7), false).
final_goal(4, on((block,17)), (block,8), false).
final_goal(4, on((block,17)), (block,9), false).
final_goal(4, on((block,17)), nothing, false).
final_goal(4, on((block,17)), puzzle_room_1_table, false).
final_goal(4, on((block,17)), puzzle_room_2_table, false).
final_goal(4, on((block,18)), (block,1), false).
final_goal(4, on((block,18)), (block,10), false).
final_goal(4, on((block,18)), (block,11), false).
final_goal(4, on((block,18)), (block,12), false).
final_goal(4, on((block,18)), (block,13), false).
final_goal(4, on((block,18)), (block,14), false).
final_goal(4, on((block,18)), (block,15), false).
final_goal(4, on((block,18)), (block,16), false).
final_goal(4, on((block,18)), (block,17), false).
final_goal(4, on((block,18)), (block,2), false).
final_goal(4, on((block,18)), (block,3), false).
final_goal(4, on((block,18)), (block,4), false).
final_goal(4, on((block,18)), (block,5), false).
final_goal(4, on((block,18)), (block,6), false).
final_goal(4, on((block,18)), (block,7), false).
final_goal(4, on((block,18)), (block,8), false).
final_goal(4, on((block,18)), (block,9), false).
final_goal(4, on((block,18)), nothing, false).
final_goal(4, on((block,18)), puzzle_room_1_table, false).
final_goal(4, on((block,18)), puzzle_room_2_table, true).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,10), false).
final_goal(4, on((block,2)), (block,11), false).
final_goal(4, on((block,2)), (block,12), false).
final_goal(4, on((block,2)), (block,13), false).
final_goal(4, on((block,2)), (block,14), false).
final_goal(4, on((block,2)), (block,15), false).
final_goal(4, on((block,2)), (block,16), false).
final_goal(4, on((block,2)), (block,17), false).
final_goal(4, on((block,2)), (block,18), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_1_table, false).
final_goal(4, on((block,2)), puzzle_room_2_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,10), false).
final_goal(4, on((block,3)), (block,11), false).
final_goal(4, on((block,3)), (block,12), false).
final_goal(4, on((block,3)), (block,13), false).
final_goal(4, on((block,3)), (block,14), false).
final_goal(4, on((block,3)), (block,15), false).
final_goal(4, on((block,3)), (block,16), false).
final_goal(4, on((block,3)), (block,17), false).
final_goal(4, on((block,3)), (block,18), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_1_table, true).
final_goal(4, on((block,3)), puzzle_room_2_table, false).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,10), false).
final_goal(4, on((block,4)), (block,11), false).
final_goal(4, on((block,4)), (block,12), false).
final_goal(4, on((block,4)), (block,13), false).
final_goal(4, on((block,4)), (block,14), false).
final_goal(4, on((block,4)), (block,15), false).
final_goal(4, on((block,4)), (block,16), false).
final_goal(4, on((block,4)), (block,17), false).
final_goal(4, on((block,4)), (block,18), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_1_table, false).
final_goal(4, on((block,4)), puzzle_room_2_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,10), false).
final_goal(4, on((block,5)), (block,11), false).
final_goal(4, on((block,5)), (block,12), false).
final_goal(4, on((block,5)), (block,13), false).
final_goal(4, on((block,5)), (block,14), false).
final_goal(4, on((block,5)), (block,15), false).
final_goal(4, on((block,5)), (block,16), false).
final_goal(4, on((block,5)), (block,17), false).
final_goal(4, on((block,5)), (block,18), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_1_table, false).
final_goal(4, on((block,5)), puzzle_room_2_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,10), false).
final_goal(4, on((block,6)), (block,11), false).
final_goal(4, on((block,6)), (block,12), false).
final_goal(4, on((block,6)), (block,13), false).
final_goal(4, on((block,6)), (block,14), false).
final_goal(4, on((block,6)), (block,15), false).
final_goal(4, on((block,6)), (block,16), false).
final_goal(4, on((block,6)), (block,17), false).
final_goal(4, on((block,6)), (block,18), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_1_table, true).
final_goal(4, on((block,6)), puzzle_room_2_table, false).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,10), false).
final_goal(4, on((block,7)), (block,11), false).
final_goal(4, on((block,7)), (block,12), false).
final_goal(4, on((block,7)), (block,13), false).
final_goal(4, on((block,7)), (block,14), false).
final_goal(4, on((block,7)), (block,15), false).
final_goal(4, on((block,7)), (block,16), false).
final_goal(4, on((block,7)), (block,17), false).
final_goal(4, on((block,7)), (block,18), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_1_table, false).
final_goal(4, on((block,7)), puzzle_room_2_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,10), false).
final_goal(4, on((block,8)), (block,11), false).
final_goal(4, on((block,8)), (block,12), false).
final_goal(4, on((block,8)), (block,13), false).
final_goal(4, on((block,8)), (block,14), false).
final_goal(4, on((block,8)), (block,15), false).
final_goal(4, on((block,8)), (block,16), false).
final_goal(4, on((block,8)), (block,17), false).
final_goal(4, on((block,8)), (block,18), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_1_table, false).
final_goal(4, on((block,8)), puzzle_room_2_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,10), false).
final_goal(4, on((block,9)), (block,11), false).
final_goal(4, on((block,9)), (block,12), false).
final_goal(4, on((block,9)), (block,13), false).
final_goal(4, on((block,9)), (block,14), false).
final_goal(4, on((block,9)), (block,15), false).
final_goal(4, on((block,9)), (block,16), false).
final_goal(4, on((block,9)), (block,17), false).
final_goal(4, on((block,9)), (block,18), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_1_table, true).
final_goal(4, on((block,9)), puzzle_room_2_table, false).
final_goal(4, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), true, false).

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(store_room_1)', 'F': 'in(talos)', 'V': 'store_room_1', 'I': 1})
SubGoal({'L': 4, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(puzzle_room_1)', 'F': 'in(talos)', 'V': 'puzzle_room_1', 'I': 3})
SubGoal({'L': 4, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_1_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,9))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,9)', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_1_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,9),puzzle_room_1_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'I': 7})
SubGoal({'L': 4, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,9))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 4, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(store_room_1)', 'F': 'in(talos)', 'V': 'store_room_1', 'I': 9})

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 14 rules into program part base:

sub_goal(4, talos, move(store_room_1), in(talos), store_room_1, 1).
sub_goal(4, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(4, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 2).
sub_goal(4, talos, move(puzzle_room_1), in(talos), puzzle_room_1, 3).
sub_goal(4, talos, put(manipulator_arm_1,(block,6),puzzle_room_1_table), on((block,6)), puzzle_room_1_table, 4).
sub_goal(4, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 4).
sub_goal(4, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 5).
sub_goal(4, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5).
sub_goal(4, talos, grasp(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), (block,9), 6).
sub_goal(4, talos, put(manipulator_arm_2,(block,3),puzzle_room_1_table), on((block,3)), puzzle_room_1_table, 6).
sub_goal(4, talos, put(manipulator_arm_1,(block,9),puzzle_room_1_table), on((block,9)), puzzle_room_1_table, 7).
sub_goal(4, talos, release(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), nothing, 8).
sub_goal(4, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 8).
sub_goal(4, talos, move(store_room_1), in(talos), store_room_1, 9).

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=4, start_step=0, total_plan_length=18, step_range=range(0, 19)

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 18, Total actions = 31, Produced sub-goal stages = 31
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 18, Total actions = 31, Produced sub-goal stages = 31
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000021F9E483940>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=9, step_end_max=300, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1577.3716841, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 9, 'sequential', 'true'), range_=None)]

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 3687 rules

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.01840620000001536s

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.531001s.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.099511s with result Satisfiable.

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000021FA231E590>

[04-03-2022_16-25-15] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 9)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Hasty object at 0x0000021F9E41DE80>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000021FA231E590>)

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 9, sequential, true). %* None *%

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.594268s.

[04-03-2022_16-25-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[04-03-2022_16-25-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[04-03-2022_16-25-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122993s with result Unsatisfiable.

[04-03-2022_16-25-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.717260999999979, Incremental time limit = None
Running cumulative time = 4.717260999999979, Cumulative time limit = 1577.3716841
Used memory = (RSS = 468.156250Mb, VMS = 483.777344Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.594267599999995, solving_time=0.12299339999998438, total_time=4.717260999999979, memory=Memory(rss=468.15625, vms=483.77734375), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.594267599999995, solving_time=0.12299339999998438, total_time=4.717260999999979, memory=Memory(rss=468.15625, vms=483.77734375), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 136657.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 158316.0, 'bodies_tr': 158316.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 1213.0, 'count_bodies_tr': 1213.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7824.0, 'rules': 303655.0, 'rules_normal': 301740.0, 'rules_choice': 1913.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 303655.0, 'rules_tr_normal': 301740.0, 'rules_tr_choice': 1913.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 241353.0, 'eqs_atom': 93096.0, 'eqs_body': 10192.0, 'eqs_other': 138065.0}, 'lpStep': {'atoms': 39449.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 144713.0, 'bodies_tr': 144713.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 1213.0, 'count_bodies_tr': 1213.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7824.0, 'rules': 200691.0, 'rules_normal': 198776.0, 'rules_choice': 1913.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 200691.0, 'rules_tr_normal': 198776.0, 'rules_tr_choice': 1913.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 63499.0, 'eqs_atom': 12629.0, 'eqs_body': 2783.0, 'eqs_other': 48087.0}, 'generator': {'vars': 25149.0, 'vars_eliminated': 0.0, 'vars_frozen': 12863.0, 'constraints': 29.0, 'constraints_binary': 5280.0, 'constraints_ternary': 1125.0, 'acyc_edges': 0.0, 'complexity': 6446.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 10.0, 'integrated': 0.0, 'lemmas': 14.0, 'lits_learnt': 15.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 138.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 7.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 4.713157653808594, 'cpu': 4.65625, 'solve': 0.0070095062255859375, 'unsat': 0.0070095062255859375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.362760543823242, 'cpu': 5.296875, 'solve': 0.05887031555175781, 'unsat': 0.0070095062255859375, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 10.0, 'integrated': 0.0, 'lemmas': 14.0, 'lits_learnt': 15.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 146.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 7.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.088238s.

[04-03-2022_16-25-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030580s with result Unsatisfiable.

[04-03-2022_16-25-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 2.118817500000006, Incremental time limit = None
Running cumulative time = 6.836078499999985, Cumulative time limit = 1577.3716841
Used memory = (RSS = 475.375000Mb, VMS = 496.449219Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.682505499999991, solving_time=0.1535729999999944, total_time=6.836078499999985, memory=Memory(rss=475.375, vms=496.44921875), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=2.0882378999999958, solving_time=0.030579600000010032, total_time=2.118817500000006, memory=Memory(rss=475.375, vms=496.44921875), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 147438.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 259178.0, 'bodies_tr': 259178.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 2268.0, 'count_bodies_tr': 2268.0, 'sccs': 71.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7897.0, 'rules': 429557.0, 'rules_normal': 426789.0, 'rules_choice': 2764.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 429557.0, 'rules_tr_normal': 426789.0, 'rules_tr_choice': 2764.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 259444.0, 'eqs_atom': 98283.0, 'eqs_body': 13208.0, 'eqs_other': 147953.0}, 'lpStep': {'atoms': 10781.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 100862.0, 'bodies_tr': 100862.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 9.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 73.0, 'rules': 125902.0, 'rules_normal': 125049.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 125902.0, 'rules_tr_normal': 125049.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 18091.0, 'eqs_atom': 5187.0, 'eqs_body': 3016.0, 'eqs_other': 9888.0}, 'generator': {'vars': 25293.0, 'vars_eliminated': 0.0, 'vars_frozen': 13003.0, 'constraints': 69.0, 'constraints_binary': 5736.0, 'constraints_ternary': 1191.0, 'acyc_edges': 0.0, 'complexity': 7024.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 15.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 238.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 15.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 2.1217079162597656, 'cpu': 2.109375, 'solve': 0.0039920806884765625, 'unsat': 0.0039920806884765625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.484468460083008, 'cpu': 7.40625, 'solve': 0.06286239624023438, 'unsat': 0.0110015869140625, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 15.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 20.0, 'integrated': 0.0, 'lemmas': 20.0, 'lits_learnt': 30.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 384.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 12.0, 'lemmas_other': 0.0, 'lits_conflict': 8.0, 'lits_loop': 22.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.055111s.

[04-03-2022_16-25-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034790s with result Unsatisfiable.

[04-03-2022_16-25-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 3.089901900000001, Incremental time limit = None
Running cumulative time = 9.925980399999986, Cumulative time limit = 1577.3716841
Used memory = (RSS = 480.082031Mb, VMS = 500.511719Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=9.737616900000006, solving_time=0.18836349999997992, total_time=9.925980399999986, memory=Memory(rss=480.08203125, vms=500.51171875), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.0551114000000155, solving_time=0.034790499999985514, total_time=3.089901900000001, memory=Memory(rss=480.08203125, vms=500.51171875), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 161858.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 360376.0, 'bodies_tr': 360376.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 3323.0, 'count_bodies_tr': 3323.0, 'sccs': 85.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8030.0, 'rules': 559424.0, 'rules_normal': 555803.0, 'rules_choice': 3615.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 559424.0, 'rules_tr_normal': 555803.0, 'rules_tr_choice': 3615.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 286718.0, 'eqs_atom': 107140.0, 'eqs_body': 16396.0, 'eqs_other': 163182.0}, 'lpStep': {'atoms': 14420.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 101198.0, 'bodies_tr': 101198.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 14.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 133.0, 'rules': 129867.0, 'rules_normal': 129014.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 129867.0, 'rules_tr_normal': 129014.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27274.0, 'eqs_atom': 8857.0, 'eqs_body': 3188.0, 'eqs_other': 15229.0}, 'generator': {'vars': 26132.0, 'vars_eliminated': 0.0, 'vars_frozen': 13458.0, 'constraints': 217.0, 'constraints_binary': 8807.0, 'constraints_ternary': 2103.0, 'acyc_edges': 0.0, 'complexity': 11203.0}}, 'solving': {'solvers': {'choices': 99.0, 'conflicts': 7.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 6.0, 'integrated': 6.0, 'lemmas': 21.0, 'lits_learnt': 83.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 6.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 315.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 10.0, 'lemmas_other': 6.0, 'lits_conflict': 9.0, 'lits_loop': 60.0, 'lits_other': 14.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 4.0, 'levels': 264.0, 'levels_bounded': 181.0, 'max': 69.0, 'max_executed': 68.0, 'max_bounded': 46.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 3.093181610107422, 'cpu': 3.109375, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 10.57765007019043, 'cpu': 10.515625, 'solve': 0.06585311889648438, 'unsat': 0.0139923095703125, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 99.0, 'conflicts': 22.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 26.0, 'integrated': 6.0, 'lemmas': 41.0, 'lits_learnt': 113.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 6.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 699.0, 'guiding_paths': 28.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 22.0, 'lemmas_other': 6.0, 'lits_conflict': 17.0, 'lits_loop': 82.0, 'lits_other': 14.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 4.0, 'levels': 272.0, 'levels_bounded': 181.0, 'max': 69.0, 'max_executed': 68.0, 'max_bounded': 46.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.647233s.

[04-03-2022_16-25-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.069854s with result Unsatisfiable.

[04-03-2022_16-25-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 3.717087399999997, Incremental time limit = None
Running cumulative time = 13.643067799999983, Cumulative time limit = 1577.3716841
Used memory = (RSS = 491.832031Mb, VMS = 507.406250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.384850099999994, solving_time=0.2582176999999888, total_time=13.643067799999983, memory=Memory(rss=491.83203125, vms=507.40625), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.647233199999988, solving_time=0.06985420000000886, total_time=3.717087399999997, memory=Memory(rss=491.83203125, vms=507.40625), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 178179.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 465874.0, 'bodies_tr': 465874.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 4378.0, 'count_bodies_tr': 4378.0, 'sccs': 127.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10771.0, 'rules': 694465.0, 'rules_normal': 689991.0, 'rules_choice': 4466.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 694465.0, 'rules_tr_normal': 689991.0, 'rules_tr_choice': 4466.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 319201.0, 'eqs_atom': 116314.0, 'eqs_body': 18888.0, 'eqs_other': 183999.0}, 'lpStep': {'atoms': 16321.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 105498.0, 'bodies_tr': 105498.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2741.0, 'rules': 135041.0, 'rules_normal': 134188.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 135041.0, 'rules_tr_normal': 134188.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 32483.0, 'eqs_atom': 9174.0, 'eqs_body': 2492.0, 'eqs_other': 20817.0}, 'generator': {'vars': 34261.0, 'vars_eliminated': 0.0, 'vars_frozen': 18187.0, 'constraints': 3058.0, 'constraints_binary': 50108.0, 'constraints_ternary': 9263.0, 'acyc_edges': 0.0, 'complexity': 62665.0}}, 'solving': {'solvers': {'choices': 126.0, 'conflicts': 23.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 8.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 18.0, 'integrated': 31.0, 'lemmas': 343.0, 'lits_learnt': 4974.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0, 'integrated_imps': 20.0, 'integrated_jumps': 59.0, 'guiding_paths_lits': 392.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 299.0, 'lemmas_other': 31.0, 'lits_conflict': 25.0, 'lits_loop': 4873.0, 'lits_other': 76.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 9.0, 'levels': 516.0, 'levels_bounded': 453.0, 'max': 72.0, 'max_executed': 58.0, 'max_bounded': 57.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [3.0, -20.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 3.719573974609375, 'cpu': 3.71875, 'solve': 0.007946014404296875, 'unsat': 0.007946014404296875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 14.297224044799805, 'cpu': 14.234375, 'solve': 0.07379913330078125, 'unsat': 0.021938323974609375, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 225.0, 'conflicts': 45.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 8.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 44.0, 'integrated': 37.0, 'lemmas': 384.0, 'lits_learnt': 5087.0, 'lemmas_binary': 13.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0625, 'integrated_imps': 26.0, 'integrated_jumps': 75.0, 'guiding_paths_lits': 1091.0, 'guiding_paths': 38.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 321.0, 'lemmas_other': 37.0, 'lits_conflict': 42.0, 'lits_loop': 4955.0, 'lits_other': 90.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 13.0, 'levels': 788.0, 'levels_bounded': 634.0, 'max': 72.0, 'max_executed': 68.0, 'max_bounded': 57.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.273300s.

[04-03-2022_16-25-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108543s with result Unsatisfiable.

[04-03-2022_16-25-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.3818427999999585, Incremental time limit = None
Running cumulative time = 18.02491059999994, Cumulative time limit = 1577.3716841
Used memory = (RSS = 525.500000Mb, VMS = 540.980469Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=17.65814979999999, solving_time=0.3667607999999518, total_time=18.02491059999994, memory=Memory(rss=525.5, vms=540.98046875), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.2732996999999955, solving_time=0.10854309999996303, total_time=4.3818427999999585, memory=Memory(rss=525.5, vms=540.98046875), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 196096.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 579309.0, 'bodies_tr': 579309.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 5433.0, 'count_bodies_tr': 5433.0, 'sccs': 177.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17628.0, 'rules': 839569.0, 'rules_normal': 834242.0, 'rules_choice': 5317.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 839569.0, 'rules_tr_normal': 834242.0, 'rules_tr_choice': 5317.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 360430.0, 'eqs_atom': 127418.0, 'eqs_body': 20682.0, 'eqs_other': 212330.0}, 'lpStep': {'atoms': 17917.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 113435.0, 'bodies_tr': 113435.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6857.0, 'rules': 145104.0, 'rules_normal': 144251.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 145104.0, 'rules_tr_normal': 144251.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41229.0, 'eqs_atom': 11104.0, 'eqs_body': 1794.0, 'eqs_other': 28331.0}, 'generator': {'vars': 52374.0, 'vars_eliminated': 0.0, 'vars_frozen': 28232.0, 'constraints': 10066.0, 'constraints_binary': 158346.0, 'constraints_ternary': 28046.0, 'acyc_edges': 0.0, 'complexity': 197018.0}}, 'solving': {'solvers': {'choices': 196.0, 'conflicts': 23.0, 'conflicts_analyzed': 18.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 11.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 25.0, 'integrated': 55.0, 'lemmas': 1263.0, 'lits_learnt': 44353.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.171875, 'integrated_imps': 39.0, 'integrated_jumps': 116.0, 'guiding_paths_lits': 469.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 1192.0, 'lemmas_other': 54.0, 'lits_conflict': 72.0, 'lits_loop': 44158.0, 'lits_other': 123.0, 'jumps': {'jumps': 18.0, 'jumps_bounded': 4.0, 'levels': 349.0, 'levels_bounded': 269.0, 'max': 79.0, 'max_executed': 78.0, 'max_bounded': 68.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [3.0, -48.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 4.385137557983398, 'cpu': 4.453125, 'solve': 0.025926589965820312, 'unsat': 0.025926589965820312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 18.682361602783203, 'cpu': 18.6875, 'solve': 0.09972572326660156, 'unsat': 0.04786491394042969, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 421.0, 'conflicts': 68.0, 'conflicts_analyzed': 45.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 19.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 46.0, 'distributed_sum_lbd': 69.0, 'integrated': 92.0, 'lemmas': 1647.0, 'lits_learnt': 49440.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.234375, 'integrated_imps': 65.0, 'integrated_jumps': 191.0, 'guiding_paths_lits': 1560.0, 'guiding_paths': 48.0, 'splits': 0.0, 'lemmas_conflict': 43.0, 'lemmas_loop': 1513.0, 'lemmas_other': 91.0, 'lits_conflict': 114.0, 'lits_loop': 49113.0, 'lits_other': 213.0, 'jumps': {'jumps': 45.0, 'jumps_bounded': 17.0, 'levels': 1137.0, 'levels_bounded': 903.0, 'max': 79.0, 'max_executed': 78.0, 'max_bounded': 68.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.278183s.

[04-03-2022_16-25-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.105199s with result Unsatisfiable.

[04-03-2022_16-25-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.3833814999999845, Incremental time limit = None
Running cumulative time = 22.408292099999926, Cumulative time limit = 1577.3716841
Used memory = (RSS = 556.382812Mb, VMS = 582.609375Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=21.93633239999997, solving_time=0.4719596999999567, total_time=22.408292099999926, memory=Memory(rss=556.3828125, vms=582.609375), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.27818259999998, solving_time=0.10519890000000487, total_time=4.3833814999999845, memory=Memory(rss=556.3828125, vms=582.609375), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 214346.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 692552.0, 'bodies_tr': 692552.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 6488.0, 'count_bodies_tr': 6488.0, 'sccs': 219.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21531.0, 'rules': 983684.0, 'rules_normal': 977504.0, 'rules_choice': 6168.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 983684.0, 'rules_tr_normal': 977504.0, 'rules_tr_choice': 6168.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 400332.0, 'eqs_atom': 138191.0, 'eqs_body': 23056.0, 'eqs_other': 239085.0}, 'lpStep': {'atoms': 18250.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 113243.0, 'bodies_tr': 113243.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3903.0, 'rules': 144115.0, 'rules_normal': 143262.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 144115.0, 'rules_tr_normal': 143262.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39902.0, 'eqs_atom': 10773.0, 'eqs_body': 2374.0, 'eqs_other': 26755.0}, 'generator': {'vars': 64259.0, 'vars_eliminated': 0.0, 'vars_frozen': 34764.0, 'constraints': 8770.0, 'constraints_binary': 146907.0, 'constraints_ternary': 27182.0, 'acyc_edges': 0.0, 'complexity': 197018.0}}, 'solving': {'solvers': {'choices': 152.0, 'conflicts': 36.0, 'conflicts_analyzed': 34.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 54.0, 'integrated': 80.0, 'lemmas': 378.0, 'lits_learnt': 5989.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 39.0, 'integrated_jumps': 27.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 34.0, 'lemmas_loop': 264.0, 'lemmas_other': 80.0, 'lits_conflict': 652.0, 'lits_loop': 3814.0, 'lits_other': 1523.0, 'jumps': {'jumps': 34.0, 'jumps_bounded': 6.0, 'levels': 588.0, 'levels_bounded': 468.0, 'max': 93.0, 'max_executed': 93.0, 'max_bounded': 78.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -58.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 4.405767440795898, 'cpu': 4.359375, 'solve': 0.02892303466796875, 'unsat': 0.02892303466796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 23.0881290435791, 'cpu': 23.046875, 'solve': 0.1286487579345703, 'unsat': 0.07678794860839844, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 573.0, 'conflicts': 104.0, 'conflicts_analyzed': 79.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 19.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 70.0, 'distributed_sum_lbd': 123.0, 'integrated': 172.0, 'lemmas': 2025.0, 'lits_learnt': 55429.0, 'lemmas_binary': 83.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.328125, 'integrated_imps': 104.0, 'integrated_jumps': 218.0, 'guiding_paths_lits': 2106.0, 'guiding_paths': 55.0, 'splits': 0.0, 'lemmas_conflict': 77.0, 'lemmas_loop': 1777.0, 'lemmas_other': 171.0, 'lits_conflict': 766.0, 'lits_loop': 52927.0, 'lits_other': 1736.0, 'jumps': {'jumps': 79.0, 'jumps_bounded': 23.0, 'levels': 1725.0, 'levels_bounded': 1371.0, 'max': 93.0, 'max_executed': 93.0, 'max_bounded': 78.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.319530s.

[04-03-2022_16-25-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.616152s with result Satisfiable.

[04-03-2022_16-25-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 4.935682400000019, Incremental time limit = None
Running cumulative time = 27.343974499999945, Cumulative time limit = 1577.3716841
Used memory = (RSS = 636.085938Mb, VMS = 676.656250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 26.255863s, Solving = 1.088112s, Total = 27.343974s, Memory = (RSS = 636.085938Mb, VMS = 676.656250Mb), Step range = [0-7]), Calls = 7
Final Model :: Total atoms = 91500, Cost = (7, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[04-03-2022_16-25-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=26.255862699999966, solving_time=1.0881117999999788, total_time=27.343974499999945, memory=Memory(rss=636.0859375, vms=676.65625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.319530299999997, solving_time=0.6161521000000221, total_time=4.935682400000019, memory=Memory(rss=636.0859375, vms=676.65625), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 232867.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 808331.0, 'bodies_tr': 808331.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 7543.0, 'count_bodies_tr': 7543.0, 'sccs': 269.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 30402.0, 'rules': 1131204.0, 'rules_normal': 1124171.0, 'rules_choice': 7019.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1131204.0, 'rules_tr_normal': 1124171.0, 'rules_tr_choice': 7019.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 443123.0, 'eqs_atom': 149179.0, 'eqs_body': 24644.0, 'eqs_other': 269300.0}, 'lpStep': {'atoms': 18521.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115779.0, 'bodies_tr': 115779.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8871.0, 'rules': 147520.0, 'rules_normal': 146667.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 147520.0, 'rules_tr_normal': 146667.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 42791.0, 'eqs_atom': 10988.0, 'eqs_body': 1588.0, 'eqs_other': 30215.0}, 'generator': {'vars': 87296.0, 'vars_eliminated': 0.0, 'vars_frozen': 47215.0, 'constraints': 12968.0, 'constraints_binary': 205717.0, 'constraints_ternary': 36603.0, 'acyc_edges': 0.0, 'complexity': 256126.0}}, 'solving': {'solvers': {'choices': 3950.0, 'conflicts': 161.0, 'conflicts_analyzed': 151.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 179.0, 'models': 3.0, 'models_level': 524.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 179.0, 'distributed_sum_lbd': 294.0, 'integrated': 1023.0, 'lemmas': 3177.0, 'lits_learnt': 93149.0, 'lemmas_binary': 231.0, 'lemmas_ternary': 99.0, 'cpu_time': 1.078125, 'integrated_imps': 636.0, 'integrated_jumps': 2117.0, 'guiding_paths_lits': 712.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 149.0, 'lemmas_loop': 2097.0, 'lemmas_other': 931.0, 'lits_conflict': 1525.0, 'lits_loop': 84902.0, 'lits_other': 6722.0, 'jumps': {'jumps': 151.0, 'jumps_bounded': 8.0, 'levels': 1573.0, 'levels_bounded': 453.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [7.0, 0.0], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 4.967756271362305, 'cpu': 5.546875, 'solve': 0.5046768188476562, 'unsat': 0.180511474609375, 'sat': 0.06183433532714844}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 28.055885314941406, 'cpu': 28.59375, 'solve': 0.6333255767822266, 'unsat': 0.25729942321777344, 'sat': 0.06282997131347656}, 'models': {'enumerated': 4.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 4523.0, 'conflicts': 265.0, 'conflicts_analyzed': 230.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 198.0, 'models': 4.0, 'models_level': 525.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 249.0, 'distributed_sum_lbd': 417.0, 'integrated': 1195.0, 'lemmas': 5202.0, 'lits_learnt': 148578.0, 'lemmas_binary': 314.0, 'lemmas_ternary': 100.0, 'cpu_time': 1.40625, 'integrated_imps': 740.0, 'integrated_jumps': 2335.0, 'guiding_paths_lits': 2818.0, 'guiding_paths': 70.0, 'splits': 0.0, 'lemmas_conflict': 226.0, 'lemmas_loop': 3874.0, 'lemmas_other': 1102.0, 'lits_conflict': 2291.0, 'lits_loop': 137829.0, 'lits_other': 8458.0, 'jumps': {'jumps': 230.0, 'jumps_bounded': 31.0, 'levels': 3298.0, 'levels_bounded': 1824.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-43] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7}

[04-03-2022_16-25-43] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[04-03-2022_16-25-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None)

[04-03-2022_16-25-43] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 7]:
sub_goal(4, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2)
sub_goal(4, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 2)

[04-03-2022_16-25-43] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-25-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.261624s.

[04-03-2022_16-25-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(2,7).

[04-03-2022_16-25-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.077088s with result Unsatisfiable.

[04-03-2022_16-25-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.338711799999999, Incremental time limit = None
Running cumulative time = 31.682686299999943, Cumulative time limit = 1577.3716841
Used memory = (RSS = 643.285156Mb, VMS = 681.613281Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=30.517486899999994, solving_time=1.165199399999949, total_time=31.682686299999943, memory=Memory(rss=643.28515625, vms=681.61328125), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.261624200000028, solving_time=0.07708759999997028, total_time=4.338711799999999, memory=Memory(rss=643.28515625, vms=681.61328125), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 251648.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 913432.0, 'bodies_tr': 913432.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 8598.0, 'count_bodies_tr': 8598.0, 'sccs': 303.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 31191.0, 'rules': 1265158.0, 'rules_normal': 1257272.0, 'rules_choice': 7870.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1265158.0, 'rules_tr_normal': 1257272.0, 'rules_tr_choice': 7870.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 475503.0, 'eqs_atom': 158347.0, 'eqs_body': 28060.0, 'eqs_other': 289096.0}, 'lpStep': {'atoms': 18781.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 105101.0, 'bodies_tr': 105101.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 789.0, 'rules': 133954.0, 'rules_normal': 133101.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 133954.0, 'rules_tr_normal': 133101.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 32380.0, 'eqs_atom': 9168.0, 'eqs_body': 3416.0, 'eqs_other': 19796.0}, 'generator': {'vars': 90633.0, 'vars_eliminated': 0.0, 'vars_frozen': 49248.0, 'constraints': 1399.0, 'constraints_binary': 37200.0, 'constraints_ternary': 6084.0, 'acyc_edges': 0.0, 'complexity': 256126.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 4.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 500.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -12.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 4.390844345092773, 'cpu': 4.34375, 'solve': 0.008466720581054688, 'unsat': 0.008466720581054688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 32.44672966003418, 'cpu': 32.9375, 'solve': 0.6417922973632812, 'unsat': 0.2657661437988281, 'sat': 0.06282997131347656}, 'models': {'enumerated': 4.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 4523.0, 'conflicts': 269.0, 'conflicts_analyzed': 230.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 198.0, 'models': 4.0, 'models_level': 525.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 249.0, 'distributed_sum_lbd': 417.0, 'integrated': 1195.0, 'lemmas': 5202.0, 'lits_learnt': 148578.0, 'lemmas_binary': 314.0, 'lemmas_ternary': 100.0, 'cpu_time': 1.40625, 'integrated_imps': 740.0, 'integrated_jumps': 2335.0, 'guiding_paths_lits': 3318.0, 'guiding_paths': 75.0, 'splits': 0.0, 'lemmas_conflict': 226.0, 'lemmas_loop': 3874.0, 'lemmas_other': 1102.0, 'lits_conflict': 2291.0, 'lits_loop': 137829.0, 'lits_other': 8458.0, 'jumps': {'jumps': 230.0, 'jumps_bounded': 31.0, 'levels': 3298.0, 'levels_bounded': 1824.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-25-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.119566s.

[04-03-2022_16-25-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.466042s with result Satisfiable.

[04-03-2022_16-25-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 4.585607999999922, Incremental time limit = None
Running cumulative time = 36.268294299999866, Cumulative time limit = 1577.3716841
Used memory = (RSS = 698.914062Mb, VMS = 726.402344Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 34.637053s, Solving = 1.631242s, Total = 36.268294s, Memory = (RSS = 698.914062Mb, VMS = 726.402344Mb), Step range = [0-9]), Calls = 9
Final Model :: Total atoms = 96236, Cost = (11, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[04-03-2022_16-25-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=34.63705259999995, solving_time=1.6312416999999186, total_time=36.268294299999866, memory=Memory(rss=698.9140625, vms=726.40234375), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.119565699999953, solving_time=0.4660422999999696, total_time=4.585607999999922, memory=Memory(rss=698.9140625, vms=726.40234375), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 269429.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1024475.0, 'bodies_tr': 1024475.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 9653.0, 'count_bodies_tr': 9653.0, 'sccs': 353.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 38048.0, 'rules': 1408014.0, 'rules_normal': 1399275.0, 'rules_choice': 8721.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1408014.0, 'rules_tr_normal': 1399275.0, 'rules_tr_choice': 8721.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 516497.0, 'eqs_atom': 169504.0, 'eqs_body': 30260.0, 'eqs_other': 316733.0}, 'lpStep': {'atoms': 17781.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 111043.0, 'bodies_tr': 111043.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6857.0, 'rules': 142856.0, 'rules_normal': 142003.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 142856.0, 'rules_tr_normal': 142003.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40994.0, 'eqs_atom': 11157.0, 'eqs_body': 2200.0, 'eqs_other': 27637.0}, 'generator': {'vars': 108548.0, 'vars_eliminated': 0.0, 'vars_frozen': 59232.0, 'constraints': 8339.0, 'constraints_binary': 143114.0, 'constraints_ternary': 24860.0, 'acyc_edges': 0.0, 'complexity': 256126.0}}, 'solving': {'solvers': {'choices': 2474.0, 'conflicts': 241.0, 'conflicts_analyzed': 232.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 103.0, 'models': 2.0, 'models_level': 433.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 232.0, 'distributed_sum_lbd': 260.0, 'integrated': 192.0, 'lemmas': 2267.0, 'lits_learnt': 46896.0, 'lemmas_binary': 31.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.78125, 'integrated_imps': 180.0, 'integrated_jumps': 790.0, 'guiding_paths_lits': 777.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 230.0, 'lemmas_loop': 1849.0, 'lemmas_other': 188.0, 'lits_conflict': 384.0, 'lits_loop': 46097.0, 'lits_other': 415.0, 'jumps': {'jumps': 232.0, 'jumps_bounded': 5.0, 'levels': 718.0, 'levels_bounded': 8.0, 'max': 47.0, 'max_executed': 47.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [11.0, 0.0], 'lower': [11.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 4.591836929321289, 'cpu': 4.96875, 'solve': 0.37304115295410156, 'unsat': 0.09474754333496094, 'sat': 0.017955780029296875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 37.03856658935547, 'cpu': 37.90625, 'solve': 1.0148334503173828, 'unsat': 0.36051368713378906, 'sat': 0.08078575134277344}, 'models': {'enumerated': 6.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 6997.0, 'conflicts': 510.0, 'conflicts_analyzed': 462.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 301.0, 'models': 6.0, 'models_level': 958.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 481.0, 'distributed_sum_lbd': 677.0, 'integrated': 1387.0, 'lemmas': 7469.0, 'lits_learnt': 195474.0, 'lemmas_binary': 345.0, 'lemmas_ternary': 124.0, 'cpu_time': 2.1875, 'integrated_imps': 920.0, 'integrated_jumps': 3125.0, 'guiding_paths_lits': 4095.0, 'guiding_paths': 88.0, 'splits': 0.0, 'lemmas_conflict': 456.0, 'lemmas_loop': 5723.0, 'lemmas_other': 1290.0, 'lits_conflict': 2675.0, 'lits_loop': 183926.0, 'lits_other': 8873.0, 'jumps': {'jumps': 462.0, 'jumps_bounded': 36.0, 'levels': 4016.0, 'levels_bounded': 1832.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9}

[04-03-2022_16-25-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[04-03-2022_16-25-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None)

[04-03-2022_16-25-52] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 9]:
sub_goal(4, talos, move(puzzle_room_1), in(talos), puzzle_room_1, 3)

[04-03-2022_16-25-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-25-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-25-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.242313s.

[04-03-2022_16-25-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(3,9).

[04-03-2022_16-25-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-25-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.150054s with result Unsatisfiable.

[04-03-2022_16-25-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.392367199999967, Incremental time limit = None
Running cumulative time = 40.66066149999983, Cumulative time limit = 1577.3716841
Used memory = (RSS = 743.253906Mb, VMS = 791.035156Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-25-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=38.87936609999991, solving_time=1.7812953999999195, total_time=40.66066149999983, memory=Memory(rss=743.25390625, vms=791.03515625), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.242313499999966, solving_time=0.15005370000000084, total_time=4.392367199999967, memory=Memory(rss=743.25390625, vms=791.03515625), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 287679.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1139385.0, 'bodies_tr': 1139385.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 10708.0, 'count_bodies_tr': 10708.0, 'sccs': 403.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 49197.0, 'rules': 1554776.0, 'rules_normal': 1545184.0, 'rules_choice': 9572.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1554776.0, 'rules_tr_normal': 1545184.0, 'rules_tr_choice': 9572.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 554830.0, 'eqs_atom': 180559.0, 'eqs_body': 32445.0, 'eqs_other': 341826.0}, 'lpStep': {'atoms': 18250.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 114910.0, 'bodies_tr': 114910.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 146762.0, 'rules_normal': 145909.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 146762.0, 'rules_tr_normal': 145909.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 38333.0, 'eqs_atom': 11055.0, 'eqs_body': 2185.0, 'eqs_other': 25093.0}, 'generator': {'vars': 137033.0, 'vars_eliminated': 0.0, 'vars_frozen': 74279.0, 'constraints': 14584.0, 'constraints_binary': 226944.0, 'constraints_ternary': 38318.0, 'acyc_edges': 0.0, 'complexity': 280906.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 7.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 5.0, 'lemmas': 6.0, 'lits_learnt': 24.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.3125, 'integrated_imps': 5.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 854.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 5.0, 'lits_conflict': 4.0, 'lits_loop': 0.0, 'lits_other': 20.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [3.0, -60.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 4.410055160522461, 'cpu': 4.609375, 'solve': 0.04287147521972656, 'unsat': 0.04287147521972656, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 41.44862174987793, 'cpu': 42.515625, 'solve': 1.0577049255371094, 'unsat': 0.4033851623535156, 'sat': 0.08078575134277344}, 'models': {'enumerated': 6.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 6998.0, 'conflicts': 517.0, 'conflicts_analyzed': 463.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 301.0, 'models': 6.0, 'models_level': 958.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 482.0, 'distributed_sum_lbd': 679.0, 'integrated': 1392.0, 'lemmas': 7475.0, 'lits_learnt': 195498.0, 'lemmas_binary': 345.0, 'lemmas_ternary': 124.0, 'cpu_time': 2.5, 'integrated_imps': 925.0, 'integrated_jumps': 3125.0, 'guiding_paths_lits': 4949.0, 'guiding_paths': 98.0, 'splits': 0.0, 'lemmas_conflict': 457.0, 'lemmas_loop': 5723.0, 'lemmas_other': 1295.0, 'lits_conflict': 2679.0, 'lits_loop': 183926.0, 'lits_other': 8893.0, 'jumps': {'jumps': 463.0, 'jumps_bounded': 37.0, 'levels': 4019.0, 'levels_bounded': 1834.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-25-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-25-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-25-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.729906s.

[04-03-2022_16-26-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.177300s with result Unsatisfiable.

[04-03-2022_16-26-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.907206099999939, Incremental time limit = None
Running cumulative time = 45.56786759999977, Cumulative time limit = 1577.3716841
Used memory = (RSS = 782.765625Mb, VMS = 813.304688Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=43.60927249999986, solving_time=1.9585950999999113, total_time=45.56786759999977, memory=Memory(rss=782.765625, vms=813.3046875), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.7299063999999476, solving_time=0.17729969999999184, total_time=4.907206099999939, memory=Memory(rss=782.765625, vms=813.3046875), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 307008.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1264776.0, 'bodies_tr': 1264776.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 11763.0, 'count_bodies_tr': 11763.0, 'sccs': 453.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 60346.0, 'rules': 1712895.0, 'rules_normal': 1702450.0, 'rules_choice': 10423.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1712895.0, 'rules_tr_normal': 1702450.0, 'rules_tr_choice': 10423.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 594290.0, 'eqs_atom': 192170.0, 'eqs_body': 32770.0, 'eqs_other': 369350.0}, 'lpStep': {'atoms': 19329.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125391.0, 'bodies_tr': 125391.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158119.0, 'rules_normal': 157266.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158119.0, 'rules_tr_normal': 157266.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39460.0, 'eqs_atom': 11611.0, 'eqs_body': 325.0, 'eqs_other': 27524.0}, 'generator': {'vars': 166406.0, 'vars_eliminated': 0.0, 'vars_frozen': 89609.0, 'constraints': 27276.0, 'constraints_binary': 406454.0, 'constraints_ternary': 68796.0, 'acyc_edges': 0.0, 'complexity': 504038.0}}, 'solving': {'solvers': {'choices': 97.0, 'conflicts': 25.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 9.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 33.0, 'integrated': 66.0, 'lemmas': 1405.0, 'lits_learnt': 73150.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 13.0, 'cpu_time': 0.484375, 'integrated_imps': 18.0, 'integrated_jumps': 48.0, 'guiding_paths_lits': 931.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 1335.0, 'lemmas_other': 56.0, 'lits_conflict': 93.0, 'lits_loop': 72669.0, 'lits_other': 388.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 2.0, 'levels': 51.0, 'levels_bounded': 3.0, 'max': 12.0, 'max_executed': 12.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [8.0, -96.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 4.915107727050781, 'cpu': 5.234375, 'solve': 0.06682395935058594, 'unsat': 0.06682395935058594, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 46.36372947692871, 'cpu': 47.75, 'solve': 1.1245288848876953, 'unsat': 0.47020912170410156, 'sat': 0.08078575134277344}, 'models': {'enumerated': 6.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 7095.0, 'conflicts': 542.0, 'conflicts_analyzed': 477.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 310.0, 'models': 6.0, 'models_level': 958.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 496.0, 'distributed_sum_lbd': 712.0, 'integrated': 1458.0, 'lemmas': 8880.0, 'lits_learnt': 268648.0, 'lemmas_binary': 356.0, 'lemmas_ternary': 137.0, 'cpu_time': 2.984375, 'integrated_imps': 943.0, 'integrated_jumps': 3173.0, 'guiding_paths_lits': 5880.0, 'guiding_paths': 113.0, 'splits': 0.0, 'lemmas_conflict': 471.0, 'lemmas_loop': 7058.0, 'lemmas_other': 1351.0, 'lits_conflict': 2772.0, 'lits_loop': 256595.0, 'lits_other': 9281.0, 'jumps': {'jumps': 477.0, 'jumps_bounded': 39.0, 'levels': 4070.0, 'levels_bounded': 1837.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-01] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.624099s.

[04-03-2022_16-26-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.552705s with result Satisfiable.

[04-03-2022_16-26-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 5.17680439999998, Incremental time limit = None
Running cumulative time = 50.74467199999975, Cumulative time limit = 1577.3716841
Used memory = (RSS = 849.609375Mb, VMS = 921.410156Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 48.233372s, Solving = 2.511300s, Total = 50.744672s, Memory = (RSS = 849.609375Mb, VMS = 921.410156Mb), Step range = [0-12]), Calls = 12
Final Model :: Total atoms = 103344, Cost = (20, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-26-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=48.23337159999983, solving_time=2.511300399999925, total_time=50.74467199999975, memory=Memory(rss=849.609375, vms=921.41015625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.624099099999967, solving_time=0.5527053000000137, total_time=5.17680439999998, memory=Memory(rss=849.609375, vms=921.41015625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 326354.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1390198.0, 'bodies_tr': 1390198.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 12818.0, 'count_bodies_tr': 12818.0, 'sccs': 503.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 71495.0, 'rules': 1871085.0, 'rules_normal': 1859787.0, 'rules_choice': 11274.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1871085.0, 'rules_tr_normal': 1859787.0, 'rules_tr_choice': 11274.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 633805.0, 'eqs_atom': 203791.0, 'eqs_body': 33093.0, 'eqs_other': 396921.0}, 'lpStep': {'atoms': 19346.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125422.0, 'bodies_tr': 125422.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158190.0, 'rules_normal': 157337.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158190.0, 'rules_tr_normal': 157337.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39515.0, 'eqs_atom': 11621.0, 'eqs_body': 323.0, 'eqs_other': 27571.0}, 'generator': {'vars': 195795.0, 'vars_eliminated': 0.0, 'vars_frozen': 104946.0, 'constraints': 39971.0, 'constraints_binary': 586049.0, 'constraints_ternary': 98583.0, 'acyc_edges': 0.0, 'complexity': 726567.0}}, 'solving': {'solvers': {'choices': 1694.0, 'conflicts': 130.0, 'conflicts_analyzed': 116.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 96.0, 'models': 1.0, 'models_level': 278.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 104.0, 'distributed_sum_lbd': 252.0, 'integrated': 606.0, 'lemmas': 4436.0, 'lits_learnt': 216506.0, 'lemmas_binary': 346.0, 'lemmas_ternary': 126.0, 'cpu_time': 1.28125, 'integrated_imps': 46.0, 'integrated_jumps': 493.0, 'guiding_paths_lits': 1008.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 116.0, 'lemmas_loop': 3752.0, 'lemmas_other': 568.0, 'lits_conflict': 687.0, 'lits_loop': 213344.0, 'lits_other': 2475.0, 'jumps': {'jumps': 116.0, 'jumps_bounded': 3.0, 'levels': 568.0, 'levels_bounded': 5.0, 'max': 44.0, 'max_executed': 44.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [20.0, 0.0], 'lower': [20.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 5.185638427734375, 'cpu': 5.96875, 'solve': 0.4398784637451172, 'unsat': 0.3097114562988281, 'sat': 0.13016700744628906}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 51.549367904663086, 'cpu': 53.71875, 'solve': 1.5644073486328125, 'unsat': 0.7799205780029297, 'sat': 0.2109527587890625}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 8789.0, 'conflicts': 672.0, 'conflicts_analyzed': 593.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 406.0, 'models': 7.0, 'models_level': 1236.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 600.0, 'distributed_sum_lbd': 964.0, 'integrated': 2064.0, 'lemmas': 13316.0, 'lits_learnt': 485154.0, 'lemmas_binary': 702.0, 'lemmas_ternary': 263.0, 'cpu_time': 4.265625, 'integrated_imps': 989.0, 'integrated_jumps': 3666.0, 'guiding_paths_lits': 6888.0, 'guiding_paths': 131.0, 'splits': 0.0, 'lemmas_conflict': 587.0, 'lemmas_loop': 10810.0, 'lemmas_other': 1919.0, 'lits_conflict': 3459.0, 'lits_loop': 469939.0, 'lits_other': 11756.0, 'jumps': {'jumps': 593.0, 'jumps_bounded': 42.0, 'levels': 4638.0, 'levels_bounded': 1842.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-06] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12}

[04-03-2022_16-26-06] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[04-03-2022_16-26-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None)

[04-03-2022_16-26-06] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 12]:
sub_goal(4, talos, put(manipulator_arm_1,(block,6),puzzle_room_1_table), on((block,6)), puzzle_room_1_table, 4)
sub_goal(4, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 4)

[04-03-2022_16-26-06] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.641186s.

[04-03-2022_16-26-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(4,12).

[04-03-2022_16-26-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.191252s with result Unsatisfiable.

[04-03-2022_16-26-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.8324378000000365, Incremental time limit = None
Running cumulative time = 55.57710979999979, Cumulative time limit = 1577.3716841
Used memory = (RSS = 885.980469Mb, VMS = 941.062500Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=52.87455789999984, solving_time=2.7025518999999463, total_time=55.57710979999979, memory=Memory(rss=885.98046875, vms=941.0625), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.641186300000015, solving_time=0.19125150000002122, total_time=4.8324378000000365, memory=Memory(rss=885.98046875, vms=941.0625), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 345716.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1515648.0, 'bodies_tr': 1515648.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 13873.0, 'count_bodies_tr': 13873.0, 'sccs': 553.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 82644.0, 'rules': 2029341.0, 'rules_normal': 2017190.0, 'rules_choice': 12125.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2029341.0, 'rules_tr_normal': 2017190.0, 'rules_tr_choice': 12125.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 673377.0, 'eqs_atom': 215422.0, 'eqs_body': 33415.0, 'eqs_other': 424540.0}, 'lpStep': {'atoms': 19362.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125450.0, 'bodies_tr': 125450.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158256.0, 'rules_normal': 157403.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158256.0, 'rules_tr_normal': 157403.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39572.0, 'eqs_atom': 11631.0, 'eqs_body': 322.0, 'eqs_other': 27619.0}, 'generator': {'vars': 225197.0, 'vars_eliminated': 0.0, 'vars_frozen': 120289.0, 'constraints': 52669.0, 'constraints_binary': 765722.0, 'constraints_ternary': 128380.0, 'acyc_edges': 0.0, 'complexity': 949187.0}}, 'solving': {'solvers': {'choices': 6.0, 'conflicts': 10.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 4.0, 'lemmas': 8.0, 'lits_learnt': 95.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.375, 'integrated_imps': 4.0, 'integrated_jumps': 4.0, 'guiding_paths_lits': 1085.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 3.0, 'lemmas_other': 4.0, 'lits_conflict': 2.0, 'lits_loop': 85.0, 'lits_other': 8.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 1.0, 'max': 3.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -168.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 4.845769882202148, 'cpu': 5.09375, 'solve': 0.07081031799316406, 'unsat': 0.07081031799316406, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 56.395137786865234, 'cpu': 58.8125, 'solve': 1.6352176666259766, 'unsat': 0.8507308959960938, 'sat': 0.2109527587890625}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 8795.0, 'conflicts': 682.0, 'conflicts_analyzed': 594.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 406.0, 'models': 7.0, 'models_level': 1236.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 601.0, 'distributed_sum_lbd': 966.0, 'integrated': 2068.0, 'lemmas': 13324.0, 'lits_learnt': 485249.0, 'lemmas_binary': 707.0, 'lemmas_ternary': 263.0, 'cpu_time': 4.640625, 'integrated_imps': 993.0, 'integrated_jumps': 3670.0, 'guiding_paths_lits': 7973.0, 'guiding_paths': 138.0, 'splits': 0.0, 'lemmas_conflict': 588.0, 'lemmas_loop': 10813.0, 'lemmas_other': 1923.0, 'lits_conflict': 3461.0, 'lits_loop': 470024.0, 'lits_other': 11764.0, 'jumps': {'jumps': 594.0, 'jumps_bounded': 43.0, 'levels': 4641.0, 'levels_bounded': 1843.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.639776s.

[04-03-2022_16-26-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.466475s with result Satisfiable.

[04-03-2022_16-26-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 5.10625060000001, Incremental time limit = None
Running cumulative time = 60.6833603999998, Cumulative time limit = 1577.3716841
Used memory = (RSS = 943.460938Mb, VMS = 982.414062Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 57.514334s, Solving = 3.169027s, Total = 60.683360s, Memory = (RSS = 943.460938Mb, VMS = 982.414062Mb), Step range = [0-14]), Calls = 14
Final Model :: Total atoms = 108084, Cost = (24, -1), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-26-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=57.51433369999984, solving_time=3.169026699999961, total_time=60.6833603999998, memory=Memory(rss=943.4609375, vms=982.4140625), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.639775799999995, solving_time=0.4664748000000145, total_time=5.10625060000001, memory=Memory(rss=943.4609375, vms=982.4140625), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 365098.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1641132.0, 'bodies_tr': 1641132.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 14928.0, 'count_bodies_tr': 14928.0, 'sccs': 603.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 93793.0, 'rules': 2187670.0, 'rules_normal': 2174666.0, 'rules_choice': 12976.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2187670.0, 'rules_tr_normal': 2174666.0, 'rules_tr_choice': 12976.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 713020.0, 'eqs_atom': 227068.0, 'eqs_body': 33739.0, 'eqs_other': 452213.0}, 'lpStep': {'atoms': 19382.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125484.0, 'bodies_tr': 125484.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158329.0, 'rules_normal': 157476.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158329.0, 'rules_tr_normal': 157476.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39643.0, 'eqs_atom': 11646.0, 'eqs_body': 324.0, 'eqs_other': 27673.0}, 'generator': {'vars': 254609.0, 'vars_eliminated': 0.0, 'vars_frozen': 135637.0, 'constraints': 65368.0, 'constraints_binary': 945465.0, 'constraints_ternary': 158186.0, 'acyc_edges': 0.0, 'complexity': 1171887.0}}, 'solving': {'solvers': {'choices': 1664.0, 'conflicts': 88.0, 'conflicts_analyzed': 73.0, 'restarts': 0.0, 'restarts_last': 34.0, 'extra': {'domain_choices': 91.0, 'models': 1.0, 'models_level': 330.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 72.0, 'distributed_sum_lbd': 193.0, 'integrated': 423.0, 'lemmas': 3073.0, 'lits_learnt': 137137.0, 'lemmas_binary': 153.0, 'lemmas_ternary': 28.0, 'cpu_time': 1.8125, 'integrated_imps': 45.0, 'integrated_jumps': 589.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 72.0, 'lemmas_loop': 2602.0, 'lemmas_other': 399.0, 'lits_conflict': 477.0, 'lits_loop': 134263.0, 'lits_other': 2397.0, 'jumps': {'jumps': 73.0, 'jumps_bounded': 1.0, 'levels': 129.0, 'levels_bounded': 2.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [24.0, -1.0], 'lower': [24.0, -1.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 5.119876861572266, 'cpu': 6.5, 'solve': 0.34108924865722656, 'unsat': 0.11269760131835938, 'sat': 0.2283916473388672}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 61.5150146484375, 'cpu': 65.3125, 'solve': 1.9763069152832031, 'unsat': 0.9634284973144531, 'sat': 0.4393444061279297}, 'models': {'enumerated': 8.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 10459.0, 'conflicts': 770.0, 'conflicts_analyzed': 667.0, 'restarts': 0.0, 'restarts_last': 34.0, 'extra': {'domain_choices': 497.0, 'models': 8.0, 'models_level': 1566.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 673.0, 'distributed_sum_lbd': 1159.0, 'integrated': 2491.0, 'lemmas': 16397.0, 'lits_learnt': 622386.0, 'lemmas_binary': 860.0, 'lemmas_ternary': 291.0, 'cpu_time': 6.453125, 'integrated_imps': 1038.0, 'integrated_jumps': 4259.0, 'guiding_paths_lits': 9135.0, 'guiding_paths': 158.0, 'splits': 0.0, 'lemmas_conflict': 660.0, 'lemmas_loop': 13415.0, 'lemmas_other': 2322.0, 'lits_conflict': 3938.0, 'lits_loop': 604287.0, 'lits_other': 14161.0, 'jumps': {'jumps': 667.0, 'jumps_bounded': 44.0, 'levels': 4770.0, 'levels_bounded': 1845.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14}

[04-03-2022_16-26-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[04-03-2022_16-26-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None)

[04-03-2022_16-26-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 14]:
sub_goal(4, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 5)
sub_goal(4, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5)

[04-03-2022_16-26-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.514111s.

[04-03-2022_16-26-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(5,14).

[04-03-2022_16-26-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.756998s with result Satisfiable.

[04-03-2022_16-26-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 5.271108700000013, Incremental time limit = None
Running cumulative time = 65.95446909999981, Cumulative time limit = 1577.3716841
Used memory = (RSS = 1019.781250Mb, VMS = 1041.226562Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 62.028445s, Solving = 3.926024s, Total = 65.954469s, Memory = (RSS = 1019.781250Mb, VMS = 1041.226562Mb), Step range = [0-15]), Calls = 15
Final Model :: Total atoms = 110457, Cost = (26, -1), Optimality proven = False, Number = 2, Thread ID = 7, Model type = ModelType.StableModel

[04-03-2022_16-26-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=62.02844469999985, solving_time=3.9260243999999602, total_time=65.95446909999981, memory=Memory(rss=1019.78125, vms=1041.2265625), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.514111000000014, solving_time=0.7569976999999994, total_time=5.271108700000013, memory=Memory(rss=1019.78125, vms=1041.2265625), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 384498.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1766646.0, 'bodies_tr': 1766646.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 15983.0, 'count_bodies_tr': 15983.0, 'sccs': 653.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 104942.0, 'rules': 2346067.0, 'rules_normal': 2332210.0, 'rules_choice': 13827.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2346067.0, 'rules_tr_normal': 2332210.0, 'rules_tr_choice': 13827.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 752726.0, 'eqs_atom': 238725.0, 'eqs_body': 34062.0, 'eqs_other': 479939.0}, 'lpStep': {'atoms': 19400.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125514.0, 'bodies_tr': 125514.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158397.0, 'rules_normal': 157544.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158397.0, 'rules_tr_normal': 157544.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39706.0, 'eqs_atom': 11657.0, 'eqs_body': 323.0, 'eqs_other': 27726.0}, 'generator': {'vars': 284034.0, 'vars_eliminated': 0.0, 'vars_frozen': 150992.0, 'constraints': 78070.0, 'constraints_binary': 1125285.0, 'constraints_ternary': 188002.0, 'acyc_edges': 0.0, 'complexity': 1394677.0}}, 'solving': {'solvers': {'choices': 1942.0, 'conflicts': 21.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 57.0, 'models': 2.0, 'models_level': 666.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 16.0, 'integrated': 20.0, 'lemmas': 1023.0, 'lits_learnt': 64773.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 0.0, 'cpu_time': 1.859375, 'integrated_imps': 10.0, 'integrated_jumps': 208.0, 'guiding_paths_lits': 1239.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 997.0, 'lemmas_other': 18.0, 'lits_conflict': 139.0, 'lits_loop': 64546.0, 'lits_other': 88.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 3.0, 'levels': 16.0, 'levels_bounded': 4.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, -1.0], 'lower': [26.0, -1.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 5.287553787231445, 'cpu': 6.46875, 'solve': 0.6342754364013672, 'unsat': 0.11868476867675781, 'sat': 0.07476997375488281}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 66.80256843566895, 'cpu': 71.78125, 'solve': 2.6105823516845703, 'unsat': 1.082113265991211, 'sat': 0.5141143798828125}, 'models': {'enumerated': 10.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 12401.0, 'conflicts': 791.0, 'conflicts_analyzed': 676.0, 'restarts': 0.0, 'restarts_last': 34.0, 'extra': {'domain_choices': 554.0, 'models': 10.0, 'models_level': 2232.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 679.0, 'distributed_sum_lbd': 1175.0, 'integrated': 2511.0, 'lemmas': 17420.0, 'lits_learnt': 687159.0, 'lemmas_binary': 872.0, 'lemmas_ternary': 291.0, 'cpu_time': 8.3125, 'integrated_imps': 1048.0, 'integrated_jumps': 4467.0, 'guiding_paths_lits': 10374.0, 'guiding_paths': 174.0, 'splits': 0.0, 'lemmas_conflict': 668.0, 'lemmas_loop': 14412.0, 'lemmas_other': 2340.0, 'lits_conflict': 4077.0, 'lits_loop': 668833.0, 'lits_other': 14249.0, 'jumps': {'jumps': 676.0, 'jumps_bounded': 47.0, 'levels': 4786.0, 'levels_bounded': 1849.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15}

[04-03-2022_16-26-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[04-03-2022_16-26-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None)

[04-03-2022_16-26-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 15]:
sub_goal(4, talos, grasp(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), (block,9), 6)
sub_goal(4, talos, put(manipulator_arm_2,(block,3),puzzle_room_1_table), on((block,3)), puzzle_room_1_table, 6)

[04-03-2022_16-26-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.453271s.

[04-03-2022_16-26-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(6,15).

[04-03-2022_16-26-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.975712s with result Satisfiable.

[04-03-2022_16-26-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 5.4289832000000615, Incremental time limit = None
Running cumulative time = 71.38345229999987, Cumulative time limit = 1577.3716841
Used memory = (RSS = 1090.140625Mb, VMS = 1186.531250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 66.481716s, Solving = 4.901737s, Total = 71.383452s, Memory = (RSS = 1090.140625Mb, VMS = 1186.531250Mb), Step range = [0-16]), Calls = 16
Final Model :: Total atoms = 112831, Cost = (28, -2), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-26-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=66.48171559999986, solving_time=4.901736700000015, total_time=71.38345229999987, memory=Memory(rss=1090.140625, vms=1186.53125), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.453270900000007, solving_time=0.9757123000000547, total_time=5.4289832000000615, memory=Memory(rss=1090.140625, vms=1186.53125), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 403911.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1892184.0, 'bodies_tr': 1892184.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 17038.0, 'count_bodies_tr': 17038.0, 'sccs': 703.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 116091.0, 'rules': 2504524.0, 'rules_normal': 2489814.0, 'rules_choice': 14678.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2504524.0, 'rules_tr_normal': 2489814.0, 'rules_tr_choice': 14678.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 792487.0, 'eqs_atom': 250395.0, 'eqs_body': 34383.0, 'eqs_other': 507709.0}, 'lpStep': {'atoms': 19413.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125538.0, 'bodies_tr': 125538.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158457.0, 'rules_normal': 157604.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158457.0, 'rules_tr_normal': 157604.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39761.0, 'eqs_atom': 11670.0, 'eqs_body': 321.0, 'eqs_other': 27770.0}, 'generator': {'vars': 313461.0, 'vars_eliminated': 0.0, 'vars_frozen': 166347.0, 'constraints': 90772.0, 'constraints_binary': 1305155.0, 'constraints_ternary': 217820.0, 'acyc_edges': 0.0, 'complexity': 1617519.0}}, 'solving': {'solvers': {'choices': 1330.0, 'conflicts': 20.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 65.0, 'models': 2.0, 'models_level': 790.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 9.0, 'integrated': 16.0, 'lemmas': 136.0, 'lits_learnt': 7159.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 2.46875, 'integrated_imps': 3.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1316.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 113.0, 'lemmas_other': 16.0, 'lits_conflict': 104.0, 'lits_loop': 6919.0, 'lits_other': 136.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 3.0, 'levels': 81.0, 'levels_bounded': 72.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 64.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [28.0, -2.0], 'lower': [28.0, -2.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 5.446510314941406, 'cpu': 7.0625, 'solve': 0.8339099884033203, 'unsat': 0.12267303466796875, 'sat': 0.15059661865234375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 72.24907875061035, 'cpu': 78.84375, 'solve': 3.4444923400878906, 'unsat': 1.2047863006591797, 'sat': 0.6647109985351562}, 'models': {'enumerated': 12.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 13731.0, 'conflicts': 811.0, 'conflicts_analyzed': 683.0, 'restarts': 0.0, 'restarts_last': 34.0, 'extra': {'domain_choices': 619.0, 'models': 12.0, 'models_level': 3022.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 683.0, 'distributed_sum_lbd': 1184.0, 'integrated': 2527.0, 'lemmas': 17556.0, 'lits_learnt': 694318.0, 'lemmas_binary': 872.0, 'lemmas_ternary': 291.0, 'cpu_time': 10.78125, 'integrated_imps': 1051.0, 'integrated_jumps': 4467.0, 'guiding_paths_lits': 11690.0, 'guiding_paths': 190.0, 'splits': 0.0, 'lemmas_conflict': 675.0, 'lemmas_loop': 14525.0, 'lemmas_other': 2356.0, 'lits_conflict': 4181.0, 'lits_loop': 675752.0, 'lits_other': 14385.0, 'jumps': {'jumps': 683.0, 'jumps_bounded': 50.0, 'levels': 4867.0, 'levels_bounded': 1921.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

[04-03-2022_16-26-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[04-03-2022_16-26-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None)

[04-03-2022_16-26-27] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 16]:
sub_goal(4, talos, put(manipulator_arm_1,(block,9),puzzle_room_1_table), on((block,9)), puzzle_room_1_table, 7)

[04-03-2022_16-26-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.610528s.

[04-03-2022_16-26-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(7,16).

[04-03-2022_16-26-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.167504s with result Satisfiable.

[04-03-2022_16-26-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 5.778032199999984, Incremental time limit = None
Running cumulative time = 77.16148449999986, Cumulative time limit = 1577.3716841
Used memory = (RSS = 1149.914062Mb, VMS = 1229.976562Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 71.092244s, Solving = 6.069240s, Total = 77.161484s, Memory = (RSS = 1149.914062Mb, VMS = 1229.976562Mb), Step range = [0-17]), Calls = 17
Final Model :: Total atoms = 115202, Cost = (29, -3), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-26-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=71.09224409999985, solving_time=6.069240400000012, total_time=77.16148449999986, memory=Memory(rss=1149.9140625, vms=1229.9765625), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.610528499999987, solving_time=1.1675036999999975, total_time=5.778032199999984, memory=Memory(rss=1149.9140625, vms=1229.9765625), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 423337.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 2017745.0, 'bodies_tr': 2017745.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 18093.0, 'count_bodies_tr': 18093.0, 'sccs': 753.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 127240.0, 'rules': 2663040.0, 'rules_normal': 2647477.0, 'rules_choice': 15529.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2663040.0, 'rules_tr_normal': 2647477.0, 'rules_tr_choice': 15529.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 832309.0, 'eqs_atom': 262078.0, 'eqs_body': 34706.0, 'eqs_other': 535525.0}, 'lpStep': {'atoms': 19426.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125561.0, 'bodies_tr': 125561.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158516.0, 'rules_normal': 157663.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158516.0, 'rules_tr_normal': 157663.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39822.0, 'eqs_atom': 11683.0, 'eqs_body': 323.0, 'eqs_other': 27816.0}, 'generator': {'vars': 342888.0, 'vars_eliminated': 0.0, 'vars_frozen': 181702.0, 'constraints': 103474.0, 'constraints_binary': 1485071.0, 'constraints_ternary': 247638.0, 'acyc_edges': 0.0, 'complexity': 1840407.0}}, 'solving': {'solvers': {'choices': 1497.0, 'conflicts': 24.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 75.0, 'models': 2.0, 'models_level': 858.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 0.0, 'lemmas': 124.0, 'lits_learnt': 7456.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 2.59375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1393.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 116.0, 'lemmas_other': 0.0, 'lits_conflict': 200.0, 'lits_loop': 7256.0, 'lits_other': 0.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 1.0, 'levels': 12.0, 'levels_bounded': 4.0, 'max': 5.0, 'max_executed': 1.0, 'max_bounded': 4.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, -3.0], 'lower': [29.0, -3.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 5.79638671875, 'cpu': 7.34375, 'solve': 1.0260238647460938, 'unsat': 0.2017040252685547, 'sat': 0.09872245788574219}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 78.04546546936035, 'cpu': 86.1875, 'solve': 4.470516204833984, 'unsat': 1.4064903259277344, 'sat': 0.7634334564208984}, 'models': {'enumerated': 14.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 15228.0, 'conflicts': 835.0, 'conflicts_analyzed': 691.0, 'restarts': 0.0, 'restarts_last': 34.0, 'extra': {'domain_choices': 694.0, 'models': 14.0, 'models_level': 3880.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 686.0, 'distributed_sum_lbd': 1190.0, 'integrated': 2527.0, 'lemmas': 17680.0, 'lits_learnt': 701774.0, 'lemmas_binary': 872.0, 'lemmas_ternary': 291.0, 'cpu_time': 13.375, 'integrated_imps': 1051.0, 'integrated_jumps': 4467.0, 'guiding_paths_lits': 13083.0, 'guiding_paths': 206.0, 'splits': 0.0, 'lemmas_conflict': 683.0, 'lemmas_loop': 14641.0, 'lemmas_other': 2356.0, 'lits_conflict': 4381.0, 'lits_loop': 683008.0, 'lits_other': 14385.0, 'jumps': {'jumps': 691.0, 'jumps_bounded': 51.0, 'levels': 4879.0, 'levels_bounded': 1925.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-33] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}

[04-03-2022_16-26-33] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[04-03-2022_16-26-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None)

[04-03-2022_16-26-33] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 17]:
sub_goal(4, talos, release(manipulator_arm_1,(block,9)), grasping(manipulator_arm_1), nothing, 8)
sub_goal(4, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 8)

[04-03-2022_16-26-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.684846s.

[04-03-2022_16-26-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(8,17).

[04-03-2022_16-26-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.275015s with result Satisfiable.

[04-03-2022_16-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 5.959860999999989, Incremental time limit = None
Running cumulative time = 83.12134549999985, Cumulative time limit = 1577.3716841
Used memory = (RSS = 1243.066406Mb, VMS = 1298.351562Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 75.777090s, Solving = 7.344256s, Total = 83.121345s, Memory = (RSS = 1243.066406Mb, VMS = 1298.351562Mb), Step range = [0-18]), Calls = 18
Final Model :: Total atoms = 117578, Cost = (31, -3), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-26-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=75.77708989999985, solving_time=7.344255599999997, total_time=83.12134549999985, memory=Memory(rss=1243.06640625, vms=1298.3515625), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.684845800000005, solving_time=1.2750151999999844, total_time=5.959860999999989, memory=Memory(rss=1243.06640625, vms=1298.3515625), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 442776.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 2143329.0, 'bodies_tr': 2143329.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 19148.0, 'count_bodies_tr': 19148.0, 'sccs': 803.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 138389.0, 'rules': 2821615.0, 'rules_normal': 2805199.0, 'rules_choice': 16380.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2821615.0, 'rules_tr_normal': 2805199.0, 'rules_tr_choice': 16380.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 872188.0, 'eqs_atom': 273774.0, 'eqs_body': 35027.0, 'eqs_other': 563387.0}, 'lpStep': {'atoms': 19439.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125584.0, 'bodies_tr': 125584.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158575.0, 'rules_normal': 157722.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158575.0, 'rules_tr_normal': 157722.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39879.0, 'eqs_atom': 11696.0, 'eqs_body': 321.0, 'eqs_other': 27862.0}, 'generator': {'vars': 372315.0, 'vars_eliminated': 0.0, 'vars_frozen': 197057.0, 'constraints': 116176.0, 'constraints_binary': 1665033.0, 'constraints_ternary': 277456.0, 'acyc_edges': 0.0, 'complexity': 2063341.0}}, 'solving': {'solvers': {'choices': 2251.0, 'conflicts': 32.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 86.0, 'models': 3.0, 'models_level': 1379.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 17.0, 'integrated': 12.0, 'lemmas': 74.0, 'lits_learnt': 2556.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 3.234375, 'integrated_imps': 3.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 1470.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 50.0, 'lemmas_other': 9.0, 'lits_conflict': 1358.0, 'lits_loop': 578.0, 'lits_other': 620.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 2.0, 'levels': 72.0, 'levels_bounded': 6.0, 'max': 25.0, 'max_executed': 25.0, 'max_bounded': 5.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, -3.0], 'lower': [31.0, -3.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 5.983100891113281, 'cpu': 8.0625, 'solve': 1.1360111236572266, 'unsat': 0.127685546875, 'sat': 0.10246086120605469}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 84.02856636047363, 'cpu': 94.25, 'solve': 5.606527328491211, 'unsat': 1.5341758728027344, 'sat': 0.8658943176269531}, 'models': {'enumerated': 17.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 17479.0, 'conflicts': 867.0, 'conflicts_analyzed': 706.0, 'restarts': 0.0, 'restarts_last': 34.0, 'extra': {'domain_choices': 780.0, 'models': 17.0, 'models_level': 5259.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 693.0, 'distributed_sum_lbd': 1207.0, 'integrated': 2539.0, 'lemmas': 17754.0, 'lits_learnt': 704330.0, 'lemmas_binary': 872.0, 'lemmas_ternary': 291.0, 'cpu_time': 16.609375, 'integrated_imps': 1054.0, 'integrated_jumps': 4469.0, 'guiding_paths_lits': 14553.0, 'guiding_paths': 222.0, 'splits': 0.0, 'lemmas_conflict': 698.0, 'lemmas_loop': 14691.0, 'lemmas_other': 2365.0, 'lits_conflict': 5739.0, 'lits_loop': 683586.0, 'lits_other': 15005.0, 'jumps': {'jumps': 706.0, 'jumps_bounded': 53.0, 'levels': 4951.0, 'levels_bounded': 1931.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-39] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}

[04-03-2022_16-26-39] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[04-03-2022_16-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 18)', truth=True, inc_range=None)

[04-03-2022_16-26-39] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 18]:
sub_goal(4, talos, move(store_room_1), in(talos), store_room_1, 9)

[04-03-2022_16-26-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.470999s.

[04-03-2022_16-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(9, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(9,18).

[04-03-2022_16-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.279011s with result Unsatisfiable.

[04-03-2022_16-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.750009999999975, Incremental time limit = None
Running cumulative time = 87.87135549999982, Cumulative time limit = 1577.3716841
Used memory = (RSS = 1296.597656Mb, VMS = 1335.484375Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=80.24808859999985, solving_time=7.623266899999976, total_time=87.87135549999982, memory=Memory(rss=1296.59765625, vms=1335.484375), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.4709986999999956, solving_time=0.2790112999999792, total_time=4.750009999999975, memory=Memory(rss=1296.59765625, vms=1335.484375), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 462228.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 2268936.0, 'bodies_tr': 2268936.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 20203.0, 'count_bodies_tr': 20203.0, 'sccs': 853.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 149538.0, 'rules': 2980249.0, 'rules_normal': 2962980.0, 'rules_choice': 17231.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 2980249.0, 'rules_tr_normal': 2962980.0, 'rules_tr_choice': 17231.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 912128.0, 'eqs_atom': 285483.0, 'eqs_body': 35350.0, 'eqs_other': 591295.0}, 'lpStep': {'atoms': 19452.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125607.0, 'bodies_tr': 125607.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158634.0, 'rules_normal': 157781.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158634.0, 'rules_tr_normal': 157781.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39940.0, 'eqs_atom': 11709.0, 'eqs_body': 323.0, 'eqs_other': 27908.0}, 'generator': {'vars': 401742.0, 'vars_eliminated': 0.0, 'vars_frozen': 212412.0, 'constraints': 128878.0, 'constraints_binary': 1845041.0, 'constraints_ternary': 307274.0, 'acyc_edges': 0.0, 'complexity': 2286321.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.65625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1547.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 19.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -384.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 4.772737503051758, 'cpu': 5.28125, 'solve': 0.1341705322265625, 'unsat': 0.1341705322265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 88.80130386352539, 'cpu': 99.53125, 'solve': 5.740697860717773, 'unsat': 1.6683464050292969, 'sat': 0.8658943176269531}, 'models': {'enumerated': 17.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 17479.0, 'conflicts': 872.0, 'conflicts_analyzed': 706.0, 'restarts': 0.0, 'restarts_last': 34.0, 'extra': {'domain_choices': 780.0, 'models': 17.0, 'models_level': 5259.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 693.0, 'distributed_sum_lbd': 1207.0, 'integrated': 2539.0, 'lemmas': 17754.0, 'lits_learnt': 704330.0, 'lemmas_binary': 872.0, 'lemmas_ternary': 291.0, 'cpu_time': 17.265625, 'integrated_imps': 1054.0, 'integrated_jumps': 4469.0, 'guiding_paths_lits': 16100.0, 'guiding_paths': 229.0, 'splits': 0.0, 'lemmas_conflict': 698.0, 'lemmas_loop': 14691.0, 'lemmas_other': 2365.0, 'lits_conflict': 5739.0, 'lits_loop': 683586.0, 'lits_other': 15005.0, 'jumps': {'jumps': 706.0, 'jumps_bounded': 53.0, 'levels': 4951.0, 'levels_bounded': 1931.0, 'max': 130.0, 'max_executed': 130.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-44] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.677959s.

[04-03-2022_16-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.469252s with result Unsatisfiable.

[04-03-2022_16-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 5.147211000000027, Incremental time limit = None
Running cumulative time = 93.01856649999985, Cumulative time limit = 1577.3716841
Used memory = (RSS = 1359.894531Mb, VMS = 1528.449219Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-26-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=84.92604719999986, solving_time=8.092519299999992, total_time=93.01856649999985, memory=Memory(rss=1359.89453125, vms=1528.44921875), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.677958600000011, solving_time=0.4692524000000162, total_time=5.147211000000027, memory=Memory(rss=1359.89453125, vms=1528.44921875), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 481693.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 2394566.0, 'bodies_tr': 2394566.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 21258.0, 'count_bodies_tr': 21258.0, 'sccs': 903.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 160687.0, 'rules': 3138942.0, 'rules_normal': 3120820.0, 'rules_choice': 18082.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 3138942.0, 'rules_tr_normal': 3120820.0, 'rules_tr_choice': 18082.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 952125.0, 'eqs_atom': 297205.0, 'eqs_body': 35671.0, 'eqs_other': 619249.0}, 'lpStep': {'atoms': 19465.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 125630.0, 'bodies_tr': 125630.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1055.0, 'count_bodies_tr': 1055.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11149.0, 'rules': 158693.0, 'rules_normal': 157840.0, 'rules_choice': 851.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 158693.0, 'rules_tr_normal': 157840.0, 'rules_tr_choice': 851.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39997.0, 'eqs_atom': 11722.0, 'eqs_body': 321.0, 'eqs_other': 27954.0}, 'generator': {'vars': 431169.0, 'vars_eliminated': 0.0, 'vars_frozen': 227767.0, 'constraints': 141580.0, 'constraints_binary': 2025095.0, 'constraints_ternary': 337092.0, 'acyc_edges': 0.0, 'complexity': 2509347.0}}, 'solving': {'solvers': {'choices': 851.0, 'conflicts': 117.0, 'conflicts_analyzed': 102.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 31.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 59.0, 'distributed_sum_lbd': 161.0, 'integrated': 262.0, 'lemmas': 8097.0, 'lits_learnt': 443616.0, 'lemmas_binary': 48.0, 'lemmas_ternary': 36.0, 'cpu_time': 1.953125, 'integrated_imps': 21.0, 'integrated_jumps': 332.0, 'guiding_paths_lits': 1624.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 100.0, 'lemmas_loop': 7737.0, 'lemmas_other': 260.0, 'lits_conflict': 7751.0, 'lits_loop': 431114.0, 'lits_other': 4751.0, 'jumps': {'jumps': 102.0, 'jumps_bounded': 4.0, 'levels': 525.0, 'levels_bounded': 6.0, 'max': 175.0, 'max_executed': 175.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [10.0, -420.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 5.1741790771484375, 'cpu': 6.75, 'solve': 0.31615257263183594, 'unsat': 0.31615257263183594, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 93.97548294067383, 'cpu': 106.28125, 'solve': 6.056850433349609, 'unsat': 1.9844989776611328, 'sat': 0.8658943176269531}, 'models': {'enumerated': 17.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 18330.0, 'conflicts': 989.0, 'conflicts_analyzed': 808.0, 'restarts': 0.0, 'restarts_last': 34.0, 'extra': {'domain_choices': 811.0, 'models': 17.0, 'models_level': 5259.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 752.0, 'distributed_sum_lbd': 1368.0, 'integrated': 2801.0, 'lemmas': 25851.0, 'lits_learnt': 1147946.0, 'lemmas_binary': 920.0, 'lemmas_ternary': 327.0, 'cpu_time': 19.21875, 'integrated_imps': 1075.0, 'integrated_jumps': 4801.0, 'guiding_paths_lits': 17724.0, 'guiding_paths': 246.0, 'splits': 0.0, 'lemmas_conflict': 798.0, 'lemmas_loop': 22428.0, 'lemmas_other': 2625.0, 'lits_conflict': 13490.0, 'lits_loop': 1114700.0, 'lits_other': 19756.0, 'jumps': {'jumps': 808.0, 'jumps_bounded': 57.0, 'levels': 5476.0, 'levels_bounded': 1937.0, 'max': 175.0, 'max_executed': 175.0, 'max_bounded': 90.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-26-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =      9 : Maximum =    300

[04-03-2022_16-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(9), Function('sequential', [], True), Function('true', [], True)])]

