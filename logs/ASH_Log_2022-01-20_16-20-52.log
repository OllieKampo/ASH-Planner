[20-01-2022_16-20-52] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[20-01-2022_16-20-52] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[20-01-2022_16-20-52] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[20-01-2022_16-20-52] DEBUG :: __main__ >> Command line arguments:
'--config=experiments\\configurations\\main\\proactive_strategies\\ground_first\\basic\\PMT1_basic_n2_yield_conc_gf.config'
'-ao'
'standard'

[20-01-2022_16-20-52] DEBUG :: __main__ >> Configuration file loaded: experiments\configurations\main\proactive_strategies\ground_first\basic\PMT1_basic_n2_yield_conc_gf.config

[20-01-2022_16-20-52] DEBUG :: __main__ >> Configuration file arguments:
'./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp'
'./problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'
'-m'
'hcr'
'-t'
'sequential'
'-yield'
'Fase'
'-min_bound'
'True'
'-conc'
'True'
'-strat'
'basic'
'-bound'
'2'
'-method'
'ground-first'
'-preempt_mode'
'optimise'
'-preempt_pos_fgoals'
'True'
'-preempt_neg_fgoals'
'False'
'-tl'
'1800'
'-ll'
'200'
'-xf'
'-df'
'-ao'
'standard'

[20-01-2022_16-20-52] DEBUG :: __main__ >> Parsed command line arguments:
('files', ['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'])
('load_schema', None)
('config_file_naming', False)
('plan_file', './solutions/plans/ASH_Plan_2022-01-20_16-20-52.txt')
('log_file', './logs/ASH_Log_2022-01-20_16-20-52.log')
('excel_file', './experiments/results/ASH_Excel_2022-01-20_16-20-52.xlsx')
('data_file', './experiments/results/ASH_Data_2022-01-20_16-20-52.dat')
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2022-01-20_16-20-52.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'standard')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'test')
('experimental_runs', 1)
('initial_runs', 0)
('optimum', None)
('threads', 8)
('planning_time_limit', 1800)
('search_length_limit', 200)
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', True)
('minimise_actions', None)
('sequential_yielding', False)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('problem_space_level', 1)
('top_level', None)
('bottom_level', 1)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', 2)
('bound_type', 'incremental_time')
('save_grounding', False)
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', False)
('divide_tasks_on_final_goal_intermediate_achievement_ordering', False)
('final_goal_intermediate_achievement_ordering_preferences', None)
('positive_final_goal_preemptive_achievement', True)
('negative_final_goal_preemptive_achievement', False)
('final_goal_preemptive_achievement_mode', 'optimise')

[20-01-2022_16-20-53] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp
                ./problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp]

[20-01-2022_16-20-53] DEBUG :: core.Planner >> The domain files ['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'] were loaded successfully, contain all domain program parts, and contain problem program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[20-01-2022_16-20-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 4, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 4.

%% Abstraction types
#const reduc = 3. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(4, tasking). % Classical
model_type(3, reduced).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(4, robot).
class(4, armed_robot).
class(4, location).
class(4, room).
class(4, object).
class(4, grounded).
class(4, graspable).
class(4, placeable).
class(4, block).
class(4, surface).
class(4, table).
class(4, colour).

%% Classes deleted by redefinition
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted by refinement
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of cells
override_class(room, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < TL, AL_2 < TL,
                                               model_type(TL, tasking),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= TL, model_type(TL, tasking),
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, placeable, OBJ),
                                                          insta_of(AL, surface, SURFACE),
                                                          AL >= TL, model_type(TL, tasking), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot grasp an object with two graspers simultaneously
:- holds(AL, grasping(DESC_1), OBJ, t),
   holds(AL, grasping(DESC_2), OBJ, t),
   fluent(AL, inertial, grasping(DESC_1), OBJ),
   fluent(AL, inertial, grasping(DESC_2), OBJ),
   DESC_1 != DESC_2,
   desce_of(AL, ROBO, DESC_1),
   desce_of(AL, ROBO, DESC_2),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC_1),
   insta_of(AL, grasper, DESC_2),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
% :- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
%                       fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
%                       insta_of(AL_1, graspable, OBJ) },
%    M = #count { ARM : desce_of(AL_2, ROBO, ARM),
%                       insta_of(AL_2, manipulator_arm, ARM),
%                       al(AL_2), AL_1 >= AL_2 },
%    N > M, block_number(N), block_number(M),
%    insta_of(AL_1, robot, ROBO),
%    AL_1 >= TL, model_type(TL, tasking), sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= TL, model_type(TL, tasking),
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= TL, model_type(TL, tasking),
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Medium Problem Specification :: Version 1                             %%
%%                                                                       %%
%% Nine block setup, with the additional three on the table.             %%
%% This problem has longer manipulation plans at all levels.             %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first three blocks are stacked on the puzzle room table:
%%      - This configuration presents the Sussman anomoly.
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).

%% The other three blocks are on the floor in the store room:
%%      - Talos will have to make at least two trips to the store room to collect these.
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%% The additional three blocks are placed with two in the middle of the table and one in the store room:
%%      - Talos will not have to make additional trips to the store room as a result of this.
holds(1, on((block, 7)), puzzle_room_table_middle, 0).
holds(1, in((block, 8)), (store_room, 0), 0).
holds(1, on((block, 9)), (block, 7), 0).
holds(1, on((block, 8)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..9).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_middle).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_middle).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 387 rules

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.0034885000000000055s

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:634:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:647:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:648:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:652:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:653:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:654:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:658:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:659:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:660:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:664:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:665:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:677:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:678:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:679:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:685:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:686:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:691:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:692:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.010237s.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001225s with result Satisfiable.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.010237s, Solving = 0.001225s, Total = 0.011462s, Memory = (RSS = 104.851562Mb, VMS = 91.882812Mb)
Final Model :: Total atoms = 73, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[20-01-2022_16-20-53] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-4] instantiated successfully

[20-01-2022_16-20-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 4, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 4.

%% Abstraction types
#const reduc = 3. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(4, tasking). % Classical
model_type(3, reduced).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(4, robot).
class(4, armed_robot).
class(4, location).
class(4, room).
class(4, object).
class(4, grounded).
class(4, graspable).
class(4, placeable).
class(4, block).
class(4, surface).
class(4, table).
class(4, colour).

%% Classes deleted by redefinition
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted by refinement
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of cells
override_class(room, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < TL, AL_2 < TL,
                                               model_type(TL, tasking),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= TL, model_type(TL, tasking),
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, placeable, OBJ),
                                                          insta_of(AL, surface, SURFACE),
                                                          AL >= TL, model_type(TL, tasking), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot grasp an object with two graspers simultaneously
:- holds(AL, grasping(DESC_1), OBJ, t),
   holds(AL, grasping(DESC_2), OBJ, t),
   fluent(AL, inertial, grasping(DESC_1), OBJ),
   fluent(AL, inertial, grasping(DESC_2), OBJ),
   DESC_1 != DESC_2,
   desce_of(AL, ROBO, DESC_1),
   desce_of(AL, ROBO, DESC_2),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC_1),
   insta_of(AL, grasper, DESC_2),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
% :- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
%                       fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
%                       insta_of(AL_1, graspable, OBJ) },
%    M = #count { ARM : desce_of(AL_2, ROBO, ARM),
%                       insta_of(AL_2, manipulator_arm, ARM),
%                       al(AL_2), AL_1 >= AL_2 },
%    N > M, block_number(N), block_number(M),
%    insta_of(AL_1, robot, ROBO),
%    AL_1 >= TL, model_type(TL, tasking), sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= TL, model_type(TL, tasking),
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= TL, model_type(TL, tasking),
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Medium Problem Specification :: Version 1                             %%
%%                                                                       %%
%% Nine block setup, with the additional three on the table.             %%
%% This problem has longer manipulation plans at all levels.             %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first three blocks are stacked on the puzzle room table:
%%      - This configuration presents the Sussman anomoly.
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).

%% The other three blocks are on the floor in the store room:
%%      - Talos will have to make at least two trips to the store room to collect these.
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%% The additional three blocks are placed with two in the middle of the table and one in the store room:
%%      - Talos will not have to make additional trips to the store room as a result of this.
holds(1, on((block, 7)), puzzle_room_table_middle, 0).
holds(1, in((block, 8)), (store_room, 0), 0).
holds(1, on((block, 9)), (block, 7), 0).
holds(1, on((block, 8)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..9).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_middle).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_middle).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); minimise_actions = true. [1@2,ROBOT,A,step]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M); order_fgoals = true. [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); order_fgoals = true.
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@-1,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@-1,AL,ROBOT,A,F,V,step]
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- step > minimum_search_length_bound; incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 4.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
model_type(4,tasking).
model_type(3,reduced).
model_type(2,condensed).
model_type(1,ground).
class(4,robot).
class(4,armed_robot).
class(4,location).
class(4,room).
class(4,object).
class(4,grounded).
class(4,graspable).
class(4,placeable).
class(4,block).
class(4,surface).
class(4,table).
class(4,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1 < TL; AL_2 < TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,transporting(ROBO,OBJ),B) :- insta_of(AL_2,armed_robot,ROBO); insta_of(AL_1,graspable,OBJ); OBJ != nothing; AL_1 >= TL; model_type(TL,tasking); sl(AL_2); sl(AL_1); AL_2 >= AL_1; boolean(B).
fluent(AL,defined,tower_base(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,complete_tower(COLOUR,TABLE),B) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < TL; model_type(TL,tasking); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < TL; model_type(TL,tasking); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,collect(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL >= TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,deposit(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL >= TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,place_upon(OBJ,SURFACE)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
effect(AL,ROBO,collect(OBJ),transporting(ROBO,OBJ),true) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,collect(OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,on(OBJ),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),false); insta_of(RL,armed_robot,ROBO); insta_of(RL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,transporting(ROBO,OBJ),false); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO,collect(OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,collect(OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,collect(OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,collect(OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),true,true) :- OBJ != nothing; action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,SURFACE),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,OBJ_2),on(OBJ_2),nothing,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ_2),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,surface,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
#false :- holds(AL,grasping(DESC_1),OBJ,t); holds(AL,grasping(DESC_2),OBJ,t); fluent(AL,inertial,grasping(DESC_1),OBJ); fluent(AL,inertial,grasping(DESC_2),OBJ); DESC_1 != DESC_2; desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); insta_of(AL,surface,SURFACE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE,TABLE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,complete_tower(COLOUR,TABLE),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; blocks_per_tower(N); holds(AL,unordered_tower(BASE,TABLE),false,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,complete_tower(COLOUR,TABLE),true); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,transporting(ROBO,OBJ),true,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,transporting(ROBO,OBJ),true); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3.
holds(AL_1,transporting(ROBO,OBJ),true,t) :- holds(AL_2,grasping(COMP),OBJ,t); fluent(AL_1,inertial,transporting(ROBO,OBJ),true); fluent(AL_2,inertial,grasping(COMP),OBJ); desce_of(AL_2,ROBO,COMP); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_3,grasper,COMP); insta_of(AL_4,robot,ROBO); AL_1 >= TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,transporting(ROBO,OBJ),false,t) :- 0 = #count { COMP: holds(AL_2,grasping(COMP),OBJ,t), fluent(AL_2,inertial,grasping(COMP),OBJ), desce_of(AL_2,ROBO,COMP), insta_of(AL_3,grasper,COMP), sl(AL_3), AL_3 >= AL_2 }; fluent(AL_1,inertial,transporting(ROBO,OBJ),false); has_desce(AL_2,ROBO,grasper); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_4,robot,ROBO); AL_1 >= TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_4); AL_4 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(AL,colour_of((BLOCK,N),yellow)) :- static(AL,colour_of((BLOCK,N),yellow)); insta_of(AL,block,(BLOCK,N)); N > 6; N <= 9; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
holds(1,on((block,7)),puzzle_room_table_middle,0).
holds(1,in((block,8)),(store_room,0),0).
holds(1,on((block,9)),(block,7),0).
holds(1,on((block,8)),nothing,0).
#program goal_state.
goal_fluent(AL,complete_tower(COLOUR,TABLE)) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,unordered_tower(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete_tower(COLOUR,TABLE),true,true) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
final_goal(1,on((block,9)),puzzle_room_table_middle,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..9)).
blocks_per_tower(3).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_middle).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(colour,yellow).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_middle).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Generating initial states...

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[20-01-2022_16-20-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 387 rules

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0031324999999999825s

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.231607s.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.049588s with result Satisfiable.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.231607s, Solving = 0.049588s, Total = 0.281195s, Memory = (RSS = 122.824219Mb, VMS = 110.152344Mb)
Final Model :: Total atoms = 4685, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.231607s, Solving = 0.049588s, Total = 0.281195s, Memory = (RSS = 122.824219Mb, VMS = 110.152344Mb)
Final Model :: Total atoms = 4685, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 4            
      ================================================      

holds(4, complete_tower(blue,puzzle_room_table), false, 0)
holds(4, complete_tower(red,puzzle_room_table), false, 0)
holds(4, complete_tower(yellow,puzzle_room_table), false, 0)
holds(4, in((block,1)), puzzle_room, 0)
holds(4, in((block,2)), puzzle_room, 0)
holds(4, in((block,3)), puzzle_room, 0)
holds(4, in((block,4)), store_room, 0)
holds(4, in((block,5)), store_room, 0)
holds(4, in((block,6)), store_room, 0)
holds(4, in((block,7)), puzzle_room, 0)
holds(4, in((block,8)), store_room, 0)
holds(4, in((block,9)), puzzle_room, 0)
holds(4, in(puzzle_room_table), puzzle_room, 0)
holds(4, in(talos), starting_room, 0)
holds(4, in_tower((block,1),(block,1)), true, 0)
holds(4, in_tower((block,1),(block,2)), false, 0)
holds(4, in_tower((block,1),(block,3)), true, 0)
holds(4, in_tower((block,1),(block,4)), false, 0)
holds(4, in_tower((block,1),(block,5)), false, 0)
holds(4, in_tower((block,1),(block,6)), false, 0)
holds(4, in_tower((block,1),(block,7)), false, 0)
holds(4, in_tower((block,1),(block,8)), false, 0)
holds(4, in_tower((block,1),(block,9)), false, 0)
holds(4, in_tower((block,2),(block,1)), false, 0)
holds(4, in_tower((block,2),(block,2)), true, 0)
holds(4, in_tower((block,2),(block,3)), false, 0)
holds(4, in_tower((block,2),(block,4)), false, 0)
holds(4, in_tower((block,2),(block,5)), false, 0)
holds(4, in_tower((block,2),(block,6)), false, 0)
holds(4, in_tower((block,2),(block,7)), false, 0)
holds(4, in_tower((block,2),(block,8)), false, 0)
holds(4, in_tower((block,2),(block,9)), false, 0)
holds(4, in_tower((block,3),(block,1)), false, 0)
holds(4, in_tower((block,3),(block,2)), false, 0)
holds(4, in_tower((block,3),(block,3)), false, 0)
holds(4, in_tower((block,3),(block,4)), false, 0)
holds(4, in_tower((block,3),(block,5)), false, 0)
holds(4, in_tower((block,3),(block,6)), false, 0)
holds(4, in_tower((block,3),(block,7)), false, 0)
holds(4, in_tower((block,3),(block,8)), false, 0)
holds(4, in_tower((block,3),(block,9)), false, 0)
holds(4, in_tower((block,4),(block,1)), false, 0)
holds(4, in_tower((block,4),(block,2)), false, 0)
holds(4, in_tower((block,4),(block,3)), false, 0)
holds(4, in_tower((block,4),(block,4)), false, 0)
holds(4, in_tower((block,4),(block,5)), false, 0)
holds(4, in_tower((block,4),(block,6)), false, 0)
holds(4, in_tower((block,4),(block,7)), false, 0)
holds(4, in_tower((block,4),(block,8)), false, 0)
holds(4, in_tower((block,4),(block,9)), false, 0)
holds(4, in_tower((block,5),(block,1)), false, 0)
holds(4, in_tower((block,5),(block,2)), false, 0)
holds(4, in_tower((block,5),(block,3)), false, 0)
holds(4, in_tower((block,5),(block,4)), false, 0)
holds(4, in_tower((block,5),(block,5)), false, 0)
holds(4, in_tower((block,5),(block,6)), false, 0)
holds(4, in_tower((block,5),(block,7)), false, 0)
holds(4, in_tower((block,5),(block,8)), false, 0)
holds(4, in_tower((block,5),(block,9)), false, 0)
holds(4, in_tower((block,6),(block,1)), false, 0)
holds(4, in_tower((block,6),(block,2)), false, 0)
holds(4, in_tower((block,6),(block,3)), false, 0)
holds(4, in_tower((block,6),(block,4)), false, 0)
holds(4, in_tower((block,6),(block,5)), false, 0)
holds(4, in_tower((block,6),(block,6)), false, 0)
holds(4, in_tower((block,6),(block,7)), false, 0)
holds(4, in_tower((block,6),(block,8)), false, 0)
holds(4, in_tower((block,6),(block,9)), false, 0)
holds(4, in_tower((block,7),(block,1)), false, 0)
holds(4, in_tower((block,7),(block,2)), false, 0)
holds(4, in_tower((block,7),(block,3)), false, 0)
holds(4, in_tower((block,7),(block,4)), false, 0)
holds(4, in_tower((block,7),(block,5)), false, 0)
holds(4, in_tower((block,7),(block,6)), false, 0)
holds(4, in_tower((block,7),(block,7)), true, 0)
holds(4, in_tower((block,7),(block,8)), false, 0)
holds(4, in_tower((block,7),(block,9)), true, 0)
holds(4, in_tower((block,8),(block,1)), false, 0)
holds(4, in_tower((block,8),(block,2)), false, 0)
holds(4, in_tower((block,8),(block,3)), false, 0)
holds(4, in_tower((block,8),(block,4)), false, 0)
holds(4, in_tower((block,8),(block,5)), false, 0)
holds(4, in_tower((block,8),(block,6)), false, 0)
holds(4, in_tower((block,8),(block,7)), false, 0)
holds(4, in_tower((block,8),(block,8)), false, 0)
holds(4, in_tower((block,8),(block,9)), false, 0)
holds(4, in_tower((block,9),(block,1)), false, 0)
holds(4, in_tower((block,9),(block,2)), false, 0)
holds(4, in_tower((block,9),(block,3)), false, 0)
holds(4, in_tower((block,9),(block,4)), false, 0)
holds(4, in_tower((block,9),(block,5)), false, 0)
holds(4, in_tower((block,9),(block,6)), false, 0)
holds(4, in_tower((block,9),(block,7)), false, 0)
holds(4, in_tower((block,9),(block,8)), false, 0)
holds(4, in_tower((block,9),(block,9)), false, 0)
holds(4, on((block,1)), puzzle_room_table, 0)
holds(4, on((block,2)), puzzle_room_table, 0)
holds(4, on((block,3)), (block,1), 0)
holds(4, on((block,4)), nothing, 0)
holds(4, on((block,5)), nothing, 0)
holds(4, on((block,6)), nothing, 0)
holds(4, on((block,7)), puzzle_room_table, 0)
holds(4, on((block,8)), nothing, 0)
holds(4, on((block,9)), (block,7), 0)
holds(4, tower_base((block,1),puzzle_room_table), true, 0)
holds(4, tower_base((block,2),puzzle_room_table), true, 0)
holds(4, tower_base((block,3),puzzle_room_table), false, 0)
holds(4, tower_base((block,4),puzzle_room_table), false, 0)
holds(4, tower_base((block,5),puzzle_room_table), false, 0)
holds(4, tower_base((block,6),puzzle_room_table), false, 0)
holds(4, tower_base((block,7),puzzle_room_table), true, 0)
holds(4, tower_base((block,8),puzzle_room_table), false, 0)
holds(4, tower_base((block,9),puzzle_room_table), false, 0)
holds(4, transporting(talos,(block,1)), false, 0)
holds(4, transporting(talos,(block,2)), false, 0)
holds(4, transporting(talos,(block,3)), false, 0)
holds(4, transporting(talos,(block,4)), false, 0)
holds(4, transporting(talos,(block,5)), false, 0)
holds(4, transporting(talos,(block,6)), false, 0)
holds(4, transporting(talos,(block,7)), false, 0)
holds(4, transporting(talos,(block,8)), false, 0)
holds(4, transporting(talos,(block,9)), false, 0)
holds(4, unordered_tower((block,1),puzzle_room_table), true, 0)
holds(4, unordered_tower((block,2),puzzle_room_table), false, 0)
holds(4, unordered_tower((block,3),puzzle_room_table), false, 0)
holds(4, unordered_tower((block,4),puzzle_room_table), false, 0)
holds(4, unordered_tower((block,5),puzzle_room_table), false, 0)
holds(4, unordered_tower((block,6),puzzle_room_table), false, 0)
holds(4, unordered_tower((block,7),puzzle_room_table), true, 0)
holds(4, unordered_tower((block,8),puzzle_room_table), false, 0)
holds(4, unordered_tower((block,9),puzzle_room_table), false, 0)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete_tower(blue,puzzle_room_table), false, 0)
holds(3, complete_tower(red,puzzle_room_table), false, 0)
holds(3, complete_tower(yellow,puzzle_room_table), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in((block,7)), puzzle_room, 0)
holds(3, in((block,8)), store_room, 0)
holds(3, in((block,9)), puzzle_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,1),(block,7)), false, 0)
holds(3, in_tower((block,1),(block,8)), false, 0)
holds(3, in_tower((block,1),(block,9)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,7)), false, 0)
holds(3, in_tower((block,2),(block,8)), false, 0)
holds(3, in_tower((block,2),(block,9)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,7)), false, 0)
holds(3, in_tower((block,3),(block,8)), false, 0)
holds(3, in_tower((block,3),(block,9)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,7)), false, 0)
holds(3, in_tower((block,4),(block,8)), false, 0)
holds(3, in_tower((block,4),(block,9)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,7)), false, 0)
holds(3, in_tower((block,5),(block,8)), false, 0)
holds(3, in_tower((block,5),(block,9)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,7)), false, 0)
holds(3, in_tower((block,6),(block,8)), false, 0)
holds(3, in_tower((block,6),(block,9)), false, 0)
holds(3, in_tower((block,7),(block,1)), false, 0)
holds(3, in_tower((block,7),(block,2)), false, 0)
holds(3, in_tower((block,7),(block,3)), false, 0)
holds(3, in_tower((block,7),(block,4)), false, 0)
holds(3, in_tower((block,7),(block,5)), false, 0)
holds(3, in_tower((block,7),(block,6)), false, 0)
holds(3, in_tower((block,7),(block,7)), true, 0)
holds(3, in_tower((block,7),(block,8)), false, 0)
holds(3, in_tower((block,7),(block,9)), true, 0)
holds(3, in_tower((block,8),(block,1)), false, 0)
holds(3, in_tower((block,8),(block,2)), false, 0)
holds(3, in_tower((block,8),(block,3)), false, 0)
holds(3, in_tower((block,8),(block,4)), false, 0)
holds(3, in_tower((block,8),(block,5)), false, 0)
holds(3, in_tower((block,8),(block,6)), false, 0)
holds(3, in_tower((block,8),(block,7)), false, 0)
holds(3, in_tower((block,8),(block,8)), false, 0)
holds(3, in_tower((block,8),(block,9)), false, 0)
holds(3, in_tower((block,9),(block,1)), false, 0)
holds(3, in_tower((block,9),(block,2)), false, 0)
holds(3, in_tower((block,9),(block,3)), false, 0)
holds(3, in_tower((block,9),(block,4)), false, 0)
holds(3, in_tower((block,9),(block,5)), false, 0)
holds(3, in_tower((block,9),(block,6)), false, 0)
holds(3, in_tower((block,9),(block,7)), false, 0)
holds(3, in_tower((block,9),(block,8)), false, 0)
holds(3, in_tower((block,9),(block,9)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, on((block,7)), puzzle_room_table, 0)
holds(3, on((block,8)), nothing, 0)
holds(3, on((block,9)), (block,7), 0)
holds(3, tower_base((block,1),puzzle_room_table), true, 0)
holds(3, tower_base((block,2),puzzle_room_table), true, 0)
holds(3, tower_base((block,3),puzzle_room_table), false, 0)
holds(3, tower_base((block,4),puzzle_room_table), false, 0)
holds(3, tower_base((block,5),puzzle_room_table), false, 0)
holds(3, tower_base((block,6),puzzle_room_table), false, 0)
holds(3, tower_base((block,7),puzzle_room_table), true, 0)
holds(3, tower_base((block,8),puzzle_room_table), false, 0)
holds(3, tower_base((block,9),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0)
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0)
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete_tower(blue,puzzle_room_table), false, 0)
holds(2, complete_tower(red,puzzle_room_table), false, 0)
holds(2, complete_tower(yellow,puzzle_room_table), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in((block,7)), puzzle_room, 0)
holds(2, in((block,8)), store_room, 0)
holds(2, in((block,9)), puzzle_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,1),(block,7)), false, 0)
holds(2, in_tower((block,1),(block,8)), false, 0)
holds(2, in_tower((block,1),(block,9)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,7)), false, 0)
holds(2, in_tower((block,2),(block,8)), false, 0)
holds(2, in_tower((block,2),(block,9)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,7)), false, 0)
holds(2, in_tower((block,3),(block,8)), false, 0)
holds(2, in_tower((block,3),(block,9)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,7)), false, 0)
holds(2, in_tower((block,4),(block,8)), false, 0)
holds(2, in_tower((block,4),(block,9)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,7)), false, 0)
holds(2, in_tower((block,5),(block,8)), false, 0)
holds(2, in_tower((block,5),(block,9)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,7)), false, 0)
holds(2, in_tower((block,6),(block,8)), false, 0)
holds(2, in_tower((block,6),(block,9)), false, 0)
holds(2, in_tower((block,7),(block,1)), false, 0)
holds(2, in_tower((block,7),(block,2)), false, 0)
holds(2, in_tower((block,7),(block,3)), false, 0)
holds(2, in_tower((block,7),(block,4)), false, 0)
holds(2, in_tower((block,7),(block,5)), false, 0)
holds(2, in_tower((block,7),(block,6)), false, 0)
holds(2, in_tower((block,7),(block,7)), true, 0)
holds(2, in_tower((block,7),(block,8)), false, 0)
holds(2, in_tower((block,7),(block,9)), true, 0)
holds(2, in_tower((block,8),(block,1)), false, 0)
holds(2, in_tower((block,8),(block,2)), false, 0)
holds(2, in_tower((block,8),(block,3)), false, 0)
holds(2, in_tower((block,8),(block,4)), false, 0)
holds(2, in_tower((block,8),(block,5)), false, 0)
holds(2, in_tower((block,8),(block,6)), false, 0)
holds(2, in_tower((block,8),(block,7)), false, 0)
holds(2, in_tower((block,8),(block,8)), false, 0)
holds(2, in_tower((block,8),(block,9)), false, 0)
holds(2, in_tower((block,9),(block,1)), false, 0)
holds(2, in_tower((block,9),(block,2)), false, 0)
holds(2, in_tower((block,9),(block,3)), false, 0)
holds(2, in_tower((block,9),(block,4)), false, 0)
holds(2, in_tower((block,9),(block,5)), false, 0)
holds(2, in_tower((block,9),(block,6)), false, 0)
holds(2, in_tower((block,9),(block,7)), false, 0)
holds(2, in_tower((block,9),(block,8)), false, 0)
holds(2, in_tower((block,9),(block,9)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, on((block,7)), puzzle_room_table, 0)
holds(2, on((block,8)), nothing, 0)
holds(2, on((block,9)), (block,7), 0)
holds(2, tower_base((block,1),puzzle_room_table), true, 0)
holds(2, tower_base((block,2),puzzle_room_table), true, 0)
holds(2, tower_base((block,3),puzzle_room_table), false, 0)
holds(2, tower_base((block,4),puzzle_room_table), false, 0)
holds(2, tower_base((block,5),puzzle_room_table), false, 0)
holds(2, tower_base((block,6),puzzle_room_table), false, 0)
holds(2, tower_base((block,7),puzzle_room_table), true, 0)
holds(2, tower_base((block,8),puzzle_room_table), false, 0)
holds(2, tower_base((block,9),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0)
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0)
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete_tower(blue,puzzle_room_table), false, 0)
holds(1, complete_tower(red,puzzle_room_table), false, 0)
holds(1, complete_tower(yellow,puzzle_room_table), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in((block,7)), (puzzle_room,1), 0)
holds(1, in((block,8)), (store_room,0), 0)
holds(1, in((block,9)), (puzzle_room,1), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,1),(block,7)), false, 0)
holds(1, in_tower((block,1),(block,8)), false, 0)
holds(1, in_tower((block,1),(block,9)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,7)), false, 0)
holds(1, in_tower((block,2),(block,8)), false, 0)
holds(1, in_tower((block,2),(block,9)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,7)), false, 0)
holds(1, in_tower((block,3),(block,8)), false, 0)
holds(1, in_tower((block,3),(block,9)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,7)), false, 0)
holds(1, in_tower((block,4),(block,8)), false, 0)
holds(1, in_tower((block,4),(block,9)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,7)), false, 0)
holds(1, in_tower((block,5),(block,8)), false, 0)
holds(1, in_tower((block,5),(block,9)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,7)), false, 0)
holds(1, in_tower((block,6),(block,8)), false, 0)
holds(1, in_tower((block,6),(block,9)), false, 0)
holds(1, in_tower((block,7),(block,1)), false, 0)
holds(1, in_tower((block,7),(block,2)), false, 0)
holds(1, in_tower((block,7),(block,3)), false, 0)
holds(1, in_tower((block,7),(block,4)), false, 0)
holds(1, in_tower((block,7),(block,5)), false, 0)
holds(1, in_tower((block,7),(block,6)), false, 0)
holds(1, in_tower((block,7),(block,7)), true, 0)
holds(1, in_tower((block,7),(block,8)), false, 0)
holds(1, in_tower((block,7),(block,9)), true, 0)
holds(1, in_tower((block,8),(block,1)), false, 0)
holds(1, in_tower((block,8),(block,2)), false, 0)
holds(1, in_tower((block,8),(block,3)), false, 0)
holds(1, in_tower((block,8),(block,4)), false, 0)
holds(1, in_tower((block,8),(block,5)), false, 0)
holds(1, in_tower((block,8),(block,6)), false, 0)
holds(1, in_tower((block,8),(block,7)), false, 0)
holds(1, in_tower((block,8),(block,8)), false, 0)
holds(1, in_tower((block,8),(block,9)), false, 0)
holds(1, in_tower((block,9),(block,1)), false, 0)
holds(1, in_tower((block,9),(block,2)), false, 0)
holds(1, in_tower((block,9),(block,3)), false, 0)
holds(1, in_tower((block,9),(block,4)), false, 0)
holds(1, in_tower((block,9),(block,5)), false, 0)
holds(1, in_tower((block,9),(block,6)), false, 0)
holds(1, in_tower((block,9),(block,7)), false, 0)
holds(1, in_tower((block,9),(block,8)), false, 0)
holds(1, in_tower((block,9),(block,9)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, on((block,7)), puzzle_room_table_middle, 0)
holds(1, on((block,8)), nothing, 0)
holds(1, on((block,9)), (block,7), 0)
holds(1, tower_base((block,1),puzzle_room_table), true, 0)
holds(1, tower_base((block,2),puzzle_room_table), true, 0)
holds(1, tower_base((block,3),puzzle_room_table), false, 0)
holds(1, tower_base((block,4),puzzle_room_table), false, 0)
holds(1, tower_base((block,5),puzzle_room_table), false, 0)
holds(1, tower_base((block,6),puzzle_room_table), false, 0)
holds(1, tower_base((block,7),puzzle_room_table), true, 0)
holds(1, tower_base((block,8),puzzle_room_table), false, 0)
holds(1, tower_base((block,9),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0)
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,7),puzzle_room_table), true, 0)
holds(1, unordered_tower((block,8),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,9),puzzle_room_table), false, 0)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Generating final-goals...

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[20-01-2022_16-20-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 387 rules

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.002991500000000258s

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.112330s.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.035289s with result Satisfiable.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.112330s, Solving = 0.035289s, Total = 0.147619s, Memory = (RSS = 123.960938Mb, VMS = 111.265625Mb)
Final Model :: Total atoms = 6246, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.112330s, Solving = 0.035289s, Total = 0.147619s, Memory = (RSS = 123.960938Mb, VMS = 111.265625Mb)
Final Model :: Total atoms = 6246, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,puzzle_room_table), true, true)
final_goal(4, complete_tower(red,puzzle_room_table), true, true)
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true)
final_goal(4, in_tower((block,1),(block,1)), false, true)
final_goal(4, in_tower((block,1),(block,2)), false, true)
final_goal(4, in_tower((block,1),(block,3)), false, true)
final_goal(4, in_tower((block,1),(block,4)), false, true)
final_goal(4, in_tower((block,1),(block,5)), false, true)
final_goal(4, in_tower((block,1),(block,6)), false, true)
final_goal(4, in_tower((block,1),(block,7)), false, true)
final_goal(4, in_tower((block,1),(block,8)), false, true)
final_goal(4, in_tower((block,1),(block,9)), false, true)
final_goal(4, in_tower((block,2),(block,1)), false, true)
final_goal(4, in_tower((block,2),(block,2)), false, true)
final_goal(4, in_tower((block,2),(block,3)), false, true)
final_goal(4, in_tower((block,2),(block,4)), false, true)
final_goal(4, in_tower((block,2),(block,5)), false, true)
final_goal(4, in_tower((block,2),(block,6)), false, true)
final_goal(4, in_tower((block,2),(block,7)), false, true)
final_goal(4, in_tower((block,2),(block,8)), false, true)
final_goal(4, in_tower((block,2),(block,9)), false, true)
final_goal(4, in_tower((block,3),(block,1)), true, true)
final_goal(4, in_tower((block,3),(block,2)), true, true)
final_goal(4, in_tower((block,3),(block,3)), true, true)
final_goal(4, in_tower((block,3),(block,4)), false, true)
final_goal(4, in_tower((block,3),(block,5)), false, true)
final_goal(4, in_tower((block,3),(block,6)), false, true)
final_goal(4, in_tower((block,3),(block,7)), false, true)
final_goal(4, in_tower((block,3),(block,8)), false, true)
final_goal(4, in_tower((block,3),(block,9)), false, true)
final_goal(4, in_tower((block,4),(block,1)), false, true)
final_goal(4, in_tower((block,4),(block,2)), false, true)
final_goal(4, in_tower((block,4),(block,3)), false, true)
final_goal(4, in_tower((block,4),(block,4)), false, true)
final_goal(4, in_tower((block,4),(block,5)), false, true)
final_goal(4, in_tower((block,4),(block,6)), false, true)
final_goal(4, in_tower((block,4),(block,7)), false, true)
final_goal(4, in_tower((block,4),(block,8)), false, true)
final_goal(4, in_tower((block,4),(block,9)), false, true)
final_goal(4, in_tower((block,5),(block,1)), false, true)
final_goal(4, in_tower((block,5),(block,2)), false, true)
final_goal(4, in_tower((block,5),(block,3)), false, true)
final_goal(4, in_tower((block,5),(block,4)), false, true)
final_goal(4, in_tower((block,5),(block,5)), false, true)
final_goal(4, in_tower((block,5),(block,6)), false, true)
final_goal(4, in_tower((block,5),(block,7)), false, true)
final_goal(4, in_tower((block,5),(block,8)), false, true)
final_goal(4, in_tower((block,5),(block,9)), false, true)
final_goal(4, in_tower((block,6),(block,1)), false, true)
final_goal(4, in_tower((block,6),(block,2)), false, true)
final_goal(4, in_tower((block,6),(block,3)), false, true)
final_goal(4, in_tower((block,6),(block,4)), true, true)
final_goal(4, in_tower((block,6),(block,5)), true, true)
final_goal(4, in_tower((block,6),(block,6)), true, true)
final_goal(4, in_tower((block,6),(block,7)), false, true)
final_goal(4, in_tower((block,6),(block,8)), false, true)
final_goal(4, in_tower((block,6),(block,9)), false, true)
final_goal(4, in_tower((block,7),(block,1)), false, true)
final_goal(4, in_tower((block,7),(block,2)), false, true)
final_goal(4, in_tower((block,7),(block,3)), false, true)
final_goal(4, in_tower((block,7),(block,4)), false, true)
final_goal(4, in_tower((block,7),(block,5)), false, true)
final_goal(4, in_tower((block,7),(block,6)), false, true)
final_goal(4, in_tower((block,7),(block,7)), false, true)
final_goal(4, in_tower((block,7),(block,8)), false, true)
final_goal(4, in_tower((block,7),(block,9)), false, true)
final_goal(4, in_tower((block,8),(block,1)), false, true)
final_goal(4, in_tower((block,8),(block,2)), false, true)
final_goal(4, in_tower((block,8),(block,3)), false, true)
final_goal(4, in_tower((block,8),(block,4)), false, true)
final_goal(4, in_tower((block,8),(block,5)), false, true)
final_goal(4, in_tower((block,8),(block,6)), false, true)
final_goal(4, in_tower((block,8),(block,7)), false, true)
final_goal(4, in_tower((block,8),(block,8)), false, true)
final_goal(4, in_tower((block,8),(block,9)), false, true)
final_goal(4, in_tower((block,9),(block,1)), false, true)
final_goal(4, in_tower((block,9),(block,2)), false, true)
final_goal(4, in_tower((block,9),(block,3)), false, true)
final_goal(4, in_tower((block,9),(block,4)), false, true)
final_goal(4, in_tower((block,9),(block,5)), false, true)
final_goal(4, in_tower((block,9),(block,6)), false, true)
final_goal(4, in_tower((block,9),(block,7)), true, true)
final_goal(4, in_tower((block,9),(block,8)), true, true)
final_goal(4, in_tower((block,9),(block,9)), true, true)
final_goal(4, on((block,1)), (block,2), true)
final_goal(4, on((block,2)), (block,3), true)
final_goal(4, on((block,3)), puzzle_room_table, true)
final_goal(4, on((block,4)), (block,5), true)
final_goal(4, on((block,5)), (block,6), true)
final_goal(4, on((block,6)), puzzle_room_table, true)
final_goal(4, on((block,7)), (block,8), true)
final_goal(4, on((block,8)), (block,9), true)
final_goal(4, on((block,9)), puzzle_room_table, true)
final_goal(4, tower_base((block,1),puzzle_room_table), false, true)
final_goal(4, tower_base((block,2),puzzle_room_table), false, true)
final_goal(4, tower_base((block,3),puzzle_room_table), true, true)
final_goal(4, tower_base((block,4),puzzle_room_table), false, true)
final_goal(4, tower_base((block,5),puzzle_room_table), false, true)
final_goal(4, tower_base((block,6),puzzle_room_table), true, true)
final_goal(4, tower_base((block,7),puzzle_room_table), false, true)
final_goal(4, tower_base((block,8),puzzle_room_table), false, true)
final_goal(4, tower_base((block,9),puzzle_room_table), true, true)
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true)
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true)
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true)

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,puzzle_room_table), false, false)
final_goal(4, complete_tower(red,puzzle_room_table), false, false)
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false)
final_goal(4, in_tower((block,1),(block,1)), true, false)
final_goal(4, in_tower((block,1),(block,2)), true, false)
final_goal(4, in_tower((block,1),(block,3)), true, false)
final_goal(4, in_tower((block,1),(block,4)), true, false)
final_goal(4, in_tower((block,1),(block,5)), true, false)
final_goal(4, in_tower((block,1),(block,6)), true, false)
final_goal(4, in_tower((block,1),(block,7)), true, false)
final_goal(4, in_tower((block,1),(block,8)), true, false)
final_goal(4, in_tower((block,1),(block,9)), true, false)
final_goal(4, in_tower((block,2),(block,1)), true, false)
final_goal(4, in_tower((block,2),(block,2)), true, false)
final_goal(4, in_tower((block,2),(block,3)), true, false)
final_goal(4, in_tower((block,2),(block,4)), true, false)
final_goal(4, in_tower((block,2),(block,5)), true, false)
final_goal(4, in_tower((block,2),(block,6)), true, false)
final_goal(4, in_tower((block,2),(block,7)), true, false)
final_goal(4, in_tower((block,2),(block,8)), true, false)
final_goal(4, in_tower((block,2),(block,9)), true, false)
final_goal(4, in_tower((block,3),(block,1)), false, false)
final_goal(4, in_tower((block,3),(block,2)), false, false)
final_goal(4, in_tower((block,3),(block,3)), false, false)
final_goal(4, in_tower((block,3),(block,4)), true, false)
final_goal(4, in_tower((block,3),(block,5)), true, false)
final_goal(4, in_tower((block,3),(block,6)), true, false)
final_goal(4, in_tower((block,3),(block,7)), true, false)
final_goal(4, in_tower((block,3),(block,8)), true, false)
final_goal(4, in_tower((block,3),(block,9)), true, false)
final_goal(4, in_tower((block,4),(block,1)), true, false)
final_goal(4, in_tower((block,4),(block,2)), true, false)
final_goal(4, in_tower((block,4),(block,3)), true, false)
final_goal(4, in_tower((block,4),(block,4)), true, false)
final_goal(4, in_tower((block,4),(block,5)), true, false)
final_goal(4, in_tower((block,4),(block,6)), true, false)
final_goal(4, in_tower((block,4),(block,7)), true, false)
final_goal(4, in_tower((block,4),(block,8)), true, false)
final_goal(4, in_tower((block,4),(block,9)), true, false)
final_goal(4, in_tower((block,5),(block,1)), true, false)
final_goal(4, in_tower((block,5),(block,2)), true, false)
final_goal(4, in_tower((block,5),(block,3)), true, false)
final_goal(4, in_tower((block,5),(block,4)), true, false)
final_goal(4, in_tower((block,5),(block,5)), true, false)
final_goal(4, in_tower((block,5),(block,6)), true, false)
final_goal(4, in_tower((block,5),(block,7)), true, false)
final_goal(4, in_tower((block,5),(block,8)), true, false)
final_goal(4, in_tower((block,5),(block,9)), true, false)
final_goal(4, in_tower((block,6),(block,1)), true, false)
final_goal(4, in_tower((block,6),(block,2)), true, false)
final_goal(4, in_tower((block,6),(block,3)), true, false)
final_goal(4, in_tower((block,6),(block,4)), false, false)
final_goal(4, in_tower((block,6),(block,5)), false, false)
final_goal(4, in_tower((block,6),(block,6)), false, false)
final_goal(4, in_tower((block,6),(block,7)), true, false)
final_goal(4, in_tower((block,6),(block,8)), true, false)
final_goal(4, in_tower((block,6),(block,9)), true, false)
final_goal(4, in_tower((block,7),(block,1)), true, false)
final_goal(4, in_tower((block,7),(block,2)), true, false)
final_goal(4, in_tower((block,7),(block,3)), true, false)
final_goal(4, in_tower((block,7),(block,4)), true, false)
final_goal(4, in_tower((block,7),(block,5)), true, false)
final_goal(4, in_tower((block,7),(block,6)), true, false)
final_goal(4, in_tower((block,7),(block,7)), true, false)
final_goal(4, in_tower((block,7),(block,8)), true, false)
final_goal(4, in_tower((block,7),(block,9)), true, false)
final_goal(4, in_tower((block,8),(block,1)), true, false)
final_goal(4, in_tower((block,8),(block,2)), true, false)
final_goal(4, in_tower((block,8),(block,3)), true, false)
final_goal(4, in_tower((block,8),(block,4)), true, false)
final_goal(4, in_tower((block,8),(block,5)), true, false)
final_goal(4, in_tower((block,8),(block,6)), true, false)
final_goal(4, in_tower((block,8),(block,7)), true, false)
final_goal(4, in_tower((block,8),(block,8)), true, false)
final_goal(4, in_tower((block,8),(block,9)), true, false)
final_goal(4, in_tower((block,9),(block,1)), true, false)
final_goal(4, in_tower((block,9),(block,2)), true, false)
final_goal(4, in_tower((block,9),(block,3)), true, false)
final_goal(4, in_tower((block,9),(block,4)), true, false)
final_goal(4, in_tower((block,9),(block,5)), true, false)
final_goal(4, in_tower((block,9),(block,6)), true, false)
final_goal(4, in_tower((block,9),(block,7)), false, false)
final_goal(4, in_tower((block,9),(block,8)), false, false)
final_goal(4, in_tower((block,9),(block,9)), false, false)
final_goal(4, on((block,1)), (block,3), false)
final_goal(4, on((block,1)), (block,4), false)
final_goal(4, on((block,1)), (block,5), false)
final_goal(4, on((block,1)), (block,6), false)
final_goal(4, on((block,1)), (block,7), false)
final_goal(4, on((block,1)), (block,8), false)
final_goal(4, on((block,1)), (block,9), false)
final_goal(4, on((block,1)), nothing, false)
final_goal(4, on((block,1)), puzzle_room_table, false)
final_goal(4, on((block,2)), (block,1), false)
final_goal(4, on((block,2)), (block,4), false)
final_goal(4, on((block,2)), (block,5), false)
final_goal(4, on((block,2)), (block,6), false)
final_goal(4, on((block,2)), (block,7), false)
final_goal(4, on((block,2)), (block,8), false)
final_goal(4, on((block,2)), (block,9), false)
final_goal(4, on((block,2)), nothing, false)
final_goal(4, on((block,2)), puzzle_room_table, false)
final_goal(4, on((block,3)), (block,1), false)
final_goal(4, on((block,3)), (block,2), false)
final_goal(4, on((block,3)), (block,4), false)
final_goal(4, on((block,3)), (block,5), false)
final_goal(4, on((block,3)), (block,6), false)
final_goal(4, on((block,3)), (block,7), false)
final_goal(4, on((block,3)), (block,8), false)
final_goal(4, on((block,3)), (block,9), false)
final_goal(4, on((block,3)), nothing, false)
final_goal(4, on((block,4)), (block,1), false)
final_goal(4, on((block,4)), (block,2), false)
final_goal(4, on((block,4)), (block,3), false)
final_goal(4, on((block,4)), (block,6), false)
final_goal(4, on((block,4)), (block,7), false)
final_goal(4, on((block,4)), (block,8), false)
final_goal(4, on((block,4)), (block,9), false)
final_goal(4, on((block,4)), nothing, false)
final_goal(4, on((block,4)), puzzle_room_table, false)
final_goal(4, on((block,5)), (block,1), false)
final_goal(4, on((block,5)), (block,2), false)
final_goal(4, on((block,5)), (block,3), false)
final_goal(4, on((block,5)), (block,4), false)
final_goal(4, on((block,5)), (block,7), false)
final_goal(4, on((block,5)), (block,8), false)
final_goal(4, on((block,5)), (block,9), false)
final_goal(4, on((block,5)), nothing, false)
final_goal(4, on((block,5)), puzzle_room_table, false)
final_goal(4, on((block,6)), (block,1), false)
final_goal(4, on((block,6)), (block,2), false)
final_goal(4, on((block,6)), (block,3), false)
final_goal(4, on((block,6)), (block,4), false)
final_goal(4, on((block,6)), (block,5), false)
final_goal(4, on((block,6)), (block,7), false)
final_goal(4, on((block,6)), (block,8), false)
final_goal(4, on((block,6)), (block,9), false)
final_goal(4, on((block,6)), nothing, false)
final_goal(4, on((block,7)), (block,1), false)
final_goal(4, on((block,7)), (block,2), false)
final_goal(4, on((block,7)), (block,3), false)
final_goal(4, on((block,7)), (block,4), false)
final_goal(4, on((block,7)), (block,5), false)
final_goal(4, on((block,7)), (block,6), false)
final_goal(4, on((block,7)), (block,9), false)
final_goal(4, on((block,7)), nothing, false)
final_goal(4, on((block,7)), puzzle_room_table, false)
final_goal(4, on((block,8)), (block,1), false)
final_goal(4, on((block,8)), (block,2), false)
final_goal(4, on((block,8)), (block,3), false)
final_goal(4, on((block,8)), (block,4), false)
final_goal(4, on((block,8)), (block,5), false)
final_goal(4, on((block,8)), (block,6), false)
final_goal(4, on((block,8)), (block,7), false)
final_goal(4, on((block,8)), nothing, false)
final_goal(4, on((block,8)), puzzle_room_table, false)
final_goal(4, on((block,9)), (block,1), false)
final_goal(4, on((block,9)), (block,2), false)
final_goal(4, on((block,9)), (block,3), false)
final_goal(4, on((block,9)), (block,4), false)
final_goal(4, on((block,9)), (block,5), false)
final_goal(4, on((block,9)), (block,6), false)
final_goal(4, on((block,9)), (block,7), false)
final_goal(4, on((block,9)), (block,8), false)
final_goal(4, on((block,9)), nothing, false)
final_goal(4, tower_base((block,1),puzzle_room_table), true, false)
final_goal(4, tower_base((block,2),puzzle_room_table), true, false)
final_goal(4, tower_base((block,3),puzzle_room_table), false, false)
final_goal(4, tower_base((block,4),puzzle_room_table), true, false)
final_goal(4, tower_base((block,5),puzzle_room_table), true, false)
final_goal(4, tower_base((block,6),puzzle_room_table), false, false)
final_goal(4, tower_base((block,7),puzzle_room_table), true, false)
final_goal(4, tower_base((block,8),puzzle_room_table), true, false)
final_goal(4, tower_base((block,9),puzzle_room_table), false, false)
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false)
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false)
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false)
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_table), true, true)
final_goal(3, complete_tower(red,puzzle_room_table), true, true)
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,1),(block,7)), false, true)
final_goal(3, in_tower((block,1),(block,8)), false, true)
final_goal(3, in_tower((block,1),(block,9)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,7)), false, true)
final_goal(3, in_tower((block,2),(block,8)), false, true)
final_goal(3, in_tower((block,2),(block,9)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,7)), false, true)
final_goal(3, in_tower((block,3),(block,8)), false, true)
final_goal(3, in_tower((block,3),(block,9)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,7)), false, true)
final_goal(3, in_tower((block,4),(block,8)), false, true)
final_goal(3, in_tower((block,4),(block,9)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,7)), false, true)
final_goal(3, in_tower((block,5),(block,8)), false, true)
final_goal(3, in_tower((block,5),(block,9)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, in_tower((block,6),(block,7)), false, true)
final_goal(3, in_tower((block,6),(block,8)), false, true)
final_goal(3, in_tower((block,6),(block,9)), false, true)
final_goal(3, in_tower((block,7),(block,1)), false, true)
final_goal(3, in_tower((block,7),(block,2)), false, true)
final_goal(3, in_tower((block,7),(block,3)), false, true)
final_goal(3, in_tower((block,7),(block,4)), false, true)
final_goal(3, in_tower((block,7),(block,5)), false, true)
final_goal(3, in_tower((block,7),(block,6)), false, true)
final_goal(3, in_tower((block,7),(block,7)), false, true)
final_goal(3, in_tower((block,7),(block,8)), false, true)
final_goal(3, in_tower((block,7),(block,9)), false, true)
final_goal(3, in_tower((block,8),(block,1)), false, true)
final_goal(3, in_tower((block,8),(block,2)), false, true)
final_goal(3, in_tower((block,8),(block,3)), false, true)
final_goal(3, in_tower((block,8),(block,4)), false, true)
final_goal(3, in_tower((block,8),(block,5)), false, true)
final_goal(3, in_tower((block,8),(block,6)), false, true)
final_goal(3, in_tower((block,8),(block,7)), false, true)
final_goal(3, in_tower((block,8),(block,8)), false, true)
final_goal(3, in_tower((block,8),(block,9)), false, true)
final_goal(3, in_tower((block,9),(block,1)), false, true)
final_goal(3, in_tower((block,9),(block,2)), false, true)
final_goal(3, in_tower((block,9),(block,3)), false, true)
final_goal(3, in_tower((block,9),(block,4)), false, true)
final_goal(3, in_tower((block,9),(block,5)), false, true)
final_goal(3, in_tower((block,9),(block,6)), false, true)
final_goal(3, in_tower((block,9),(block,7)), true, true)
final_goal(3, in_tower((block,9),(block,8)), true, true)
final_goal(3, in_tower((block,9),(block,9)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_table, true)
final_goal(3, on((block,7)), (block,8), true)
final_goal(3, on((block,8)), (block,9), true)
final_goal(3, on((block,9)), puzzle_room_table, true)
final_goal(3, tower_base((block,1),puzzle_room_table), false, true)
final_goal(3, tower_base((block,2),puzzle_room_table), false, true)
final_goal(3, tower_base((block,3),puzzle_room_table), true, true)
final_goal(3, tower_base((block,4),puzzle_room_table), false, true)
final_goal(3, tower_base((block,5),puzzle_room_table), false, true)
final_goal(3, tower_base((block,6),puzzle_room_table), true, true)
final_goal(3, tower_base((block,7),puzzle_room_table), false, true)
final_goal(3, tower_base((block,8),puzzle_room_table), false, true)
final_goal(3, tower_base((block,9),puzzle_room_table), true, true)
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true)

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_table), false, false)
final_goal(3, complete_tower(red,puzzle_room_table), false, false)
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,1),(block,7)), true, false)
final_goal(3, in_tower((block,1),(block,8)), true, false)
final_goal(3, in_tower((block,1),(block,9)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,7)), true, false)
final_goal(3, in_tower((block,2),(block,8)), true, false)
final_goal(3, in_tower((block,2),(block,9)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,7)), true, false)
final_goal(3, in_tower((block,3),(block,8)), true, false)
final_goal(3, in_tower((block,3),(block,9)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,7)), true, false)
final_goal(3, in_tower((block,4),(block,8)), true, false)
final_goal(3, in_tower((block,4),(block,9)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,7)), true, false)
final_goal(3, in_tower((block,5),(block,8)), true, false)
final_goal(3, in_tower((block,5),(block,9)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, in_tower((block,6),(block,7)), true, false)
final_goal(3, in_tower((block,6),(block,8)), true, false)
final_goal(3, in_tower((block,6),(block,9)), true, false)
final_goal(3, in_tower((block,7),(block,1)), true, false)
final_goal(3, in_tower((block,7),(block,2)), true, false)
final_goal(3, in_tower((block,7),(block,3)), true, false)
final_goal(3, in_tower((block,7),(block,4)), true, false)
final_goal(3, in_tower((block,7),(block,5)), true, false)
final_goal(3, in_tower((block,7),(block,6)), true, false)
final_goal(3, in_tower((block,7),(block,7)), true, false)
final_goal(3, in_tower((block,7),(block,8)), true, false)
final_goal(3, in_tower((block,7),(block,9)), true, false)
final_goal(3, in_tower((block,8),(block,1)), true, false)
final_goal(3, in_tower((block,8),(block,2)), true, false)
final_goal(3, in_tower((block,8),(block,3)), true, false)
final_goal(3, in_tower((block,8),(block,4)), true, false)
final_goal(3, in_tower((block,8),(block,5)), true, false)
final_goal(3, in_tower((block,8),(block,6)), true, false)
final_goal(3, in_tower((block,8),(block,7)), true, false)
final_goal(3, in_tower((block,8),(block,8)), true, false)
final_goal(3, in_tower((block,8),(block,9)), true, false)
final_goal(3, in_tower((block,9),(block,1)), true, false)
final_goal(3, in_tower((block,9),(block,2)), true, false)
final_goal(3, in_tower((block,9),(block,3)), true, false)
final_goal(3, in_tower((block,9),(block,4)), true, false)
final_goal(3, in_tower((block,9),(block,5)), true, false)
final_goal(3, in_tower((block,9),(block,6)), true, false)
final_goal(3, in_tower((block,9),(block,7)), false, false)
final_goal(3, in_tower((block,9),(block,8)), false, false)
final_goal(3, in_tower((block,9),(block,9)), false, false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), (block,7), false)
final_goal(3, on((block,1)), (block,8), false)
final_goal(3, on((block,1)), (block,9), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), (block,7), false)
final_goal(3, on((block,2)), (block,8), false)
final_goal(3, on((block,2)), (block,9), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), (block,7), false)
final_goal(3, on((block,3)), (block,8), false)
final_goal(3, on((block,3)), (block,9), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), (block,7), false)
final_goal(3, on((block,4)), (block,8), false)
final_goal(3, on((block,4)), (block,9), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), (block,7), false)
final_goal(3, on((block,5)), (block,8), false)
final_goal(3, on((block,5)), (block,9), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), (block,7), false)
final_goal(3, on((block,6)), (block,8), false)
final_goal(3, on((block,6)), (block,9), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, on((block,7)), (block,1), false)
final_goal(3, on((block,7)), (block,2), false)
final_goal(3, on((block,7)), (block,3), false)
final_goal(3, on((block,7)), (block,4), false)
final_goal(3, on((block,7)), (block,5), false)
final_goal(3, on((block,7)), (block,6), false)
final_goal(3, on((block,7)), (block,9), false)
final_goal(3, on((block,7)), nothing, false)
final_goal(3, on((block,7)), puzzle_room_table, false)
final_goal(3, on((block,8)), (block,1), false)
final_goal(3, on((block,8)), (block,2), false)
final_goal(3, on((block,8)), (block,3), false)
final_goal(3, on((block,8)), (block,4), false)
final_goal(3, on((block,8)), (block,5), false)
final_goal(3, on((block,8)), (block,6), false)
final_goal(3, on((block,8)), (block,7), false)
final_goal(3, on((block,8)), nothing, false)
final_goal(3, on((block,8)), puzzle_room_table, false)
final_goal(3, on((block,9)), (block,1), false)
final_goal(3, on((block,9)), (block,2), false)
final_goal(3, on((block,9)), (block,3), false)
final_goal(3, on((block,9)), (block,4), false)
final_goal(3, on((block,9)), (block,5), false)
final_goal(3, on((block,9)), (block,6), false)
final_goal(3, on((block,9)), (block,7), false)
final_goal(3, on((block,9)), (block,8), false)
final_goal(3, on((block,9)), nothing, false)
final_goal(3, tower_base((block,1),puzzle_room_table), true, false)
final_goal(3, tower_base((block,2),puzzle_room_table), true, false)
final_goal(3, tower_base((block,3),puzzle_room_table), false, false)
final_goal(3, tower_base((block,4),puzzle_room_table), true, false)
final_goal(3, tower_base((block,5),puzzle_room_table), true, false)
final_goal(3, tower_base((block,6),puzzle_room_table), false, false)
final_goal(3, tower_base((block,7),puzzle_room_table), true, false)
final_goal(3, tower_base((block,8),puzzle_room_table), true, false)
final_goal(3, tower_base((block,9),puzzle_room_table), false, false)
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_table), true, true)
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,7)), false, true)
final_goal(2, in_tower((block,1),(block,8)), false, true)
final_goal(2, in_tower((block,1),(block,9)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,7)), false, true)
final_goal(2, in_tower((block,2),(block,8)), false, true)
final_goal(2, in_tower((block,2),(block,9)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,7)), false, true)
final_goal(2, in_tower((block,3),(block,8)), false, true)
final_goal(2, in_tower((block,3),(block,9)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,7)), false, true)
final_goal(2, in_tower((block,4),(block,8)), false, true)
final_goal(2, in_tower((block,4),(block,9)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,7)), false, true)
final_goal(2, in_tower((block,5),(block,8)), false, true)
final_goal(2, in_tower((block,5),(block,9)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, in_tower((block,6),(block,7)), false, true)
final_goal(2, in_tower((block,6),(block,8)), false, true)
final_goal(2, in_tower((block,6),(block,9)), false, true)
final_goal(2, in_tower((block,7),(block,1)), false, true)
final_goal(2, in_tower((block,7),(block,2)), false, true)
final_goal(2, in_tower((block,7),(block,3)), false, true)
final_goal(2, in_tower((block,7),(block,4)), false, true)
final_goal(2, in_tower((block,7),(block,5)), false, true)
final_goal(2, in_tower((block,7),(block,6)), false, true)
final_goal(2, in_tower((block,7),(block,7)), false, true)
final_goal(2, in_tower((block,7),(block,8)), false, true)
final_goal(2, in_tower((block,7),(block,9)), false, true)
final_goal(2, in_tower((block,8),(block,1)), false, true)
final_goal(2, in_tower((block,8),(block,2)), false, true)
final_goal(2, in_tower((block,8),(block,3)), false, true)
final_goal(2, in_tower((block,8),(block,4)), false, true)
final_goal(2, in_tower((block,8),(block,5)), false, true)
final_goal(2, in_tower((block,8),(block,6)), false, true)
final_goal(2, in_tower((block,8),(block,7)), false, true)
final_goal(2, in_tower((block,8),(block,8)), false, true)
final_goal(2, in_tower((block,8),(block,9)), false, true)
final_goal(2, in_tower((block,9),(block,1)), false, true)
final_goal(2, in_tower((block,9),(block,2)), false, true)
final_goal(2, in_tower((block,9),(block,3)), false, true)
final_goal(2, in_tower((block,9),(block,4)), false, true)
final_goal(2, in_tower((block,9),(block,5)), false, true)
final_goal(2, in_tower((block,9),(block,6)), false, true)
final_goal(2, in_tower((block,9),(block,7)), true, true)
final_goal(2, in_tower((block,9),(block,8)), true, true)
final_goal(2, in_tower((block,9),(block,9)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, on((block,7)), (block,8), true)
final_goal(2, on((block,8)), (block,9), true)
final_goal(2, on((block,9)), puzzle_room_table, true)
final_goal(2, tower_base((block,1),puzzle_room_table), false, true)
final_goal(2, tower_base((block,2),puzzle_room_table), false, true)
final_goal(2, tower_base((block,3),puzzle_room_table), true, true)
final_goal(2, tower_base((block,4),puzzle_room_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_table), false, true)
final_goal(2, tower_base((block,6),puzzle_room_table), true, true)
final_goal(2, tower_base((block,7),puzzle_room_table), false, true)
final_goal(2, tower_base((block,8),puzzle_room_table), false, true)
final_goal(2, tower_base((block,9),puzzle_room_table), true, true)
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true)

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_table), false, false)
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,1),(block,7)), true, false)
final_goal(2, in_tower((block,1),(block,8)), true, false)
final_goal(2, in_tower((block,1),(block,9)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,7)), true, false)
final_goal(2, in_tower((block,2),(block,8)), true, false)
final_goal(2, in_tower((block,2),(block,9)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,7)), true, false)
final_goal(2, in_tower((block,3),(block,8)), true, false)
final_goal(2, in_tower((block,3),(block,9)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,7)), true, false)
final_goal(2, in_tower((block,4),(block,8)), true, false)
final_goal(2, in_tower((block,4),(block,9)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,7)), true, false)
final_goal(2, in_tower((block,5),(block,8)), true, false)
final_goal(2, in_tower((block,5),(block,9)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,7)), true, false)
final_goal(2, in_tower((block,6),(block,8)), true, false)
final_goal(2, in_tower((block,6),(block,9)), true, false)
final_goal(2, in_tower((block,7),(block,1)), true, false)
final_goal(2, in_tower((block,7),(block,2)), true, false)
final_goal(2, in_tower((block,7),(block,3)), true, false)
final_goal(2, in_tower((block,7),(block,4)), true, false)
final_goal(2, in_tower((block,7),(block,5)), true, false)
final_goal(2, in_tower((block,7),(block,6)), true, false)
final_goal(2, in_tower((block,7),(block,7)), true, false)
final_goal(2, in_tower((block,7),(block,8)), true, false)
final_goal(2, in_tower((block,7),(block,9)), true, false)
final_goal(2, in_tower((block,8),(block,1)), true, false)
final_goal(2, in_tower((block,8),(block,2)), true, false)
final_goal(2, in_tower((block,8),(block,3)), true, false)
final_goal(2, in_tower((block,8),(block,4)), true, false)
final_goal(2, in_tower((block,8),(block,5)), true, false)
final_goal(2, in_tower((block,8),(block,6)), true, false)
final_goal(2, in_tower((block,8),(block,7)), true, false)
final_goal(2, in_tower((block,8),(block,8)), true, false)
final_goal(2, in_tower((block,8),(block,9)), true, false)
final_goal(2, in_tower((block,9),(block,1)), true, false)
final_goal(2, in_tower((block,9),(block,2)), true, false)
final_goal(2, in_tower((block,9),(block,3)), true, false)
final_goal(2, in_tower((block,9),(block,4)), true, false)
final_goal(2, in_tower((block,9),(block,5)), true, false)
final_goal(2, in_tower((block,9),(block,6)), true, false)
final_goal(2, in_tower((block,9),(block,7)), false, false)
final_goal(2, in_tower((block,9),(block,8)), false, false)
final_goal(2, in_tower((block,9),(block,9)), false, false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), (block,7), false)
final_goal(2, on((block,1)), (block,8), false)
final_goal(2, on((block,1)), (block,9), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), (block,7), false)
final_goal(2, on((block,2)), (block,8), false)
final_goal(2, on((block,2)), (block,9), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), (block,7), false)
final_goal(2, on((block,3)), (block,8), false)
final_goal(2, on((block,3)), (block,9), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), (block,7), false)
final_goal(2, on((block,4)), (block,8), false)
final_goal(2, on((block,4)), (block,9), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,7), false)
final_goal(2, on((block,5)), (block,8), false)
final_goal(2, on((block,5)), (block,9), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), (block,7), false)
final_goal(2, on((block,6)), (block,8), false)
final_goal(2, on((block,6)), (block,9), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,7)), (block,1), false)
final_goal(2, on((block,7)), (block,2), false)
final_goal(2, on((block,7)), (block,3), false)
final_goal(2, on((block,7)), (block,4), false)
final_goal(2, on((block,7)), (block,5), false)
final_goal(2, on((block,7)), (block,6), false)
final_goal(2, on((block,7)), (block,9), false)
final_goal(2, on((block,7)), nothing, false)
final_goal(2, on((block,7)), puzzle_room_table, false)
final_goal(2, on((block,8)), (block,1), false)
final_goal(2, on((block,8)), (block,2), false)
final_goal(2, on((block,8)), (block,3), false)
final_goal(2, on((block,8)), (block,4), false)
final_goal(2, on((block,8)), (block,5), false)
final_goal(2, on((block,8)), (block,6), false)
final_goal(2, on((block,8)), (block,7), false)
final_goal(2, on((block,8)), nothing, false)
final_goal(2, on((block,8)), puzzle_room_table, false)
final_goal(2, on((block,9)), (block,1), false)
final_goal(2, on((block,9)), (block,2), false)
final_goal(2, on((block,9)), (block,3), false)
final_goal(2, on((block,9)), (block,4), false)
final_goal(2, on((block,9)), (block,5), false)
final_goal(2, on((block,9)), (block,6), false)
final_goal(2, on((block,9)), (block,7), false)
final_goal(2, on((block,9)), (block,8), false)
final_goal(2, on((block,9)), nothing, false)
final_goal(2, tower_base((block,1),puzzle_room_table), true, false)
final_goal(2, tower_base((block,2),puzzle_room_table), true, false)
final_goal(2, tower_base((block,3),puzzle_room_table), false, false)
final_goal(2, tower_base((block,4),puzzle_room_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_table), true, false)
final_goal(2, tower_base((block,6),puzzle_room_table), false, false)
final_goal(2, tower_base((block,7),puzzle_room_table), true, false)
final_goal(2, tower_base((block,8),puzzle_room_table), true, false)
final_goal(2, tower_base((block,9),puzzle_room_table), false, false)
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_table), true, true)
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,7)), false, true)
final_goal(1, in_tower((block,1),(block,8)), false, true)
final_goal(1, in_tower((block,1),(block,9)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,7)), false, true)
final_goal(1, in_tower((block,2),(block,8)), false, true)
final_goal(1, in_tower((block,2),(block,9)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,7)), false, true)
final_goal(1, in_tower((block,3),(block,8)), false, true)
final_goal(1, in_tower((block,3),(block,9)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,7)), false, true)
final_goal(1, in_tower((block,4),(block,8)), false, true)
final_goal(1, in_tower((block,4),(block,9)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,7)), false, true)
final_goal(1, in_tower((block,5),(block,8)), false, true)
final_goal(1, in_tower((block,5),(block,9)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, in_tower((block,6),(block,7)), false, true)
final_goal(1, in_tower((block,6),(block,8)), false, true)
final_goal(1, in_tower((block,6),(block,9)), false, true)
final_goal(1, in_tower((block,7),(block,1)), false, true)
final_goal(1, in_tower((block,7),(block,2)), false, true)
final_goal(1, in_tower((block,7),(block,3)), false, true)
final_goal(1, in_tower((block,7),(block,4)), false, true)
final_goal(1, in_tower((block,7),(block,5)), false, true)
final_goal(1, in_tower((block,7),(block,6)), false, true)
final_goal(1, in_tower((block,7),(block,7)), false, true)
final_goal(1, in_tower((block,7),(block,8)), false, true)
final_goal(1, in_tower((block,7),(block,9)), false, true)
final_goal(1, in_tower((block,8),(block,1)), false, true)
final_goal(1, in_tower((block,8),(block,2)), false, true)
final_goal(1, in_tower((block,8),(block,3)), false, true)
final_goal(1, in_tower((block,8),(block,4)), false, true)
final_goal(1, in_tower((block,8),(block,5)), false, true)
final_goal(1, in_tower((block,8),(block,6)), false, true)
final_goal(1, in_tower((block,8),(block,7)), false, true)
final_goal(1, in_tower((block,8),(block,8)), false, true)
final_goal(1, in_tower((block,8),(block,9)), false, true)
final_goal(1, in_tower((block,9),(block,1)), false, true)
final_goal(1, in_tower((block,9),(block,2)), false, true)
final_goal(1, in_tower((block,9),(block,3)), false, true)
final_goal(1, in_tower((block,9),(block,4)), false, true)
final_goal(1, in_tower((block,9),(block,5)), false, true)
final_goal(1, in_tower((block,9),(block,6)), false, true)
final_goal(1, in_tower((block,9),(block,7)), true, true)
final_goal(1, in_tower((block,9),(block,8)), true, true)
final_goal(1, in_tower((block,9),(block,9)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, on((block,7)), (block,8), true)
final_goal(1, on((block,8)), (block,9), true)
final_goal(1, on((block,9)), puzzle_room_table_middle, true)
final_goal(1, tower_base((block,1),puzzle_room_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_table), false, true)
final_goal(1, tower_base((block,3),puzzle_room_table), true, true)
final_goal(1, tower_base((block,4),puzzle_room_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_table), false, true)
final_goal(1, tower_base((block,6),puzzle_room_table), true, true)
final_goal(1, tower_base((block,7),puzzle_room_table), false, true)
final_goal(1, tower_base((block,8),puzzle_room_table), false, true)
final_goal(1, tower_base((block,9),puzzle_room_table), true, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true)

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_table), false, false)
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,1),(block,7)), true, false)
final_goal(1, in_tower((block,1),(block,8)), true, false)
final_goal(1, in_tower((block,1),(block,9)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,7)), true, false)
final_goal(1, in_tower((block,2),(block,8)), true, false)
final_goal(1, in_tower((block,2),(block,9)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,7)), true, false)
final_goal(1, in_tower((block,3),(block,8)), true, false)
final_goal(1, in_tower((block,3),(block,9)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,7)), true, false)
final_goal(1, in_tower((block,4),(block,8)), true, false)
final_goal(1, in_tower((block,4),(block,9)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,7)), true, false)
final_goal(1, in_tower((block,5),(block,8)), true, false)
final_goal(1, in_tower((block,5),(block,9)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,7)), true, false)
final_goal(1, in_tower((block,6),(block,8)), true, false)
final_goal(1, in_tower((block,6),(block,9)), true, false)
final_goal(1, in_tower((block,7),(block,1)), true, false)
final_goal(1, in_tower((block,7),(block,2)), true, false)
final_goal(1, in_tower((block,7),(block,3)), true, false)
final_goal(1, in_tower((block,7),(block,4)), true, false)
final_goal(1, in_tower((block,7),(block,5)), true, false)
final_goal(1, in_tower((block,7),(block,6)), true, false)
final_goal(1, in_tower((block,7),(block,7)), true, false)
final_goal(1, in_tower((block,7),(block,8)), true, false)
final_goal(1, in_tower((block,7),(block,9)), true, false)
final_goal(1, in_tower((block,8),(block,1)), true, false)
final_goal(1, in_tower((block,8),(block,2)), true, false)
final_goal(1, in_tower((block,8),(block,3)), true, false)
final_goal(1, in_tower((block,8),(block,4)), true, false)
final_goal(1, in_tower((block,8),(block,5)), true, false)
final_goal(1, in_tower((block,8),(block,6)), true, false)
final_goal(1, in_tower((block,8),(block,7)), true, false)
final_goal(1, in_tower((block,8),(block,8)), true, false)
final_goal(1, in_tower((block,8),(block,9)), true, false)
final_goal(1, in_tower((block,9),(block,1)), true, false)
final_goal(1, in_tower((block,9),(block,2)), true, false)
final_goal(1, in_tower((block,9),(block,3)), true, false)
final_goal(1, in_tower((block,9),(block,4)), true, false)
final_goal(1, in_tower((block,9),(block,5)), true, false)
final_goal(1, in_tower((block,9),(block,6)), true, false)
final_goal(1, in_tower((block,9),(block,7)), false, false)
final_goal(1, in_tower((block,9),(block,8)), false, false)
final_goal(1, in_tower((block,9),(block,9)), false, false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), (block,7), false)
final_goal(1, on((block,1)), (block,8), false)
final_goal(1, on((block,1)), (block,9), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), (block,7), false)
final_goal(1, on((block,2)), (block,8), false)
final_goal(1, on((block,2)), (block,9), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), (block,7), false)
final_goal(1, on((block,3)), (block,8), false)
final_goal(1, on((block,3)), (block,9), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), (block,7), false)
final_goal(1, on((block,4)), (block,8), false)
final_goal(1, on((block,4)), (block,9), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,7), false)
final_goal(1, on((block,5)), (block,8), false)
final_goal(1, on((block,5)), (block,9), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), (block,7), false)
final_goal(1, on((block,6)), (block,8), false)
final_goal(1, on((block,6)), (block,9), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_middle, false)
final_goal(1, on((block,7)), (block,1), false)
final_goal(1, on((block,7)), (block,2), false)
final_goal(1, on((block,7)), (block,3), false)
final_goal(1, on((block,7)), (block,4), false)
final_goal(1, on((block,7)), (block,5), false)
final_goal(1, on((block,7)), (block,6), false)
final_goal(1, on((block,7)), (block,9), false)
final_goal(1, on((block,7)), nothing, false)
final_goal(1, on((block,7)), puzzle_room_table_left, false)
final_goal(1, on((block,7)), puzzle_room_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_table_right, false)
final_goal(1, on((block,8)), (block,1), false)
final_goal(1, on((block,8)), (block,2), false)
final_goal(1, on((block,8)), (block,3), false)
final_goal(1, on((block,8)), (block,4), false)
final_goal(1, on((block,8)), (block,5), false)
final_goal(1, on((block,8)), (block,6), false)
final_goal(1, on((block,8)), (block,7), false)
final_goal(1, on((block,8)), nothing, false)
final_goal(1, on((block,8)), puzzle_room_table_left, false)
final_goal(1, on((block,8)), puzzle_room_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_table_right, false)
final_goal(1, on((block,9)), (block,1), false)
final_goal(1, on((block,9)), (block,2), false)
final_goal(1, on((block,9)), (block,3), false)
final_goal(1, on((block,9)), (block,4), false)
final_goal(1, on((block,9)), (block,5), false)
final_goal(1, on((block,9)), (block,6), false)
final_goal(1, on((block,9)), (block,7), false)
final_goal(1, on((block,9)), (block,8), false)
final_goal(1, on((block,9)), nothing, false)
final_goal(1, on((block,9)), puzzle_room_table_left, false)
final_goal(1, on((block,9)), puzzle_room_table_right, false)
final_goal(1, tower_base((block,1),puzzle_room_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_table), false, false)
final_goal(1, tower_base((block,4),puzzle_room_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_table), false, false)
final_goal(1, tower_base((block,7),puzzle_room_table), true, false)
final_goal(1, tower_base((block,8),puzzle_room_table), true, false)
final_goal(1, tower_base((block,9),puzzle_room_table), false, false)
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false)

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', 4)
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-4] : ONLINE MODE

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 3 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 2 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 4, Highest = 4.

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [1-4].

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 4

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 4)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 4] classical : Concurrency enabled : Minimum search length bound disabled with value 0

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 4
concurrency = True
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[20-01-2022_16-20-53] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[20-01-2022_16-20-53] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-20-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 131 rules into program part ash_initial_state:

holds(4, complete_tower(blue,puzzle_room_table), false, 0).
holds(4, complete_tower(red,puzzle_room_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_table), false, 0).
holds(4, in((block,1)), puzzle_room, 0).
holds(4, in((block,2)), puzzle_room, 0).
holds(4, in((block,3)), puzzle_room, 0).
holds(4, in((block,4)), store_room, 0).
holds(4, in((block,5)), store_room, 0).
holds(4, in((block,6)), store_room, 0).
holds(4, in((block,7)), puzzle_room, 0).
holds(4, in((block,8)), store_room, 0).
holds(4, in((block,9)), puzzle_room, 0).
holds(4, in(puzzle_room_table), puzzle_room, 0).
holds(4, in(talos), starting_room, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_table, 0).
holds(4, on((block,2)), puzzle_room_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_table), true, 0).
holds(4, tower_base((block,3),puzzle_room_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_table), true, 0).
holds(4, tower_base((block,8),puzzle_room_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_table), false, 0).
holds(4, transporting(talos,(block,1)), false, 0).
holds(4, transporting(talos,(block,2)), false, 0).
holds(4, transporting(talos,(block,3)), false, 0).
holds(4, transporting(talos,(block,4)), false, 0).
holds(4, transporting(talos,(block,5)), false, 0).
holds(4, transporting(talos,(block,6)), false, 0).
holds(4, transporting(talos,(block,7)), false, 0).
holds(4, transporting(talos,(block,8)), false, 0).
holds(4, transporting(talos,(block,9)), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_table), false, 0).

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 294 rules into program part ash_goal_state:

final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, tower_base((block,7),puzzle_room_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[20-01-2022_16-20-53] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B54836B280>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 816 rules

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004939199999999921s

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-20-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(4), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.030089s.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005271s with result Satisfiable.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B5483C92C0>

[20-01-2022_16-20-54] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 4)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B5483C92C0>)

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, true). %* None *%
#program optimisation_module(#inc, 0, true, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =    200

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.154256s.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007724s with result Unsatisfiable.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1619801999999999, Incremental time limit = None
Running cumulative time = 0.1619801999999999, Cumulative time limit = 1800
Used memory = (RSS = 120.531250Mb, VMS = 108.089844Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =    200

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097006s.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004094s with result Unsatisfiable.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10109959999999996, Incremental time limit = None
Running cumulative time = 0.26307979999999986, Cumulative time limit = 1800
Used memory = (RSS = 121.613281Mb, VMS = 109.199219Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =    200

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.114243s.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006350s with result Unsatisfiable.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12059220000000037, Incremental time limit = None
Running cumulative time = 0.38367200000000024, Cumulative time limit = 1800
Used memory = (RSS = 124.238281Mb, VMS = 111.238281Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =    200

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129410s.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010322s with result Unsatisfiable.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13973190000000013, Incremental time limit = None
Running cumulative time = 0.5234039000000004, Cumulative time limit = 1800
Used memory = (RSS = 128.726562Mb, VMS = 115.746094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =    200

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151287s.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009134s with result Unsatisfiable.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1604209000000001, Incremental time limit = None
Running cumulative time = 0.6838248000000005, Cumulative time limit = 1800
Used memory = (RSS = 133.671875Mb, VMS = 120.945312Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =    200

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140514s.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070027s with result Satisfiable.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21054100000000053, Incremental time limit = None
Running cumulative time = 0.894365800000001, Cumulative time limit = 1800
Used memory = (RSS = 145.449219Mb, VMS = 133.773438Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.786716s, Solving = 0.107650s, Total = 0.894366s, Memory = (RSS = 145.449219Mb, VMS = 133.773438Mb), Step range = [0-6]), Calls = 6
Final Model :: Total atoms = 7308, Cost = (15, 0), Optimality proven = False, Number = 5, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.154256s, Solving = 0.007724s, Total = 0.161980s, Memory = (RSS = 120.531250Mb, VMS = 108.089844Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.097006s, Solving = 0.004094s, Total = 0.101100s, Memory = (RSS = 121.613281Mb, VMS = 109.199219Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.114243s, Solving = 0.006350s, Total = 0.120592s, Memory = (RSS = 124.238281Mb, VMS = 111.238281Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.129410s, Solving = 0.010322s, Total = 0.139732s, Memory = (RSS = 128.726562Mb, VMS = 115.746094Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.151287s, Solving = 0.009134s, Total = 0.160421s, Memory = (RSS = 133.671875Mb, VMS = 120.945312Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.140514s, Solving = 0.070027s, Total = 0.210541s, Memory = (RSS = 145.449219Mb, VMS = 133.773438Mb), Step range = [6-6]

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.894366s due to: Stop condition reached.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-20-55] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-20-55] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.786716s, Solving = 0.107650s, Total = 0.894366s, Memory = (RSS = 145.449219Mb, VMS = 133.773438Mb), Step range = [0-6]), Calls = 6
Model :: Total atoms = 7308, Cost = (15, 0), Optimality proven = False, Number = 5, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 4                 
          ========================================          
                 Steps = 6 :: Actions = 15                  
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : collect((block,4))
        talos : collect((block,5))
        talos : collect((block,6))
        talos : collect((block,8))
Step 3:
    Planned actions:
        talos : move(puzzle_room)
Step 4:
    Planned actions:
        talos : place_upon((block,3),puzzle_room_table)
        talos : place_upon((block,6),puzzle_room_table)
        talos : place_upon((block,9),puzzle_room_table)
Step 5:
    Planned actions:
        talos : place_upon((block,2),(block,3))
        talos : place_upon((block,5),(block,6))
        talos : place_upon((block,8),(block,9))
Step 6:
    Planned actions:
        talos : place_upon((block,1),(block,2))
        talos : place_upon((block,4),(block,5))
        talos : place_upon((block,7),(block,8))

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=4, start_step=0, total_plan_length=6, step_range=range(0, 7)

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 4 (classic), LE =   6, AC =  15, CF = 0.4, GT =   0.82s, ST =   0.11s, OT = 0.00s, TT =   0.93s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[20-01-2022_16-20-55] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=6, start_step=0, blend=Blend(left=0, right=0)

[20-01-2022_16-20-55] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=3, large_group_size=4

[20-01-2022_16-20-55] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=3, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 6, Sub-goal Stage Range = [1-6]
Division points [total=1] : [(Index = 3, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-20-55] INFO :: ASH Planner Main #1 >> Monolevel problem 1 at level 4 solved.

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 4 to proactively divide planning problem 1 at level 3:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 6, Sub-goal Stage Range = [1-6]
Division points [total=1] : [(Index = 3, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-3]

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 3, sgoals range = [1-3], problem number = 1, increment number = 1

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 3)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-20-55] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 3] partial conformance refinement (sequential) with sgoals range [1-3] : Concurrency enabled : Minimum search length bound enabled with value 2

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 3
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 2

[20-01-2022_16-20-55] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-20-55] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-20-55] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), store_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_table), true, 0).
holds(3, tower_base((block,8),puzzle_room_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(4, complete_tower(blue,puzzle_room_table), false, 0).
holds(4, complete_tower(red,puzzle_room_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_table), false, 0).
holds(4, in((block,1)), puzzle_room, 0).
holds(4, in((block,2)), puzzle_room, 0).
holds(4, in((block,3)), puzzle_room, 0).
holds(4, in((block,4)), store_room, 0).
holds(4, in((block,5)), store_room, 0).
holds(4, in((block,6)), store_room, 0).
holds(4, in((block,7)), puzzle_room, 0).
holds(4, in((block,8)), store_room, 0).
holds(4, in((block,9)), puzzle_room, 0).
holds(4, in(puzzle_room_table), puzzle_room, 0).
holds(4, in(talos), starting_room, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_table, 0).
holds(4, on((block,2)), puzzle_room_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_table), true, 0).
holds(4, tower_base((block,3),puzzle_room_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_table), true, 0).
holds(4, tower_base((block,8),puzzle_room_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_table), false, 0).
holds(4, transporting(talos,(block,1)), false, 0).
holds(4, transporting(talos,(block,2)), false, 0).
holds(4, transporting(talos,(block,3)), false, 0).
holds(4, transporting(talos,(block,4)), false, 0).
holds(4, transporting(talos,(block,5)), false, 0).
holds(4, transporting(talos,(block,6)), false, 0).
holds(4, transporting(talos,(block,7)), false, 0).
holds(4, transporting(talos,(block,8)), false, 0).
holds(4, transporting(talos,(block,9)), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(4, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_table), false, 0).

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, tower_base((block,7),puzzle_room_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=2']

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'on((block,4))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'transporting(talos,(block,4))', 'V': 'true', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'on((block,5))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'transporting(talos,(block,5))', 'V': 'true', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'on((block,6))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'transporting(talos,(block,6))', 'V': 'true', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'on((block,8))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'transporting(talos,(block,8))', 'V': 'true', 'I': 2})
SubGoal({'L': 4, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 3})

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(4, talos, move(store_room), in(talos), store_room, 1).
sub_goal(4, talos, collect((block,4)), on((block,4)), nothing, 2).
sub_goal(4, talos, collect((block,4)), transporting(talos,(block,4)), true, 2).
sub_goal(4, talos, collect((block,5)), on((block,5)), nothing, 2).
sub_goal(4, talos, collect((block,5)), transporting(talos,(block,5)), true, 2).
sub_goal(4, talos, collect((block,6)), on((block,6)), nothing, 2).
sub_goal(4, talos, collect((block,6)), transporting(talos,(block,6)), true, 2).
sub_goal(4, talos, collect((block,8)), on((block,8)), nothing, 2).
sub_goal(4, talos, collect((block,8)), transporting(talos,(block,8)), true, 2).
sub_goal(4, talos, move(puzzle_room), in(talos), puzzle_room, 3).

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=2']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B5494038B0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=3, step_end_min=3, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 3, 'sequential', 'false'), range_=None)]

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1248 rules

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006746099999999977s

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.031671s.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005887s with result Satisfiable.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54B84EC20>

[20-01-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 3)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54B84EC20>)

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 3, sequential, false). %* None *%

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      2
Incrementor step ends | Minimum  =      3 : Maximum =    200

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(3), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(3), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(3), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.469571s.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034859s with result Satisfiable.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5044308000000002, Incremental time limit = None
Running cumulative time = 0.5044308000000002, Cumulative time limit = 1800
Used memory = (RSS = 142.023438Mb, VMS = 130.226562Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.469571s, Solving = 0.034859s, Total = 0.504431s, Memory = (RSS = 142.023438Mb, VMS = 130.226562Mb), Step range = [0-2]), Calls = 1
Final Model :: Total atoms = 6724, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      3 : Maximum =    200

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(3), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.206758s.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011907s with result Unsatisfiable.

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21866480000000088, Incremental time limit = None
Running cumulative time = 0.7230956000000011, Cumulative time limit = 1800
Used memory = (RSS = 146.082031Mb, VMS = 134.011719Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      3 : Maximum =    200

[20-01-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(3), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.229613s.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015393s with result Unsatisfiable.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24500520000000048, Incremental time limit = None
Running cumulative time = 0.9681008000000015, Cumulative time limit = 1800
Used memory = (RSS = 153.273438Mb, VMS = 142.210938Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      3 : Maximum =    200

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(3), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.241514s.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031884s with result Satisfiable.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2733976, Incremental time limit = None
Running cumulative time = 1.2414984000000016, Cumulative time limit = 1800
Used memory = (RSS = 164.378906Mb, VMS = 154.996094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.147456s, Solving = 0.094042s, Total = 1.241498s, Memory = (RSS = 164.378906Mb, VMS = 154.996094Mb), Step range = [0-5]), Calls = 4
Final Model :: Total atoms = 8632, Cost = (8, 0, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.469571s, Solving = 0.034859s, Total = 0.504431s, Memory = (RSS = 142.023438Mb, VMS = 130.226562Mb), Step range = [0-2]
2 : Statistics :: Grounding = 0.206758s, Solving = 0.011907s, Total = 0.218665s, Memory = (RSS = 146.082031Mb, VMS = 134.011719Mb), Step range = [3-3]
3 : Statistics :: Grounding = 0.229613s, Solving = 0.015393s, Total = 0.245005s, Memory = (RSS = 153.273438Mb, VMS = 142.210938Mb), Step range = [4-4]
4 : Statistics :: Grounding = 0.241514s, Solving = 0.031884s, Total = 0.273398s, Memory = (RSS = 164.378906Mb, VMS = 154.996094Mb), Step range = [5-5]

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.241498s due to: Stop condition reached.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-20-56] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 3, Last requested goal index = 3, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-20-56] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.147456s, Solving = 0.094042s, Total = 1.241498s, Memory = (RSS = 164.378906Mb, VMS = 154.996094Mb), Step range = [0-5]), Calls = 4
Model :: Total atoms = 8632, Cost = (8, 0, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                  Steps = 5 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 2:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
        talos : grasp(manipulator_arm_2,(block,8))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,4))
        talos : release(manipulator_arm_2,(block,8))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=5, step_range=range(0, 6)

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 5, Tota actions = 8, Produced sub-goal stages = 8
Level [2]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (par-ref), LE =   5, AC =   8, CF = 0.6, GT =   1.18s, ST =   0.10s, OT = 0.00s, TT =   1.28s, EF = (LE = 1.7, AC = 0.8), ED = (LE = 1.2, AC = 0.1), EB = (LE = 0.7, AC = 0.2)

[20-01-2022_16-20-56] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=5, start_step=0, blend=Blend(left=0, right=0)

[20-01-2022_16-20-56] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=2, large_group_size=3

[20-01-2022_16-20-56] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=2, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 5, Sub-goal Stage Range = [1-5]
Division points [total=1] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-20-56] INFO :: ASH Planner Main #1 >> Monolevel problem 1 at level 3 solved.

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 1 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 5, Sub-goal Stage Range = [1-5]
Division points [total=1] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-2]

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-2], problem number = 1, increment number = 1

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 2)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-20-56] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [1-2] : Concurrency enabled : Minimum search length bound enabled with value 1

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 2
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 1

[20-01-2022_16-20-56] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-20-56] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-20-56] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), store_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_table), true, 0).
holds(3, tower_base((block,8),puzzle_room_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0).

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=1']

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'I': 2})

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), (block,8), 2).

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=1']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B549403F70>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=2, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 2, 'sequential', 'false'), range_=None)]

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1241 rules

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00689360000000061s

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032617s.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006551s with result Satisfiable.

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54B6B7680>

[20-01-2022_16-20-56] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 2)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54B6B7680>)

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 2, sequential, false). %* None *%

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.323357s.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019829s with result Satisfiable.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3431860999999996, Incremental time limit = None
Running cumulative time = 0.3431860999999996, Cumulative time limit = 1800
Used memory = (RSS = 143.281250Mb, VMS = 132.628906Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.323357s, Solving = 0.019829s, Total = 0.343186s, Memory = (RSS = 143.281250Mb, VMS = 132.628906Mb), Step range = [0-1]), Calls = 1
Final Model :: Total atoms = 6569, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.230944s.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007136s with result Unsatisfiable.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2380797999999995, Incremental time limit = None
Running cumulative time = 0.5812658999999991, Cumulative time limit = 1800
Used memory = (RSS = 145.292969Mb, VMS = 134.394531Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.278529s.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008191s with result Unsatisfiable.

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.286719699999999, Incremental time limit = None
Running cumulative time = 0.8679855999999981, Cumulative time limit = 1800
Used memory = (RSS = 147.929688Mb, VMS = 136.730469Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.256714s.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014385s with result Unsatisfiable.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27109880000000075, Incremental time limit = None
Running cumulative time = 1.1390843999999989, Cumulative time limit = 1800
Used memory = (RSS = 151.769531Mb, VMS = 140.269531Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.314415s.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015883s with result Unsatisfiable.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3302984999999996, Incremental time limit = None
Running cumulative time = 1.4693828999999985, Cumulative time limit = 1800
Used memory = (RSS = 157.585938Mb, VMS = 146.218750Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268949s.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017150s with result Unsatisfiable.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28609819999999964, Incremental time limit = None
Running cumulative time = 1.7554810999999981, Cumulative time limit = 1800
Used memory = (RSS = 161.988281Mb, VMS = 149.777344Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.275634s.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022381s with result Unsatisfiable.

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2980146999999995, Incremental time limit = None
Running cumulative time = 2.0534957999999977, Cumulative time limit = 1800
Used memory = (RSS = 171.941406Mb, VMS = 160.722656Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307058s.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024569s with result Unsatisfiable.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3316272000000007, Incremental time limit = None
Running cumulative time = 2.3851229999999983, Cumulative time limit = 1800
Used memory = (RSS = 181.339844Mb, VMS = 172.472656Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      2 : Maximum =    200

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(2), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.293095s.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056573s with result Satisfiable.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3496680999999997, Incremental time limit = None
Running cumulative time = 2.734791099999998, Cumulative time limit = 1800
Used memory = (RSS = 188.308594Mb, VMS = 178.296875Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.548696s, Solving = 0.186095s, Total = 2.734791s, Memory = (RSS = 188.308594Mb, VMS = 178.296875Mb), Step range = [0-9]), Calls = 9
Final Model :: Total atoms = 11703, Cost = (11, 0, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.323357s, Solving = 0.019829s, Total = 0.343186s, Memory = (RSS = 143.281250Mb, VMS = 132.628906Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.230944s, Solving = 0.007136s, Total = 0.238080s, Memory = (RSS = 145.292969Mb, VMS = 134.394531Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.278529s, Solving = 0.008191s, Total = 0.286720s, Memory = (RSS = 147.929688Mb, VMS = 136.730469Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.256714s, Solving = 0.014385s, Total = 0.271099s, Memory = (RSS = 151.769531Mb, VMS = 140.269531Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.314415s, Solving = 0.015883s, Total = 0.330298s, Memory = (RSS = 157.585938Mb, VMS = 146.218750Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.268949s, Solving = 0.017150s, Total = 0.286098s, Memory = (RSS = 161.988281Mb, VMS = 149.777344Mb), Step range = [6-6]
7 : Statistics :: Grounding = 0.275634s, Solving = 0.022381s, Total = 0.298015s, Memory = (RSS = 171.941406Mb, VMS = 160.722656Mb), Step range = [7-7]
8 : Statistics :: Grounding = 0.307058s, Solving = 0.024569s, Total = 0.331627s, Memory = (RSS = 181.339844Mb, VMS = 172.472656Mb), Step range = [8-8]
9 : Statistics :: Grounding = 0.293095s, Solving = 0.056573s, Total = 0.349668s, Memory = (RSS = 188.308594Mb, VMS = 178.296875Mb), Step range = [9-9]

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.734791s due to: Stop condition reached.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2}
Sub-goal achievement steps: {1: 7, 2: 9}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-00] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 2, Last requested goal index = 2, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-00] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.548696s, Solving = 0.186095s, Total = 2.734791s, Memory = (RSS = 188.308594Mb, VMS = 178.296875Mb), Step range = [0-9]), Calls = 9
Model :: Total atoms = 11703, Cost = (11, 0, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 9 :: Actions = 11                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
        talos : grasp(manipulator_arm_2,(block,8))

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=9, step_range=range(0, 10)

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 5, Tota actions = 8, Produced sub-goal stages = 8
Level [2]: Length = 9, Tota actions = 11, Produced sub-goal stages = 11
Level [1]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   9, AC =  11, CF = 0.8, GT =   2.58s, ST =   0.19s, OT = 0.00s, TT =   2.77s, EF = (LE = 4.5, AC = 3.7), ED = (LE = 3.5, AC = 3.5), EB = (LE = 0.8, AC = 0.8)

[20-01-2022_16-21-00] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=9, start_step=0, blend=Blend(left=0, right=0)

[20-01-2022_16-21-00] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=4, large_group_size=5

[20-01-2022_16-21-00] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=4, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 9, Sub-goal Stage Range = [1-9]
Division points [total=1] : [(Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-00] INFO :: ASH Planner Main #1 >> Monolevel problem 1 at level 2 solved.

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 1 at level 1:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 9, Sub-goal Stage Range = [1-9]
Division points [total=1] : [(Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-4]

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-4], problem number = 1, increment number = 1

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 4)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-00] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [1-4] : Concurrency enabled : Minimum search length bound enabled with value 3

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 4
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 3

[20-01-2022_16-21-00] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-21-00] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-00] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 0).
holds(1, complete_tower(red,puzzle_room_table), false, 0).
holds(1, complete_tower(yellow,puzzle_room_table), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in((block,7)), (puzzle_room,1), 0).
holds(1, in((block,8)), (store_room,0), 0).
holds(1, in((block,9)), (puzzle_room,1), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,1),(block,7)), false, 0).
holds(1, in_tower((block,1),(block,8)), false, 0).
holds(1, in_tower((block,1),(block,9)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,7)), false, 0).
holds(1, in_tower((block,2),(block,8)), false, 0).
holds(1, in_tower((block,2),(block,9)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,7)), false, 0).
holds(1, in_tower((block,3),(block,8)), false, 0).
holds(1, in_tower((block,3),(block,9)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,7)), false, 0).
holds(1, in_tower((block,4),(block,8)), false, 0).
holds(1, in_tower((block,4),(block,9)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,7)), false, 0).
holds(1, in_tower((block,5),(block,8)), false, 0).
holds(1, in_tower((block,5),(block,9)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,7)), false, 0).
holds(1, in_tower((block,6),(block,8)), false, 0).
holds(1, in_tower((block,6),(block,9)), false, 0).
holds(1, in_tower((block,7),(block,1)), false, 0).
holds(1, in_tower((block,7),(block,2)), false, 0).
holds(1, in_tower((block,7),(block,3)), false, 0).
holds(1, in_tower((block,7),(block,4)), false, 0).
holds(1, in_tower((block,7),(block,5)), false, 0).
holds(1, in_tower((block,7),(block,6)), false, 0).
holds(1, in_tower((block,7),(block,7)), true, 0).
holds(1, in_tower((block,7),(block,8)), false, 0).
holds(1, in_tower((block,7),(block,9)), true, 0).
holds(1, in_tower((block,8),(block,1)), false, 0).
holds(1, in_tower((block,8),(block,2)), false, 0).
holds(1, in_tower((block,8),(block,3)), false, 0).
holds(1, in_tower((block,8),(block,4)), false, 0).
holds(1, in_tower((block,8),(block,5)), false, 0).
holds(1, in_tower((block,8),(block,6)), false, 0).
holds(1, in_tower((block,8),(block,7)), false, 0).
holds(1, in_tower((block,8),(block,8)), false, 0).
holds(1, in_tower((block,8),(block,9)), false, 0).
holds(1, in_tower((block,9),(block,1)), false, 0).
holds(1, in_tower((block,9),(block,2)), false, 0).
holds(1, in_tower((block,9),(block,3)), false, 0).
holds(1, in_tower((block,9),(block,4)), false, 0).
holds(1, in_tower((block,9),(block,5)), false, 0).
holds(1, in_tower((block,9),(block,6)), false, 0).
holds(1, in_tower((block,9),(block,7)), false, 0).
holds(1, in_tower((block,9),(block,8)), false, 0).
holds(1, in_tower((block,9),(block,9)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, on((block,7)), puzzle_room_table_middle, 0).
holds(1, on((block,8)), nothing, 0).
holds(1, on((block,9)), (block,7), 0).
holds(1, tower_base((block,1),puzzle_room_table), true, 0).
holds(1, tower_base((block,2),puzzle_room_table), true, 0).
holds(1, tower_base((block,3),puzzle_room_table), false, 0).
holds(1, tower_base((block,4),puzzle_room_table), false, 0).
holds(1, tower_base((block,5),puzzle_room_table), false, 0).
holds(1, tower_base((block,6),puzzle_room_table), false, 0).
holds(1, tower_base((block,7),puzzle_room_table), true, 0).
holds(1, tower_base((block,8),puzzle_room_table), false, 0).
holds(1, tower_base((block,9),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=3']

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 4})

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4).

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=3']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B549528430>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=4, step_end_min=4, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 4, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1276 rules

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007317399999999807s

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.047061s.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008309s with result Satisfiable.

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54B9AC270>

[20-01-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 4)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54B9AC270>)

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 4, sequential, false). %* None *%

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      3
Incrementor step ends | Minimum  =      4 : Maximum =    200

[20-01-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(4), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(4), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(4), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(4), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.201751s.

[20-01-2022_16-21-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.093548s with result Satisfiable.

[20-01-2022_16-21-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.295299, Incremental time limit = None
Running cumulative time = 2.295299, Cumulative time limit = 1800
Used memory = (RSS = 179.507812Mb, VMS = 169.398438Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.201751s, Solving = 0.093548s, Total = 2.295299s, Memory = (RSS = 179.507812Mb, VMS = 169.398438Mb), Step range = [0-3]), Calls = 1
Final Model :: Total atoms = 8826, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[20-01-2022_16-21-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      4 : Maximum =    200

[20-01-2022_16-21-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(4), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.655013s.

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012863s with result Unsatisfiable.

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6678756000000003, Incremental time limit = None
Running cumulative time = 2.9631746000000003, Cumulative time limit = 1800
Used memory = (RSS = 184.691406Mb, VMS = 175.699219Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      4 : Maximum =    200

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(4), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.660909s.

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019715s with result Unsatisfiable.

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6806237999999993, Incremental time limit = None
Running cumulative time = 3.6437983999999997, Cumulative time limit = 1800
Used memory = (RSS = 185.914062Mb, VMS = 176.144531Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      4 : Maximum =    200

[20-01-2022_16-21-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(4), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.656182s.

[20-01-2022_16-21-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022604s with result Unsatisfiable.

[20-01-2022_16-21-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6787863999999999, Incremental time limit = None
Running cumulative time = 4.3225848, Cumulative time limit = 1800
Used memory = (RSS = 191.898438Mb, VMS = 181.035156Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      4 : Maximum =    200

[20-01-2022_16-21-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(4), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.710944s.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.088868s with result Satisfiable.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7998125000000016, Incremental time limit = None
Running cumulative time = 5.122397300000001, Cumulative time limit = 1800
Used memory = (RSS = 206.453125Mb, VMS = 198.386719Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.884799s, Solving = 0.237598s, Total = 5.122397s, Memory = (RSS = 206.453125Mb, VMS = 198.386719Mb), Step range = [0-7]), Calls = 5
Final Model :: Total atoms = 11751, Cost = (7, 0, 0), Optimality proven = False, Number = 2, Thread ID = 7, Model type = ModelType.StableModel

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 2.201751s, Solving = 0.093548s, Total = 2.295299s, Memory = (RSS = 179.507812Mb, VMS = 169.398438Mb), Step range = [0-3]
2 : Statistics :: Grounding = 0.655013s, Solving = 0.012863s, Total = 0.667876s, Memory = (RSS = 184.691406Mb, VMS = 175.699219Mb), Step range = [4-4]
3 : Statistics :: Grounding = 0.660909s, Solving = 0.019715s, Total = 0.680624s, Memory = (RSS = 185.914062Mb, VMS = 176.144531Mb), Step range = [5-5]
4 : Statistics :: Grounding = 0.656182s, Solving = 0.022604s, Total = 0.678786s, Memory = (RSS = 191.898438Mb, VMS = 181.035156Mb), Step range = [6-6]
5 : Statistics :: Grounding = 0.710944s, Solving = 0.088868s, Total = 0.799813s, Memory = (RSS = 206.453125Mb, VMS = 198.386719Mb), Step range = [7-7]

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.122397s due to: Stop condition reached.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2}
Sub-goal achievement steps: {1: 7, 2: 9}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2}
Sub-goal achievement steps: {1: 7, 2: 9}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-05] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 4, Last requested goal index = 4, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-05] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.884799s, Solving = 0.237598s, Total = 5.122397s, Memory = (RSS = 206.453125Mb, VMS = 198.386719Mb), Step range = [0-7]), Calls = 5
Model :: Total atoms = 11751, Cost = (7, 0, 0), Optimality proven = False, Number = 2, Thread ID = 7, Model type = ModelType.StableModel

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)

[20-01-2022_16-21-05] INFO :: ASH Planner Main #1 >> Monolevel problem 1 at level 1 solved.

[20-01-2022_16-21-05] INFO :: ASH Planner Main #1 >> Online planning increment 1 finished.

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 6 : Goals achieved = 3 : Goals unachieved = 3 : Complete = False
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 5 : Goals achieved = 2 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 1 : Total constraining sub-goal stages = 9 : Goals achieved = 4 : Goals unachieved = 5 : Complete = False

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 3.

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 2 by method ground-first is [1-1].

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 2 at level 1:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 9, Sub-goal Stage Range = [1-9]
Division points [total=1] : [(Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [5-9]

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [5-9], problem number = 2, increment number = 2

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 5)
	('last_sgoals', 9)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-05] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [5-9] : Concurrency enabled : Minimum search length bound enabled with value 11

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 5
last_sgoals = 9
start_step = 7
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 11

[20-01-2022_16-21-05] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-21-05] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-05] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 7 as problem start state.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 7})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(store_room_door_handle_outer)', 'S': 7})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 7})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 7})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 7})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 7})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 7})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 7})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'S': 7})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 7})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'store_room_door_handle_outer', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 7})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 7})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 7})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 7})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 7})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 7})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 7})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 7})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 7})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 7})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 7})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 7})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 7})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 7})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 7})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 7})

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 7).
holds(1, complete_tower(red,puzzle_room_table), false, 7).
holds(1, complete_tower(yellow,puzzle_room_table), false, 7).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 7).
holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 7).
holds(1, configuration(manipulator_limb_1), retracted, 7).
holds(1, configuration(manipulator_limb_2), extended, 7).
holds(1, configuration(puzzle_room_door), closed, 7).
holds(1, configuration(starting_room_door), closed, 7).
holds(1, configuration(store_room_door), open, 7).
holds(1, grasping(manipulator_arm_1), nothing, 7).
holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 7).
holds(1, grasping(manipulator_end_1), nothing, 7).
holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 7).
holds(1, in((block,1)), (puzzle_room,1), 7).
holds(1, in((block,2)), (puzzle_room,1), 7).
holds(1, in((block,3)), (puzzle_room,1), 7).
holds(1, in((block,4)), (store_room,0), 7).
holds(1, in((block,5)), (store_room,0), 7).
holds(1, in((block,6)), (store_room,0), 7).
holds(1, in((block,7)), (puzzle_room,1), 7).
holds(1, in((block,8)), (store_room,0), 7).
holds(1, in((block,9)), (puzzle_room,1), 7).
holds(1, in(manipulator_arm_1), (hallway,0), 7).
holds(1, in(manipulator_arm_2), (hallway,0), 7).
holds(1, in(manipulator_end_1), (hallway,0), 7).
holds(1, in(manipulator_end_2), (hallway,0), 7).
holds(1, in(manipulator_limb_1), (hallway,0), 7).
holds(1, in(manipulator_limb_2), (hallway,0), 7).
holds(1, in(puzzle_room_table), (puzzle_room,1), 7).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 7).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7).
holds(1, in(talos), (hallway,0), 7).
holds(1, in_tower((block,1),(block,1)), true, 7).
holds(1, in_tower((block,1),(block,2)), false, 7).
holds(1, in_tower((block,1),(block,3)), true, 7).
holds(1, in_tower((block,1),(block,4)), false, 7).
holds(1, in_tower((block,1),(block,5)), false, 7).
holds(1, in_tower((block,1),(block,6)), false, 7).
holds(1, in_tower((block,1),(block,7)), false, 7).
holds(1, in_tower((block,1),(block,8)), false, 7).
holds(1, in_tower((block,1),(block,9)), false, 7).
holds(1, in_tower((block,2),(block,1)), false, 7).
holds(1, in_tower((block,2),(block,2)), true, 7).
holds(1, in_tower((block,2),(block,3)), false, 7).
holds(1, in_tower((block,2),(block,4)), false, 7).
holds(1, in_tower((block,2),(block,5)), false, 7).
holds(1, in_tower((block,2),(block,6)), false, 7).
holds(1, in_tower((block,2),(block,7)), false, 7).
holds(1, in_tower((block,2),(block,8)), false, 7).
holds(1, in_tower((block,2),(block,9)), false, 7).
holds(1, in_tower((block,3),(block,1)), false, 7).
holds(1, in_tower((block,3),(block,2)), false, 7).
holds(1, in_tower((block,3),(block,3)), false, 7).
holds(1, in_tower((block,3),(block,4)), false, 7).
holds(1, in_tower((block,3),(block,5)), false, 7).
holds(1, in_tower((block,3),(block,6)), false, 7).
holds(1, in_tower((block,3),(block,7)), false, 7).
holds(1, in_tower((block,3),(block,8)), false, 7).
holds(1, in_tower((block,3),(block,9)), false, 7).
holds(1, in_tower((block,4),(block,1)), false, 7).
holds(1, in_tower((block,4),(block,2)), false, 7).
holds(1, in_tower((block,4),(block,3)), false, 7).
holds(1, in_tower((block,4),(block,4)), false, 7).
holds(1, in_tower((block,4),(block,5)), false, 7).
holds(1, in_tower((block,4),(block,6)), false, 7).
holds(1, in_tower((block,4),(block,7)), false, 7).
holds(1, in_tower((block,4),(block,8)), false, 7).
holds(1, in_tower((block,4),(block,9)), false, 7).
holds(1, in_tower((block,5),(block,1)), false, 7).
holds(1, in_tower((block,5),(block,2)), false, 7).
holds(1, in_tower((block,5),(block,3)), false, 7).
holds(1, in_tower((block,5),(block,4)), false, 7).
holds(1, in_tower((block,5),(block,5)), false, 7).
holds(1, in_tower((block,5),(block,6)), false, 7).
holds(1, in_tower((block,5),(block,7)), false, 7).
holds(1, in_tower((block,5),(block,8)), false, 7).
holds(1, in_tower((block,5),(block,9)), false, 7).
holds(1, in_tower((block,6),(block,1)), false, 7).
holds(1, in_tower((block,6),(block,2)), false, 7).
holds(1, in_tower((block,6),(block,3)), false, 7).
holds(1, in_tower((block,6),(block,4)), false, 7).
holds(1, in_tower((block,6),(block,5)), false, 7).
holds(1, in_tower((block,6),(block,6)), false, 7).
holds(1, in_tower((block,6),(block,7)), false, 7).
holds(1, in_tower((block,6),(block,8)), false, 7).
holds(1, in_tower((block,6),(block,9)), false, 7).
holds(1, in_tower((block,7),(block,1)), false, 7).
holds(1, in_tower((block,7),(block,2)), false, 7).
holds(1, in_tower((block,7),(block,3)), false, 7).
holds(1, in_tower((block,7),(block,4)), false, 7).
holds(1, in_tower((block,7),(block,5)), false, 7).
holds(1, in_tower((block,7),(block,6)), false, 7).
holds(1, in_tower((block,7),(block,7)), true, 7).
holds(1, in_tower((block,7),(block,8)), false, 7).
holds(1, in_tower((block,7),(block,9)), true, 7).
holds(1, in_tower((block,8),(block,1)), false, 7).
holds(1, in_tower((block,8),(block,2)), false, 7).
holds(1, in_tower((block,8),(block,3)), false, 7).
holds(1, in_tower((block,8),(block,4)), false, 7).
holds(1, in_tower((block,8),(block,5)), false, 7).
holds(1, in_tower((block,8),(block,6)), false, 7).
holds(1, in_tower((block,8),(block,7)), false, 7).
holds(1, in_tower((block,8),(block,8)), false, 7).
holds(1, in_tower((block,8),(block,9)), false, 7).
holds(1, in_tower((block,9),(block,1)), false, 7).
holds(1, in_tower((block,9),(block,2)), false, 7).
holds(1, in_tower((block,9),(block,3)), false, 7).
holds(1, in_tower((block,9),(block,4)), false, 7).
holds(1, in_tower((block,9),(block,5)), false, 7).
holds(1, in_tower((block,9),(block,6)), false, 7).
holds(1, in_tower((block,9),(block,7)), false, 7).
holds(1, in_tower((block,9),(block,8)), false, 7).
holds(1, in_tower((block,9),(block,9)), false, 7).
holds(1, on((block,1)), puzzle_room_table_left, 7).
holds(1, on((block,2)), puzzle_room_table_right, 7).
holds(1, on((block,3)), (block,1), 7).
holds(1, on((block,4)), nothing, 7).
holds(1, on((block,5)), nothing, 7).
holds(1, on((block,6)), nothing, 7).
holds(1, on((block,7)), puzzle_room_table_middle, 7).
holds(1, on((block,8)), nothing, 7).
holds(1, on((block,9)), (block,7), 7).
holds(1, tower_base((block,1),puzzle_room_table), true, 7).
holds(1, tower_base((block,2),puzzle_room_table), true, 7).
holds(1, tower_base((block,3),puzzle_room_table), false, 7).
holds(1, tower_base((block,4),puzzle_room_table), false, 7).
holds(1, tower_base((block,5),puzzle_room_table), false, 7).
holds(1, tower_base((block,6),puzzle_room_table), false, 7).
holds(1, tower_base((block,7),puzzle_room_table), true, 7).
holds(1, tower_base((block,8),puzzle_room_table), false, 7).
holds(1, tower_base((block,9),puzzle_room_table), false, 7).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 7).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 7).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 7).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 7).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 7).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 7).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 7).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 7).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 7).
holds(2, complete_tower(blue,puzzle_room_table), false, 7).
holds(2, complete_tower(red,puzzle_room_table), false, 7).
holds(2, complete_tower(yellow,puzzle_room_table), false, 7).
holds(2, configuration(manipulator_arm_1), retracted, 7).
holds(2, configuration(manipulator_arm_2), extended, 7).
holds(2, configuration(puzzle_room_door), closed, 7).
holds(2, configuration(starting_room_door), closed, 7).
holds(2, configuration(store_room_door), open, 7).
holds(2, grasping(manipulator_arm_1), nothing, 7).
holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 7).
holds(2, in((block,1)), puzzle_room, 7).
holds(2, in((block,2)), puzzle_room, 7).
holds(2, in((block,3)), puzzle_room, 7).
holds(2, in((block,4)), store_room, 7).
holds(2, in((block,5)), store_room, 7).
holds(2, in((block,6)), store_room, 7).
holds(2, in((block,7)), puzzle_room, 7).
holds(2, in((block,8)), store_room, 7).
holds(2, in((block,9)), puzzle_room, 7).
holds(2, in(manipulator_arm_1), hallway, 7).
holds(2, in(manipulator_arm_2), hallway, 7).
holds(2, in(puzzle_room_table), puzzle_room, 7).
holds(2, in(talos), hallway, 7).
holds(2, in_tower((block,1),(block,1)), true, 7).
holds(2, in_tower((block,1),(block,2)), false, 7).
holds(2, in_tower((block,1),(block,3)), true, 7).
holds(2, in_tower((block,1),(block,4)), false, 7).
holds(2, in_tower((block,1),(block,5)), false, 7).
holds(2, in_tower((block,1),(block,6)), false, 7).
holds(2, in_tower((block,1),(block,7)), false, 7).
holds(2, in_tower((block,1),(block,8)), false, 7).
holds(2, in_tower((block,1),(block,9)), false, 7).
holds(2, in_tower((block,2),(block,1)), false, 7).
holds(2, in_tower((block,2),(block,2)), true, 7).
holds(2, in_tower((block,2),(block,3)), false, 7).
holds(2, in_tower((block,2),(block,4)), false, 7).
holds(2, in_tower((block,2),(block,5)), false, 7).
holds(2, in_tower((block,2),(block,6)), false, 7).
holds(2, in_tower((block,2),(block,7)), false, 7).
holds(2, in_tower((block,2),(block,8)), false, 7).
holds(2, in_tower((block,2),(block,9)), false, 7).
holds(2, in_tower((block,3),(block,1)), false, 7).
holds(2, in_tower((block,3),(block,2)), false, 7).
holds(2, in_tower((block,3),(block,3)), false, 7).
holds(2, in_tower((block,3),(block,4)), false, 7).
holds(2, in_tower((block,3),(block,5)), false, 7).
holds(2, in_tower((block,3),(block,6)), false, 7).
holds(2, in_tower((block,3),(block,7)), false, 7).
holds(2, in_tower((block,3),(block,8)), false, 7).
holds(2, in_tower((block,3),(block,9)), false, 7).
holds(2, in_tower((block,4),(block,1)), false, 7).
holds(2, in_tower((block,4),(block,2)), false, 7).
holds(2, in_tower((block,4),(block,3)), false, 7).
holds(2, in_tower((block,4),(block,4)), false, 7).
holds(2, in_tower((block,4),(block,5)), false, 7).
holds(2, in_tower((block,4),(block,6)), false, 7).
holds(2, in_tower((block,4),(block,7)), false, 7).
holds(2, in_tower((block,4),(block,8)), false, 7).
holds(2, in_tower((block,4),(block,9)), false, 7).
holds(2, in_tower((block,5),(block,1)), false, 7).
holds(2, in_tower((block,5),(block,2)), false, 7).
holds(2, in_tower((block,5),(block,3)), false, 7).
holds(2, in_tower((block,5),(block,4)), false, 7).
holds(2, in_tower((block,5),(block,5)), false, 7).
holds(2, in_tower((block,5),(block,6)), false, 7).
holds(2, in_tower((block,5),(block,7)), false, 7).
holds(2, in_tower((block,5),(block,8)), false, 7).
holds(2, in_tower((block,5),(block,9)), false, 7).
holds(2, in_tower((block,6),(block,1)), false, 7).
holds(2, in_tower((block,6),(block,2)), false, 7).
holds(2, in_tower((block,6),(block,3)), false, 7).
holds(2, in_tower((block,6),(block,4)), false, 7).
holds(2, in_tower((block,6),(block,5)), false, 7).
holds(2, in_tower((block,6),(block,6)), false, 7).
holds(2, in_tower((block,6),(block,7)), false, 7).
holds(2, in_tower((block,6),(block,8)), false, 7).
holds(2, in_tower((block,6),(block,9)), false, 7).
holds(2, in_tower((block,7),(block,1)), false, 7).
holds(2, in_tower((block,7),(block,2)), false, 7).
holds(2, in_tower((block,7),(block,3)), false, 7).
holds(2, in_tower((block,7),(block,4)), false, 7).
holds(2, in_tower((block,7),(block,5)), false, 7).
holds(2, in_tower((block,7),(block,6)), false, 7).
holds(2, in_tower((block,7),(block,7)), true, 7).
holds(2, in_tower((block,7),(block,8)), false, 7).
holds(2, in_tower((block,7),(block,9)), true, 7).
holds(2, in_tower((block,8),(block,1)), false, 7).
holds(2, in_tower((block,8),(block,2)), false, 7).
holds(2, in_tower((block,8),(block,3)), false, 7).
holds(2, in_tower((block,8),(block,4)), false, 7).
holds(2, in_tower((block,8),(block,5)), false, 7).
holds(2, in_tower((block,8),(block,6)), false, 7).
holds(2, in_tower((block,8),(block,7)), false, 7).
holds(2, in_tower((block,8),(block,8)), false, 7).
holds(2, in_tower((block,8),(block,9)), false, 7).
holds(2, in_tower((block,9),(block,1)), false, 7).
holds(2, in_tower((block,9),(block,2)), false, 7).
holds(2, in_tower((block,9),(block,3)), false, 7).
holds(2, in_tower((block,9),(block,4)), false, 7).
holds(2, in_tower((block,9),(block,5)), false, 7).
holds(2, in_tower((block,9),(block,6)), false, 7).
holds(2, in_tower((block,9),(block,7)), false, 7).
holds(2, in_tower((block,9),(block,8)), false, 7).
holds(2, in_tower((block,9),(block,9)), false, 7).
holds(2, on((block,1)), puzzle_room_table, 7).
holds(2, on((block,2)), puzzle_room_table, 7).
holds(2, on((block,3)), (block,1), 7).
holds(2, on((block,4)), nothing, 7).
holds(2, on((block,5)), nothing, 7).
holds(2, on((block,6)), nothing, 7).
holds(2, on((block,7)), puzzle_room_table, 7).
holds(2, on((block,8)), nothing, 7).
holds(2, on((block,9)), (block,7), 7).
holds(2, tower_base((block,1),puzzle_room_table), true, 7).
holds(2, tower_base((block,2),puzzle_room_table), true, 7).
holds(2, tower_base((block,3),puzzle_room_table), false, 7).
holds(2, tower_base((block,4),puzzle_room_table), false, 7).
holds(2, tower_base((block,5),puzzle_room_table), false, 7).
holds(2, tower_base((block,6),puzzle_room_table), false, 7).
holds(2, tower_base((block,7),puzzle_room_table), true, 7).
holds(2, tower_base((block,8),puzzle_room_table), false, 7).
holds(2, tower_base((block,9),puzzle_room_table), false, 7).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 7).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 7).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 7).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 7).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 7).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 7).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 7).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 7).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 7).

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=11']

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'I': 9})

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6).
sub_goal(2, talos, move(store_room), in(talos), store_room, 7).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 9).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), (block,8), 9).

[20-01-2022_16-21-05] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=11']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B5494038B0>]
	incrementor = SolveIncrementor(step_start=7, step_increase=1, step_increase_initial=5, step_end_min=12, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 7), range_=None), IncPart(name='plan_module', args=('#inc', 7, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 7, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 7, 5, 9, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1279 rules

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007182999999999495s

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.043200s.

[20-01-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010470s with result Satisfiable.

[20-01-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54CF5AD10>

[20-01-2022_16-21-06] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 1)
	('start_step', 7)
	('last_sgoals', 9)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 5)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54CF5AD10>)

[20-01-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 7). %* None *%
#program plan_module(#inc, 7, true, false). %* None *%
#program optimisation_module(#inc, 7, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 7, 5, 9, sequential, false). %* None *%

[20-01-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      6 : Current =     11
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(7), Number(7)]), ('plan_module', [Number(7), Number(7), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(7), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(7), Number(5), Number(9), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(8), Number(7)]), ('plan_module', [Number(8), Number(7), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(7), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(7), Number(5), Number(9), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(9), Number(7)]), ('plan_module', [Number(9), Number(7), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(7), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(7), Number(5), Number(9), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(10), Number(7)]), ('plan_module', [Number(10), Number(7), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(7), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(7), Number(5), Number(9), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(11), Number(7)]), ('plan_module', [Number(11), Number(7), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(7), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(7), Number(5), Number(9), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.722261s.

[20-01-2022_16-21-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.134099s with result Satisfiable.

[20-01-2022_16-21-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.8563596000000047, Incremental time limit = None
Running cumulative time = 2.8563596000000047, Cumulative time limit = 1800
Used memory = (RSS = 200.312500Mb, VMS = 191.539062Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.722261s, Solving = 0.134099s, Total = 2.856360s, Memory = (RSS = 200.312500Mb, VMS = 191.539062Mb), Step range = [7-11]), Calls = 1
Final Model :: Total atoms = 9564, Cost = (4, 0, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[20-01-2022_16-21-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(7)]), ('plan_module', [Number(12), Number(7), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(7), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(7), Number(5), Number(9), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.598844s.

[20-01-2022_16-21-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013108s with result Unsatisfiable.

[20-01-2022_16-21-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6119523999999998, Incremental time limit = None
Running cumulative time = 3.4683120000000045, Cumulative time limit = 1800
Used memory = (RSS = 204.519531Mb, VMS = 196.921875Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(7)]), ('plan_module', [Number(13), Number(7), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(7), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(7), Number(5), Number(9), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.547608s.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015643s with result Unsatisfiable.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5632517000000021, Incremental time limit = None
Running cumulative time = 4.031563700000007, Cumulative time limit = 1800
Used memory = (RSS = 205.136719Mb, VMS = 197.011719Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(7)]), ('plan_module', [Number(14), Number(7), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(7), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(7), Number(5), Number(9), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.604058s.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043921s with result Satisfiable.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6479791999999946, Incremental time limit = None
Running cumulative time = 4.679542900000001, Cumulative time limit = 1800
Used memory = (RSS = 213.179688Mb, VMS = 203.843750Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.472772s, Solving = 0.206771s, Total = 4.679543s, Memory = (RSS = 213.179688Mb, VMS = 203.843750Mb), Step range = [7-14]), Calls = 4
Final Model :: Total atoms = 11773, Cost = (10, 0, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 2.722261s, Solving = 0.134099s, Total = 2.856360s, Memory = (RSS = 200.312500Mb, VMS = 191.539062Mb), Step range = [7-11]
2 : Statistics :: Grounding = 0.598844s, Solving = 0.013108s, Total = 0.611952s, Memory = (RSS = 204.519531Mb, VMS = 196.921875Mb), Step range = [12-12]
3 : Statistics :: Grounding = 0.547608s, Solving = 0.015643s, Total = 0.563252s, Memory = (RSS = 205.136719Mb, VMS = 197.011719Mb), Step range = [13-13]
4 : Statistics :: Grounding = 0.604058s, Solving = 0.043921s, Total = 0.647979s, Memory = (RSS = 213.179688Mb, VMS = 203.843750Mb), Step range = [14-14]

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.679543s due to: Stop condition reached.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2}
Sub-goal achievement steps: {1: 7, 2: 9}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2}
Sub-goal achievement steps: {1: 7, 2: 9}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-11] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 9, Last requested goal index = 9, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-11] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.472772s, Solving = 0.206771s, Total = 4.679543s, Memory = (RSS = 213.179688Mb, VMS = 203.843750Mb), Step range = [7-14]), Calls = 4
Model :: Total atoms = 11773, Cost = (10, 0, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 7 :: Actions = 10                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
        talos : grasp(manipulator_end_2,(block,8))

[20-01-2022_16-21-11] INFO :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[20-01-2022_16-21-11] INFO :: ASH Planner Main #1 >> Online planning increment 2 finished.

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 6 : Goals achieved = 3 : Goals unachieved = 3 : Complete = False
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 5 : Goals achieved = 2 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 9 : Goals achieved = 9 : Goals unachieved = 0 : Complete = False

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 3.

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-2].

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 5, Sub-goal Stage Range = [1-5]
Division points [total=1] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [3-5]

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [3-5], problem number = 2, increment number = 3

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 3)
	('last_sgoals', 5)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-11] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [3-5] : Concurrency enabled : Minimum search length bound enabled with value 11

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 3
last_sgoals = 5
start_step = 9
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 11

[20-01-2022_16-21-11] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-21-11] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-11] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 9 as problem start state.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 9})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 9})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 9})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 9})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 9})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 9})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 9})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 9})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 9})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 9})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 9})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 9})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 9})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 9})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 9})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'store_room', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 9})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 9})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 9})

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 9).
holds(2, complete_tower(red,puzzle_room_table), false, 9).
holds(2, complete_tower(yellow,puzzle_room_table), false, 9).
holds(2, configuration(manipulator_arm_1), extended, 9).
holds(2, configuration(manipulator_arm_2), extended, 9).
holds(2, configuration(puzzle_room_door), closed, 9).
holds(2, configuration(starting_room_door), closed, 9).
holds(2, configuration(store_room_door), open, 9).
holds(2, grasping(manipulator_arm_1), (block,4), 9).
holds(2, grasping(manipulator_arm_2), (block,8), 9).
holds(2, in((block,1)), puzzle_room, 9).
holds(2, in((block,2)), puzzle_room, 9).
holds(2, in((block,3)), puzzle_room, 9).
holds(2, in((block,4)), store_room, 9).
holds(2, in((block,5)), store_room, 9).
holds(2, in((block,6)), store_room, 9).
holds(2, in((block,7)), puzzle_room, 9).
holds(2, in((block,8)), store_room, 9).
holds(2, in((block,9)), puzzle_room, 9).
holds(2, in(manipulator_arm_1), store_room, 9).
holds(2, in(manipulator_arm_2), store_room, 9).
holds(2, in(puzzle_room_table), puzzle_room, 9).
holds(2, in(talos), store_room, 9).
holds(2, in_tower((block,1),(block,1)), true, 9).
holds(2, in_tower((block,1),(block,2)), false, 9).
holds(2, in_tower((block,1),(block,3)), true, 9).
holds(2, in_tower((block,1),(block,4)), false, 9).
holds(2, in_tower((block,1),(block,5)), false, 9).
holds(2, in_tower((block,1),(block,6)), false, 9).
holds(2, in_tower((block,1),(block,7)), false, 9).
holds(2, in_tower((block,1),(block,8)), false, 9).
holds(2, in_tower((block,1),(block,9)), false, 9).
holds(2, in_tower((block,2),(block,1)), false, 9).
holds(2, in_tower((block,2),(block,2)), true, 9).
holds(2, in_tower((block,2),(block,3)), false, 9).
holds(2, in_tower((block,2),(block,4)), false, 9).
holds(2, in_tower((block,2),(block,5)), false, 9).
holds(2, in_tower((block,2),(block,6)), false, 9).
holds(2, in_tower((block,2),(block,7)), false, 9).
holds(2, in_tower((block,2),(block,8)), false, 9).
holds(2, in_tower((block,2),(block,9)), false, 9).
holds(2, in_tower((block,3),(block,1)), false, 9).
holds(2, in_tower((block,3),(block,2)), false, 9).
holds(2, in_tower((block,3),(block,3)), false, 9).
holds(2, in_tower((block,3),(block,4)), false, 9).
holds(2, in_tower((block,3),(block,5)), false, 9).
holds(2, in_tower((block,3),(block,6)), false, 9).
holds(2, in_tower((block,3),(block,7)), false, 9).
holds(2, in_tower((block,3),(block,8)), false, 9).
holds(2, in_tower((block,3),(block,9)), false, 9).
holds(2, in_tower((block,4),(block,1)), false, 9).
holds(2, in_tower((block,4),(block,2)), false, 9).
holds(2, in_tower((block,4),(block,3)), false, 9).
holds(2, in_tower((block,4),(block,4)), false, 9).
holds(2, in_tower((block,4),(block,5)), false, 9).
holds(2, in_tower((block,4),(block,6)), false, 9).
holds(2, in_tower((block,4),(block,7)), false, 9).
holds(2, in_tower((block,4),(block,8)), false, 9).
holds(2, in_tower((block,4),(block,9)), false, 9).
holds(2, in_tower((block,5),(block,1)), false, 9).
holds(2, in_tower((block,5),(block,2)), false, 9).
holds(2, in_tower((block,5),(block,3)), false, 9).
holds(2, in_tower((block,5),(block,4)), false, 9).
holds(2, in_tower((block,5),(block,5)), false, 9).
holds(2, in_tower((block,5),(block,6)), false, 9).
holds(2, in_tower((block,5),(block,7)), false, 9).
holds(2, in_tower((block,5),(block,8)), false, 9).
holds(2, in_tower((block,5),(block,9)), false, 9).
holds(2, in_tower((block,6),(block,1)), false, 9).
holds(2, in_tower((block,6),(block,2)), false, 9).
holds(2, in_tower((block,6),(block,3)), false, 9).
holds(2, in_tower((block,6),(block,4)), false, 9).
holds(2, in_tower((block,6),(block,5)), false, 9).
holds(2, in_tower((block,6),(block,6)), false, 9).
holds(2, in_tower((block,6),(block,7)), false, 9).
holds(2, in_tower((block,6),(block,8)), false, 9).
holds(2, in_tower((block,6),(block,9)), false, 9).
holds(2, in_tower((block,7),(block,1)), false, 9).
holds(2, in_tower((block,7),(block,2)), false, 9).
holds(2, in_tower((block,7),(block,3)), false, 9).
holds(2, in_tower((block,7),(block,4)), false, 9).
holds(2, in_tower((block,7),(block,5)), false, 9).
holds(2, in_tower((block,7),(block,6)), false, 9).
holds(2, in_tower((block,7),(block,7)), true, 9).
holds(2, in_tower((block,7),(block,8)), false, 9).
holds(2, in_tower((block,7),(block,9)), true, 9).
holds(2, in_tower((block,8),(block,1)), false, 9).
holds(2, in_tower((block,8),(block,2)), false, 9).
holds(2, in_tower((block,8),(block,3)), false, 9).
holds(2, in_tower((block,8),(block,4)), false, 9).
holds(2, in_tower((block,8),(block,5)), false, 9).
holds(2, in_tower((block,8),(block,6)), false, 9).
holds(2, in_tower((block,8),(block,7)), false, 9).
holds(2, in_tower((block,8),(block,8)), false, 9).
holds(2, in_tower((block,8),(block,9)), false, 9).
holds(2, in_tower((block,9),(block,1)), false, 9).
holds(2, in_tower((block,9),(block,2)), false, 9).
holds(2, in_tower((block,9),(block,3)), false, 9).
holds(2, in_tower((block,9),(block,4)), false, 9).
holds(2, in_tower((block,9),(block,5)), false, 9).
holds(2, in_tower((block,9),(block,6)), false, 9).
holds(2, in_tower((block,9),(block,7)), false, 9).
holds(2, in_tower((block,9),(block,8)), false, 9).
holds(2, in_tower((block,9),(block,9)), false, 9).
holds(2, on((block,1)), puzzle_room_table, 9).
holds(2, on((block,2)), puzzle_room_table, 9).
holds(2, on((block,3)), (block,1), 9).
holds(2, on((block,4)), nothing, 9).
holds(2, on((block,5)), nothing, 9).
holds(2, on((block,6)), nothing, 9).
holds(2, on((block,7)), puzzle_room_table, 9).
holds(2, on((block,8)), nothing, 9).
holds(2, on((block,9)), (block,7), 9).
holds(2, tower_base((block,1),puzzle_room_table), true, 9).
holds(2, tower_base((block,2),puzzle_room_table), true, 9).
holds(2, tower_base((block,3),puzzle_room_table), false, 9).
holds(2, tower_base((block,4),puzzle_room_table), false, 9).
holds(2, tower_base((block,5),puzzle_room_table), false, 9).
holds(2, tower_base((block,6),puzzle_room_table), false, 9).
holds(2, tower_base((block,7),puzzle_room_table), true, 9).
holds(2, tower_base((block,8),puzzle_room_table), false, 9).
holds(2, tower_base((block,9),puzzle_room_table), false, 9).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 9).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 9).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 9).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 9).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 9).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 9).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 9).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 9).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 9).
holds(3, complete_tower(blue,puzzle_room_table), false, 9).
holds(3, complete_tower(red,puzzle_room_table), false, 9).
holds(3, complete_tower(yellow,puzzle_room_table), false, 9).
holds(3, grasping(manipulator_arm_1), (block,4), 9).
holds(3, grasping(manipulator_arm_2), (block,8), 9).
holds(3, in((block,1)), puzzle_room, 9).
holds(3, in((block,2)), puzzle_room, 9).
holds(3, in((block,3)), puzzle_room, 9).
holds(3, in((block,4)), store_room, 9).
holds(3, in((block,5)), store_room, 9).
holds(3, in((block,6)), store_room, 9).
holds(3, in((block,7)), puzzle_room, 9).
holds(3, in((block,8)), store_room, 9).
holds(3, in((block,9)), puzzle_room, 9).
holds(3, in(manipulator_arm_1), store_room, 9).
holds(3, in(manipulator_arm_2), store_room, 9).
holds(3, in(puzzle_room_table), puzzle_room, 9).
holds(3, in(talos), store_room, 9).
holds(3, in_tower((block,1),(block,1)), true, 9).
holds(3, in_tower((block,1),(block,2)), false, 9).
holds(3, in_tower((block,1),(block,3)), true, 9).
holds(3, in_tower((block,1),(block,4)), false, 9).
holds(3, in_tower((block,1),(block,5)), false, 9).
holds(3, in_tower((block,1),(block,6)), false, 9).
holds(3, in_tower((block,1),(block,7)), false, 9).
holds(3, in_tower((block,1),(block,8)), false, 9).
holds(3, in_tower((block,1),(block,9)), false, 9).
holds(3, in_tower((block,2),(block,1)), false, 9).
holds(3, in_tower((block,2),(block,2)), true, 9).
holds(3, in_tower((block,2),(block,3)), false, 9).
holds(3, in_tower((block,2),(block,4)), false, 9).
holds(3, in_tower((block,2),(block,5)), false, 9).
holds(3, in_tower((block,2),(block,6)), false, 9).
holds(3, in_tower((block,2),(block,7)), false, 9).
holds(3, in_tower((block,2),(block,8)), false, 9).
holds(3, in_tower((block,2),(block,9)), false, 9).
holds(3, in_tower((block,3),(block,1)), false, 9).
holds(3, in_tower((block,3),(block,2)), false, 9).
holds(3, in_tower((block,3),(block,3)), false, 9).
holds(3, in_tower((block,3),(block,4)), false, 9).
holds(3, in_tower((block,3),(block,5)), false, 9).
holds(3, in_tower((block,3),(block,6)), false, 9).
holds(3, in_tower((block,3),(block,7)), false, 9).
holds(3, in_tower((block,3),(block,8)), false, 9).
holds(3, in_tower((block,3),(block,9)), false, 9).
holds(3, in_tower((block,4),(block,1)), false, 9).
holds(3, in_tower((block,4),(block,2)), false, 9).
holds(3, in_tower((block,4),(block,3)), false, 9).
holds(3, in_tower((block,4),(block,4)), false, 9).
holds(3, in_tower((block,4),(block,5)), false, 9).
holds(3, in_tower((block,4),(block,6)), false, 9).
holds(3, in_tower((block,4),(block,7)), false, 9).
holds(3, in_tower((block,4),(block,8)), false, 9).
holds(3, in_tower((block,4),(block,9)), false, 9).
holds(3, in_tower((block,5),(block,1)), false, 9).
holds(3, in_tower((block,5),(block,2)), false, 9).
holds(3, in_tower((block,5),(block,3)), false, 9).
holds(3, in_tower((block,5),(block,4)), false, 9).
holds(3, in_tower((block,5),(block,5)), false, 9).
holds(3, in_tower((block,5),(block,6)), false, 9).
holds(3, in_tower((block,5),(block,7)), false, 9).
holds(3, in_tower((block,5),(block,8)), false, 9).
holds(3, in_tower((block,5),(block,9)), false, 9).
holds(3, in_tower((block,6),(block,1)), false, 9).
holds(3, in_tower((block,6),(block,2)), false, 9).
holds(3, in_tower((block,6),(block,3)), false, 9).
holds(3, in_tower((block,6),(block,4)), false, 9).
holds(3, in_tower((block,6),(block,5)), false, 9).
holds(3, in_tower((block,6),(block,6)), false, 9).
holds(3, in_tower((block,6),(block,7)), false, 9).
holds(3, in_tower((block,6),(block,8)), false, 9).
holds(3, in_tower((block,6),(block,9)), false, 9).
holds(3, in_tower((block,7),(block,1)), false, 9).
holds(3, in_tower((block,7),(block,2)), false, 9).
holds(3, in_tower((block,7),(block,3)), false, 9).
holds(3, in_tower((block,7),(block,4)), false, 9).
holds(3, in_tower((block,7),(block,5)), false, 9).
holds(3, in_tower((block,7),(block,6)), false, 9).
holds(3, in_tower((block,7),(block,7)), true, 9).
holds(3, in_tower((block,7),(block,8)), false, 9).
holds(3, in_tower((block,7),(block,9)), true, 9).
holds(3, in_tower((block,8),(block,1)), false, 9).
holds(3, in_tower((block,8),(block,2)), false, 9).
holds(3, in_tower((block,8),(block,3)), false, 9).
holds(3, in_tower((block,8),(block,4)), false, 9).
holds(3, in_tower((block,8),(block,5)), false, 9).
holds(3, in_tower((block,8),(block,6)), false, 9).
holds(3, in_tower((block,8),(block,7)), false, 9).
holds(3, in_tower((block,8),(block,8)), false, 9).
holds(3, in_tower((block,8),(block,9)), false, 9).
holds(3, in_tower((block,9),(block,1)), false, 9).
holds(3, in_tower((block,9),(block,2)), false, 9).
holds(3, in_tower((block,9),(block,3)), false, 9).
holds(3, in_tower((block,9),(block,4)), false, 9).
holds(3, in_tower((block,9),(block,5)), false, 9).
holds(3, in_tower((block,9),(block,6)), false, 9).
holds(3, in_tower((block,9),(block,7)), false, 9).
holds(3, in_tower((block,9),(block,8)), false, 9).
holds(3, in_tower((block,9),(block,9)), false, 9).
holds(3, on((block,1)), puzzle_room_table, 9).
holds(3, on((block,2)), puzzle_room_table, 9).
holds(3, on((block,3)), (block,1), 9).
holds(3, on((block,4)), nothing, 9).
holds(3, on((block,5)), nothing, 9).
holds(3, on((block,6)), nothing, 9).
holds(3, on((block,7)), puzzle_room_table, 9).
holds(3, on((block,8)), nothing, 9).
holds(3, on((block,9)), (block,7), 9).
holds(3, tower_base((block,1),puzzle_room_table), true, 9).
holds(3, tower_base((block,2),puzzle_room_table), true, 9).
holds(3, tower_base((block,3),puzzle_room_table), false, 9).
holds(3, tower_base((block,4),puzzle_room_table), false, 9).
holds(3, tower_base((block,5),puzzle_room_table), false, 9).
holds(3, tower_base((block,6),puzzle_room_table), false, 9).
holds(3, tower_base((block,7),puzzle_room_table), true, 9).
holds(3, tower_base((block,8),puzzle_room_table), false, 9).
holds(3, tower_base((block,9),puzzle_room_table), false, 9).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 9).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 9).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 9).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 9).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 9).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 9).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 9).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 9).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 9).

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=11']

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 5})

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), nothing, 3).
sub_goal(3, talos, release(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), nothing, 3).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 4).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 4).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 5).

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=11']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B54836B280>]
	incrementor = SolveIncrementor(step_start=9, step_increase=1, step_increase_initial=3, step_end_min=12, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 9), range_=None), IncPart(name='plan_module', args=('#inc', 9, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 9, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 9, 3, 5, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1243 rules

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006108699999998635s

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.033658s.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007690s with result Satisfiable.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54CF64EF0>

[20-01-2022_16-21-11] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 2)
	('start_step', 9)
	('last_sgoals', 5)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 3)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54CF64EF0>)

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 9). %* None *%
#program plan_module(#inc, 9, true, false). %* None *%
#program optimisation_module(#inc, 9, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 9, 3, 5, sequential, false). %* None *%

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      8 : Current =     11
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(9), Number(9)]), ('plan_module', [Number(9), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(10), Number(9)]), ('plan_module', [Number(10), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(11), Number(9)]), ('plan_module', [Number(11), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.617512s.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080766s with result Satisfiable.

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.698277700000002, Incremental time limit = None
Running cumulative time = 0.698277700000002, Cumulative time limit = 1800
Used memory = (RSS = 184.667969Mb, VMS = 175.367188Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.617512s, Solving = 0.080766s, Total = 0.698278s, Memory = (RSS = 184.667969Mb, VMS = 175.367188Mb), Step range = [9-11]), Calls = 1
Final Model :: Total atoms = 7218, Cost = (2, 0, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(9)]), ('plan_module', [Number(12), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.238642s.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012637s with result Unsatisfiable.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25127919999999904, Incremental time limit = None
Running cumulative time = 0.949556900000001, Cumulative time limit = 1800
Used memory = (RSS = 187.585938Mb, VMS = 179.625000Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(9)]), ('plan_module', [Number(13), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280742s.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013056s with result Unsatisfiable.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29379889999999875, Incremental time limit = None
Running cumulative time = 1.2433557999999998, Cumulative time limit = 1800
Used memory = (RSS = 190.558594Mb, VMS = 181.843750Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(9)]), ('plan_module', [Number(14), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.272088s.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016429s with result Unsatisfiable.

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2885169999999988, Incremental time limit = None
Running cumulative time = 1.5318727999999986, Cumulative time limit = 1800
Used memory = (RSS = 196.679688Mb, VMS = 188.257812Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(9)]), ('plan_module', [Number(15), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310601s.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075548s with result Unsatisfiable.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3861485999999985, Incremental time limit = None
Running cumulative time = 1.918021399999997, Cumulative time limit = 1800
Used memory = (RSS = 198.550781Mb, VMS = 188.953125Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(9)]), ('plan_module', [Number(16), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.302966s.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020138s with result Unsatisfiable.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32310359999999605, Incremental time limit = None
Running cumulative time = 2.241124999999993, Cumulative time limit = 1800
Used memory = (RSS = 205.050781Mb, VMS = 197.078125Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(9)]), ('plan_module', [Number(17), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.319296s.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032101s with result Unsatisfiable.

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35139650000000344, Incremental time limit = None
Running cumulative time = 2.5925214999999966, Cumulative time limit = 1800
Used memory = (RSS = 207.054688Mb, VMS = 197.597656Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(9)]), ('plan_module', [Number(18), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.291128s.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026060s with result Unsatisfiable.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31718890000000144, Incremental time limit = None
Running cumulative time = 2.909710399999998, Cumulative time limit = 1800
Used memory = (RSS = 209.218750Mb, VMS = 198.585938Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(9)]), ('plan_module', [Number(19), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.295113s.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042924s with result Unsatisfiable.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33803749999999866, Incremental time limit = None
Running cumulative time = 3.2477478999999967, Cumulative time limit = 1800
Used memory = (RSS = 216.910156Mb, VMS = 211.312500Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     12 : Maximum =    200

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(9)]), ('plan_module', [Number(20), Number(9), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(9), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(9), Number(3), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310112s.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.077280s with result Satisfiable.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3873920999999996, Incremental time limit = None
Running cumulative time = 3.6351399999999963, Cumulative time limit = 1800
Used memory = (RSS = 225.730469Mb, VMS = 218.914062Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.238201s, Solving = 0.396939s, Total = 3.635140s, Memory = (RSS = 225.730469Mb, VMS = 218.914062Mb), Step range = [9-20]), Calls = 10
Final Model :: Total atoms = 13004, Cost = (14, 0, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.617512s, Solving = 0.080766s, Total = 0.698278s, Memory = (RSS = 184.667969Mb, VMS = 175.367188Mb), Step range = [9-11]
2 : Statistics :: Grounding = 0.238642s, Solving = 0.012637s, Total = 0.251279s, Memory = (RSS = 187.585938Mb, VMS = 179.625000Mb), Step range = [12-12]
3 : Statistics :: Grounding = 0.280742s, Solving = 0.013056s, Total = 0.293799s, Memory = (RSS = 190.558594Mb, VMS = 181.843750Mb), Step range = [13-13]
4 : Statistics :: Grounding = 0.272088s, Solving = 0.016429s, Total = 0.288517s, Memory = (RSS = 196.679688Mb, VMS = 188.257812Mb), Step range = [14-14]
5 : Statistics :: Grounding = 0.310601s, Solving = 0.075548s, Total = 0.386149s, Memory = (RSS = 198.550781Mb, VMS = 188.953125Mb), Step range = [15-15]
6 : Statistics :: Grounding = 0.302966s, Solving = 0.020138s, Total = 0.323104s, Memory = (RSS = 205.050781Mb, VMS = 197.078125Mb), Step range = [16-16]
7 : Statistics :: Grounding = 0.319296s, Solving = 0.032101s, Total = 0.351397s, Memory = (RSS = 207.054688Mb, VMS = 197.597656Mb), Step range = [17-17]
8 : Statistics :: Grounding = 0.291128s, Solving = 0.026060s, Total = 0.317189s, Memory = (RSS = 209.218750Mb, VMS = 198.585938Mb), Step range = [18-18]
9 : Statistics :: Grounding = 0.295113s, Solving = 0.042924s, Total = 0.338037s, Memory = (RSS = 216.910156Mb, VMS = 211.312500Mb), Step range = [19-19]
10 : Statistics :: Grounding = 0.310112s, Solving = 0.077280s, Total = 0.387392s, Memory = (RSS = 225.730469Mb, VMS = 218.914062Mb), Step range = [20-20]

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.635140s due to: Stop condition reached.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2}
Sub-goal achievement steps: {1: 7, 2: 9}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-15] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 5, Last requested goal index = 5, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-15] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.238201s, Solving = 0.396939s, Total = 3.635140s, Memory = (RSS = 225.730469Mb, VMS = 218.914062Mb), Step range = [9-20]), Calls = 10
Model :: Total atoms = 13004, Cost = (14, 0, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 11 :: Actions = 14                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
        talos : grasp(manipulator_arm_2,(block,8))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 3] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 3] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 3] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,4))
        talos : release(manipulator_arm_2,(block,8))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 4] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 4] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 12:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 13:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=9, total_plan_length=20, step_range=range(9, 21)

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 5, Tota actions = 8, Produced sub-goal stages = 8
Level [2]: Length = 20, Tota actions = 25, Produced sub-goal stages = 25
Level [1]: Length = 14, Tota actions = 17, Produced sub-goal stages = 0

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  11, AC =  14, CF = 0.8, GT =   5.82s, ST =   0.59s, OT = 0.00s, TT =   6.41s, EF = (LE = 3.7, AC = 2.8), ED = (LE = 4.6, AC = 5.2), EB = (LE = 1.3, AC = 1.3)

[20-01-2022_16-21-15] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=11, start_step=9, blend=Blend(left=0, right=0)

[20-01-2022_16-21-15] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=5, large_group_size=6

[20-01-2022_16-21-15] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=14, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 11, Sub-goal Stage Range = [10-20]
Division points [total=1] : [(Index = 14, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-15] INFO :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 11, Sub-goal Stage Range = [10-20]
Division points [total=1] : [(Index = 14, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [10-14]

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [10-14], problem number = 3, increment number = 3

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 10)
	('last_sgoals', 14)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-15] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [10-14] : Concurrency enabled : Minimum search length bound enabled with value 18

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 10
last_sgoals = 14
start_step = 14
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 18

[20-01-2022_16-21-15] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-21-15] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-15] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 14 as problem start state.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 14})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,8))', 'S': 14})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 14})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 14})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 14})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 14})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 14})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 14})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 14})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 14})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,8)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 14})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 14})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 14})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 14})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 14})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 14})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 14})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 14})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,8)', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 14})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 14})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 14})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 14})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 14})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 14})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 14})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 14})

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 14).
holds(1, complete_tower(red,puzzle_room_table), false, 14).
holds(1, complete_tower(yellow,puzzle_room_table), false, 14).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 14).
holds(1, configuration(manipulator_end_2), aligned_with((block,8)), 14).
holds(1, configuration(manipulator_limb_1), extended, 14).
holds(1, configuration(manipulator_limb_2), extended, 14).
holds(1, configuration(puzzle_room_door), closed, 14).
holds(1, configuration(starting_room_door), closed, 14).
holds(1, configuration(store_room_door), open, 14).
holds(1, grasping(manipulator_arm_1), (block,4), 14).
holds(1, grasping(manipulator_arm_2), (block,8), 14).
holds(1, grasping(manipulator_end_1), (block,4), 14).
holds(1, grasping(manipulator_end_2), (block,8), 14).
holds(1, in((block,1)), (puzzle_room,1), 14).
holds(1, in((block,2)), (puzzle_room,1), 14).
holds(1, in((block,3)), (puzzle_room,1), 14).
holds(1, in((block,4)), (store_room,0), 14).
holds(1, in((block,5)), (store_room,0), 14).
holds(1, in((block,6)), (store_room,0), 14).
holds(1, in((block,7)), (puzzle_room,1), 14).
holds(1, in((block,8)), (store_room,0), 14).
holds(1, in((block,9)), (puzzle_room,1), 14).
holds(1, in(manipulator_arm_1), (store_room,0), 14).
holds(1, in(manipulator_arm_2), (store_room,0), 14).
holds(1, in(manipulator_end_1), (store_room,0), 14).
holds(1, in(manipulator_end_2), (store_room,0), 14).
holds(1, in(manipulator_limb_1), (store_room,0), 14).
holds(1, in(manipulator_limb_2), (store_room,0), 14).
holds(1, in(puzzle_room_table), (puzzle_room,1), 14).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 14).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14).
holds(1, in(talos), (store_room,0), 14).
holds(1, in_tower((block,1),(block,1)), true, 14).
holds(1, in_tower((block,1),(block,2)), false, 14).
holds(1, in_tower((block,1),(block,3)), true, 14).
holds(1, in_tower((block,1),(block,4)), false, 14).
holds(1, in_tower((block,1),(block,5)), false, 14).
holds(1, in_tower((block,1),(block,6)), false, 14).
holds(1, in_tower((block,1),(block,7)), false, 14).
holds(1, in_tower((block,1),(block,8)), false, 14).
holds(1, in_tower((block,1),(block,9)), false, 14).
holds(1, in_tower((block,2),(block,1)), false, 14).
holds(1, in_tower((block,2),(block,2)), true, 14).
holds(1, in_tower((block,2),(block,3)), false, 14).
holds(1, in_tower((block,2),(block,4)), false, 14).
holds(1, in_tower((block,2),(block,5)), false, 14).
holds(1, in_tower((block,2),(block,6)), false, 14).
holds(1, in_tower((block,2),(block,7)), false, 14).
holds(1, in_tower((block,2),(block,8)), false, 14).
holds(1, in_tower((block,2),(block,9)), false, 14).
holds(1, in_tower((block,3),(block,1)), false, 14).
holds(1, in_tower((block,3),(block,2)), false, 14).
holds(1, in_tower((block,3),(block,3)), false, 14).
holds(1, in_tower((block,3),(block,4)), false, 14).
holds(1, in_tower((block,3),(block,5)), false, 14).
holds(1, in_tower((block,3),(block,6)), false, 14).
holds(1, in_tower((block,3),(block,7)), false, 14).
holds(1, in_tower((block,3),(block,8)), false, 14).
holds(1, in_tower((block,3),(block,9)), false, 14).
holds(1, in_tower((block,4),(block,1)), false, 14).
holds(1, in_tower((block,4),(block,2)), false, 14).
holds(1, in_tower((block,4),(block,3)), false, 14).
holds(1, in_tower((block,4),(block,4)), false, 14).
holds(1, in_tower((block,4),(block,5)), false, 14).
holds(1, in_tower((block,4),(block,6)), false, 14).
holds(1, in_tower((block,4),(block,7)), false, 14).
holds(1, in_tower((block,4),(block,8)), false, 14).
holds(1, in_tower((block,4),(block,9)), false, 14).
holds(1, in_tower((block,5),(block,1)), false, 14).
holds(1, in_tower((block,5),(block,2)), false, 14).
holds(1, in_tower((block,5),(block,3)), false, 14).
holds(1, in_tower((block,5),(block,4)), false, 14).
holds(1, in_tower((block,5),(block,5)), false, 14).
holds(1, in_tower((block,5),(block,6)), false, 14).
holds(1, in_tower((block,5),(block,7)), false, 14).
holds(1, in_tower((block,5),(block,8)), false, 14).
holds(1, in_tower((block,5),(block,9)), false, 14).
holds(1, in_tower((block,6),(block,1)), false, 14).
holds(1, in_tower((block,6),(block,2)), false, 14).
holds(1, in_tower((block,6),(block,3)), false, 14).
holds(1, in_tower((block,6),(block,4)), false, 14).
holds(1, in_tower((block,6),(block,5)), false, 14).
holds(1, in_tower((block,6),(block,6)), false, 14).
holds(1, in_tower((block,6),(block,7)), false, 14).
holds(1, in_tower((block,6),(block,8)), false, 14).
holds(1, in_tower((block,6),(block,9)), false, 14).
holds(1, in_tower((block,7),(block,1)), false, 14).
holds(1, in_tower((block,7),(block,2)), false, 14).
holds(1, in_tower((block,7),(block,3)), false, 14).
holds(1, in_tower((block,7),(block,4)), false, 14).
holds(1, in_tower((block,7),(block,5)), false, 14).
holds(1, in_tower((block,7),(block,6)), false, 14).
holds(1, in_tower((block,7),(block,7)), true, 14).
holds(1, in_tower((block,7),(block,8)), false, 14).
holds(1, in_tower((block,7),(block,9)), true, 14).
holds(1, in_tower((block,8),(block,1)), false, 14).
holds(1, in_tower((block,8),(block,2)), false, 14).
holds(1, in_tower((block,8),(block,3)), false, 14).
holds(1, in_tower((block,8),(block,4)), false, 14).
holds(1, in_tower((block,8),(block,5)), false, 14).
holds(1, in_tower((block,8),(block,6)), false, 14).
holds(1, in_tower((block,8),(block,7)), false, 14).
holds(1, in_tower((block,8),(block,8)), false, 14).
holds(1, in_tower((block,8),(block,9)), false, 14).
holds(1, in_tower((block,9),(block,1)), false, 14).
holds(1, in_tower((block,9),(block,2)), false, 14).
holds(1, in_tower((block,9),(block,3)), false, 14).
holds(1, in_tower((block,9),(block,4)), false, 14).
holds(1, in_tower((block,9),(block,5)), false, 14).
holds(1, in_tower((block,9),(block,6)), false, 14).
holds(1, in_tower((block,9),(block,7)), false, 14).
holds(1, in_tower((block,9),(block,8)), false, 14).
holds(1, in_tower((block,9),(block,9)), false, 14).
holds(1, on((block,1)), puzzle_room_table_left, 14).
holds(1, on((block,2)), puzzle_room_table_right, 14).
holds(1, on((block,3)), (block,1), 14).
holds(1, on((block,4)), nothing, 14).
holds(1, on((block,5)), nothing, 14).
holds(1, on((block,6)), nothing, 14).
holds(1, on((block,7)), puzzle_room_table_middle, 14).
holds(1, on((block,8)), nothing, 14).
holds(1, on((block,9)), (block,7), 14).
holds(1, tower_base((block,1),puzzle_room_table), true, 14).
holds(1, tower_base((block,2),puzzle_room_table), true, 14).
holds(1, tower_base((block,3),puzzle_room_table), false, 14).
holds(1, tower_base((block,4),puzzle_room_table), false, 14).
holds(1, tower_base((block,5),puzzle_room_table), false, 14).
holds(1, tower_base((block,6),puzzle_room_table), false, 14).
holds(1, tower_base((block,7),puzzle_room_table), true, 14).
holds(1, tower_base((block,8),puzzle_room_table), false, 14).
holds(1, tower_base((block,9),puzzle_room_table), false, 14).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 14).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 14).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 14).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 14).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 14).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 14).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 14).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 14).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 14).
holds(2, complete_tower(blue,puzzle_room_table), false, 14).
holds(2, complete_tower(red,puzzle_room_table), false, 14).
holds(2, complete_tower(yellow,puzzle_room_table), false, 14).
holds(2, configuration(manipulator_arm_1), extended, 14).
holds(2, configuration(manipulator_arm_2), extended, 14).
holds(2, configuration(puzzle_room_door), closed, 14).
holds(2, configuration(starting_room_door), closed, 14).
holds(2, configuration(store_room_door), open, 14).
holds(2, grasping(manipulator_arm_1), (block,4), 14).
holds(2, grasping(manipulator_arm_2), (block,8), 14).
holds(2, in((block,1)), puzzle_room, 14).
holds(2, in((block,2)), puzzle_room, 14).
holds(2, in((block,3)), puzzle_room, 14).
holds(2, in((block,4)), store_room, 14).
holds(2, in((block,5)), store_room, 14).
holds(2, in((block,6)), store_room, 14).
holds(2, in((block,7)), puzzle_room, 14).
holds(2, in((block,8)), store_room, 14).
holds(2, in((block,9)), puzzle_room, 14).
holds(2, in(manipulator_arm_1), store_room, 14).
holds(2, in(manipulator_arm_2), store_room, 14).
holds(2, in(puzzle_room_table), puzzle_room, 14).
holds(2, in(talos), store_room, 14).
holds(2, in_tower((block,1),(block,1)), true, 14).
holds(2, in_tower((block,1),(block,2)), false, 14).
holds(2, in_tower((block,1),(block,3)), true, 14).
holds(2, in_tower((block,1),(block,4)), false, 14).
holds(2, in_tower((block,1),(block,5)), false, 14).
holds(2, in_tower((block,1),(block,6)), false, 14).
holds(2, in_tower((block,1),(block,7)), false, 14).
holds(2, in_tower((block,1),(block,8)), false, 14).
holds(2, in_tower((block,1),(block,9)), false, 14).
holds(2, in_tower((block,2),(block,1)), false, 14).
holds(2, in_tower((block,2),(block,2)), true, 14).
holds(2, in_tower((block,2),(block,3)), false, 14).
holds(2, in_tower((block,2),(block,4)), false, 14).
holds(2, in_tower((block,2),(block,5)), false, 14).
holds(2, in_tower((block,2),(block,6)), false, 14).
holds(2, in_tower((block,2),(block,7)), false, 14).
holds(2, in_tower((block,2),(block,8)), false, 14).
holds(2, in_tower((block,2),(block,9)), false, 14).
holds(2, in_tower((block,3),(block,1)), false, 14).
holds(2, in_tower((block,3),(block,2)), false, 14).
holds(2, in_tower((block,3),(block,3)), false, 14).
holds(2, in_tower((block,3),(block,4)), false, 14).
holds(2, in_tower((block,3),(block,5)), false, 14).
holds(2, in_tower((block,3),(block,6)), false, 14).
holds(2, in_tower((block,3),(block,7)), false, 14).
holds(2, in_tower((block,3),(block,8)), false, 14).
holds(2, in_tower((block,3),(block,9)), false, 14).
holds(2, in_tower((block,4),(block,1)), false, 14).
holds(2, in_tower((block,4),(block,2)), false, 14).
holds(2, in_tower((block,4),(block,3)), false, 14).
holds(2, in_tower((block,4),(block,4)), false, 14).
holds(2, in_tower((block,4),(block,5)), false, 14).
holds(2, in_tower((block,4),(block,6)), false, 14).
holds(2, in_tower((block,4),(block,7)), false, 14).
holds(2, in_tower((block,4),(block,8)), false, 14).
holds(2, in_tower((block,4),(block,9)), false, 14).
holds(2, in_tower((block,5),(block,1)), false, 14).
holds(2, in_tower((block,5),(block,2)), false, 14).
holds(2, in_tower((block,5),(block,3)), false, 14).
holds(2, in_tower((block,5),(block,4)), false, 14).
holds(2, in_tower((block,5),(block,5)), false, 14).
holds(2, in_tower((block,5),(block,6)), false, 14).
holds(2, in_tower((block,5),(block,7)), false, 14).
holds(2, in_tower((block,5),(block,8)), false, 14).
holds(2, in_tower((block,5),(block,9)), false, 14).
holds(2, in_tower((block,6),(block,1)), false, 14).
holds(2, in_tower((block,6),(block,2)), false, 14).
holds(2, in_tower((block,6),(block,3)), false, 14).
holds(2, in_tower((block,6),(block,4)), false, 14).
holds(2, in_tower((block,6),(block,5)), false, 14).
holds(2, in_tower((block,6),(block,6)), false, 14).
holds(2, in_tower((block,6),(block,7)), false, 14).
holds(2, in_tower((block,6),(block,8)), false, 14).
holds(2, in_tower((block,6),(block,9)), false, 14).
holds(2, in_tower((block,7),(block,1)), false, 14).
holds(2, in_tower((block,7),(block,2)), false, 14).
holds(2, in_tower((block,7),(block,3)), false, 14).
holds(2, in_tower((block,7),(block,4)), false, 14).
holds(2, in_tower((block,7),(block,5)), false, 14).
holds(2, in_tower((block,7),(block,6)), false, 14).
holds(2, in_tower((block,7),(block,7)), true, 14).
holds(2, in_tower((block,7),(block,8)), false, 14).
holds(2, in_tower((block,7),(block,9)), true, 14).
holds(2, in_tower((block,8),(block,1)), false, 14).
holds(2, in_tower((block,8),(block,2)), false, 14).
holds(2, in_tower((block,8),(block,3)), false, 14).
holds(2, in_tower((block,8),(block,4)), false, 14).
holds(2, in_tower((block,8),(block,5)), false, 14).
holds(2, in_tower((block,8),(block,6)), false, 14).
holds(2, in_tower((block,8),(block,7)), false, 14).
holds(2, in_tower((block,8),(block,8)), false, 14).
holds(2, in_tower((block,8),(block,9)), false, 14).
holds(2, in_tower((block,9),(block,1)), false, 14).
holds(2, in_tower((block,9),(block,2)), false, 14).
holds(2, in_tower((block,9),(block,3)), false, 14).
holds(2, in_tower((block,9),(block,4)), false, 14).
holds(2, in_tower((block,9),(block,5)), false, 14).
holds(2, in_tower((block,9),(block,6)), false, 14).
holds(2, in_tower((block,9),(block,7)), false, 14).
holds(2, in_tower((block,9),(block,8)), false, 14).
holds(2, in_tower((block,9),(block,9)), false, 14).
holds(2, on((block,1)), puzzle_room_table, 14).
holds(2, on((block,2)), puzzle_room_table, 14).
holds(2, on((block,3)), (block,1), 14).
holds(2, on((block,4)), nothing, 14).
holds(2, on((block,5)), nothing, 14).
holds(2, on((block,6)), nothing, 14).
holds(2, on((block,7)), puzzle_room_table, 14).
holds(2, on((block,8)), nothing, 14).
holds(2, on((block,9)), (block,7), 14).
holds(2, tower_base((block,1),puzzle_room_table), true, 14).
holds(2, tower_base((block,2),puzzle_room_table), true, 14).
holds(2, tower_base((block,3),puzzle_room_table), false, 14).
holds(2, tower_base((block,4),puzzle_room_table), false, 14).
holds(2, tower_base((block,5),puzzle_room_table), false, 14).
holds(2, tower_base((block,6),puzzle_room_table), false, 14).
holds(2, tower_base((block,7),puzzle_room_table), true, 14).
holds(2, tower_base((block,8),puzzle_room_table), false, 14).
holds(2, tower_base((block,9),puzzle_room_table), false, 14).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 14).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 14).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 14).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 14).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 14).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 14).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 14).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 14).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 14).

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=18']

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,8))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 14})

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), nothing, 10).
sub_goal(2, talos, release(manipulator_arm_2,(block,8)), grasping(manipulator_arm_2), nothing, 10).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 11).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 11).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 12).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 12).
sub_goal(2, talos, move(hallway), in(talos), hallway, 13).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 14).

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=18']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B549403B80>]
	incrementor = SolveIncrementor(step_start=14, step_increase=1, step_increase_initial=5, step_end_min=19, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 14), range_=None), IncPart(name='plan_module', args=('#inc', 14, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 14, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 14, 10, 14, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1280 rules

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0063512000000010005s

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.049624s.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010528s with result Satisfiable.

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54CFF3220>

[20-01-2022_16-21-15] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 1)
	('start_step', 14)
	('last_sgoals', 14)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 10)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54CFF3220>)

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 14). %* None *%
#program plan_module(#inc, 14, true, false). %* None *%
#program optimisation_module(#inc, 14, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 14, 10, 14, sequential, false). %* None *%

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     13 : Current =     18
Incrementor step ends | Minimum  =     19 : Maximum =    200

[20-01-2022_16-21-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(14), Number(14)]), ('plan_module', [Number(14), Number(14), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(14), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(14), Number(10), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(15), Number(14)]), ('plan_module', [Number(15), Number(14), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(14), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(14), Number(10), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(16), Number(14)]), ('plan_module', [Number(16), Number(14), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(14), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(14), Number(10), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(17), Number(14)]), ('plan_module', [Number(17), Number(14), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(14), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(14), Number(10), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(18), Number(14)]), ('plan_module', [Number(18), Number(14), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(14), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(14), Number(10), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.299133s.

[20-01-2022_16-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.308455s with result Satisfiable.

[20-01-2022_16-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.607588, Incremental time limit = None
Running cumulative time = 4.607588, Cumulative time limit = 1800
Used memory = (RSS = 219.820312Mb, VMS = 211.773438Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.299133s, Solving = 0.308455s, Total = 4.607588s, Memory = (RSS = 219.820312Mb, VMS = 211.773438Mb), Step range = [14-18]), Calls = 1
Final Model :: Total atoms = 9567, Cost = (4, 0, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     19 : Maximum =    200

[20-01-2022_16-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(14)]), ('plan_module', [Number(19), Number(14), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(14), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(14), Number(10), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.850733s.

[20-01-2022_16-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021287s with result Unsatisfiable.

[20-01-2022_16-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8720199999999991, Incremental time limit = None
Running cumulative time = 5.479607999999999, Cumulative time limit = 1800
Used memory = (RSS = 222.722656Mb, VMS = 215.941406Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     19 : Maximum =    200

[20-01-2022_16-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(14)]), ('plan_module', [Number(20), Number(14), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(14), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(14), Number(10), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.797999s.

[20-01-2022_16-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034477s with result Unsatisfiable.

[20-01-2022_16-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8324767000000008, Incremental time limit = None
Running cumulative time = 6.3120847, Cumulative time limit = 1800
Used memory = (RSS = 225.003906Mb, VMS = 217.375000Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     19 : Maximum =    200

[20-01-2022_16-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(14)]), ('plan_module', [Number(21), Number(14), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(14), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(14), Number(10), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.067465s.

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108635s with result Satisfiable.

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.176099899999997, Incremental time limit = None
Running cumulative time = 7.488184599999997, Cumulative time limit = 1800
Used memory = (RSS = 231.425781Mb, VMS = 222.539062Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.015330s, Solving = 0.472854s, Total = 7.488185s, Memory = (RSS = 231.425781Mb, VMS = 222.539062Mb), Step range = [14-21]), Calls = 4
Final Model :: Total atoms = 11765, Cost = (11, 0, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 4.299133s, Solving = 0.308455s, Total = 4.607588s, Memory = (RSS = 219.820312Mb, VMS = 211.773438Mb), Step range = [14-18]
2 : Statistics :: Grounding = 0.850733s, Solving = 0.021287s, Total = 0.872020s, Memory = (RSS = 222.722656Mb, VMS = 215.941406Mb), Step range = [19-19]
3 : Statistics :: Grounding = 0.797999s, Solving = 0.034477s, Total = 0.832477s, Memory = (RSS = 225.003906Mb, VMS = 217.375000Mb), Step range = [20-20]
4 : Statistics :: Grounding = 1.067465s, Solving = 0.108635s, Total = 1.176100s, Memory = (RSS = 231.425781Mb, VMS = 222.539062Mb), Step range = [21-21]

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.488185s due to: Stop condition reached.

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-23] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 14, Last requested goal index = 14, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-23] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.015330s, Solving = 0.472854s, Total = 7.488185s, Memory = (RSS = 231.425781Mb, VMS = 222.539062Mb), Step range = [14-21]), Calls = 4
Model :: Total atoms = 11765, Cost = (11, 0, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[20-01-2022_16-21-23] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 7 :: Actions = 11                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
        talos : grasp(manipulator_end_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,4))
        talos : release(manipulator_end_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 17:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 18:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 20:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 21:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)

[20-01-2022_16-21-24] INFO :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[20-01-2022_16-21-24] INFO :: ASH Planner Main #1 >> Online planning increment 3 finished.

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 6 : Goals achieved = 3 : Goals unachieved = 3 : Complete = False
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 5 : Goals achieved = 5 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 20 : Goals achieved = 14 : Goals unachieved = 6 : Complete = False

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 3.

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-1].

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 11, Sub-goal Stage Range = [10-20]
Division points [total=1] : [(Index = 14, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [15-20]

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [15-20], problem number = 4, increment number = 4

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 15)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-24] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [15-20] : Concurrency enabled : Minimum search length bound enabled with value 26

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 15
last_sgoals = 20
start_step = 21
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 26

[20-01-2022_16-21-24] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-21-24] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 21 as problem start state.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,5))', 'S': 21})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,6))', 'S': 21})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 21})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 21})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 21})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 21})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 21})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 21})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 21})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,5)', 'S': 21})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,6)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 21})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 21})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 21})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 21})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 21})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'hallway', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'hallway', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 21})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 21})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 21})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 21})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 21})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 21})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 21})

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 21).
holds(1, complete_tower(red,puzzle_room_table), false, 21).
holds(1, complete_tower(yellow,puzzle_room_table), false, 21).
holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 21).
holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 21).
holds(1, configuration(manipulator_limb_1), extended, 21).
holds(1, configuration(manipulator_limb_2), retracted, 21).
holds(1, configuration(puzzle_room_door), closed, 21).
holds(1, configuration(starting_room_door), closed, 21).
holds(1, configuration(store_room_door), open, 21).
holds(1, grasping(manipulator_arm_1), (block,5), 21).
holds(1, grasping(manipulator_arm_2), (block,6), 21).
holds(1, grasping(manipulator_end_1), (block,5), 21).
holds(1, grasping(manipulator_end_2), (block,6), 21).
holds(1, in((block,1)), (puzzle_room,1), 21).
holds(1, in((block,2)), (puzzle_room,1), 21).
holds(1, in((block,3)), (puzzle_room,1), 21).
holds(1, in((block,4)), (store_room,0), 21).
holds(1, in((block,5)), (hallway,0), 21).
holds(1, in((block,6)), (hallway,0), 21).
holds(1, in((block,7)), (puzzle_room,1), 21).
holds(1, in((block,8)), (store_room,0), 21).
holds(1, in((block,9)), (puzzle_room,1), 21).
holds(1, in(manipulator_arm_1), (hallway,0), 21).
holds(1, in(manipulator_arm_2), (hallway,0), 21).
holds(1, in(manipulator_end_1), (hallway,0), 21).
holds(1, in(manipulator_end_2), (hallway,0), 21).
holds(1, in(manipulator_limb_1), (hallway,0), 21).
holds(1, in(manipulator_limb_2), (hallway,0), 21).
holds(1, in(puzzle_room_table), (puzzle_room,1), 21).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 21).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21).
holds(1, in(talos), (hallway,0), 21).
holds(1, in_tower((block,1),(block,1)), true, 21).
holds(1, in_tower((block,1),(block,2)), false, 21).
holds(1, in_tower((block,1),(block,3)), true, 21).
holds(1, in_tower((block,1),(block,4)), false, 21).
holds(1, in_tower((block,1),(block,5)), false, 21).
holds(1, in_tower((block,1),(block,6)), false, 21).
holds(1, in_tower((block,1),(block,7)), false, 21).
holds(1, in_tower((block,1),(block,8)), false, 21).
holds(1, in_tower((block,1),(block,9)), false, 21).
holds(1, in_tower((block,2),(block,1)), false, 21).
holds(1, in_tower((block,2),(block,2)), true, 21).
holds(1, in_tower((block,2),(block,3)), false, 21).
holds(1, in_tower((block,2),(block,4)), false, 21).
holds(1, in_tower((block,2),(block,5)), false, 21).
holds(1, in_tower((block,2),(block,6)), false, 21).
holds(1, in_tower((block,2),(block,7)), false, 21).
holds(1, in_tower((block,2),(block,8)), false, 21).
holds(1, in_tower((block,2),(block,9)), false, 21).
holds(1, in_tower((block,3),(block,1)), false, 21).
holds(1, in_tower((block,3),(block,2)), false, 21).
holds(1, in_tower((block,3),(block,3)), false, 21).
holds(1, in_tower((block,3),(block,4)), false, 21).
holds(1, in_tower((block,3),(block,5)), false, 21).
holds(1, in_tower((block,3),(block,6)), false, 21).
holds(1, in_tower((block,3),(block,7)), false, 21).
holds(1, in_tower((block,3),(block,8)), false, 21).
holds(1, in_tower((block,3),(block,9)), false, 21).
holds(1, in_tower((block,4),(block,1)), false, 21).
holds(1, in_tower((block,4),(block,2)), false, 21).
holds(1, in_tower((block,4),(block,3)), false, 21).
holds(1, in_tower((block,4),(block,4)), false, 21).
holds(1, in_tower((block,4),(block,5)), false, 21).
holds(1, in_tower((block,4),(block,6)), false, 21).
holds(1, in_tower((block,4),(block,7)), false, 21).
holds(1, in_tower((block,4),(block,8)), false, 21).
holds(1, in_tower((block,4),(block,9)), false, 21).
holds(1, in_tower((block,5),(block,1)), false, 21).
holds(1, in_tower((block,5),(block,2)), false, 21).
holds(1, in_tower((block,5),(block,3)), false, 21).
holds(1, in_tower((block,5),(block,4)), false, 21).
holds(1, in_tower((block,5),(block,5)), false, 21).
holds(1, in_tower((block,5),(block,6)), false, 21).
holds(1, in_tower((block,5),(block,7)), false, 21).
holds(1, in_tower((block,5),(block,8)), false, 21).
holds(1, in_tower((block,5),(block,9)), false, 21).
holds(1, in_tower((block,6),(block,1)), false, 21).
holds(1, in_tower((block,6),(block,2)), false, 21).
holds(1, in_tower((block,6),(block,3)), false, 21).
holds(1, in_tower((block,6),(block,4)), false, 21).
holds(1, in_tower((block,6),(block,5)), false, 21).
holds(1, in_tower((block,6),(block,6)), false, 21).
holds(1, in_tower((block,6),(block,7)), false, 21).
holds(1, in_tower((block,6),(block,8)), false, 21).
holds(1, in_tower((block,6),(block,9)), false, 21).
holds(1, in_tower((block,7),(block,1)), false, 21).
holds(1, in_tower((block,7),(block,2)), false, 21).
holds(1, in_tower((block,7),(block,3)), false, 21).
holds(1, in_tower((block,7),(block,4)), false, 21).
holds(1, in_tower((block,7),(block,5)), false, 21).
holds(1, in_tower((block,7),(block,6)), false, 21).
holds(1, in_tower((block,7),(block,7)), true, 21).
holds(1, in_tower((block,7),(block,8)), false, 21).
holds(1, in_tower((block,7),(block,9)), true, 21).
holds(1, in_tower((block,8),(block,1)), false, 21).
holds(1, in_tower((block,8),(block,2)), false, 21).
holds(1, in_tower((block,8),(block,3)), false, 21).
holds(1, in_tower((block,8),(block,4)), false, 21).
holds(1, in_tower((block,8),(block,5)), false, 21).
holds(1, in_tower((block,8),(block,6)), false, 21).
holds(1, in_tower((block,8),(block,7)), false, 21).
holds(1, in_tower((block,8),(block,8)), false, 21).
holds(1, in_tower((block,8),(block,9)), false, 21).
holds(1, in_tower((block,9),(block,1)), false, 21).
holds(1, in_tower((block,9),(block,2)), false, 21).
holds(1, in_tower((block,9),(block,3)), false, 21).
holds(1, in_tower((block,9),(block,4)), false, 21).
holds(1, in_tower((block,9),(block,5)), false, 21).
holds(1, in_tower((block,9),(block,6)), false, 21).
holds(1, in_tower((block,9),(block,7)), false, 21).
holds(1, in_tower((block,9),(block,8)), false, 21).
holds(1, in_tower((block,9),(block,9)), false, 21).
holds(1, on((block,1)), puzzle_room_table_left, 21).
holds(1, on((block,2)), puzzle_room_table_right, 21).
holds(1, on((block,3)), (block,1), 21).
holds(1, on((block,4)), nothing, 21).
holds(1, on((block,5)), nothing, 21).
holds(1, on((block,6)), nothing, 21).
holds(1, on((block,7)), puzzle_room_table_middle, 21).
holds(1, on((block,8)), nothing, 21).
holds(1, on((block,9)), (block,7), 21).
holds(1, tower_base((block,1),puzzle_room_table), true, 21).
holds(1, tower_base((block,2),puzzle_room_table), true, 21).
holds(1, tower_base((block,3),puzzle_room_table), false, 21).
holds(1, tower_base((block,4),puzzle_room_table), false, 21).
holds(1, tower_base((block,5),puzzle_room_table), false, 21).
holds(1, tower_base((block,6),puzzle_room_table), false, 21).
holds(1, tower_base((block,7),puzzle_room_table), true, 21).
holds(1, tower_base((block,8),puzzle_room_table), false, 21).
holds(1, tower_base((block,9),puzzle_room_table), false, 21).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 21).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 21).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 21).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 21).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 21).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 21).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 21).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 21).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 21).
holds(2, complete_tower(blue,puzzle_room_table), false, 21).
holds(2, complete_tower(red,puzzle_room_table), false, 21).
holds(2, complete_tower(yellow,puzzle_room_table), false, 21).
holds(2, configuration(manipulator_arm_1), extended, 21).
holds(2, configuration(manipulator_arm_2), retracted, 21).
holds(2, configuration(puzzle_room_door), closed, 21).
holds(2, configuration(starting_room_door), closed, 21).
holds(2, configuration(store_room_door), open, 21).
holds(2, grasping(manipulator_arm_1), (block,5), 21).
holds(2, grasping(manipulator_arm_2), (block,6), 21).
holds(2, in((block,1)), puzzle_room, 21).
holds(2, in((block,2)), puzzle_room, 21).
holds(2, in((block,3)), puzzle_room, 21).
holds(2, in((block,4)), store_room, 21).
holds(2, in((block,5)), hallway, 21).
holds(2, in((block,6)), hallway, 21).
holds(2, in((block,7)), puzzle_room, 21).
holds(2, in((block,8)), store_room, 21).
holds(2, in((block,9)), puzzle_room, 21).
holds(2, in(manipulator_arm_1), hallway, 21).
holds(2, in(manipulator_arm_2), hallway, 21).
holds(2, in(puzzle_room_table), puzzle_room, 21).
holds(2, in(talos), hallway, 21).
holds(2, in_tower((block,1),(block,1)), true, 21).
holds(2, in_tower((block,1),(block,2)), false, 21).
holds(2, in_tower((block,1),(block,3)), true, 21).
holds(2, in_tower((block,1),(block,4)), false, 21).
holds(2, in_tower((block,1),(block,5)), false, 21).
holds(2, in_tower((block,1),(block,6)), false, 21).
holds(2, in_tower((block,1),(block,7)), false, 21).
holds(2, in_tower((block,1),(block,8)), false, 21).
holds(2, in_tower((block,1),(block,9)), false, 21).
holds(2, in_tower((block,2),(block,1)), false, 21).
holds(2, in_tower((block,2),(block,2)), true, 21).
holds(2, in_tower((block,2),(block,3)), false, 21).
holds(2, in_tower((block,2),(block,4)), false, 21).
holds(2, in_tower((block,2),(block,5)), false, 21).
holds(2, in_tower((block,2),(block,6)), false, 21).
holds(2, in_tower((block,2),(block,7)), false, 21).
holds(2, in_tower((block,2),(block,8)), false, 21).
holds(2, in_tower((block,2),(block,9)), false, 21).
holds(2, in_tower((block,3),(block,1)), false, 21).
holds(2, in_tower((block,3),(block,2)), false, 21).
holds(2, in_tower((block,3),(block,3)), false, 21).
holds(2, in_tower((block,3),(block,4)), false, 21).
holds(2, in_tower((block,3),(block,5)), false, 21).
holds(2, in_tower((block,3),(block,6)), false, 21).
holds(2, in_tower((block,3),(block,7)), false, 21).
holds(2, in_tower((block,3),(block,8)), false, 21).
holds(2, in_tower((block,3),(block,9)), false, 21).
holds(2, in_tower((block,4),(block,1)), false, 21).
holds(2, in_tower((block,4),(block,2)), false, 21).
holds(2, in_tower((block,4),(block,3)), false, 21).
holds(2, in_tower((block,4),(block,4)), false, 21).
holds(2, in_tower((block,4),(block,5)), false, 21).
holds(2, in_tower((block,4),(block,6)), false, 21).
holds(2, in_tower((block,4),(block,7)), false, 21).
holds(2, in_tower((block,4),(block,8)), false, 21).
holds(2, in_tower((block,4),(block,9)), false, 21).
holds(2, in_tower((block,5),(block,1)), false, 21).
holds(2, in_tower((block,5),(block,2)), false, 21).
holds(2, in_tower((block,5),(block,3)), false, 21).
holds(2, in_tower((block,5),(block,4)), false, 21).
holds(2, in_tower((block,5),(block,5)), false, 21).
holds(2, in_tower((block,5),(block,6)), false, 21).
holds(2, in_tower((block,5),(block,7)), false, 21).
holds(2, in_tower((block,5),(block,8)), false, 21).
holds(2, in_tower((block,5),(block,9)), false, 21).
holds(2, in_tower((block,6),(block,1)), false, 21).
holds(2, in_tower((block,6),(block,2)), false, 21).
holds(2, in_tower((block,6),(block,3)), false, 21).
holds(2, in_tower((block,6),(block,4)), false, 21).
holds(2, in_tower((block,6),(block,5)), false, 21).
holds(2, in_tower((block,6),(block,6)), false, 21).
holds(2, in_tower((block,6),(block,7)), false, 21).
holds(2, in_tower((block,6),(block,8)), false, 21).
holds(2, in_tower((block,6),(block,9)), false, 21).
holds(2, in_tower((block,7),(block,1)), false, 21).
holds(2, in_tower((block,7),(block,2)), false, 21).
holds(2, in_tower((block,7),(block,3)), false, 21).
holds(2, in_tower((block,7),(block,4)), false, 21).
holds(2, in_tower((block,7),(block,5)), false, 21).
holds(2, in_tower((block,7),(block,6)), false, 21).
holds(2, in_tower((block,7),(block,7)), true, 21).
holds(2, in_tower((block,7),(block,8)), false, 21).
holds(2, in_tower((block,7),(block,9)), true, 21).
holds(2, in_tower((block,8),(block,1)), false, 21).
holds(2, in_tower((block,8),(block,2)), false, 21).
holds(2, in_tower((block,8),(block,3)), false, 21).
holds(2, in_tower((block,8),(block,4)), false, 21).
holds(2, in_tower((block,8),(block,5)), false, 21).
holds(2, in_tower((block,8),(block,6)), false, 21).
holds(2, in_tower((block,8),(block,7)), false, 21).
holds(2, in_tower((block,8),(block,8)), false, 21).
holds(2, in_tower((block,8),(block,9)), false, 21).
holds(2, in_tower((block,9),(block,1)), false, 21).
holds(2, in_tower((block,9),(block,2)), false, 21).
holds(2, in_tower((block,9),(block,3)), false, 21).
holds(2, in_tower((block,9),(block,4)), false, 21).
holds(2, in_tower((block,9),(block,5)), false, 21).
holds(2, in_tower((block,9),(block,6)), false, 21).
holds(2, in_tower((block,9),(block,7)), false, 21).
holds(2, in_tower((block,9),(block,8)), false, 21).
holds(2, in_tower((block,9),(block,9)), false, 21).
holds(2, on((block,1)), puzzle_room_table, 21).
holds(2, on((block,2)), puzzle_room_table, 21).
holds(2, on((block,3)), (block,1), 21).
holds(2, on((block,4)), nothing, 21).
holds(2, on((block,5)), nothing, 21).
holds(2, on((block,6)), nothing, 21).
holds(2, on((block,7)), puzzle_room_table, 21).
holds(2, on((block,8)), nothing, 21).
holds(2, on((block,9)), (block,7), 21).
holds(2, tower_base((block,1),puzzle_room_table), true, 21).
holds(2, tower_base((block,2),puzzle_room_table), true, 21).
holds(2, tower_base((block,3),puzzle_room_table), false, 21).
holds(2, tower_base((block,4),puzzle_room_table), false, 21).
holds(2, tower_base((block,5),puzzle_room_table), false, 21).
holds(2, tower_base((block,6),puzzle_room_table), false, 21).
holds(2, tower_base((block,7),puzzle_room_table), true, 21).
holds(2, tower_base((block,8),puzzle_room_table), false, 21).
holds(2, tower_base((block,9),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 21).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 21).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 21).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 21).

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=26']

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 20})

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 15).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 16).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 17).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 18).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 19).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 20).

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=26']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B54836B280>]
	incrementor = SolveIncrementor(step_start=21, step_increase=1, step_increase_initial=6, step_end_min=27, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 21), range_=None), IncPart(name='plan_module', args=('#inc', 21, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 21, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 21, 15, 20, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1278 rules

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.013133899999999699s

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.052955s.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011144s with result Satisfiable.

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54D09E720>

[20-01-2022_16-21-24] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 1)
	('start_step', 21)
	('last_sgoals', 20)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 15)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54D09E720>)

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 21). %* None *%
#program plan_module(#inc, 21, true, false). %* None *%
#program optimisation_module(#inc, 21, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 21, 15, 20, sequential, false). %* None *%

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     20 : Current =     26
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(21), Number(21)]), ('plan_module', [Number(21), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(22), Number(21)]), ('plan_module', [Number(22), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(23), Number(21)]), ('plan_module', [Number(23), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(24), Number(21)]), ('plan_module', [Number(24), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(25), Number(21)]), ('plan_module', [Number(25), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(21)]), ('plan_module', [Number(26), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.871723s.

[20-01-2022_16-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.196706s with result Satisfiable.

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.068428900000001, Incremental time limit = None
Running cumulative time = 4.068428900000001, Cumulative time limit = 1800
Used memory = (RSS = 236.328125Mb, VMS = 229.691406Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.871723s, Solving = 0.196706s, Total = 4.068429s, Memory = (RSS = 236.328125Mb, VMS = 229.691406Mb), Step range = [21-26]), Calls = 1
Final Model :: Total atoms = 10293, Cost = (5, 0, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(21)]), ('plan_module', [Number(27), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.696274s.

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022120s with result Unsatisfiable.

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7183940000000035, Incremental time limit = None
Running cumulative time = 4.786822900000004, Cumulative time limit = 1800
Used memory = (RSS = 240.226562Mb, VMS = 234.472656Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(21)]), ('plan_module', [Number(28), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.706117s.

[20-01-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031323s with result Unsatisfiable.

[20-01-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7374391999999972, Incremental time limit = None
Running cumulative time = 5.524262100000001, Cumulative time limit = 1800
Used memory = (RSS = 245.781250Mb, VMS = 238.578125Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(21)]), ('plan_module', [Number(29), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.773315s.

[20-01-2022_16-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029390s with result Unsatisfiable.

[20-01-2022_16-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8027045000000044, Incremental time limit = None
Running cumulative time = 6.326966600000006, Cumulative time limit = 1800
Used memory = (RSS = 253.675781Mb, VMS = 244.289062Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(21)]), ('plan_module', [Number(30), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.781530s.

[20-01-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039972s with result Unsatisfiable.

[20-01-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8215019000000012, Incremental time limit = None
Running cumulative time = 7.148468500000007, Cumulative time limit = 1800
Used memory = (RSS = 267.667969Mb, VMS = 265.468750Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(21)]), ('plan_module', [Number(31), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.856251s.

[20-01-2022_16-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047728s with result Unsatisfiable.

[20-01-2022_16-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9039796000000067, Incremental time limit = None
Running cumulative time = 8.052448100000014, Cumulative time limit = 1800
Used memory = (RSS = 275.265625Mb, VMS = 270.886719Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(21)]), ('plan_module', [Number(32), Number(21), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(21), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(21), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.817443s.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.126499s with result Satisfiable.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9439423999999974, Incremental time limit = None
Running cumulative time = 8.996390500000011, Cumulative time limit = 1800
Used memory = (RSS = 288.953125Mb, VMS = 282.460938Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.502653s, Solving = 0.493738s, Total = 8.996391s, Memory = (RSS = 288.953125Mb, VMS = 282.460938Mb), Step range = [21-32]), Calls = 7
Final Model :: Total atoms = 14690, Cost = (11, 0, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 3.871723s, Solving = 0.196706s, Total = 4.068429s, Memory = (RSS = 236.328125Mb, VMS = 229.691406Mb), Step range = [21-26]
2 : Statistics :: Grounding = 0.696274s, Solving = 0.022120s, Total = 0.718394s, Memory = (RSS = 240.226562Mb, VMS = 234.472656Mb), Step range = [27-27]
3 : Statistics :: Grounding = 0.706117s, Solving = 0.031323s, Total = 0.737439s, Memory = (RSS = 245.781250Mb, VMS = 238.578125Mb), Step range = [28-28]
4 : Statistics :: Grounding = 0.773315s, Solving = 0.029390s, Total = 0.802705s, Memory = (RSS = 253.675781Mb, VMS = 244.289062Mb), Step range = [29-29]
5 : Statistics :: Grounding = 0.781530s, Solving = 0.039972s, Total = 0.821502s, Memory = (RSS = 267.667969Mb, VMS = 265.468750Mb), Step range = [30-30]
6 : Statistics :: Grounding = 0.856251s, Solving = 0.047728s, Total = 0.903980s, Memory = (RSS = 275.265625Mb, VMS = 270.886719Mb), Step range = [31-31]
7 : Statistics :: Grounding = 0.817443s, Solving = 0.126499s, Total = 0.943942s, Memory = (RSS = 288.953125Mb, VMS = 282.460938Mb), Step range = [32-32]

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 8.996391s due to: Stop condition reached.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-33] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-33] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.502653s, Solving = 0.493738s, Total = 8.996391s, Memory = (RSS = 288.953125Mb, VMS = 282.460938Mb), Step range = [21-32]), Calls = 7
Model :: Total atoms = 14690, Cost = (11, 0, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 11 :: Actions = 11                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
        talos : grasp(manipulator_end_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,4))
        talos : release(manipulator_end_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 17:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 18:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 20:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 21:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 22:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 24:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 25:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 26:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 28:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 29:
    Current Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 30:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 31:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 32:
    Current Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))

[20-01-2022_16-21-33] INFO :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[20-01-2022_16-21-33] INFO :: ASH Planner Main #1 >> Online planning increment 4 finished.

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 6 : Goals achieved = 3 : Goals unachieved = 3 : Complete = False
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 5 : Goals achieved = 5 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = False

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 3, Highest = 3.

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-3].

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 4 to proactively divide planning problem 2 at level 3:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 6, Sub-goal Stage Range = [1-6]
Division points [total=1] : [(Index = 3, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [4-6]

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 3, sgoals range = [4-6], problem number = 2, increment number = 5

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 4)
	('last_sgoals', 6)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-33] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 3] partial conformance refinement (sequential) with sgoals range [4-6] : Concurrency enabled : Minimum search length bound enabled with value 7

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 4
last_sgoals = 6
start_step = 5
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 7

[20-01-2022_16-21-33] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[20-01-2022_16-21-33] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-33] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-33] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 5 as problem start state.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 5})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 5})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 5})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room', 'S': 5})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 5})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 5})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 5})

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 5).
holds(3, complete_tower(red,puzzle_room_table), false, 5).
holds(3, complete_tower(yellow,puzzle_room_table), false, 5).
holds(3, grasping(manipulator_arm_1), (block,5), 5).
holds(3, grasping(manipulator_arm_2), (block,6), 5).
holds(3, in((block,1)), puzzle_room, 5).
holds(3, in((block,2)), puzzle_room, 5).
holds(3, in((block,3)), puzzle_room, 5).
holds(3, in((block,4)), store_room, 5).
holds(3, in((block,5)), puzzle_room, 5).
holds(3, in((block,6)), puzzle_room, 5).
holds(3, in((block,7)), puzzle_room, 5).
holds(3, in((block,8)), store_room, 5).
holds(3, in((block,9)), puzzle_room, 5).
holds(3, in(manipulator_arm_1), puzzle_room, 5).
holds(3, in(manipulator_arm_2), puzzle_room, 5).
holds(3, in(puzzle_room_table), puzzle_room, 5).
holds(3, in(talos), puzzle_room, 5).
holds(3, in_tower((block,1),(block,1)), true, 5).
holds(3, in_tower((block,1),(block,2)), false, 5).
holds(3, in_tower((block,1),(block,3)), true, 5).
holds(3, in_tower((block,1),(block,4)), false, 5).
holds(3, in_tower((block,1),(block,5)), false, 5).
holds(3, in_tower((block,1),(block,6)), false, 5).
holds(3, in_tower((block,1),(block,7)), false, 5).
holds(3, in_tower((block,1),(block,8)), false, 5).
holds(3, in_tower((block,1),(block,9)), false, 5).
holds(3, in_tower((block,2),(block,1)), false, 5).
holds(3, in_tower((block,2),(block,2)), true, 5).
holds(3, in_tower((block,2),(block,3)), false, 5).
holds(3, in_tower((block,2),(block,4)), false, 5).
holds(3, in_tower((block,2),(block,5)), false, 5).
holds(3, in_tower((block,2),(block,6)), false, 5).
holds(3, in_tower((block,2),(block,7)), false, 5).
holds(3, in_tower((block,2),(block,8)), false, 5).
holds(3, in_tower((block,2),(block,9)), false, 5).
holds(3, in_tower((block,3),(block,1)), false, 5).
holds(3, in_tower((block,3),(block,2)), false, 5).
holds(3, in_tower((block,3),(block,3)), false, 5).
holds(3, in_tower((block,3),(block,4)), false, 5).
holds(3, in_tower((block,3),(block,5)), false, 5).
holds(3, in_tower((block,3),(block,6)), false, 5).
holds(3, in_tower((block,3),(block,7)), false, 5).
holds(3, in_tower((block,3),(block,8)), false, 5).
holds(3, in_tower((block,3),(block,9)), false, 5).
holds(3, in_tower((block,4),(block,1)), false, 5).
holds(3, in_tower((block,4),(block,2)), false, 5).
holds(3, in_tower((block,4),(block,3)), false, 5).
holds(3, in_tower((block,4),(block,4)), false, 5).
holds(3, in_tower((block,4),(block,5)), false, 5).
holds(3, in_tower((block,4),(block,6)), false, 5).
holds(3, in_tower((block,4),(block,7)), false, 5).
holds(3, in_tower((block,4),(block,8)), false, 5).
holds(3, in_tower((block,4),(block,9)), false, 5).
holds(3, in_tower((block,5),(block,1)), false, 5).
holds(3, in_tower((block,5),(block,2)), false, 5).
holds(3, in_tower((block,5),(block,3)), false, 5).
holds(3, in_tower((block,5),(block,4)), false, 5).
holds(3, in_tower((block,5),(block,5)), false, 5).
holds(3, in_tower((block,5),(block,6)), false, 5).
holds(3, in_tower((block,5),(block,7)), false, 5).
holds(3, in_tower((block,5),(block,8)), false, 5).
holds(3, in_tower((block,5),(block,9)), false, 5).
holds(3, in_tower((block,6),(block,1)), false, 5).
holds(3, in_tower((block,6),(block,2)), false, 5).
holds(3, in_tower((block,6),(block,3)), false, 5).
holds(3, in_tower((block,6),(block,4)), false, 5).
holds(3, in_tower((block,6),(block,5)), false, 5).
holds(3, in_tower((block,6),(block,6)), false, 5).
holds(3, in_tower((block,6),(block,7)), false, 5).
holds(3, in_tower((block,6),(block,8)), false, 5).
holds(3, in_tower((block,6),(block,9)), false, 5).
holds(3, in_tower((block,7),(block,1)), false, 5).
holds(3, in_tower((block,7),(block,2)), false, 5).
holds(3, in_tower((block,7),(block,3)), false, 5).
holds(3, in_tower((block,7),(block,4)), false, 5).
holds(3, in_tower((block,7),(block,5)), false, 5).
holds(3, in_tower((block,7),(block,6)), false, 5).
holds(3, in_tower((block,7),(block,7)), true, 5).
holds(3, in_tower((block,7),(block,8)), false, 5).
holds(3, in_tower((block,7),(block,9)), true, 5).
holds(3, in_tower((block,8),(block,1)), false, 5).
holds(3, in_tower((block,8),(block,2)), false, 5).
holds(3, in_tower((block,8),(block,3)), false, 5).
holds(3, in_tower((block,8),(block,4)), false, 5).
holds(3, in_tower((block,8),(block,5)), false, 5).
holds(3, in_tower((block,8),(block,6)), false, 5).
holds(3, in_tower((block,8),(block,7)), false, 5).
holds(3, in_tower((block,8),(block,8)), false, 5).
holds(3, in_tower((block,8),(block,9)), false, 5).
holds(3, in_tower((block,9),(block,1)), false, 5).
holds(3, in_tower((block,9),(block,2)), false, 5).
holds(3, in_tower((block,9),(block,3)), false, 5).
holds(3, in_tower((block,9),(block,4)), false, 5).
holds(3, in_tower((block,9),(block,5)), false, 5).
holds(3, in_tower((block,9),(block,6)), false, 5).
holds(3, in_tower((block,9),(block,7)), false, 5).
holds(3, in_tower((block,9),(block,8)), false, 5).
holds(3, in_tower((block,9),(block,9)), false, 5).
holds(3, on((block,1)), puzzle_room_table, 5).
holds(3, on((block,2)), puzzle_room_table, 5).
holds(3, on((block,3)), (block,1), 5).
holds(3, on((block,4)), nothing, 5).
holds(3, on((block,5)), nothing, 5).
holds(3, on((block,6)), nothing, 5).
holds(3, on((block,7)), puzzle_room_table, 5).
holds(3, on((block,8)), nothing, 5).
holds(3, on((block,9)), (block,7), 5).
holds(3, tower_base((block,1),puzzle_room_table), true, 5).
holds(3, tower_base((block,2),puzzle_room_table), true, 5).
holds(3, tower_base((block,3),puzzle_room_table), false, 5).
holds(3, tower_base((block,4),puzzle_room_table), false, 5).
holds(3, tower_base((block,5),puzzle_room_table), false, 5).
holds(3, tower_base((block,6),puzzle_room_table), false, 5).
holds(3, tower_base((block,7),puzzle_room_table), true, 5).
holds(3, tower_base((block,8),puzzle_room_table), false, 5).
holds(3, tower_base((block,9),puzzle_room_table), false, 5).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 5).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 5).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 5).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 5).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 5).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 5).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 5).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 5).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 5).
holds(4, complete_tower(blue,puzzle_room_table), false, 5).
holds(4, complete_tower(red,puzzle_room_table), false, 5).
holds(4, complete_tower(yellow,puzzle_room_table), false, 5).
holds(4, in((block,1)), puzzle_room, 5).
holds(4, in((block,2)), puzzle_room, 5).
holds(4, in((block,3)), puzzle_room, 5).
holds(4, in((block,4)), store_room, 5).
holds(4, in((block,5)), puzzle_room, 5).
holds(4, in((block,6)), puzzle_room, 5).
holds(4, in((block,7)), puzzle_room, 5).
holds(4, in((block,8)), store_room, 5).
holds(4, in((block,9)), puzzle_room, 5).
holds(4, in(puzzle_room_table), puzzle_room, 5).
holds(4, in(talos), puzzle_room, 5).
holds(4, in_tower((block,1),(block,1)), true, 5).
holds(4, in_tower((block,1),(block,2)), false, 5).
holds(4, in_tower((block,1),(block,3)), true, 5).
holds(4, in_tower((block,1),(block,4)), false, 5).
holds(4, in_tower((block,1),(block,5)), false, 5).
holds(4, in_tower((block,1),(block,6)), false, 5).
holds(4, in_tower((block,1),(block,7)), false, 5).
holds(4, in_tower((block,1),(block,8)), false, 5).
holds(4, in_tower((block,1),(block,9)), false, 5).
holds(4, in_tower((block,2),(block,1)), false, 5).
holds(4, in_tower((block,2),(block,2)), true, 5).
holds(4, in_tower((block,2),(block,3)), false, 5).
holds(4, in_tower((block,2),(block,4)), false, 5).
holds(4, in_tower((block,2),(block,5)), false, 5).
holds(4, in_tower((block,2),(block,6)), false, 5).
holds(4, in_tower((block,2),(block,7)), false, 5).
holds(4, in_tower((block,2),(block,8)), false, 5).
holds(4, in_tower((block,2),(block,9)), false, 5).
holds(4, in_tower((block,3),(block,1)), false, 5).
holds(4, in_tower((block,3),(block,2)), false, 5).
holds(4, in_tower((block,3),(block,3)), false, 5).
holds(4, in_tower((block,3),(block,4)), false, 5).
holds(4, in_tower((block,3),(block,5)), false, 5).
holds(4, in_tower((block,3),(block,6)), false, 5).
holds(4, in_tower((block,3),(block,7)), false, 5).
holds(4, in_tower((block,3),(block,8)), false, 5).
holds(4, in_tower((block,3),(block,9)), false, 5).
holds(4, in_tower((block,4),(block,1)), false, 5).
holds(4, in_tower((block,4),(block,2)), false, 5).
holds(4, in_tower((block,4),(block,3)), false, 5).
holds(4, in_tower((block,4),(block,4)), false, 5).
holds(4, in_tower((block,4),(block,5)), false, 5).
holds(4, in_tower((block,4),(block,6)), false, 5).
holds(4, in_tower((block,4),(block,7)), false, 5).
holds(4, in_tower((block,4),(block,8)), false, 5).
holds(4, in_tower((block,4),(block,9)), false, 5).
holds(4, in_tower((block,5),(block,1)), false, 5).
holds(4, in_tower((block,5),(block,2)), false, 5).
holds(4, in_tower((block,5),(block,3)), false, 5).
holds(4, in_tower((block,5),(block,4)), false, 5).
holds(4, in_tower((block,5),(block,5)), false, 5).
holds(4, in_tower((block,5),(block,6)), false, 5).
holds(4, in_tower((block,5),(block,7)), false, 5).
holds(4, in_tower((block,5),(block,8)), false, 5).
holds(4, in_tower((block,5),(block,9)), false, 5).
holds(4, in_tower((block,6),(block,1)), false, 5).
holds(4, in_tower((block,6),(block,2)), false, 5).
holds(4, in_tower((block,6),(block,3)), false, 5).
holds(4, in_tower((block,6),(block,4)), false, 5).
holds(4, in_tower((block,6),(block,5)), false, 5).
holds(4, in_tower((block,6),(block,6)), false, 5).
holds(4, in_tower((block,6),(block,7)), false, 5).
holds(4, in_tower((block,6),(block,8)), false, 5).
holds(4, in_tower((block,6),(block,9)), false, 5).
holds(4, in_tower((block,7),(block,1)), false, 5).
holds(4, in_tower((block,7),(block,2)), false, 5).
holds(4, in_tower((block,7),(block,3)), false, 5).
holds(4, in_tower((block,7),(block,4)), false, 5).
holds(4, in_tower((block,7),(block,5)), false, 5).
holds(4, in_tower((block,7),(block,6)), false, 5).
holds(4, in_tower((block,7),(block,7)), true, 5).
holds(4, in_tower((block,7),(block,8)), false, 5).
holds(4, in_tower((block,7),(block,9)), true, 5).
holds(4, in_tower((block,8),(block,1)), false, 5).
holds(4, in_tower((block,8),(block,2)), false, 5).
holds(4, in_tower((block,8),(block,3)), false, 5).
holds(4, in_tower((block,8),(block,4)), false, 5).
holds(4, in_tower((block,8),(block,5)), false, 5).
holds(4, in_tower((block,8),(block,6)), false, 5).
holds(4, in_tower((block,8),(block,7)), false, 5).
holds(4, in_tower((block,8),(block,8)), false, 5).
holds(4, in_tower((block,8),(block,9)), false, 5).
holds(4, in_tower((block,9),(block,1)), false, 5).
holds(4, in_tower((block,9),(block,2)), false, 5).
holds(4, in_tower((block,9),(block,3)), false, 5).
holds(4, in_tower((block,9),(block,4)), false, 5).
holds(4, in_tower((block,9),(block,5)), false, 5).
holds(4, in_tower((block,9),(block,6)), false, 5).
holds(4, in_tower((block,9),(block,7)), false, 5).
holds(4, in_tower((block,9),(block,8)), false, 5).
holds(4, in_tower((block,9),(block,9)), false, 5).
holds(4, on((block,1)), puzzle_room_table, 5).
holds(4, on((block,2)), puzzle_room_table, 5).
holds(4, on((block,3)), (block,1), 5).
holds(4, on((block,4)), nothing, 5).
holds(4, on((block,5)), nothing, 5).
holds(4, on((block,6)), nothing, 5).
holds(4, on((block,7)), puzzle_room_table, 5).
holds(4, on((block,8)), nothing, 5).
holds(4, on((block,9)), (block,7), 5).
holds(4, tower_base((block,1),puzzle_room_table), true, 5).
holds(4, tower_base((block,2),puzzle_room_table), true, 5).
holds(4, tower_base((block,3),puzzle_room_table), false, 5).
holds(4, tower_base((block,4),puzzle_room_table), false, 5).
holds(4, tower_base((block,5),puzzle_room_table), false, 5).
holds(4, tower_base((block,6),puzzle_room_table), false, 5).
holds(4, tower_base((block,7),puzzle_room_table), true, 5).
holds(4, tower_base((block,8),puzzle_room_table), false, 5).
holds(4, tower_base((block,9),puzzle_room_table), false, 5).
holds(4, transporting(talos,(block,1)), false, 5).
holds(4, transporting(talos,(block,2)), false, 5).
holds(4, transporting(talos,(block,3)), false, 5).
holds(4, transporting(talos,(block,4)), false, 5).
holds(4, transporting(talos,(block,5)), true, 5).
holds(4, transporting(talos,(block,6)), true, 5).
holds(4, transporting(talos,(block,7)), false, 5).
holds(4, transporting(talos,(block,8)), false, 5).
holds(4, transporting(talos,(block,9)), false, 5).
holds(4, unordered_tower((block,1),puzzle_room_table), true, 5).
holds(4, unordered_tower((block,2),puzzle_room_table), false, 5).
holds(4, unordered_tower((block,3),puzzle_room_table), false, 5).
holds(4, unordered_tower((block,4),puzzle_room_table), false, 5).
holds(4, unordered_tower((block,5),puzzle_room_table), false, 5).
holds(4, unordered_tower((block,6),puzzle_room_table), false, 5).
holds(4, unordered_tower((block,7),puzzle_room_table), true, 5).
holds(4, unordered_tower((block,8),puzzle_room_table), false, 5).
holds(4, unordered_tower((block,9),puzzle_room_table), false, 5).

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(4, complete_tower(blue,puzzle_room_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_table, false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_table, true).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_table, true).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_table, true).
final_goal(4, tower_base((block,1),puzzle_room_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_table), true, true).
final_goal(4, tower_base((block,4),puzzle_room_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_table), true, true).
final_goal(4, tower_base((block,7),puzzle_room_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_table), true, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-34] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=7']

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_table)', 'F': 'transporting(talos,(block,3))', 'V': 'false', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_table)', 'F': 'transporting(talos,(block,6))', 'V': 'false', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_table)', 'F': 'transporting(talos,(block,9))', 'V': 'false', 'I': 4})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'transporting(talos,(block,2))', 'V': 'false', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'transporting(talos,(block,5))', 'V': 'false', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'transporting(talos,(block,8))', 'V': 'false', 'I': 5})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'transporting(talos,(block,1))', 'V': 'false', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'transporting(talos,(block,4))', 'V': 'false', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 6})
SubGoal({'L': 4, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'transporting(talos,(block,7))', 'V': 'false', 'I': 6})

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 18 rules into program part base:

sub_goal(4, talos, place_upon((block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 4).
sub_goal(4, talos, place_upon((block,3),puzzle_room_table), transporting(talos,(block,3)), false, 4).
sub_goal(4, talos, place_upon((block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4).
sub_goal(4, talos, place_upon((block,6),puzzle_room_table), transporting(talos,(block,6)), false, 4).
sub_goal(4, talos, place_upon((block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 4).
sub_goal(4, talos, place_upon((block,9),puzzle_room_table), transporting(talos,(block,9)), false, 4).
sub_goal(4, talos, place_upon((block,2),(block,3)), on((block,2)), (block,3), 5).
sub_goal(4, talos, place_upon((block,2),(block,3)), transporting(talos,(block,2)), false, 5).
sub_goal(4, talos, place_upon((block,5),(block,6)), on((block,5)), (block,6), 5).
sub_goal(4, talos, place_upon((block,5),(block,6)), transporting(talos,(block,5)), false, 5).
sub_goal(4, talos, place_upon((block,8),(block,9)), on((block,8)), (block,9), 5).
sub_goal(4, talos, place_upon((block,8),(block,9)), transporting(talos,(block,8)), false, 5).
sub_goal(4, talos, place_upon((block,1),(block,2)), on((block,1)), (block,2), 6).
sub_goal(4, talos, place_upon((block,1),(block,2)), transporting(talos,(block,1)), false, 6).
sub_goal(4, talos, place_upon((block,4),(block,5)), on((block,4)), (block,5), 6).
sub_goal(4, talos, place_upon((block,4),(block,5)), transporting(talos,(block,4)), false, 6).
sub_goal(4, talos, place_upon((block,7),(block,8)), on((block,7)), (block,8), 6).
sub_goal(4, talos, place_upon((block,7),(block,8)), transporting(talos,(block,7)), false, 6).

[20-01-2022_16-21-34] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=7']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B54833F670>]
	incrementor = SolveIncrementor(step_start=5, step_increase=1, step_increase_initial=3, step_end_min=8, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 5), range_=None), IncPart(name='plan_module', args=('#inc', 5, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 5, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 5, 4, 6, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1256 rules

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006053399999998987s

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.033285s.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007148s with result Satisfiable.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54D08AD10>

[20-01-2022_16-21-34] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 3)
	('start_step', 5)
	('last_sgoals', 6)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 4)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54D08AD10>)

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 5). %* None *%
#program plan_module(#inc, 5, true, true). %* None *%
#program optimisation_module(#inc, 5, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 5, 4, 6, sequential, false). %* None *%

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =      4 : Current =      7
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(5), Number(5)]), ('plan_module', [Number(5), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(5)]), ('plan_module', [Number(6), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(5)]), ('plan_module', [Number(7), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.513369s.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061651s with result Satisfiable.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5750204000000068, Incremental time limit = None
Running cumulative time = 0.5750204000000068, Cumulative time limit = 1800
Used memory = (RSS = 228.640625Mb, VMS = 220.496094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.513369s, Solving = 0.061651s, Total = 0.575020s, Memory = (RSS = 228.640625Mb, VMS = 220.496094Mb), Step range = [5-7]), Calls = 1
Final Model :: Total atoms = 7436, Cost = (2, 0, -2), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(5)]), ('plan_module', [Number(8), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235689s.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008952s with result Unsatisfiable.

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24464130000000495, Incremental time limit = None
Running cumulative time = 0.8196617000000117, Cumulative time limit = 1800
Used memory = (RSS = 232.058594Mb, VMS = 224.050781Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(5)]), ('plan_module', [Number(9), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.289841s.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016852s with result Unsatisfiable.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30669270000000637, Incremental time limit = None
Running cumulative time = 1.126354400000018, Cumulative time limit = 1800
Used memory = (RSS = 236.933594Mb, VMS = 230.042969Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(5)]), ('plan_module', [Number(10), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.264063s.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017256s with result Unsatisfiable.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28131890000000226, Incremental time limit = None
Running cumulative time = 1.4076733000000203, Cumulative time limit = 1800
Used memory = (RSS = 240.886719Mb, VMS = 232.609375Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(5)]), ('plan_module', [Number(11), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.379927s.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019684s with result Unsatisfiable.

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.399610899999999, Incremental time limit = None
Running cumulative time = 1.8072842000000193, Cumulative time limit = 1800
Used memory = (RSS = 256.289062Mb, VMS = 250.386719Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(5)]), ('plan_module', [Number(12), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250832s.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022755s with result Unsatisfiable.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27358749999999077, Incremental time limit = None
Running cumulative time = 2.08087170000001, Cumulative time limit = 1800
Used memory = (RSS = 259.335938Mb, VMS = 252.132812Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(5)]), ('plan_module', [Number(13), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.251497s.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029268s with result Unsatisfiable.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2807655999999952, Incremental time limit = None
Running cumulative time = 2.3616373000000053, Cumulative time limit = 1800
Used memory = (RSS = 269.222656Mb, VMS = 263.710938Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(5)]), ('plan_module', [Number(14), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.259392s.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028723s with result Unsatisfiable.

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2881144000000049, Incremental time limit = None
Running cumulative time = 2.64975170000001, Cumulative time limit = 1800
Used memory = (RSS = 271.753906Mb, VMS = 264.914062Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(5)]), ('plan_module', [Number(15), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.272331s.

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045942s with result Unsatisfiable.

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31827350000000365, Incremental time limit = None
Running cumulative time = 2.968025200000014, Cumulative time limit = 1800
Used memory = (RSS = 273.867188Mb, VMS = 265.269531Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(5)]), ('plan_module', [Number(16), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286687s.

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.101202s with result Unsatisfiable.

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.387888899999993, Incremental time limit = None
Running cumulative time = 3.355914100000007, Cumulative time limit = 1800
Used memory = (RSS = 278.160156Mb, VMS = 273.945312Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(5)]), ('plan_module', [Number(17), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286059s.

[20-01-2022_16-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.223041s with result Unsatisfiable.

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5090994000000038, Incremental time limit = None
Running cumulative time = 3.8650135000000105, Cumulative time limit = 1800
Used memory = (RSS = 281.496094Mb, VMS = 276.230469Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(5)]), ('plan_module', [Number(18), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306684s.

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.304378s with result Unsatisfiable.

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6110618000000017, Incremental time limit = None
Running cumulative time = 4.476075300000012, Cumulative time limit = 1800
Used memory = (RSS = 286.933594Mb, VMS = 280.871094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(5)]), ('plan_module', [Number(19), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.266104s.

[20-01-2022_16-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.519097s with result Unsatisfiable.

[20-01-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7852011000000019, Incremental time limit = None
Running cumulative time = 5.261276400000014, Cumulative time limit = 1800
Used memory = (RSS = 292.234375Mb, VMS = 284.746094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =      8 : Maximum =    200

[20-01-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(5)]), ('plan_module', [Number(20), Number(5), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(5), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(5), Number(4), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.266073s.

[20-01-2022_16-21-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.496576s with result Satisfiable.

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.7626490000000032, Incremental time limit = None
Running cumulative time = 7.023925400000017, Cumulative time limit = 1800
Used memory = (RSS = 307.777344Mb, VMS = 310.773438Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.128548s, Solving = 2.895378s, Total = 7.023925s, Memory = (RSS = 307.777344Mb, VMS = 310.773438Mb), Step range = [5-20]), Calls = 14
Final Model :: Total atoms = 19079, Cost = (25, 0, -9), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.513369s, Solving = 0.061651s, Total = 0.575020s, Memory = (RSS = 228.640625Mb, VMS = 220.496094Mb), Step range = [5-7]
2 : Statistics :: Grounding = 0.235689s, Solving = 0.008952s, Total = 0.244641s, Memory = (RSS = 232.058594Mb, VMS = 224.050781Mb), Step range = [8-8]
3 : Statistics :: Grounding = 0.289841s, Solving = 0.016852s, Total = 0.306693s, Memory = (RSS = 236.933594Mb, VMS = 230.042969Mb), Step range = [9-9]
4 : Statistics :: Grounding = 0.264063s, Solving = 0.017256s, Total = 0.281319s, Memory = (RSS = 240.886719Mb, VMS = 232.609375Mb), Step range = [10-10]
5 : Statistics :: Grounding = 0.379927s, Solving = 0.019684s, Total = 0.399611s, Memory = (RSS = 256.289062Mb, VMS = 250.386719Mb), Step range = [11-11]
6 : Statistics :: Grounding = 0.250832s, Solving = 0.022755s, Total = 0.273587s, Memory = (RSS = 259.335938Mb, VMS = 252.132812Mb), Step range = [12-12]
7 : Statistics :: Grounding = 0.251497s, Solving = 0.029268s, Total = 0.280766s, Memory = (RSS = 269.222656Mb, VMS = 263.710938Mb), Step range = [13-13]
8 : Statistics :: Grounding = 0.259392s, Solving = 0.028723s, Total = 0.288114s, Memory = (RSS = 271.753906Mb, VMS = 264.914062Mb), Step range = [14-14]
9 : Statistics :: Grounding = 0.272331s, Solving = 0.045942s, Total = 0.318274s, Memory = (RSS = 273.867188Mb, VMS = 265.269531Mb), Step range = [15-15]
10 : Statistics :: Grounding = 0.286687s, Solving = 0.101202s, Total = 0.387889s, Memory = (RSS = 278.160156Mb, VMS = 273.945312Mb), Step range = [16-16]
11 : Statistics :: Grounding = 0.286059s, Solving = 0.223041s, Total = 0.509099s, Memory = (RSS = 281.496094Mb, VMS = 276.230469Mb), Step range = [17-17]
12 : Statistics :: Grounding = 0.306684s, Solving = 0.304378s, Total = 0.611062s, Memory = (RSS = 286.933594Mb, VMS = 280.871094Mb), Step range = [18-18]
13 : Statistics :: Grounding = 0.266104s, Solving = 0.519097s, Total = 0.785201s, Memory = (RSS = 292.234375Mb, VMS = 284.746094Mb), Step range = [19-19]
14 : Statistics :: Grounding = 0.266073s, Solving = 1.496576s, Total = 1.762649s, Memory = (RSS = 307.777344Mb, VMS = 310.773438Mb), Step range = [20-20]

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.023925s due to: Stop condition reached.

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-41] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-42] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 6, Last requested goal index = 6, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-42] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.128548s, Solving = 2.895378s, Total = 7.023925s, Memory = (RSS = 307.777344Mb, VMS = 310.773438Mb), Step range = [5-20]), Calls = 14
Model :: Total atoms = 19079, Cost = (25, 0, -9), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 15 :: Actions = 25                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 2:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
        talos : grasp(manipulator_arm_2,(block,8))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,4))
        talos : release(manipulator_arm_2,(block,8))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Achieved Sub-goals:
        [Index = 2] talos : collect((block,4)) -> on((block,4)) = nothing
        [Index = 2] talos : collect((block,4)) -> transporting(talos,(block,4)) = true
        [Index = 2] talos : collect((block,5)) -> on((block,5)) = nothing
        [Index = 2] talos : collect((block,5)) -> transporting(talos,(block,5)) = true
        [Index = 2] talos : collect((block,6)) -> on((block,6)) = nothing
        [Index = 2] talos : collect((block,6)) -> transporting(talos,(block,6)) = true
        [Index = 2] talos : collect((block,8)) -> on((block,8)) = nothing
        [Index = 2] talos : collect((block,8)) -> transporting(talos,(block,8)) = true
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 6:
    Current Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 8:
    Current Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 9:
    Current Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,3))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Achieved Sub-goals:
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,3),puzzle_room_table) -> transporting(talos,(block,3)) = false
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,6),puzzle_room_table) -> transporting(talos,(block,6)) = false
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 4] talos : place_upon((block,9),puzzle_room_table) -> transporting(talos,(block,9)) = false
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,2))
Step 13:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,9))
Step 14:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : move(store_room)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))
        talos : grasp(manipulator_arm_2,(block,4))
Step 16:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Achieved Sub-goals:
        [Index = 5] talos : place_upon((block,2),(block,3)) -> on((block,2)) = (block,3)
        [Index = 5] talos : place_upon((block,2),(block,3)) -> transporting(talos,(block,2)) = false
        [Index = 5] talos : place_upon((block,5),(block,6)) -> on((block,5)) = (block,6)
        [Index = 5] talos : place_upon((block,5),(block,6)) -> transporting(talos,(block,5)) = false
        [Index = 5] talos : place_upon((block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 5] talos : place_upon((block,8),(block,9)) -> transporting(talos,(block,8)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,8),(block,9))
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 18:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 6] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
        [Index = 6] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 6] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
        [Index = 6] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 6] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,8))
        talos : release(manipulator_arm_2,(block,4))
Step 19:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 6] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
        [Index = 6] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 6] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
        [Index = 6] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 6] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
        talos : grasp(manipulator_arm_2,(block,7))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 6] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
        [Index = 6] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 6] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
        [Index = 6] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 6] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Achieved Sub-goals:
        [Index = 6] talos : place_upon((block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 6] talos : place_upon((block,1),(block,2)) -> transporting(talos,(block,1)) = false
        [Index = 6] talos : place_upon((block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 6] talos : place_upon((block,4),(block,5)) -> transporting(talos,(block,4)) = false
        [Index = 6] talos : place_upon((block,7),(block,8)) -> on((block,7)) = (block,8)
        [Index = 6] talos : place_upon((block,7),(block,8)) -> transporting(talos,(block,7)) = false
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,7),(block,8))

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=5, total_plan_length=20, step_range=range(5, 21)

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 20, Tota actions = 25, Produced sub-goal stages = 25
Level [1]: Length = 32, Tota actions = 39, Produced sub-goal stages = 0

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (par-ref), LE =  15, AC =  25, CF = 0.6, GT =   5.31s, ST =   3.00s, OT = 0.00s, TT =   8.30s, EF = (LE = 5.0, AC = 1.4), ED = (LE = 2.0, AC = 0.5), EB = (LE = 0.4, AC = 0.4)

[20-01-2022_16-21-42] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=15, start_step=5, blend=Blend(left=0, right=0)

[20-01-2022_16-21-42] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=7, large_group_size=8

[20-01-2022_16-21-42] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=12, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 15, Sub-goal Stage Range = [6-20]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-42] INFO :: ASH Planner Main #1 >> Monolevel problem 2 at level 3 solved.

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 3 at level 2:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 15, Sub-goal Stage Range = [6-20]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [6-12]

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [6-12], problem number = 3, increment number = 5

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 6)
	('last_sgoals', 12)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-42] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [6-12] : Concurrency enabled : Minimum search length bound enabled with value 26

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 6
last_sgoals = 12
start_step = 20
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 26

[20-01-2022_16-21-42] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-21-42] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-42] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 20 as problem start state.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 20})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 20})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'hallway', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 20})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'hallway', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 20})

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 20).
holds(2, complete_tower(red,puzzle_room_table), false, 20).
holds(2, complete_tower(yellow,puzzle_room_table), false, 20).
holds(2, configuration(manipulator_arm_1), retracted, 20).
holds(2, configuration(manipulator_arm_2), retracted, 20).
holds(2, configuration(puzzle_room_door), open, 20).
holds(2, configuration(starting_room_door), closed, 20).
holds(2, configuration(store_room_door), open, 20).
holds(2, grasping(manipulator_arm_1), nothing, 20).
holds(2, grasping(manipulator_arm_2), (block,6), 20).
holds(2, in((block,1)), puzzle_room, 20).
holds(2, in((block,2)), puzzle_room, 20).
holds(2, in((block,3)), puzzle_room, 20).
holds(2, in((block,4)), store_room, 20).
holds(2, in((block,5)), hallway, 20).
holds(2, in((block,6)), puzzle_room, 20).
holds(2, in((block,7)), puzzle_room, 20).
holds(2, in((block,8)), store_room, 20).
holds(2, in((block,9)), puzzle_room, 20).
holds(2, in(manipulator_arm_1), puzzle_room, 20).
holds(2, in(manipulator_arm_2), puzzle_room, 20).
holds(2, in(puzzle_room_table), puzzle_room, 20).
holds(2, in(talos), puzzle_room, 20).
holds(2, in_tower((block,1),(block,1)), true, 20).
holds(2, in_tower((block,1),(block,2)), false, 20).
holds(2, in_tower((block,1),(block,3)), true, 20).
holds(2, in_tower((block,1),(block,4)), false, 20).
holds(2, in_tower((block,1),(block,5)), false, 20).
holds(2, in_tower((block,1),(block,6)), false, 20).
holds(2, in_tower((block,1),(block,7)), false, 20).
holds(2, in_tower((block,1),(block,8)), false, 20).
holds(2, in_tower((block,1),(block,9)), false, 20).
holds(2, in_tower((block,2),(block,1)), false, 20).
holds(2, in_tower((block,2),(block,2)), true, 20).
holds(2, in_tower((block,2),(block,3)), false, 20).
holds(2, in_tower((block,2),(block,4)), false, 20).
holds(2, in_tower((block,2),(block,5)), false, 20).
holds(2, in_tower((block,2),(block,6)), false, 20).
holds(2, in_tower((block,2),(block,7)), false, 20).
holds(2, in_tower((block,2),(block,8)), false, 20).
holds(2, in_tower((block,2),(block,9)), false, 20).
holds(2, in_tower((block,3),(block,1)), false, 20).
holds(2, in_tower((block,3),(block,2)), false, 20).
holds(2, in_tower((block,3),(block,3)), false, 20).
holds(2, in_tower((block,3),(block,4)), false, 20).
holds(2, in_tower((block,3),(block,5)), false, 20).
holds(2, in_tower((block,3),(block,6)), false, 20).
holds(2, in_tower((block,3),(block,7)), false, 20).
holds(2, in_tower((block,3),(block,8)), false, 20).
holds(2, in_tower((block,3),(block,9)), false, 20).
holds(2, in_tower((block,4),(block,1)), false, 20).
holds(2, in_tower((block,4),(block,2)), false, 20).
holds(2, in_tower((block,4),(block,3)), false, 20).
holds(2, in_tower((block,4),(block,4)), false, 20).
holds(2, in_tower((block,4),(block,5)), false, 20).
holds(2, in_tower((block,4),(block,6)), false, 20).
holds(2, in_tower((block,4),(block,7)), false, 20).
holds(2, in_tower((block,4),(block,8)), false, 20).
holds(2, in_tower((block,4),(block,9)), false, 20).
holds(2, in_tower((block,5),(block,1)), false, 20).
holds(2, in_tower((block,5),(block,2)), false, 20).
holds(2, in_tower((block,5),(block,3)), false, 20).
holds(2, in_tower((block,5),(block,4)), false, 20).
holds(2, in_tower((block,5),(block,5)), false, 20).
holds(2, in_tower((block,5),(block,6)), false, 20).
holds(2, in_tower((block,5),(block,7)), false, 20).
holds(2, in_tower((block,5),(block,8)), false, 20).
holds(2, in_tower((block,5),(block,9)), false, 20).
holds(2, in_tower((block,6),(block,1)), false, 20).
holds(2, in_tower((block,6),(block,2)), false, 20).
holds(2, in_tower((block,6),(block,3)), false, 20).
holds(2, in_tower((block,6),(block,4)), false, 20).
holds(2, in_tower((block,6),(block,5)), false, 20).
holds(2, in_tower((block,6),(block,6)), false, 20).
holds(2, in_tower((block,6),(block,7)), false, 20).
holds(2, in_tower((block,6),(block,8)), false, 20).
holds(2, in_tower((block,6),(block,9)), false, 20).
holds(2, in_tower((block,7),(block,1)), false, 20).
holds(2, in_tower((block,7),(block,2)), false, 20).
holds(2, in_tower((block,7),(block,3)), false, 20).
holds(2, in_tower((block,7),(block,4)), false, 20).
holds(2, in_tower((block,7),(block,5)), false, 20).
holds(2, in_tower((block,7),(block,6)), false, 20).
holds(2, in_tower((block,7),(block,7)), true, 20).
holds(2, in_tower((block,7),(block,8)), false, 20).
holds(2, in_tower((block,7),(block,9)), true, 20).
holds(2, in_tower((block,8),(block,1)), false, 20).
holds(2, in_tower((block,8),(block,2)), false, 20).
holds(2, in_tower((block,8),(block,3)), false, 20).
holds(2, in_tower((block,8),(block,4)), false, 20).
holds(2, in_tower((block,8),(block,5)), false, 20).
holds(2, in_tower((block,8),(block,6)), false, 20).
holds(2, in_tower((block,8),(block,7)), false, 20).
holds(2, in_tower((block,8),(block,8)), false, 20).
holds(2, in_tower((block,8),(block,9)), false, 20).
holds(2, in_tower((block,9),(block,1)), false, 20).
holds(2, in_tower((block,9),(block,2)), false, 20).
holds(2, in_tower((block,9),(block,3)), false, 20).
holds(2, in_tower((block,9),(block,4)), false, 20).
holds(2, in_tower((block,9),(block,5)), false, 20).
holds(2, in_tower((block,9),(block,6)), false, 20).
holds(2, in_tower((block,9),(block,7)), false, 20).
holds(2, in_tower((block,9),(block,8)), false, 20).
holds(2, in_tower((block,9),(block,9)), false, 20).
holds(2, on((block,1)), puzzle_room_table, 20).
holds(2, on((block,2)), puzzle_room_table, 20).
holds(2, on((block,3)), (block,1), 20).
holds(2, on((block,4)), nothing, 20).
holds(2, on((block,5)), nothing, 20).
holds(2, on((block,6)), nothing, 20).
holds(2, on((block,7)), puzzle_room_table, 20).
holds(2, on((block,8)), nothing, 20).
holds(2, on((block,9)), (block,7), 20).
holds(2, tower_base((block,1),puzzle_room_table), true, 20).
holds(2, tower_base((block,2),puzzle_room_table), true, 20).
holds(2, tower_base((block,3),puzzle_room_table), false, 20).
holds(2, tower_base((block,4),puzzle_room_table), false, 20).
holds(2, tower_base((block,5),puzzle_room_table), false, 20).
holds(2, tower_base((block,6),puzzle_room_table), false, 20).
holds(2, tower_base((block,7),puzzle_room_table), true, 20).
holds(2, tower_base((block,8),puzzle_room_table), false, 20).
holds(2, tower_base((block,9),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 20).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 20).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 20).
holds(3, complete_tower(blue,puzzle_room_table), false, 20).
holds(3, complete_tower(red,puzzle_room_table), false, 20).
holds(3, complete_tower(yellow,puzzle_room_table), false, 20).
holds(3, grasping(manipulator_arm_1), nothing, 20).
holds(3, grasping(manipulator_arm_2), (block,6), 20).
holds(3, in((block,1)), puzzle_room, 20).
holds(3, in((block,2)), puzzle_room, 20).
holds(3, in((block,3)), puzzle_room, 20).
holds(3, in((block,4)), store_room, 20).
holds(3, in((block,5)), hallway, 20).
holds(3, in((block,6)), puzzle_room, 20).
holds(3, in((block,7)), puzzle_room, 20).
holds(3, in((block,8)), store_room, 20).
holds(3, in((block,9)), puzzle_room, 20).
holds(3, in(manipulator_arm_1), puzzle_room, 20).
holds(3, in(manipulator_arm_2), puzzle_room, 20).
holds(3, in(puzzle_room_table), puzzle_room, 20).
holds(3, in(talos), puzzle_room, 20).
holds(3, in_tower((block,1),(block,1)), true, 20).
holds(3, in_tower((block,1),(block,2)), false, 20).
holds(3, in_tower((block,1),(block,3)), true, 20).
holds(3, in_tower((block,1),(block,4)), false, 20).
holds(3, in_tower((block,1),(block,5)), false, 20).
holds(3, in_tower((block,1),(block,6)), false, 20).
holds(3, in_tower((block,1),(block,7)), false, 20).
holds(3, in_tower((block,1),(block,8)), false, 20).
holds(3, in_tower((block,1),(block,9)), false, 20).
holds(3, in_tower((block,2),(block,1)), false, 20).
holds(3, in_tower((block,2),(block,2)), true, 20).
holds(3, in_tower((block,2),(block,3)), false, 20).
holds(3, in_tower((block,2),(block,4)), false, 20).
holds(3, in_tower((block,2),(block,5)), false, 20).
holds(3, in_tower((block,2),(block,6)), false, 20).
holds(3, in_tower((block,2),(block,7)), false, 20).
holds(3, in_tower((block,2),(block,8)), false, 20).
holds(3, in_tower((block,2),(block,9)), false, 20).
holds(3, in_tower((block,3),(block,1)), false, 20).
holds(3, in_tower((block,3),(block,2)), false, 20).
holds(3, in_tower((block,3),(block,3)), false, 20).
holds(3, in_tower((block,3),(block,4)), false, 20).
holds(3, in_tower((block,3),(block,5)), false, 20).
holds(3, in_tower((block,3),(block,6)), false, 20).
holds(3, in_tower((block,3),(block,7)), false, 20).
holds(3, in_tower((block,3),(block,8)), false, 20).
holds(3, in_tower((block,3),(block,9)), false, 20).
holds(3, in_tower((block,4),(block,1)), false, 20).
holds(3, in_tower((block,4),(block,2)), false, 20).
holds(3, in_tower((block,4),(block,3)), false, 20).
holds(3, in_tower((block,4),(block,4)), false, 20).
holds(3, in_tower((block,4),(block,5)), false, 20).
holds(3, in_tower((block,4),(block,6)), false, 20).
holds(3, in_tower((block,4),(block,7)), false, 20).
holds(3, in_tower((block,4),(block,8)), false, 20).
holds(3, in_tower((block,4),(block,9)), false, 20).
holds(3, in_tower((block,5),(block,1)), false, 20).
holds(3, in_tower((block,5),(block,2)), false, 20).
holds(3, in_tower((block,5),(block,3)), false, 20).
holds(3, in_tower((block,5),(block,4)), false, 20).
holds(3, in_tower((block,5),(block,5)), false, 20).
holds(3, in_tower((block,5),(block,6)), false, 20).
holds(3, in_tower((block,5),(block,7)), false, 20).
holds(3, in_tower((block,5),(block,8)), false, 20).
holds(3, in_tower((block,5),(block,9)), false, 20).
holds(3, in_tower((block,6),(block,1)), false, 20).
holds(3, in_tower((block,6),(block,2)), false, 20).
holds(3, in_tower((block,6),(block,3)), false, 20).
holds(3, in_tower((block,6),(block,4)), false, 20).
holds(3, in_tower((block,6),(block,5)), false, 20).
holds(3, in_tower((block,6),(block,6)), false, 20).
holds(3, in_tower((block,6),(block,7)), false, 20).
holds(3, in_tower((block,6),(block,8)), false, 20).
holds(3, in_tower((block,6),(block,9)), false, 20).
holds(3, in_tower((block,7),(block,1)), false, 20).
holds(3, in_tower((block,7),(block,2)), false, 20).
holds(3, in_tower((block,7),(block,3)), false, 20).
holds(3, in_tower((block,7),(block,4)), false, 20).
holds(3, in_tower((block,7),(block,5)), false, 20).
holds(3, in_tower((block,7),(block,6)), false, 20).
holds(3, in_tower((block,7),(block,7)), true, 20).
holds(3, in_tower((block,7),(block,8)), false, 20).
holds(3, in_tower((block,7),(block,9)), true, 20).
holds(3, in_tower((block,8),(block,1)), false, 20).
holds(3, in_tower((block,8),(block,2)), false, 20).
holds(3, in_tower((block,8),(block,3)), false, 20).
holds(3, in_tower((block,8),(block,4)), false, 20).
holds(3, in_tower((block,8),(block,5)), false, 20).
holds(3, in_tower((block,8),(block,6)), false, 20).
holds(3, in_tower((block,8),(block,7)), false, 20).
holds(3, in_tower((block,8),(block,8)), false, 20).
holds(3, in_tower((block,8),(block,9)), false, 20).
holds(3, in_tower((block,9),(block,1)), false, 20).
holds(3, in_tower((block,9),(block,2)), false, 20).
holds(3, in_tower((block,9),(block,3)), false, 20).
holds(3, in_tower((block,9),(block,4)), false, 20).
holds(3, in_tower((block,9),(block,5)), false, 20).
holds(3, in_tower((block,9),(block,6)), false, 20).
holds(3, in_tower((block,9),(block,7)), false, 20).
holds(3, in_tower((block,9),(block,8)), false, 20).
holds(3, in_tower((block,9),(block,9)), false, 20).
holds(3, on((block,1)), puzzle_room_table, 20).
holds(3, on((block,2)), puzzle_room_table, 20).
holds(3, on((block,3)), (block,1), 20).
holds(3, on((block,4)), nothing, 20).
holds(3, on((block,5)), nothing, 20).
holds(3, on((block,6)), nothing, 20).
holds(3, on((block,7)), puzzle_room_table, 20).
holds(3, on((block,8)), nothing, 20).
holds(3, on((block,9)), (block,7), 20).
holds(3, tower_base((block,1),puzzle_room_table), true, 20).
holds(3, tower_base((block,2),puzzle_room_table), true, 20).
holds(3, tower_base((block,3),puzzle_room_table), false, 20).
holds(3, tower_base((block,4),puzzle_room_table), false, 20).
holds(3, tower_base((block,5),puzzle_room_table), false, 20).
holds(3, tower_base((block,6),puzzle_room_table), false, 20).
holds(3, tower_base((block,7),puzzle_room_table), true, 20).
holds(3, tower_base((block,8),puzzle_room_table), false, 20).
holds(3, tower_base((block,9),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 20).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 20).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 20).

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=26']

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 12})

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 6).
sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 7).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 8).
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 8).
sub_goal(3, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 9).
sub_goal(3, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 9).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 10).
sub_goal(3, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 10).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), (block,9), 11).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 11).
sub_goal(3, talos, put(manipulator_arm_2,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 12).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 12).

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=26']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B54833F670>]
	incrementor = SolveIncrementor(step_start=20, step_increase=1, step_increase_initial=7, step_end_min=27, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 20), range_=None), IncPart(name='plan_module', args=('#inc', 20, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 20, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 20, 6, 12, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1250 rules

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.008232799999994711s

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039290s.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007290s with result Satisfiable.

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54E7668B0>

[20-01-2022_16-21-42] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 2)
	('start_step', 20)
	('last_sgoals', 12)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 6)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54E7668B0>)

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 20). %* None *%
#program plan_module(#inc, 20, true, false). %* None *%
#program optimisation_module(#inc, 20, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 20, 6, 12, sequential, false). %* None *%

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     19 : Current =     26
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(20), Number(20)]), ('plan_module', [Number(20), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(21), Number(20)]), ('plan_module', [Number(21), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(22), Number(20)]), ('plan_module', [Number(22), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(23), Number(20)]), ('plan_module', [Number(23), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(24), Number(20)]), ('plan_module', [Number(24), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(25), Number(20)]), ('plan_module', [Number(25), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(20)]), ('plan_module', [Number(26), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.934201s.

[20-01-2022_16-21-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.592483s with result Satisfiable.

[20-01-2022_16-21-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.52668409999999, Incremental time limit = None
Running cumulative time = 2.52668409999999, Cumulative time limit = 1800
Used memory = (RSS = 273.804688Mb, VMS = 268.406250Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.934201s, Solving = 0.592483s, Total = 2.526684s, Memory = (RSS = 273.804688Mb, VMS = 268.406250Mb), Step range = [20-26]), Calls = 1
Final Model :: Total atoms = 9820, Cost = (6, 0, -5), Optimality proven = False, Number = 6, Thread ID = 1, Model type = ModelType.StableModel

[20-01-2022_16-21-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(20)]), ('plan_module', [Number(27), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.305162s.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020281s with result Unsatisfiable.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3254431000000011, Incremental time limit = None
Running cumulative time = 2.852127199999991, Cumulative time limit = 1800
Used memory = (RSS = 279.328125Mb, VMS = 274.800781Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(20)]), ('plan_module', [Number(28), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.302571s.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021496s with result Unsatisfiable.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3240671000000077, Incremental time limit = None
Running cumulative time = 3.176194299999999, Cumulative time limit = 1800
Used memory = (RSS = 283.027344Mb, VMS = 275.820312Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(20)]), ('plan_module', [Number(29), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.304075s.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031685s with result Unsatisfiable.

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33575960000000293, Incremental time limit = None
Running cumulative time = 3.5119539000000017, Cumulative time limit = 1800
Used memory = (RSS = 291.609375Mb, VMS = 292.101562Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(20)]), ('plan_module', [Number(30), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.358216s.

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041733s with result Unsatisfiable.

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3999492000000018, Incremental time limit = None
Running cumulative time = 3.9119031000000035, Cumulative time limit = 1800
Used memory = (RSS = 296.394531Mb, VMS = 294.285156Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(20)]), ('plan_module', [Number(31), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.399371s.

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049912s with result Unsatisfiable.

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.44928249999999537, Incremental time limit = None
Running cumulative time = 4.361185599999999, Cumulative time limit = 1800
Used memory = (RSS = 300.972656Mb, VMS = 297.128906Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(20)]), ('plan_module', [Number(32), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.379009s.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075208s with result Unsatisfiable.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4542175999999998, Incremental time limit = None
Running cumulative time = 4.815403199999999, Cumulative time limit = 1800
Used memory = (RSS = 308.007812Mb, VMS = 302.242188Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =     27 : Maximum =    200

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(20)]), ('plan_module', [Number(33), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(20), Number(6), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.325545s.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.197818s with result Satisfiable.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5233637000000044, Incremental time limit = None
Running cumulative time = 5.338766900000003, Cumulative time limit = 1800
Used memory = (RSS = 322.816406Mb, VMS = 314.726562Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.308150s, Solving = 1.030617s, Total = 5.338767s, Memory = (RSS = 322.816406Mb, VMS = 314.726562Mb), Step range = [20-33]), Calls = 8
Final Model :: Total atoms = 14366, Cost = (19, 0, -5), Optimality proven = False, Number = 4, Thread ID = 7, Model type = ModelType.StableModel

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.934201s, Solving = 0.592483s, Total = 2.526684s, Memory = (RSS = 273.804688Mb, VMS = 268.406250Mb), Step range = [20-26]
2 : Statistics :: Grounding = 0.305162s, Solving = 0.020281s, Total = 0.325443s, Memory = (RSS = 279.328125Mb, VMS = 274.800781Mb), Step range = [27-27]
3 : Statistics :: Grounding = 0.302571s, Solving = 0.021496s, Total = 0.324067s, Memory = (RSS = 283.027344Mb, VMS = 275.820312Mb), Step range = [28-28]
4 : Statistics :: Grounding = 0.304075s, Solving = 0.031685s, Total = 0.335760s, Memory = (RSS = 291.609375Mb, VMS = 292.101562Mb), Step range = [29-29]
5 : Statistics :: Grounding = 0.358216s, Solving = 0.041733s, Total = 0.399949s, Memory = (RSS = 296.394531Mb, VMS = 294.285156Mb), Step range = [30-30]
6 : Statistics :: Grounding = 0.399371s, Solving = 0.049912s, Total = 0.449282s, Memory = (RSS = 300.972656Mb, VMS = 297.128906Mb), Step range = [31-31]
7 : Statistics :: Grounding = 0.379009s, Solving = 0.075208s, Total = 0.454218s, Memory = (RSS = 308.007812Mb, VMS = 302.242188Mb), Step range = [32-32]
8 : Statistics :: Grounding = 0.325545s, Solving = 0.197818s, Total = 0.523364s, Memory = (RSS = 322.816406Mb, VMS = 314.726562Mb), Step range = [33-33]

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.338767s due to: Stop condition reached.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-48] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 12, Last requested goal index = 12, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-48] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.308150s, Solving = 1.030617s, Total = 5.338767s, Memory = (RSS = 322.816406Mb, VMS = 314.726562Mb), Step range = [20-33]), Calls = 8
Model :: Total atoms = 14366, Cost = (19, 0, -5), Optimality proven = False, Number = 4, Thread ID = 7, Model type = ModelType.StableModel

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 13 :: Actions = 19                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
        talos : grasp(manipulator_arm_2,(block,8))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 3] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 3] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 3] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,4))
        talos : release(manipulator_arm_2,(block,8))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 4] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 4] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 12:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 13:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 22:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 25:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 26:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 28:
    Current Sub-goals:
        [Index = 7] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : release(manipulator_arm_2,(block,6))
Step 29:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 8] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 8] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 30:
    Current Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 9] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 9] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,5))
Step 31:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,3))
Step 32:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 33:
    Current Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,2))

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=20, total_plan_length=33, step_range=range(20, 34)

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 33, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 32, Tota actions = 39, Produced sub-goal stages = 0

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  13, AC =  19, CF = 0.7, GT =  10.13s, ST =   1.62s, OT = 0.00s, TT =  11.75s, EF = (LE = 1.9, AC = 1.6), ED = (LE = 2.3, AC = 2.2), EB = (LE = 1.2, AC = 1.1)

[20-01-2022_16-21-48] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=13, start_step=20, blend=Blend(left=0, right=0)

[20-01-2022_16-21-48] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=6, large_group_size=7

[20-01-2022_16-21-48] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=26, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 13, Sub-goal Stage Range = [21-33]
Division points [total=1] : [(Index = 26, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-48] INFO :: ASH Planner Main #1 >> Monolevel problem 3 at level 2 solved.

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 13, Sub-goal Stage Range = [21-33]
Division points [total=1] : [(Index = 26, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [21-26]

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [21-26], problem number = 5, increment number = 5

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 21)
	('last_sgoals', 26)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-48] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [21-26] : Concurrency enabled : Minimum search length bound enabled with value 37

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 21
last_sgoals = 26
start_step = 32
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 37

[20-01-2022_16-21-48] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-21-48] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-48] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 32 as problem start state.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 32})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,6))', 'S': 32})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 32})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 32})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 32})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 32})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 32})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 32})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 32})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 32})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,6)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(hallway,2)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 32})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 32})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 32})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 32})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 32})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 32})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 32})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 32})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'hallway', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 32})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 32})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 32})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 32})

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 32).
holds(1, complete_tower(red,puzzle_room_table), false, 32).
holds(1, complete_tower(yellow,puzzle_room_table), false, 32).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 32).
holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 32).
holds(1, configuration(manipulator_limb_1), retracted, 32).
holds(1, configuration(manipulator_limb_2), retracted, 32).
holds(1, configuration(puzzle_room_door), open, 32).
holds(1, configuration(starting_room_door), closed, 32).
holds(1, configuration(store_room_door), open, 32).
holds(1, grasping(manipulator_arm_1), nothing, 32).
holds(1, grasping(manipulator_arm_2), (block,6), 32).
holds(1, grasping(manipulator_end_1), nothing, 32).
holds(1, grasping(manipulator_end_2), (block,6), 32).
holds(1, in((block,1)), (puzzle_room,1), 32).
holds(1, in((block,2)), (puzzle_room,1), 32).
holds(1, in((block,3)), (puzzle_room,1), 32).
holds(1, in((block,4)), (store_room,0), 32).
holds(1, in((block,5)), (hallway,2), 32).
holds(1, in((block,6)), (puzzle_room,0), 32).
holds(1, in((block,7)), (puzzle_room,1), 32).
holds(1, in((block,8)), (store_room,0), 32).
holds(1, in((block,9)), (puzzle_room,1), 32).
holds(1, in(manipulator_arm_1), (puzzle_room,0), 32).
holds(1, in(manipulator_arm_2), (puzzle_room,0), 32).
holds(1, in(manipulator_end_1), (puzzle_room,0), 32).
holds(1, in(manipulator_end_2), (puzzle_room,0), 32).
holds(1, in(manipulator_limb_1), (puzzle_room,0), 32).
holds(1, in(manipulator_limb_2), (puzzle_room,0), 32).
holds(1, in(puzzle_room_table), (puzzle_room,1), 32).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 32).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32).
holds(1, in(talos), (puzzle_room,0), 32).
holds(1, in_tower((block,1),(block,1)), true, 32).
holds(1, in_tower((block,1),(block,2)), false, 32).
holds(1, in_tower((block,1),(block,3)), true, 32).
holds(1, in_tower((block,1),(block,4)), false, 32).
holds(1, in_tower((block,1),(block,5)), false, 32).
holds(1, in_tower((block,1),(block,6)), false, 32).
holds(1, in_tower((block,1),(block,7)), false, 32).
holds(1, in_tower((block,1),(block,8)), false, 32).
holds(1, in_tower((block,1),(block,9)), false, 32).
holds(1, in_tower((block,2),(block,1)), false, 32).
holds(1, in_tower((block,2),(block,2)), true, 32).
holds(1, in_tower((block,2),(block,3)), false, 32).
holds(1, in_tower((block,2),(block,4)), false, 32).
holds(1, in_tower((block,2),(block,5)), false, 32).
holds(1, in_tower((block,2),(block,6)), false, 32).
holds(1, in_tower((block,2),(block,7)), false, 32).
holds(1, in_tower((block,2),(block,8)), false, 32).
holds(1, in_tower((block,2),(block,9)), false, 32).
holds(1, in_tower((block,3),(block,1)), false, 32).
holds(1, in_tower((block,3),(block,2)), false, 32).
holds(1, in_tower((block,3),(block,3)), false, 32).
holds(1, in_tower((block,3),(block,4)), false, 32).
holds(1, in_tower((block,3),(block,5)), false, 32).
holds(1, in_tower((block,3),(block,6)), false, 32).
holds(1, in_tower((block,3),(block,7)), false, 32).
holds(1, in_tower((block,3),(block,8)), false, 32).
holds(1, in_tower((block,3),(block,9)), false, 32).
holds(1, in_tower((block,4),(block,1)), false, 32).
holds(1, in_tower((block,4),(block,2)), false, 32).
holds(1, in_tower((block,4),(block,3)), false, 32).
holds(1, in_tower((block,4),(block,4)), false, 32).
holds(1, in_tower((block,4),(block,5)), false, 32).
holds(1, in_tower((block,4),(block,6)), false, 32).
holds(1, in_tower((block,4),(block,7)), false, 32).
holds(1, in_tower((block,4),(block,8)), false, 32).
holds(1, in_tower((block,4),(block,9)), false, 32).
holds(1, in_tower((block,5),(block,1)), false, 32).
holds(1, in_tower((block,5),(block,2)), false, 32).
holds(1, in_tower((block,5),(block,3)), false, 32).
holds(1, in_tower((block,5),(block,4)), false, 32).
holds(1, in_tower((block,5),(block,5)), false, 32).
holds(1, in_tower((block,5),(block,6)), false, 32).
holds(1, in_tower((block,5),(block,7)), false, 32).
holds(1, in_tower((block,5),(block,8)), false, 32).
holds(1, in_tower((block,5),(block,9)), false, 32).
holds(1, in_tower((block,6),(block,1)), false, 32).
holds(1, in_tower((block,6),(block,2)), false, 32).
holds(1, in_tower((block,6),(block,3)), false, 32).
holds(1, in_tower((block,6),(block,4)), false, 32).
holds(1, in_tower((block,6),(block,5)), false, 32).
holds(1, in_tower((block,6),(block,6)), false, 32).
holds(1, in_tower((block,6),(block,7)), false, 32).
holds(1, in_tower((block,6),(block,8)), false, 32).
holds(1, in_tower((block,6),(block,9)), false, 32).
holds(1, in_tower((block,7),(block,1)), false, 32).
holds(1, in_tower((block,7),(block,2)), false, 32).
holds(1, in_tower((block,7),(block,3)), false, 32).
holds(1, in_tower((block,7),(block,4)), false, 32).
holds(1, in_tower((block,7),(block,5)), false, 32).
holds(1, in_tower((block,7),(block,6)), false, 32).
holds(1, in_tower((block,7),(block,7)), true, 32).
holds(1, in_tower((block,7),(block,8)), false, 32).
holds(1, in_tower((block,7),(block,9)), true, 32).
holds(1, in_tower((block,8),(block,1)), false, 32).
holds(1, in_tower((block,8),(block,2)), false, 32).
holds(1, in_tower((block,8),(block,3)), false, 32).
holds(1, in_tower((block,8),(block,4)), false, 32).
holds(1, in_tower((block,8),(block,5)), false, 32).
holds(1, in_tower((block,8),(block,6)), false, 32).
holds(1, in_tower((block,8),(block,7)), false, 32).
holds(1, in_tower((block,8),(block,8)), false, 32).
holds(1, in_tower((block,8),(block,9)), false, 32).
holds(1, in_tower((block,9),(block,1)), false, 32).
holds(1, in_tower((block,9),(block,2)), false, 32).
holds(1, in_tower((block,9),(block,3)), false, 32).
holds(1, in_tower((block,9),(block,4)), false, 32).
holds(1, in_tower((block,9),(block,5)), false, 32).
holds(1, in_tower((block,9),(block,6)), false, 32).
holds(1, in_tower((block,9),(block,7)), false, 32).
holds(1, in_tower((block,9),(block,8)), false, 32).
holds(1, in_tower((block,9),(block,9)), false, 32).
holds(1, on((block,1)), puzzle_room_table_left, 32).
holds(1, on((block,2)), puzzle_room_table_right, 32).
holds(1, on((block,3)), (block,1), 32).
holds(1, on((block,4)), nothing, 32).
holds(1, on((block,5)), nothing, 32).
holds(1, on((block,6)), nothing, 32).
holds(1, on((block,7)), puzzle_room_table_middle, 32).
holds(1, on((block,8)), nothing, 32).
holds(1, on((block,9)), (block,7), 32).
holds(1, tower_base((block,1),puzzle_room_table), true, 32).
holds(1, tower_base((block,2),puzzle_room_table), true, 32).
holds(1, tower_base((block,3),puzzle_room_table), false, 32).
holds(1, tower_base((block,4),puzzle_room_table), false, 32).
holds(1, tower_base((block,5),puzzle_room_table), false, 32).
holds(1, tower_base((block,6),puzzle_room_table), false, 32).
holds(1, tower_base((block,7),puzzle_room_table), true, 32).
holds(1, tower_base((block,8),puzzle_room_table), false, 32).
holds(1, tower_base((block,9),puzzle_room_table), false, 32).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 32).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 32).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 32).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 32).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 32).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 32).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 32).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 32).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 32).
holds(2, complete_tower(blue,puzzle_room_table), false, 32).
holds(2, complete_tower(red,puzzle_room_table), false, 32).
holds(2, complete_tower(yellow,puzzle_room_table), false, 32).
holds(2, configuration(manipulator_arm_1), retracted, 32).
holds(2, configuration(manipulator_arm_2), retracted, 32).
holds(2, configuration(puzzle_room_door), open, 32).
holds(2, configuration(starting_room_door), closed, 32).
holds(2, configuration(store_room_door), open, 32).
holds(2, grasping(manipulator_arm_1), nothing, 32).
holds(2, grasping(manipulator_arm_2), (block,6), 32).
holds(2, in((block,1)), puzzle_room, 32).
holds(2, in((block,2)), puzzle_room, 32).
holds(2, in((block,3)), puzzle_room, 32).
holds(2, in((block,4)), store_room, 32).
holds(2, in((block,5)), hallway, 32).
holds(2, in((block,6)), puzzle_room, 32).
holds(2, in((block,7)), puzzle_room, 32).
holds(2, in((block,8)), store_room, 32).
holds(2, in((block,9)), puzzle_room, 32).
holds(2, in(manipulator_arm_1), puzzle_room, 32).
holds(2, in(manipulator_arm_2), puzzle_room, 32).
holds(2, in(puzzle_room_table), puzzle_room, 32).
holds(2, in(talos), puzzle_room, 32).
holds(2, in_tower((block,1),(block,1)), true, 32).
holds(2, in_tower((block,1),(block,2)), false, 32).
holds(2, in_tower((block,1),(block,3)), true, 32).
holds(2, in_tower((block,1),(block,4)), false, 32).
holds(2, in_tower((block,1),(block,5)), false, 32).
holds(2, in_tower((block,1),(block,6)), false, 32).
holds(2, in_tower((block,1),(block,7)), false, 32).
holds(2, in_tower((block,1),(block,8)), false, 32).
holds(2, in_tower((block,1),(block,9)), false, 32).
holds(2, in_tower((block,2),(block,1)), false, 32).
holds(2, in_tower((block,2),(block,2)), true, 32).
holds(2, in_tower((block,2),(block,3)), false, 32).
holds(2, in_tower((block,2),(block,4)), false, 32).
holds(2, in_tower((block,2),(block,5)), false, 32).
holds(2, in_tower((block,2),(block,6)), false, 32).
holds(2, in_tower((block,2),(block,7)), false, 32).
holds(2, in_tower((block,2),(block,8)), false, 32).
holds(2, in_tower((block,2),(block,9)), false, 32).
holds(2, in_tower((block,3),(block,1)), false, 32).
holds(2, in_tower((block,3),(block,2)), false, 32).
holds(2, in_tower((block,3),(block,3)), false, 32).
holds(2, in_tower((block,3),(block,4)), false, 32).
holds(2, in_tower((block,3),(block,5)), false, 32).
holds(2, in_tower((block,3),(block,6)), false, 32).
holds(2, in_tower((block,3),(block,7)), false, 32).
holds(2, in_tower((block,3),(block,8)), false, 32).
holds(2, in_tower((block,3),(block,9)), false, 32).
holds(2, in_tower((block,4),(block,1)), false, 32).
holds(2, in_tower((block,4),(block,2)), false, 32).
holds(2, in_tower((block,4),(block,3)), false, 32).
holds(2, in_tower((block,4),(block,4)), false, 32).
holds(2, in_tower((block,4),(block,5)), false, 32).
holds(2, in_tower((block,4),(block,6)), false, 32).
holds(2, in_tower((block,4),(block,7)), false, 32).
holds(2, in_tower((block,4),(block,8)), false, 32).
holds(2, in_tower((block,4),(block,9)), false, 32).
holds(2, in_tower((block,5),(block,1)), false, 32).
holds(2, in_tower((block,5),(block,2)), false, 32).
holds(2, in_tower((block,5),(block,3)), false, 32).
holds(2, in_tower((block,5),(block,4)), false, 32).
holds(2, in_tower((block,5),(block,5)), false, 32).
holds(2, in_tower((block,5),(block,6)), false, 32).
holds(2, in_tower((block,5),(block,7)), false, 32).
holds(2, in_tower((block,5),(block,8)), false, 32).
holds(2, in_tower((block,5),(block,9)), false, 32).
holds(2, in_tower((block,6),(block,1)), false, 32).
holds(2, in_tower((block,6),(block,2)), false, 32).
holds(2, in_tower((block,6),(block,3)), false, 32).
holds(2, in_tower((block,6),(block,4)), false, 32).
holds(2, in_tower((block,6),(block,5)), false, 32).
holds(2, in_tower((block,6),(block,6)), false, 32).
holds(2, in_tower((block,6),(block,7)), false, 32).
holds(2, in_tower((block,6),(block,8)), false, 32).
holds(2, in_tower((block,6),(block,9)), false, 32).
holds(2, in_tower((block,7),(block,1)), false, 32).
holds(2, in_tower((block,7),(block,2)), false, 32).
holds(2, in_tower((block,7),(block,3)), false, 32).
holds(2, in_tower((block,7),(block,4)), false, 32).
holds(2, in_tower((block,7),(block,5)), false, 32).
holds(2, in_tower((block,7),(block,6)), false, 32).
holds(2, in_tower((block,7),(block,7)), true, 32).
holds(2, in_tower((block,7),(block,8)), false, 32).
holds(2, in_tower((block,7),(block,9)), true, 32).
holds(2, in_tower((block,8),(block,1)), false, 32).
holds(2, in_tower((block,8),(block,2)), false, 32).
holds(2, in_tower((block,8),(block,3)), false, 32).
holds(2, in_tower((block,8),(block,4)), false, 32).
holds(2, in_tower((block,8),(block,5)), false, 32).
holds(2, in_tower((block,8),(block,6)), false, 32).
holds(2, in_tower((block,8),(block,7)), false, 32).
holds(2, in_tower((block,8),(block,8)), false, 32).
holds(2, in_tower((block,8),(block,9)), false, 32).
holds(2, in_tower((block,9),(block,1)), false, 32).
holds(2, in_tower((block,9),(block,2)), false, 32).
holds(2, in_tower((block,9),(block,3)), false, 32).
holds(2, in_tower((block,9),(block,4)), false, 32).
holds(2, in_tower((block,9),(block,5)), false, 32).
holds(2, in_tower((block,9),(block,6)), false, 32).
holds(2, in_tower((block,9),(block,7)), false, 32).
holds(2, in_tower((block,9),(block,8)), false, 32).
holds(2, in_tower((block,9),(block,9)), false, 32).
holds(2, on((block,1)), puzzle_room_table, 32).
holds(2, on((block,2)), puzzle_room_table, 32).
holds(2, on((block,3)), (block,1), 32).
holds(2, on((block,4)), nothing, 32).
holds(2, on((block,5)), nothing, 32).
holds(2, on((block,6)), nothing, 32).
holds(2, on((block,7)), puzzle_room_table, 32).
holds(2, on((block,8)), nothing, 32).
holds(2, on((block,9)), (block,7), 32).
holds(2, tower_base((block,1),puzzle_room_table), true, 32).
holds(2, tower_base((block,2),puzzle_room_table), true, 32).
holds(2, tower_base((block,3),puzzle_room_table), false, 32).
holds(2, tower_base((block,4),puzzle_room_table), false, 32).
holds(2, tower_base((block,5),puzzle_room_table), false, 32).
holds(2, tower_base((block,6),puzzle_room_table), false, 32).
holds(2, tower_base((block,7),puzzle_room_table), true, 32).
holds(2, tower_base((block,8),puzzle_room_table), false, 32).
holds(2, tower_base((block,9),puzzle_room_table), false, 32).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 32).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 32).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 32).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 32).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 32).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 32).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 32).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 32).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 32).

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=37']

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 26})

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 21).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 22).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 23).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 24).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 25).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 26).

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=37']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B5493F48B0>]
	incrementor = SolveIncrementor(step_start=32, step_increase=1, step_increase_initial=6, step_end_min=38, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 32), range_=None), IncPart(name='plan_module', args=('#inc', 32, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 32, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 32, 21, 26, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1278 rules

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.010138800000000003s

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.072552s.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013244s with result Satisfiable.

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54E9859F0>

[20-01-2022_16-21-48] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 1)
	('start_step', 32)
	('last_sgoals', 26)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 21)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54E9859F0>)

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 32). %* None *%
#program plan_module(#inc, 32, true, false). %* None *%
#program optimisation_module(#inc, 32, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 32, 21, 26, sequential, false). %* None *%

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     31 : Current =     37
Incrementor step ends | Minimum  =     38 : Maximum =    200

[20-01-2022_16-21-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(32), Number(32)]), ('plan_module', [Number(32), Number(32), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(32), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(32), Number(21), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(32)]), ('plan_module', [Number(33), Number(32), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(32), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(32), Number(21), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(32)]), ('plan_module', [Number(34), Number(32), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(32), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(32), Number(21), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(32)]), ('plan_module', [Number(35), Number(32), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(32), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(32), Number(21), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(32)]), ('plan_module', [Number(36), Number(32), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(32), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(32), Number(21), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(32)]), ('plan_module', [Number(37), Number(32), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(32), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(32), Number(21), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.041066s.

[20-01-2022_16-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.255118s with result Satisfiable.

[20-01-2022_16-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.2961831, Incremental time limit = None
Running cumulative time = 4.2961831, Cumulative time limit = 1800
Used memory = (RSS = 281.300781Mb, VMS = 277.691406Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.041066s, Solving = 0.255118s, Total = 4.296183s, Memory = (RSS = 281.300781Mb, VMS = 277.691406Mb), Step range = [32-37]), Calls = 1
Final Model :: Total atoms = 10297, Cost = (5, 0, -3), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[20-01-2022_16-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     38 : Maximum =    200

[20-01-2022_16-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(32)]), ('plan_module', [Number(38), Number(32), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(32), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(32), Number(21), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.697391s.

[20-01-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039070s with result Unsatisfiable.

[20-01-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7364609000000044, Incremental time limit = None
Running cumulative time = 5.032644000000005, Cumulative time limit = 1800
Used memory = (RSS = 286.628906Mb, VMS = 283.582031Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     38 : Maximum =    200

[20-01-2022_16-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(32)]), ('plan_module', [Number(39), Number(32), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(32), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(32), Number(21), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.731763s.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.100015s with result Satisfiable.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8317781999999951, Incremental time limit = None
Running cumulative time = 5.8644222, Cumulative time limit = 1800
Used memory = (RSS = 291.937500Mb, VMS = 285.953125Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.470220s, Solving = 0.394202s, Total = 5.864422s, Memory = (RSS = 291.937500Mb, VMS = 285.953125Mb), Step range = [32-39]), Calls = 3
Final Model :: Total atoms = 11767, Cost = (7, 0, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 4.041066s, Solving = 0.255118s, Total = 4.296183s, Memory = (RSS = 281.300781Mb, VMS = 277.691406Mb), Step range = [32-37]
2 : Statistics :: Grounding = 0.697391s, Solving = 0.039070s, Total = 0.736461s, Memory = (RSS = 286.628906Mb, VMS = 283.582031Mb), Step range = [38-38]
3 : Statistics :: Grounding = 0.731763s, Solving = 0.100015s, Total = 0.831778s, Memory = (RSS = 291.937500Mb, VMS = 285.953125Mb), Step range = [39-39]

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.864422s due to: Stop condition reached.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-21-54] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 26, Last requested goal index = 26, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-21-54] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.470220s, Solving = 0.394202s, Total = 5.864422s, Memory = (RSS = 291.937500Mb, VMS = 285.953125Mb), Step range = [32-39]), Calls = 3
Model :: Total atoms = 11767, Cost = (7, 0, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
        talos : grasp(manipulator_end_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,4))
        talos : release(manipulator_end_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 17:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 18:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 20:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 21:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 22:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 24:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 25:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 26:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 28:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 29:
    Current Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 30:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 31:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 32:
    Current Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 21] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 21] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 36:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 37:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 38:
    Current Sub-goals:
        [Index = 25] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 25] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 39:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[20-01-2022_16-21-54] INFO :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[20-01-2022_16-21-54] INFO :: ASH Planner Main #1 >> Online planning increment 5 finished.

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 6 : Goals achieved = 6 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 20 : Goals achieved = 12 : Goals unachieved = 8 : Complete = False
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 33 : Goals achieved = 26 : Goals unachieved = 7 : Complete = False

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 13, Sub-goal Stage Range = [21-33]
Division points [total=1] : [(Index = 26, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [27-33]

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [27-33], problem number = 6, increment number = 6

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 27)
	('last_sgoals', 33)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-21-54] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [27-33] : Concurrency enabled : Minimum search length bound enabled with value 45

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 27
last_sgoals = 33
start_step = 39
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 45

[20-01-2022_16-21-54] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-21-54] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-21-54] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 39 as problem start state.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,5))', 'S': 39})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,6))', 'S': 39})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 39})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 39})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 39})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 39})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 39})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 39})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 39})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,5)', 'S': 39})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,6)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 39})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 39})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 39})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 39})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 39})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 39})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 39})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 39})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 39})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 39})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 39})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 39})

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 39).
holds(1, complete_tower(red,puzzle_room_table), false, 39).
holds(1, complete_tower(yellow,puzzle_room_table), false, 39).
holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 39).
holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 39).
holds(1, configuration(manipulator_limb_1), retracted, 39).
holds(1, configuration(manipulator_limb_2), extended, 39).
holds(1, configuration(puzzle_room_door), open, 39).
holds(1, configuration(starting_room_door), closed, 39).
holds(1, configuration(store_room_door), open, 39).
holds(1, grasping(manipulator_arm_1), (block,5), 39).
holds(1, grasping(manipulator_arm_2), (block,6), 39).
holds(1, grasping(manipulator_end_1), (block,5), 39).
holds(1, grasping(manipulator_end_2), (block,6), 39).
holds(1, in((block,1)), (puzzle_room,1), 39).
holds(1, in((block,2)), (puzzle_room,1), 39).
holds(1, in((block,3)), (puzzle_room,1), 39).
holds(1, in((block,4)), (store_room,0), 39).
holds(1, in((block,5)), (puzzle_room,0), 39).
holds(1, in((block,6)), (puzzle_room,0), 39).
holds(1, in((block,7)), (puzzle_room,1), 39).
holds(1, in((block,8)), (store_room,0), 39).
holds(1, in((block,9)), (puzzle_room,1), 39).
holds(1, in(manipulator_arm_1), (puzzle_room,0), 39).
holds(1, in(manipulator_arm_2), (puzzle_room,0), 39).
holds(1, in(manipulator_end_1), (puzzle_room,0), 39).
holds(1, in(manipulator_end_2), (puzzle_room,0), 39).
holds(1, in(manipulator_limb_1), (puzzle_room,0), 39).
holds(1, in(manipulator_limb_2), (puzzle_room,0), 39).
holds(1, in(puzzle_room_table), (puzzle_room,1), 39).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 39).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 39).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 39).
holds(1, in(talos), (puzzle_room,0), 39).
holds(1, in_tower((block,1),(block,1)), true, 39).
holds(1, in_tower((block,1),(block,2)), false, 39).
holds(1, in_tower((block,1),(block,3)), true, 39).
holds(1, in_tower((block,1),(block,4)), false, 39).
holds(1, in_tower((block,1),(block,5)), false, 39).
holds(1, in_tower((block,1),(block,6)), false, 39).
holds(1, in_tower((block,1),(block,7)), false, 39).
holds(1, in_tower((block,1),(block,8)), false, 39).
holds(1, in_tower((block,1),(block,9)), false, 39).
holds(1, in_tower((block,2),(block,1)), false, 39).
holds(1, in_tower((block,2),(block,2)), true, 39).
holds(1, in_tower((block,2),(block,3)), false, 39).
holds(1, in_tower((block,2),(block,4)), false, 39).
holds(1, in_tower((block,2),(block,5)), false, 39).
holds(1, in_tower((block,2),(block,6)), false, 39).
holds(1, in_tower((block,2),(block,7)), false, 39).
holds(1, in_tower((block,2),(block,8)), false, 39).
holds(1, in_tower((block,2),(block,9)), false, 39).
holds(1, in_tower((block,3),(block,1)), false, 39).
holds(1, in_tower((block,3),(block,2)), false, 39).
holds(1, in_tower((block,3),(block,3)), false, 39).
holds(1, in_tower((block,3),(block,4)), false, 39).
holds(1, in_tower((block,3),(block,5)), false, 39).
holds(1, in_tower((block,3),(block,6)), false, 39).
holds(1, in_tower((block,3),(block,7)), false, 39).
holds(1, in_tower((block,3),(block,8)), false, 39).
holds(1, in_tower((block,3),(block,9)), false, 39).
holds(1, in_tower((block,4),(block,1)), false, 39).
holds(1, in_tower((block,4),(block,2)), false, 39).
holds(1, in_tower((block,4),(block,3)), false, 39).
holds(1, in_tower((block,4),(block,4)), false, 39).
holds(1, in_tower((block,4),(block,5)), false, 39).
holds(1, in_tower((block,4),(block,6)), false, 39).
holds(1, in_tower((block,4),(block,7)), false, 39).
holds(1, in_tower((block,4),(block,8)), false, 39).
holds(1, in_tower((block,4),(block,9)), false, 39).
holds(1, in_tower((block,5),(block,1)), false, 39).
holds(1, in_tower((block,5),(block,2)), false, 39).
holds(1, in_tower((block,5),(block,3)), false, 39).
holds(1, in_tower((block,5),(block,4)), false, 39).
holds(1, in_tower((block,5),(block,5)), false, 39).
holds(1, in_tower((block,5),(block,6)), false, 39).
holds(1, in_tower((block,5),(block,7)), false, 39).
holds(1, in_tower((block,5),(block,8)), false, 39).
holds(1, in_tower((block,5),(block,9)), false, 39).
holds(1, in_tower((block,6),(block,1)), false, 39).
holds(1, in_tower((block,6),(block,2)), false, 39).
holds(1, in_tower((block,6),(block,3)), false, 39).
holds(1, in_tower((block,6),(block,4)), false, 39).
holds(1, in_tower((block,6),(block,5)), false, 39).
holds(1, in_tower((block,6),(block,6)), false, 39).
holds(1, in_tower((block,6),(block,7)), false, 39).
holds(1, in_tower((block,6),(block,8)), false, 39).
holds(1, in_tower((block,6),(block,9)), false, 39).
holds(1, in_tower((block,7),(block,1)), false, 39).
holds(1, in_tower((block,7),(block,2)), false, 39).
holds(1, in_tower((block,7),(block,3)), false, 39).
holds(1, in_tower((block,7),(block,4)), false, 39).
holds(1, in_tower((block,7),(block,5)), false, 39).
holds(1, in_tower((block,7),(block,6)), false, 39).
holds(1, in_tower((block,7),(block,7)), true, 39).
holds(1, in_tower((block,7),(block,8)), false, 39).
holds(1, in_tower((block,7),(block,9)), true, 39).
holds(1, in_tower((block,8),(block,1)), false, 39).
holds(1, in_tower((block,8),(block,2)), false, 39).
holds(1, in_tower((block,8),(block,3)), false, 39).
holds(1, in_tower((block,8),(block,4)), false, 39).
holds(1, in_tower((block,8),(block,5)), false, 39).
holds(1, in_tower((block,8),(block,6)), false, 39).
holds(1, in_tower((block,8),(block,7)), false, 39).
holds(1, in_tower((block,8),(block,8)), false, 39).
holds(1, in_tower((block,8),(block,9)), false, 39).
holds(1, in_tower((block,9),(block,1)), false, 39).
holds(1, in_tower((block,9),(block,2)), false, 39).
holds(1, in_tower((block,9),(block,3)), false, 39).
holds(1, in_tower((block,9),(block,4)), false, 39).
holds(1, in_tower((block,9),(block,5)), false, 39).
holds(1, in_tower((block,9),(block,6)), false, 39).
holds(1, in_tower((block,9),(block,7)), false, 39).
holds(1, in_tower((block,9),(block,8)), false, 39).
holds(1, in_tower((block,9),(block,9)), false, 39).
holds(1, on((block,1)), puzzle_room_table_left, 39).
holds(1, on((block,2)), puzzle_room_table_right, 39).
holds(1, on((block,3)), (block,1), 39).
holds(1, on((block,4)), nothing, 39).
holds(1, on((block,5)), nothing, 39).
holds(1, on((block,6)), nothing, 39).
holds(1, on((block,7)), puzzle_room_table_middle, 39).
holds(1, on((block,8)), nothing, 39).
holds(1, on((block,9)), (block,7), 39).
holds(1, tower_base((block,1),puzzle_room_table), true, 39).
holds(1, tower_base((block,2),puzzle_room_table), true, 39).
holds(1, tower_base((block,3),puzzle_room_table), false, 39).
holds(1, tower_base((block,4),puzzle_room_table), false, 39).
holds(1, tower_base((block,5),puzzle_room_table), false, 39).
holds(1, tower_base((block,6),puzzle_room_table), false, 39).
holds(1, tower_base((block,7),puzzle_room_table), true, 39).
holds(1, tower_base((block,8),puzzle_room_table), false, 39).
holds(1, tower_base((block,9),puzzle_room_table), false, 39).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 39).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 39).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 39).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 39).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 39).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 39).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 39).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 39).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 39).
holds(2, complete_tower(blue,puzzle_room_table), false, 39).
holds(2, complete_tower(red,puzzle_room_table), false, 39).
holds(2, complete_tower(yellow,puzzle_room_table), false, 39).
holds(2, configuration(manipulator_arm_1), retracted, 39).
holds(2, configuration(manipulator_arm_2), extended, 39).
holds(2, configuration(puzzle_room_door), open, 39).
holds(2, configuration(starting_room_door), closed, 39).
holds(2, configuration(store_room_door), open, 39).
holds(2, grasping(manipulator_arm_1), (block,5), 39).
holds(2, grasping(manipulator_arm_2), (block,6), 39).
holds(2, in((block,1)), puzzle_room, 39).
holds(2, in((block,2)), puzzle_room, 39).
holds(2, in((block,3)), puzzle_room, 39).
holds(2, in((block,4)), store_room, 39).
holds(2, in((block,5)), puzzle_room, 39).
holds(2, in((block,6)), puzzle_room, 39).
holds(2, in((block,7)), puzzle_room, 39).
holds(2, in((block,8)), store_room, 39).
holds(2, in((block,9)), puzzle_room, 39).
holds(2, in(manipulator_arm_1), puzzle_room, 39).
holds(2, in(manipulator_arm_2), puzzle_room, 39).
holds(2, in(puzzle_room_table), puzzle_room, 39).
holds(2, in(talos), puzzle_room, 39).
holds(2, in_tower((block,1),(block,1)), true, 39).
holds(2, in_tower((block,1),(block,2)), false, 39).
holds(2, in_tower((block,1),(block,3)), true, 39).
holds(2, in_tower((block,1),(block,4)), false, 39).
holds(2, in_tower((block,1),(block,5)), false, 39).
holds(2, in_tower((block,1),(block,6)), false, 39).
holds(2, in_tower((block,1),(block,7)), false, 39).
holds(2, in_tower((block,1),(block,8)), false, 39).
holds(2, in_tower((block,1),(block,9)), false, 39).
holds(2, in_tower((block,2),(block,1)), false, 39).
holds(2, in_tower((block,2),(block,2)), true, 39).
holds(2, in_tower((block,2),(block,3)), false, 39).
holds(2, in_tower((block,2),(block,4)), false, 39).
holds(2, in_tower((block,2),(block,5)), false, 39).
holds(2, in_tower((block,2),(block,6)), false, 39).
holds(2, in_tower((block,2),(block,7)), false, 39).
holds(2, in_tower((block,2),(block,8)), false, 39).
holds(2, in_tower((block,2),(block,9)), false, 39).
holds(2, in_tower((block,3),(block,1)), false, 39).
holds(2, in_tower((block,3),(block,2)), false, 39).
holds(2, in_tower((block,3),(block,3)), false, 39).
holds(2, in_tower((block,3),(block,4)), false, 39).
holds(2, in_tower((block,3),(block,5)), false, 39).
holds(2, in_tower((block,3),(block,6)), false, 39).
holds(2, in_tower((block,3),(block,7)), false, 39).
holds(2, in_tower((block,3),(block,8)), false, 39).
holds(2, in_tower((block,3),(block,9)), false, 39).
holds(2, in_tower((block,4),(block,1)), false, 39).
holds(2, in_tower((block,4),(block,2)), false, 39).
holds(2, in_tower((block,4),(block,3)), false, 39).
holds(2, in_tower((block,4),(block,4)), false, 39).
holds(2, in_tower((block,4),(block,5)), false, 39).
holds(2, in_tower((block,4),(block,6)), false, 39).
holds(2, in_tower((block,4),(block,7)), false, 39).
holds(2, in_tower((block,4),(block,8)), false, 39).
holds(2, in_tower((block,4),(block,9)), false, 39).
holds(2, in_tower((block,5),(block,1)), false, 39).
holds(2, in_tower((block,5),(block,2)), false, 39).
holds(2, in_tower((block,5),(block,3)), false, 39).
holds(2, in_tower((block,5),(block,4)), false, 39).
holds(2, in_tower((block,5),(block,5)), false, 39).
holds(2, in_tower((block,5),(block,6)), false, 39).
holds(2, in_tower((block,5),(block,7)), false, 39).
holds(2, in_tower((block,5),(block,8)), false, 39).
holds(2, in_tower((block,5),(block,9)), false, 39).
holds(2, in_tower((block,6),(block,1)), false, 39).
holds(2, in_tower((block,6),(block,2)), false, 39).
holds(2, in_tower((block,6),(block,3)), false, 39).
holds(2, in_tower((block,6),(block,4)), false, 39).
holds(2, in_tower((block,6),(block,5)), false, 39).
holds(2, in_tower((block,6),(block,6)), false, 39).
holds(2, in_tower((block,6),(block,7)), false, 39).
holds(2, in_tower((block,6),(block,8)), false, 39).
holds(2, in_tower((block,6),(block,9)), false, 39).
holds(2, in_tower((block,7),(block,1)), false, 39).
holds(2, in_tower((block,7),(block,2)), false, 39).
holds(2, in_tower((block,7),(block,3)), false, 39).
holds(2, in_tower((block,7),(block,4)), false, 39).
holds(2, in_tower((block,7),(block,5)), false, 39).
holds(2, in_tower((block,7),(block,6)), false, 39).
holds(2, in_tower((block,7),(block,7)), true, 39).
holds(2, in_tower((block,7),(block,8)), false, 39).
holds(2, in_tower((block,7),(block,9)), true, 39).
holds(2, in_tower((block,8),(block,1)), false, 39).
holds(2, in_tower((block,8),(block,2)), false, 39).
holds(2, in_tower((block,8),(block,3)), false, 39).
holds(2, in_tower((block,8),(block,4)), false, 39).
holds(2, in_tower((block,8),(block,5)), false, 39).
holds(2, in_tower((block,8),(block,6)), false, 39).
holds(2, in_tower((block,8),(block,7)), false, 39).
holds(2, in_tower((block,8),(block,8)), false, 39).
holds(2, in_tower((block,8),(block,9)), false, 39).
holds(2, in_tower((block,9),(block,1)), false, 39).
holds(2, in_tower((block,9),(block,2)), false, 39).
holds(2, in_tower((block,9),(block,3)), false, 39).
holds(2, in_tower((block,9),(block,4)), false, 39).
holds(2, in_tower((block,9),(block,5)), false, 39).
holds(2, in_tower((block,9),(block,6)), false, 39).
holds(2, in_tower((block,9),(block,7)), false, 39).
holds(2, in_tower((block,9),(block,8)), false, 39).
holds(2, in_tower((block,9),(block,9)), false, 39).
holds(2, on((block,1)), puzzle_room_table, 39).
holds(2, on((block,2)), puzzle_room_table, 39).
holds(2, on((block,3)), (block,1), 39).
holds(2, on((block,4)), nothing, 39).
holds(2, on((block,5)), nothing, 39).
holds(2, on((block,6)), nothing, 39).
holds(2, on((block,7)), puzzle_room_table, 39).
holds(2, on((block,8)), nothing, 39).
holds(2, on((block,9)), (block,7), 39).
holds(2, tower_base((block,1),puzzle_room_table), true, 39).
holds(2, tower_base((block,2),puzzle_room_table), true, 39).
holds(2, tower_base((block,3),puzzle_room_table), false, 39).
holds(2, tower_base((block,4),puzzle_room_table), false, 39).
holds(2, tower_base((block,5),puzzle_room_table), false, 39).
holds(2, tower_base((block,6),puzzle_room_table), false, 39).
holds(2, tower_base((block,7),puzzle_room_table), true, 39).
holds(2, tower_base((block,8),puzzle_room_table), false, 39).
holds(2, tower_base((block,9),puzzle_room_table), false, 39).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 39).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 39).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 39).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 39).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 39).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 39).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 39).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 39).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 39).

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=45']

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 33})

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 27).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 28).
sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 28).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 29).
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 29).
sub_goal(2, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 30).
sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 30).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 31).
sub_goal(2, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 31).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), (block,9), 32).
sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 32).
sub_goal(2, talos, put(manipulator_arm_2,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 33).
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 33).

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=45']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B5494038B0>]
	incrementor = SolveIncrementor(step_start=39, step_increase=1, step_increase_initial=7, step_end_min=46, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 39), range_=None), IncPart(name='plan_module', args=('#inc', 39, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 39, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 39, 27, 33, 'sequential', 'false'), range_=None)]

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1285 rules

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007167900000006s

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.041912s.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009363s with result Satisfiable.

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B548368450>

[20-01-2022_16-21-54] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 1)
	('start_step', 39)
	('last_sgoals', 33)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 27)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B548368450>)

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 39). %* None *%
#program plan_module(#inc, 39, true, false). %* None *%
#program optimisation_module(#inc, 39, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 39, 27, 33, sequential, false). %* None *%

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     38 : Current =     45
Incrementor step ends | Minimum  =     46 : Maximum =    200

[20-01-2022_16-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(39), Number(39)]), ('plan_module', [Number(39), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(40), Number(39)]), ('plan_module', [Number(40), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(41), Number(39)]), ('plan_module', [Number(41), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(42), Number(39)]), ('plan_module', [Number(42), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(39)]), ('plan_module', [Number(43), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(39)]), ('plan_module', [Number(44), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(39)]), ('plan_module', [Number(45), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.325408s.

[20-01-2022_16-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.372570s with result Satisfiable.

[20-01-2022_16-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.697977900000012, Incremental time limit = None
Running cumulative time = 4.697977900000012, Cumulative time limit = 1800
Used memory = (RSS = 294.054688Mb, VMS = 290.621094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.325408s, Solving = 0.372570s, Total = 4.697978s, Memory = (RSS = 294.054688Mb, VMS = 290.621094Mb), Step range = [39-45]), Calls = 1
Final Model :: Total atoms = 11041, Cost = (6, 0, -3), Optimality proven = False, Number = 6, Thread ID = 1, Model type = ModelType.StableModel

[20-01-2022_16-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     46 : Maximum =    200

[20-01-2022_16-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(39)]), ('plan_module', [Number(46), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.775215s.

[20-01-2022_16-22-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040401s with result Unsatisfiable.

[20-01-2022_16-22-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8156161000000139, Incremental time limit = None
Running cumulative time = 5.513594000000026, Cumulative time limit = 1800
Used memory = (RSS = 300.269531Mb, VMS = 298.125000Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     46 : Maximum =    200

[20-01-2022_16-22-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(39)]), ('plan_module', [Number(47), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.736807s.

[20-01-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029966s with result Unsatisfiable.

[20-01-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7667732000000029, Incremental time limit = None
Running cumulative time = 6.280367200000029, Cumulative time limit = 1800
Used memory = (RSS = 305.003906Mb, VMS = 300.128906Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     46 : Maximum =    200

[20-01-2022_16-22-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(39)]), ('plan_module', [Number(48), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.764953s.

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034251s with result Unsatisfiable.

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7992040999999972, Incremental time limit = None
Running cumulative time = 7.079571300000026, Cumulative time limit = 1800
Used memory = (RSS = 312.519531Mb, VMS = 304.996094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =     46 : Maximum =    200

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(39)]), ('plan_module', [Number(49), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.779971s.

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056017s with result Unsatisfiable.

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8359880999999945, Incremental time limit = None
Running cumulative time = 7.915559400000021, Cumulative time limit = 1800
Used memory = (RSS = 326.125000Mb, VMS = 327.257812Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     46 : Maximum =    200

[20-01-2022_16-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(39)]), ('plan_module', [Number(50), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.850364s.

[20-01-2022_16-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.077772s with result Unsatisfiable.

[20-01-2022_16-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9281359000000009, Incremental time limit = None
Running cumulative time = 8.843695300000022, Cumulative time limit = 1800
Used memory = (RSS = 335.445312Mb, VMS = 334.554688Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     46 : Maximum =    200

[20-01-2022_16-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(39)]), ('plan_module', [Number(51), Number(39), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(39), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(39), Number(27), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.891753s.

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.202502s with result Satisfiable.

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0942549999999898, Incremental time limit = None
Running cumulative time = 9.937950300000011, Cumulative time limit = 1800
Used memory = (RSS = 349.105469Mb, VMS = 346.699219Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.124471s, Solving = 0.813479s, Total = 9.937950s, Memory = (RSS = 349.105469Mb, VMS = 346.699219Mb), Step range = [39-51]), Calls = 7
Final Model :: Total atoms = 15455, Cost = (19, 0, -5), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 4.325408s, Solving = 0.372570s, Total = 4.697978s, Memory = (RSS = 294.054688Mb, VMS = 290.621094Mb), Step range = [39-45]
2 : Statistics :: Grounding = 0.775215s, Solving = 0.040401s, Total = 0.815616s, Memory = (RSS = 300.269531Mb, VMS = 298.125000Mb), Step range = [46-46]
3 : Statistics :: Grounding = 0.736807s, Solving = 0.029966s, Total = 0.766773s, Memory = (RSS = 305.003906Mb, VMS = 300.128906Mb), Step range = [47-47]
4 : Statistics :: Grounding = 0.764953s, Solving = 0.034251s, Total = 0.799204s, Memory = (RSS = 312.519531Mb, VMS = 304.996094Mb), Step range = [48-48]
5 : Statistics :: Grounding = 0.779971s, Solving = 0.056017s, Total = 0.835988s, Memory = (RSS = 326.125000Mb, VMS = 327.257812Mb), Step range = [49-49]
6 : Statistics :: Grounding = 0.850364s, Solving = 0.077772s, Total = 0.928136s, Memory = (RSS = 335.445312Mb, VMS = 334.554688Mb), Step range = [50-50]
7 : Statistics :: Grounding = 0.891753s, Solving = 0.202502s, Total = 1.094255s, Memory = (RSS = 349.105469Mb, VMS = 346.699219Mb), Step range = [51-51]

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 9.937950s due to: Stop condition reached.

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26, 40: 27, 41: 27, 42: 27, 43: 27, 44: 28, 45: 29, 46: 29, 47: 30, 48: 31, 49: 31, 50: 32, 51: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39, 27: 43, 28: 44, 29: 46, 30: 47, 31: 49, 32: 50, 33: 51}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-22-05] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 33, Last requested goal index = 33, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-22-05] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.124471s, Solving = 0.813479s, Total = 9.937950s, Memory = (RSS = 349.105469Mb, VMS = 346.699219Mb), Step range = [39-51]), Calls = 7
Model :: Total atoms = 15455, Cost = (19, 0, -5), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 12 :: Actions = 19                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
        talos : grasp(manipulator_end_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,4))
        talos : release(manipulator_end_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 17:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 18:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 20:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 21:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 22:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 24:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 25:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 26:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 28:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 29:
    Current Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 30:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 31:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 32:
    Current Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 21] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 21] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 36:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 37:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 38:
    Current Sub-goals:
        [Index = 25] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 25] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 39:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 42:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : release(manipulator_end_2,(block,6))
Step 45:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 46:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
        talos : release(manipulator_end_2,(block,3))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
        talos : grasp(manipulator_end_1,(block,2))
Step 50:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 51:
    Current Sub-goals:
        [Index = 33] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
        talos : release(manipulator_end_1,(block,2))

[20-01-2022_16-22-05] INFO :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[20-01-2022_16-22-05] INFO :: ASH Planner Main #1 >> Online planning increment 6 finished.

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 6 : Goals achieved = 6 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 20 : Goals achieved = 12 : Goals unachieved = 8 : Complete = False
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 33 : Goals achieved = 33 : Goals unachieved = 0 : Complete = False

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-2].

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 4 at level 2:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 15, Sub-goal Stage Range = [6-20]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [13-20]

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [13-20], problem number = 4, increment number = 7

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 13)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-22-05] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [13-20] : Concurrency enabled : Minimum search length bound enabled with value 40

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 13
last_sgoals = 20
start_step = 33
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 40

[20-01-2022_16-22-05] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[20-01-2022_16-22-05] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-22-05] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 33 as problem start state.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 33})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 33})

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 33).
holds(2, complete_tower(red,puzzle_room_table), false, 33).
holds(2, complete_tower(yellow,puzzle_room_table), false, 33).
holds(2, configuration(manipulator_arm_1), extended, 33).
holds(2, configuration(manipulator_arm_2), extended, 33).
holds(2, configuration(puzzle_room_door), open, 33).
holds(2, configuration(starting_room_door), closed, 33).
holds(2, configuration(store_room_door), open, 33).
holds(2, grasping(manipulator_arm_1), nothing, 33).
holds(2, grasping(manipulator_arm_2), (block,9), 33).
holds(2, in((block,1)), puzzle_room, 33).
holds(2, in((block,2)), puzzle_room, 33).
holds(2, in((block,3)), puzzle_room, 33).
holds(2, in((block,4)), store_room, 33).
holds(2, in((block,5)), puzzle_room, 33).
holds(2, in((block,6)), puzzle_room, 33).
holds(2, in((block,7)), puzzle_room, 33).
holds(2, in((block,8)), store_room, 33).
holds(2, in((block,9)), puzzle_room, 33).
holds(2, in(manipulator_arm_1), puzzle_room, 33).
holds(2, in(manipulator_arm_2), puzzle_room, 33).
holds(2, in(puzzle_room_table), puzzle_room, 33).
holds(2, in(talos), puzzle_room, 33).
holds(2, in_tower((block,1),(block,1)), true, 33).
holds(2, in_tower((block,1),(block,2)), false, 33).
holds(2, in_tower((block,1),(block,3)), false, 33).
holds(2, in_tower((block,1),(block,4)), false, 33).
holds(2, in_tower((block,1),(block,5)), false, 33).
holds(2, in_tower((block,1),(block,6)), false, 33).
holds(2, in_tower((block,1),(block,7)), false, 33).
holds(2, in_tower((block,1),(block,8)), false, 33).
holds(2, in_tower((block,1),(block,9)), false, 33).
holds(2, in_tower((block,2),(block,1)), false, 33).
holds(2, in_tower((block,2),(block,2)), false, 33).
holds(2, in_tower((block,2),(block,3)), false, 33).
holds(2, in_tower((block,2),(block,4)), false, 33).
holds(2, in_tower((block,2),(block,5)), false, 33).
holds(2, in_tower((block,2),(block,6)), false, 33).
holds(2, in_tower((block,2),(block,7)), false, 33).
holds(2, in_tower((block,2),(block,8)), false, 33).
holds(2, in_tower((block,2),(block,9)), false, 33).
holds(2, in_tower((block,3),(block,1)), false, 33).
holds(2, in_tower((block,3),(block,2)), true, 33).
holds(2, in_tower((block,3),(block,3)), true, 33).
holds(2, in_tower((block,3),(block,4)), false, 33).
holds(2, in_tower((block,3),(block,5)), false, 33).
holds(2, in_tower((block,3),(block,6)), false, 33).
holds(2, in_tower((block,3),(block,7)), false, 33).
holds(2, in_tower((block,3),(block,8)), false, 33).
holds(2, in_tower((block,3),(block,9)), false, 33).
holds(2, in_tower((block,4),(block,1)), false, 33).
holds(2, in_tower((block,4),(block,2)), false, 33).
holds(2, in_tower((block,4),(block,3)), false, 33).
holds(2, in_tower((block,4),(block,4)), false, 33).
holds(2, in_tower((block,4),(block,5)), false, 33).
holds(2, in_tower((block,4),(block,6)), false, 33).
holds(2, in_tower((block,4),(block,7)), false, 33).
holds(2, in_tower((block,4),(block,8)), false, 33).
holds(2, in_tower((block,4),(block,9)), false, 33).
holds(2, in_tower((block,5),(block,1)), false, 33).
holds(2, in_tower((block,5),(block,2)), false, 33).
holds(2, in_tower((block,5),(block,3)), false, 33).
holds(2, in_tower((block,5),(block,4)), false, 33).
holds(2, in_tower((block,5),(block,5)), false, 33).
holds(2, in_tower((block,5),(block,6)), false, 33).
holds(2, in_tower((block,5),(block,7)), false, 33).
holds(2, in_tower((block,5),(block,8)), false, 33).
holds(2, in_tower((block,5),(block,9)), false, 33).
holds(2, in_tower((block,6),(block,1)), false, 33).
holds(2, in_tower((block,6),(block,2)), false, 33).
holds(2, in_tower((block,6),(block,3)), false, 33).
holds(2, in_tower((block,6),(block,4)), false, 33).
holds(2, in_tower((block,6),(block,5)), true, 33).
holds(2, in_tower((block,6),(block,6)), true, 33).
holds(2, in_tower((block,6),(block,7)), false, 33).
holds(2, in_tower((block,6),(block,8)), false, 33).
holds(2, in_tower((block,6),(block,9)), false, 33).
holds(2, in_tower((block,7),(block,1)), false, 33).
holds(2, in_tower((block,7),(block,2)), false, 33).
holds(2, in_tower((block,7),(block,3)), false, 33).
holds(2, in_tower((block,7),(block,4)), false, 33).
holds(2, in_tower((block,7),(block,5)), false, 33).
holds(2, in_tower((block,7),(block,6)), false, 33).
holds(2, in_tower((block,7),(block,7)), true, 33).
holds(2, in_tower((block,7),(block,8)), false, 33).
holds(2, in_tower((block,7),(block,9)), false, 33).
holds(2, in_tower((block,8),(block,1)), false, 33).
holds(2, in_tower((block,8),(block,2)), false, 33).
holds(2, in_tower((block,8),(block,3)), false, 33).
holds(2, in_tower((block,8),(block,4)), false, 33).
holds(2, in_tower((block,8),(block,5)), false, 33).
holds(2, in_tower((block,8),(block,6)), false, 33).
holds(2, in_tower((block,8),(block,7)), false, 33).
holds(2, in_tower((block,8),(block,8)), false, 33).
holds(2, in_tower((block,8),(block,9)), false, 33).
holds(2, in_tower((block,9),(block,1)), false, 33).
holds(2, in_tower((block,9),(block,2)), false, 33).
holds(2, in_tower((block,9),(block,3)), false, 33).
holds(2, in_tower((block,9),(block,4)), false, 33).
holds(2, in_tower((block,9),(block,5)), false, 33).
holds(2, in_tower((block,9),(block,6)), false, 33).
holds(2, in_tower((block,9),(block,7)), false, 33).
holds(2, in_tower((block,9),(block,8)), false, 33).
holds(2, in_tower((block,9),(block,9)), true, 33).
holds(2, on((block,1)), puzzle_room_table, 33).
holds(2, on((block,2)), (block,3), 33).
holds(2, on((block,3)), puzzle_room_table, 33).
holds(2, on((block,4)), nothing, 33).
holds(2, on((block,5)), (block,6), 33).
holds(2, on((block,6)), puzzle_room_table, 33).
holds(2, on((block,7)), puzzle_room_table, 33).
holds(2, on((block,8)), nothing, 33).
holds(2, on((block,9)), puzzle_room_table, 33).
holds(2, tower_base((block,1),puzzle_room_table), true, 33).
holds(2, tower_base((block,2),puzzle_room_table), false, 33).
holds(2, tower_base((block,3),puzzle_room_table), true, 33).
holds(2, tower_base((block,4),puzzle_room_table), false, 33).
holds(2, tower_base((block,5),puzzle_room_table), false, 33).
holds(2, tower_base((block,6),puzzle_room_table), true, 33).
holds(2, tower_base((block,7),puzzle_room_table), true, 33).
holds(2, tower_base((block,8),puzzle_room_table), false, 33).
holds(2, tower_base((block,9),puzzle_room_table), true, 33).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 33).
holds(3, complete_tower(blue,puzzle_room_table), false, 33).
holds(3, complete_tower(red,puzzle_room_table), false, 33).
holds(3, complete_tower(yellow,puzzle_room_table), false, 33).
holds(3, grasping(manipulator_arm_1), nothing, 33).
holds(3, grasping(manipulator_arm_2), (block,9), 33).
holds(3, in((block,1)), puzzle_room, 33).
holds(3, in((block,2)), puzzle_room, 33).
holds(3, in((block,3)), puzzle_room, 33).
holds(3, in((block,4)), store_room, 33).
holds(3, in((block,5)), puzzle_room, 33).
holds(3, in((block,6)), puzzle_room, 33).
holds(3, in((block,7)), puzzle_room, 33).
holds(3, in((block,8)), store_room, 33).
holds(3, in((block,9)), puzzle_room, 33).
holds(3, in(manipulator_arm_1), puzzle_room, 33).
holds(3, in(manipulator_arm_2), puzzle_room, 33).
holds(3, in(puzzle_room_table), puzzle_room, 33).
holds(3, in(talos), puzzle_room, 33).
holds(3, in_tower((block,1),(block,1)), true, 33).
holds(3, in_tower((block,1),(block,2)), false, 33).
holds(3, in_tower((block,1),(block,3)), false, 33).
holds(3, in_tower((block,1),(block,4)), false, 33).
holds(3, in_tower((block,1),(block,5)), false, 33).
holds(3, in_tower((block,1),(block,6)), false, 33).
holds(3, in_tower((block,1),(block,7)), false, 33).
holds(3, in_tower((block,1),(block,8)), false, 33).
holds(3, in_tower((block,1),(block,9)), false, 33).
holds(3, in_tower((block,2),(block,1)), false, 33).
holds(3, in_tower((block,2),(block,2)), false, 33).
holds(3, in_tower((block,2),(block,3)), false, 33).
holds(3, in_tower((block,2),(block,4)), false, 33).
holds(3, in_tower((block,2),(block,5)), false, 33).
holds(3, in_tower((block,2),(block,6)), false, 33).
holds(3, in_tower((block,2),(block,7)), false, 33).
holds(3, in_tower((block,2),(block,8)), false, 33).
holds(3, in_tower((block,2),(block,9)), false, 33).
holds(3, in_tower((block,3),(block,1)), false, 33).
holds(3, in_tower((block,3),(block,2)), true, 33).
holds(3, in_tower((block,3),(block,3)), true, 33).
holds(3, in_tower((block,3),(block,4)), false, 33).
holds(3, in_tower((block,3),(block,5)), false, 33).
holds(3, in_tower((block,3),(block,6)), false, 33).
holds(3, in_tower((block,3),(block,7)), false, 33).
holds(3, in_tower((block,3),(block,8)), false, 33).
holds(3, in_tower((block,3),(block,9)), false, 33).
holds(3, in_tower((block,4),(block,1)), false, 33).
holds(3, in_tower((block,4),(block,2)), false, 33).
holds(3, in_tower((block,4),(block,3)), false, 33).
holds(3, in_tower((block,4),(block,4)), false, 33).
holds(3, in_tower((block,4),(block,5)), false, 33).
holds(3, in_tower((block,4),(block,6)), false, 33).
holds(3, in_tower((block,4),(block,7)), false, 33).
holds(3, in_tower((block,4),(block,8)), false, 33).
holds(3, in_tower((block,4),(block,9)), false, 33).
holds(3, in_tower((block,5),(block,1)), false, 33).
holds(3, in_tower((block,5),(block,2)), false, 33).
holds(3, in_tower((block,5),(block,3)), false, 33).
holds(3, in_tower((block,5),(block,4)), false, 33).
holds(3, in_tower((block,5),(block,5)), false, 33).
holds(3, in_tower((block,5),(block,6)), false, 33).
holds(3, in_tower((block,5),(block,7)), false, 33).
holds(3, in_tower((block,5),(block,8)), false, 33).
holds(3, in_tower((block,5),(block,9)), false, 33).
holds(3, in_tower((block,6),(block,1)), false, 33).
holds(3, in_tower((block,6),(block,2)), false, 33).
holds(3, in_tower((block,6),(block,3)), false, 33).
holds(3, in_tower((block,6),(block,4)), false, 33).
holds(3, in_tower((block,6),(block,5)), true, 33).
holds(3, in_tower((block,6),(block,6)), true, 33).
holds(3, in_tower((block,6),(block,7)), false, 33).
holds(3, in_tower((block,6),(block,8)), false, 33).
holds(3, in_tower((block,6),(block,9)), false, 33).
holds(3, in_tower((block,7),(block,1)), false, 33).
holds(3, in_tower((block,7),(block,2)), false, 33).
holds(3, in_tower((block,7),(block,3)), false, 33).
holds(3, in_tower((block,7),(block,4)), false, 33).
holds(3, in_tower((block,7),(block,5)), false, 33).
holds(3, in_tower((block,7),(block,6)), false, 33).
holds(3, in_tower((block,7),(block,7)), true, 33).
holds(3, in_tower((block,7),(block,8)), false, 33).
holds(3, in_tower((block,7),(block,9)), false, 33).
holds(3, in_tower((block,8),(block,1)), false, 33).
holds(3, in_tower((block,8),(block,2)), false, 33).
holds(3, in_tower((block,8),(block,3)), false, 33).
holds(3, in_tower((block,8),(block,4)), false, 33).
holds(3, in_tower((block,8),(block,5)), false, 33).
holds(3, in_tower((block,8),(block,6)), false, 33).
holds(3, in_tower((block,8),(block,7)), false, 33).
holds(3, in_tower((block,8),(block,8)), false, 33).
holds(3, in_tower((block,8),(block,9)), false, 33).
holds(3, in_tower((block,9),(block,1)), false, 33).
holds(3, in_tower((block,9),(block,2)), false, 33).
holds(3, in_tower((block,9),(block,3)), false, 33).
holds(3, in_tower((block,9),(block,4)), false, 33).
holds(3, in_tower((block,9),(block,5)), false, 33).
holds(3, in_tower((block,9),(block,6)), false, 33).
holds(3, in_tower((block,9),(block,7)), false, 33).
holds(3, in_tower((block,9),(block,8)), false, 33).
holds(3, in_tower((block,9),(block,9)), true, 33).
holds(3, on((block,1)), puzzle_room_table, 33).
holds(3, on((block,2)), (block,3), 33).
holds(3, on((block,3)), puzzle_room_table, 33).
holds(3, on((block,4)), nothing, 33).
holds(3, on((block,5)), (block,6), 33).
holds(3, on((block,6)), puzzle_room_table, 33).
holds(3, on((block,7)), puzzle_room_table, 33).
holds(3, on((block,8)), nothing, 33).
holds(3, on((block,9)), puzzle_room_table, 33).
holds(3, tower_base((block,1),puzzle_room_table), true, 33).
holds(3, tower_base((block,2),puzzle_room_table), false, 33).
holds(3, tower_base((block,3),puzzle_room_table), true, 33).
holds(3, tower_base((block,4),puzzle_room_table), false, 33).
holds(3, tower_base((block,5),puzzle_room_table), false, 33).
holds(3, tower_base((block,6),puzzle_room_table), true, 33).
holds(3, tower_base((block,7),puzzle_room_table), true, 33).
holds(3, tower_base((block,8),puzzle_room_table), false, 33).
holds(3, tower_base((block,9),puzzle_room_table), true, 33).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,7),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 33).

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=40']

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,7)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 20})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 20})

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), nothing, 13).
sub_goal(3, talos, move(store_room), in(talos), store_room, 14).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 15).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 15).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 16).
sub_goal(3, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 17).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 17).
sub_goal(3, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 18).
sub_goal(3, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 18).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), (block,7), 19).
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 20).
sub_goal(3, talos, put(manipulator_arm_2,(block,7),(block,8)), on((block,7)), (block,8), 20).

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=40']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B5493F4DC0>]
	incrementor = SolveIncrementor(step_start=33, step_increase=1, step_increase_initial=8, step_end_min=41, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 33), range_=None), IncPart(name='plan_module', args=('#inc', 33, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 33, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 33, 13, 20, 'sequential', 'false'), range_=None)]

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1251 rules

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006012699999999427s

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039251s.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007221s with result Satisfiable.

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54EF4C3B0>

[20-01-2022_16-22-05] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 2)
	('start_step', 33)
	('last_sgoals', 20)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 13)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54EF4C3B0>)

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 33). %* None *%
#program plan_module(#inc, 33, true, true). %* None *%
#program optimisation_module(#inc, 33, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 33, 13, 20, sequential, false). %* None *%

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     32 : Current =     40
Incrementor step ends | Minimum  =     41 : Maximum =    200

[20-01-2022_16-22-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(33), Number(33)]), ('plan_module', [Number(33), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(33), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(33)]), ('plan_module', [Number(34), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(34), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(33)]), ('plan_module', [Number(35), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(35), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(33)]), ('plan_module', [Number(36), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(33)]), ('plan_module', [Number(37), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(37), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(33)]), ('plan_module', [Number(38), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(38), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(33)]), ('plan_module', [Number(39), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(39), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(40), Number(33)]), ('plan_module', [Number(40), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(40), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.138181s.

[20-01-2022_16-22-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.888663s with result Satisfiable.

[20-01-2022_16-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 5.026843700000001, Incremental time limit = None
Running cumulative time = 5.026843700000001, Cumulative time limit = 1800
Used memory = (RSS = 330.031250Mb, VMS = 324.000000Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.138181s, Solving = 2.888663s, Total = 5.026844s, Memory = (RSS = 330.031250Mb, VMS = 324.000000Mb), Step range = [33-40]), Calls = 1
Final Model :: Total atoms = 12595, Cost = (7, 0, -7), Optimality proven = False, Number = 6, Thread ID = 4, Model type = ModelType.StableModel

[20-01-2022_16-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     41 : Maximum =    200

[20-01-2022_16-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(33)]), ('plan_module', [Number(41), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(41), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.316863s.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021237s with result Unsatisfiable.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3381003000000078, Incremental time limit = None
Running cumulative time = 5.364944000000008, Cumulative time limit = 1800
Used memory = (RSS = 333.476562Mb, VMS = 328.800781Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     41 : Maximum =    200

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(33)]), ('plan_module', [Number(42), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.325924s.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019769s with result Unsatisfiable.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34569240000000434, Incremental time limit = None
Running cumulative time = 5.710636400000013, Cumulative time limit = 1800
Used memory = (RSS = 335.726562Mb, VMS = 329.171875Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     41 : Maximum =    200

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(33)]), ('plan_module', [Number(43), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(43), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.356503s.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022340s with result Unsatisfiable.

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3788431999999915, Incremental time limit = None
Running cumulative time = 6.089479600000004, Cumulative time limit = 1800
Used memory = (RSS = 338.332031Mb, VMS = 330.175781Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     41 : Maximum =    200

[20-01-2022_16-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(33)]), ('plan_module', [Number(44), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(44), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.332106s.

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034083s with result Unsatisfiable.

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3661894000000103, Incremental time limit = None
Running cumulative time = 6.4556690000000145, Cumulative time limit = 1800
Used memory = (RSS = 347.066406Mb, VMS = 346.855469Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =     41 : Maximum =    200

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(33)]), ('plan_module', [Number(45), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(45), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.318231s.

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040010s with result Unsatisfiable.

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35824150000000543, Incremental time limit = None
Running cumulative time = 6.81391050000002, Cumulative time limit = 1800
Used memory = (RSS = 350.027344Mb, VMS = 347.933594Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     41 : Maximum =    200

[20-01-2022_16-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(33)]), ('plan_module', [Number(46), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(46), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.338654s.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047905s with result Unsatisfiable.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3865590999999995, Incremental time limit = None
Running cumulative time = 7.2004696000000195, Cumulative time limit = 1800
Used memory = (RSS = 355.296875Mb, VMS = 352.457031Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     41 : Maximum =    200

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(33)]), ('plan_module', [Number(47), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(47), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(33), Number(13), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.361625s.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.212823s with result Satisfiable.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5744472000000087, Incremental time limit = None
Running cumulative time = 7.774916800000028, Cumulative time limit = 1800
Used memory = (RSS = 368.570312Mb, VMS = 363.933594Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.488087s, Solving = 3.286830s, Total = 7.774917s, Memory = (RSS = 368.570312Mb, VMS = 363.933594Mb), Step range = [33-47]), Calls = 8
Final Model :: Total atoms = 19071, Cost = (23, 0, -4), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 2.138181s, Solving = 2.888663s, Total = 5.026844s, Memory = (RSS = 330.031250Mb, VMS = 324.000000Mb), Step range = [33-40]
2 : Statistics :: Grounding = 0.316863s, Solving = 0.021237s, Total = 0.338100s, Memory = (RSS = 333.476562Mb, VMS = 328.800781Mb), Step range = [41-41]
3 : Statistics :: Grounding = 0.325924s, Solving = 0.019769s, Total = 0.345692s, Memory = (RSS = 335.726562Mb, VMS = 329.171875Mb), Step range = [42-42]
4 : Statistics :: Grounding = 0.356503s, Solving = 0.022340s, Total = 0.378843s, Memory = (RSS = 338.332031Mb, VMS = 330.175781Mb), Step range = [43-43]
5 : Statistics :: Grounding = 0.332106s, Solving = 0.034083s, Total = 0.366189s, Memory = (RSS = 347.066406Mb, VMS = 346.855469Mb), Step range = [44-44]
6 : Statistics :: Grounding = 0.318231s, Solving = 0.040010s, Total = 0.358242s, Memory = (RSS = 350.027344Mb, VMS = 347.933594Mb), Step range = [45-45]
7 : Statistics :: Grounding = 0.338654s, Solving = 0.047905s, Total = 0.386559s, Memory = (RSS = 355.296875Mb, VMS = 352.457031Mb), Step range = [46-46]
8 : Statistics :: Grounding = 0.361625s, Solving = 0.212823s, Total = 0.574447s, Memory = (RSS = 368.570312Mb, VMS = 363.933594Mb), Step range = [47-47]

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.774917s due to: Stop condition reached.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26, 40: 27, 41: 27, 42: 27, 43: 27, 44: 28, 45: 29, 46: 29, 47: 30, 48: 31, 49: 31, 50: 32, 51: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39, 27: 43, 28: 44, 29: 46, 30: 47, 31: 49, 32: 50, 33: 51}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26, 40: 27, 41: 27, 42: 27, 43: 27, 44: 28, 45: 29, 46: 29, 47: 30, 48: 31, 49: 31, 50: 32, 51: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39, 27: 43, 28: 44, 29: 46, 30: 47, 31: 49, 32: 50, 33: 51}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12, 34: 13, 35: 14, 36: 14, 37: 14, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 17, 45: 18, 46: 19, 47: 20}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33, 13: 34, 14: 37, 15: 39, 16: 42, 17: 44, 18: 45, 19: 46, 20: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-22-14] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-22-14] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.488087s, Solving = 3.286830s, Total = 7.774917s, Memory = (RSS = 368.570312Mb, VMS = 363.933594Mb), Step range = [33-47]), Calls = 8
Model :: Total atoms = 19071, Cost = (23, 0, -4), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 14 :: Actions = 23                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
        talos : grasp(manipulator_arm_2,(block,8))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 3] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 3] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 3] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,4))
        talos : release(manipulator_arm_2,(block,8))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 4] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 4] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 12:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 13:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 5] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 22:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 25:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 26:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 27:
    Current Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 6] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 28:
    Current Sub-goals:
        [Index = 7] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : release(manipulator_arm_2,(block,6))
Step 29:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 8] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 8] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 30:
    Current Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 9] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 9] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,5))
Step 31:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,3))
Step 32:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 33:
    Current Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,2))
Step 34:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,9))
Step 35:
    Current Sub-goals:
        [Index = 14] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 36:
    Current Sub-goals:
        [Index = 14] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 37:
    Current Sub-goals:
        [Index = 14] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 14] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 15] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 39:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 15] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 15] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))
        talos : grasp(manipulator_arm_2,(block,4))
Step 40:
    Current Sub-goals:
        [Index = 16] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 16] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 42:
    Current Sub-goals:
        [Index = 16] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 16] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 43:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 17] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 17] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 17] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,8),(block,9))
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 45:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
        [Index = 18] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
        [Index = 18] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,8))
        talos : release(manipulator_arm_2,(block,4))
Step 46:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
        talos : grasp(manipulator_arm_2,(block,7))
Step 47:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 20] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 20] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,7),(block,8))

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=33, total_plan_length=47, step_range=range(33, 48)

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 51, Tota actions = 65, Produced sub-goal stages = 0

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  14, AC =  23, CF = 0.6, GT =  14.62s, ST =   4.91s, OT = 0.00s, TT =  19.52s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 0.9, AC = 1.3), EB = (LE = 0.5, AC = 0.7)

[20-01-2022_16-22-14] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=14, start_step=33, blend=Blend(left=0, right=0)

[20-01-2022_16-22-14] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=7, large_group_size=8

[20-01-2022_16-22-14] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=40, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 14, Sub-goal Stage Range = [34-47]
Division points [total=1] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-22-14] INFO :: ASH Planner Main #1 >> Monolevel problem 4 at level 2 solved.

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 14, Sub-goal Stage Range = [34-47]
Division points [total=1] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [34-40]

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [34-40], problem number = 7, increment number = 7

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 34)
	('last_sgoals', 40)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-22-14] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [34-40] : Concurrency enabled : Minimum search length bound enabled with value 57

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 34
last_sgoals = 40
start_step = 51
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 57

[20-01-2022_16-22-14] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[20-01-2022_16-22-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-22-14] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 51 as problem start state.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,9))', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,9)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 51})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 51})

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 51).
holds(1, complete_tower(red,puzzle_room_table), false, 51).
holds(1, complete_tower(yellow,puzzle_room_table), false, 51).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 51).
holds(1, configuration(manipulator_end_2), aligned_with((block,9)), 51).
holds(1, configuration(manipulator_limb_1), extended, 51).
holds(1, configuration(manipulator_limb_2), extended, 51).
holds(1, configuration(puzzle_room_door), open, 51).
holds(1, configuration(starting_room_door), closed, 51).
holds(1, configuration(store_room_door), open, 51).
holds(1, grasping(manipulator_arm_1), nothing, 51).
holds(1, grasping(manipulator_arm_2), (block,9), 51).
holds(1, grasping(manipulator_end_1), nothing, 51).
holds(1, grasping(manipulator_end_2), (block,9), 51).
holds(1, in((block,1)), (puzzle_room,1), 51).
holds(1, in((block,2)), (puzzle_room,1), 51).
holds(1, in((block,3)), (puzzle_room,1), 51).
holds(1, in((block,4)), (store_room,0), 51).
holds(1, in((block,5)), (puzzle_room,1), 51).
holds(1, in((block,6)), (puzzle_room,1), 51).
holds(1, in((block,7)), (puzzle_room,1), 51).
holds(1, in((block,8)), (store_room,0), 51).
holds(1, in((block,9)), (puzzle_room,1), 51).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 51).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 51).
holds(1, in(manipulator_end_1), (puzzle_room,1), 51).
holds(1, in(manipulator_end_2), (puzzle_room,1), 51).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 51).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 51).
holds(1, in(talos), (puzzle_room,1), 51).
holds(1, in_tower((block,1),(block,1)), true, 51).
holds(1, in_tower((block,1),(block,2)), false, 51).
holds(1, in_tower((block,1),(block,3)), false, 51).
holds(1, in_tower((block,1),(block,4)), false, 51).
holds(1, in_tower((block,1),(block,5)), false, 51).
holds(1, in_tower((block,1),(block,6)), false, 51).
holds(1, in_tower((block,1),(block,7)), false, 51).
holds(1, in_tower((block,1),(block,8)), false, 51).
holds(1, in_tower((block,1),(block,9)), false, 51).
holds(1, in_tower((block,2),(block,1)), false, 51).
holds(1, in_tower((block,2),(block,2)), false, 51).
holds(1, in_tower((block,2),(block,3)), false, 51).
holds(1, in_tower((block,2),(block,4)), false, 51).
holds(1, in_tower((block,2),(block,5)), false, 51).
holds(1, in_tower((block,2),(block,6)), false, 51).
holds(1, in_tower((block,2),(block,7)), false, 51).
holds(1, in_tower((block,2),(block,8)), false, 51).
holds(1, in_tower((block,2),(block,9)), false, 51).
holds(1, in_tower((block,3),(block,1)), false, 51).
holds(1, in_tower((block,3),(block,2)), true, 51).
holds(1, in_tower((block,3),(block,3)), true, 51).
holds(1, in_tower((block,3),(block,4)), false, 51).
holds(1, in_tower((block,3),(block,5)), false, 51).
holds(1, in_tower((block,3),(block,6)), false, 51).
holds(1, in_tower((block,3),(block,7)), false, 51).
holds(1, in_tower((block,3),(block,8)), false, 51).
holds(1, in_tower((block,3),(block,9)), false, 51).
holds(1, in_tower((block,4),(block,1)), false, 51).
holds(1, in_tower((block,4),(block,2)), false, 51).
holds(1, in_tower((block,4),(block,3)), false, 51).
holds(1, in_tower((block,4),(block,4)), false, 51).
holds(1, in_tower((block,4),(block,5)), false, 51).
holds(1, in_tower((block,4),(block,6)), false, 51).
holds(1, in_tower((block,4),(block,7)), false, 51).
holds(1, in_tower((block,4),(block,8)), false, 51).
holds(1, in_tower((block,4),(block,9)), false, 51).
holds(1, in_tower((block,5),(block,1)), false, 51).
holds(1, in_tower((block,5),(block,2)), false, 51).
holds(1, in_tower((block,5),(block,3)), false, 51).
holds(1, in_tower((block,5),(block,4)), false, 51).
holds(1, in_tower((block,5),(block,5)), false, 51).
holds(1, in_tower((block,5),(block,6)), false, 51).
holds(1, in_tower((block,5),(block,7)), false, 51).
holds(1, in_tower((block,5),(block,8)), false, 51).
holds(1, in_tower((block,5),(block,9)), false, 51).
holds(1, in_tower((block,6),(block,1)), false, 51).
holds(1, in_tower((block,6),(block,2)), false, 51).
holds(1, in_tower((block,6),(block,3)), false, 51).
holds(1, in_tower((block,6),(block,4)), false, 51).
holds(1, in_tower((block,6),(block,5)), true, 51).
holds(1, in_tower((block,6),(block,6)), true, 51).
holds(1, in_tower((block,6),(block,7)), false, 51).
holds(1, in_tower((block,6),(block,8)), false, 51).
holds(1, in_tower((block,6),(block,9)), false, 51).
holds(1, in_tower((block,7),(block,1)), false, 51).
holds(1, in_tower((block,7),(block,2)), false, 51).
holds(1, in_tower((block,7),(block,3)), false, 51).
holds(1, in_tower((block,7),(block,4)), false, 51).
holds(1, in_tower((block,7),(block,5)), false, 51).
holds(1, in_tower((block,7),(block,6)), false, 51).
holds(1, in_tower((block,7),(block,7)), true, 51).
holds(1, in_tower((block,7),(block,8)), false, 51).
holds(1, in_tower((block,7),(block,9)), false, 51).
holds(1, in_tower((block,8),(block,1)), false, 51).
holds(1, in_tower((block,8),(block,2)), false, 51).
holds(1, in_tower((block,8),(block,3)), false, 51).
holds(1, in_tower((block,8),(block,4)), false, 51).
holds(1, in_tower((block,8),(block,5)), false, 51).
holds(1, in_tower((block,8),(block,6)), false, 51).
holds(1, in_tower((block,8),(block,7)), false, 51).
holds(1, in_tower((block,8),(block,8)), false, 51).
holds(1, in_tower((block,8),(block,9)), false, 51).
holds(1, in_tower((block,9),(block,1)), false, 51).
holds(1, in_tower((block,9),(block,2)), false, 51).
holds(1, in_tower((block,9),(block,3)), false, 51).
holds(1, in_tower((block,9),(block,4)), false, 51).
holds(1, in_tower((block,9),(block,5)), false, 51).
holds(1, in_tower((block,9),(block,6)), false, 51).
holds(1, in_tower((block,9),(block,7)), false, 51).
holds(1, in_tower((block,9),(block,8)), false, 51).
holds(1, in_tower((block,9),(block,9)), true, 51).
holds(1, on((block,1)), puzzle_room_table_left, 51).
holds(1, on((block,2)), (block,3), 51).
holds(1, on((block,3)), puzzle_room_table_left, 51).
holds(1, on((block,4)), nothing, 51).
holds(1, on((block,5)), (block,6), 51).
holds(1, on((block,6)), puzzle_room_table_right, 51).
holds(1, on((block,7)), puzzle_room_table_middle, 51).
holds(1, on((block,8)), nothing, 51).
holds(1, on((block,9)), puzzle_room_table_middle, 51).
holds(1, tower_base((block,1),puzzle_room_table), true, 51).
holds(1, tower_base((block,2),puzzle_room_table), false, 51).
holds(1, tower_base((block,3),puzzle_room_table), true, 51).
holds(1, tower_base((block,4),puzzle_room_table), false, 51).
holds(1, tower_base((block,5),puzzle_room_table), false, 51).
holds(1, tower_base((block,6),puzzle_room_table), true, 51).
holds(1, tower_base((block,7),puzzle_room_table), true, 51).
holds(1, tower_base((block,8),puzzle_room_table), false, 51).
holds(1, tower_base((block,9),puzzle_room_table), true, 51).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 51).
holds(2, complete_tower(blue,puzzle_room_table), false, 51).
holds(2, complete_tower(red,puzzle_room_table), false, 51).
holds(2, complete_tower(yellow,puzzle_room_table), false, 51).
holds(2, configuration(manipulator_arm_1), extended, 51).
holds(2, configuration(manipulator_arm_2), extended, 51).
holds(2, configuration(puzzle_room_door), open, 51).
holds(2, configuration(starting_room_door), closed, 51).
holds(2, configuration(store_room_door), open, 51).
holds(2, grasping(manipulator_arm_1), nothing, 51).
holds(2, grasping(manipulator_arm_2), (block,9), 51).
holds(2, in((block,1)), puzzle_room, 51).
holds(2, in((block,2)), puzzle_room, 51).
holds(2, in((block,3)), puzzle_room, 51).
holds(2, in((block,4)), store_room, 51).
holds(2, in((block,5)), puzzle_room, 51).
holds(2, in((block,6)), puzzle_room, 51).
holds(2, in((block,7)), puzzle_room, 51).
holds(2, in((block,8)), store_room, 51).
holds(2, in((block,9)), puzzle_room, 51).
holds(2, in(manipulator_arm_1), puzzle_room, 51).
holds(2, in(manipulator_arm_2), puzzle_room, 51).
holds(2, in(puzzle_room_table), puzzle_room, 51).
holds(2, in(talos), puzzle_room, 51).
holds(2, in_tower((block,1),(block,1)), true, 51).
holds(2, in_tower((block,1),(block,2)), false, 51).
holds(2, in_tower((block,1),(block,3)), false, 51).
holds(2, in_tower((block,1),(block,4)), false, 51).
holds(2, in_tower((block,1),(block,5)), false, 51).
holds(2, in_tower((block,1),(block,6)), false, 51).
holds(2, in_tower((block,1),(block,7)), false, 51).
holds(2, in_tower((block,1),(block,8)), false, 51).
holds(2, in_tower((block,1),(block,9)), false, 51).
holds(2, in_tower((block,2),(block,1)), false, 51).
holds(2, in_tower((block,2),(block,2)), false, 51).
holds(2, in_tower((block,2),(block,3)), false, 51).
holds(2, in_tower((block,2),(block,4)), false, 51).
holds(2, in_tower((block,2),(block,5)), false, 51).
holds(2, in_tower((block,2),(block,6)), false, 51).
holds(2, in_tower((block,2),(block,7)), false, 51).
holds(2, in_tower((block,2),(block,8)), false, 51).
holds(2, in_tower((block,2),(block,9)), false, 51).
holds(2, in_tower((block,3),(block,1)), false, 51).
holds(2, in_tower((block,3),(block,2)), true, 51).
holds(2, in_tower((block,3),(block,3)), true, 51).
holds(2, in_tower((block,3),(block,4)), false, 51).
holds(2, in_tower((block,3),(block,5)), false, 51).
holds(2, in_tower((block,3),(block,6)), false, 51).
holds(2, in_tower((block,3),(block,7)), false, 51).
holds(2, in_tower((block,3),(block,8)), false, 51).
holds(2, in_tower((block,3),(block,9)), false, 51).
holds(2, in_tower((block,4),(block,1)), false, 51).
holds(2, in_tower((block,4),(block,2)), false, 51).
holds(2, in_tower((block,4),(block,3)), false, 51).
holds(2, in_tower((block,4),(block,4)), false, 51).
holds(2, in_tower((block,4),(block,5)), false, 51).
holds(2, in_tower((block,4),(block,6)), false, 51).
holds(2, in_tower((block,4),(block,7)), false, 51).
holds(2, in_tower((block,4),(block,8)), false, 51).
holds(2, in_tower((block,4),(block,9)), false, 51).
holds(2, in_tower((block,5),(block,1)), false, 51).
holds(2, in_tower((block,5),(block,2)), false, 51).
holds(2, in_tower((block,5),(block,3)), false, 51).
holds(2, in_tower((block,5),(block,4)), false, 51).
holds(2, in_tower((block,5),(block,5)), false, 51).
holds(2, in_tower((block,5),(block,6)), false, 51).
holds(2, in_tower((block,5),(block,7)), false, 51).
holds(2, in_tower((block,5),(block,8)), false, 51).
holds(2, in_tower((block,5),(block,9)), false, 51).
holds(2, in_tower((block,6),(block,1)), false, 51).
holds(2, in_tower((block,6),(block,2)), false, 51).
holds(2, in_tower((block,6),(block,3)), false, 51).
holds(2, in_tower((block,6),(block,4)), false, 51).
holds(2, in_tower((block,6),(block,5)), true, 51).
holds(2, in_tower((block,6),(block,6)), true, 51).
holds(2, in_tower((block,6),(block,7)), false, 51).
holds(2, in_tower((block,6),(block,8)), false, 51).
holds(2, in_tower((block,6),(block,9)), false, 51).
holds(2, in_tower((block,7),(block,1)), false, 51).
holds(2, in_tower((block,7),(block,2)), false, 51).
holds(2, in_tower((block,7),(block,3)), false, 51).
holds(2, in_tower((block,7),(block,4)), false, 51).
holds(2, in_tower((block,7),(block,5)), false, 51).
holds(2, in_tower((block,7),(block,6)), false, 51).
holds(2, in_tower((block,7),(block,7)), true, 51).
holds(2, in_tower((block,7),(block,8)), false, 51).
holds(2, in_tower((block,7),(block,9)), false, 51).
holds(2, in_tower((block,8),(block,1)), false, 51).
holds(2, in_tower((block,8),(block,2)), false, 51).
holds(2, in_tower((block,8),(block,3)), false, 51).
holds(2, in_tower((block,8),(block,4)), false, 51).
holds(2, in_tower((block,8),(block,5)), false, 51).
holds(2, in_tower((block,8),(block,6)), false, 51).
holds(2, in_tower((block,8),(block,7)), false, 51).
holds(2, in_tower((block,8),(block,8)), false, 51).
holds(2, in_tower((block,8),(block,9)), false, 51).
holds(2, in_tower((block,9),(block,1)), false, 51).
holds(2, in_tower((block,9),(block,2)), false, 51).
holds(2, in_tower((block,9),(block,3)), false, 51).
holds(2, in_tower((block,9),(block,4)), false, 51).
holds(2, in_tower((block,9),(block,5)), false, 51).
holds(2, in_tower((block,9),(block,6)), false, 51).
holds(2, in_tower((block,9),(block,7)), false, 51).
holds(2, in_tower((block,9),(block,8)), false, 51).
holds(2, in_tower((block,9),(block,9)), true, 51).
holds(2, on((block,1)), puzzle_room_table, 51).
holds(2, on((block,2)), (block,3), 51).
holds(2, on((block,3)), puzzle_room_table, 51).
holds(2, on((block,4)), nothing, 51).
holds(2, on((block,5)), (block,6), 51).
holds(2, on((block,6)), puzzle_room_table, 51).
holds(2, on((block,7)), puzzle_room_table, 51).
holds(2, on((block,8)), nothing, 51).
holds(2, on((block,9)), puzzle_room_table, 51).
holds(2, tower_base((block,1),puzzle_room_table), true, 51).
holds(2, tower_base((block,2),puzzle_room_table), false, 51).
holds(2, tower_base((block,3),puzzle_room_table), true, 51).
holds(2, tower_base((block,4),puzzle_room_table), false, 51).
holds(2, tower_base((block,5),puzzle_room_table), false, 51).
holds(2, tower_base((block,6),puzzle_room_table), true, 51).
holds(2, tower_base((block,7),puzzle_room_table), true, 51).
holds(2, tower_base((block,8),puzzle_room_table), false, 51).
holds(2, tower_base((block,9),puzzle_room_table), true, 51).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 51).

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=57']

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 36})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 40})

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 11 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), nothing, 34).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 35).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 35).
sub_goal(2, talos, move(hallway), in(talos), hallway, 36).
sub_goal(2, talos, move(store_room), in(talos), store_room, 37).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 38).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 38).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 39).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 39).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 40).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 40).

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=57']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B549403B80>]
	incrementor = SolveIncrementor(step_start=51, step_increase=1, step_increase_initial=7, step_end_min=58, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 51), range_=None), IncPart(name='plan_module', args=('#inc', 51, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 51, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 51, 34, 40, 'sequential', 'false'), range_=None)]

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1283 rules

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007399900000010007s

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.043543s.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009362s with result Satisfiable.

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54F4B2B30>

[20-01-2022_16-22-14] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 1)
	('start_step', 51)
	('last_sgoals', 40)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 34)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54F4B2B30>)

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 51). %* None *%
#program plan_module(#inc, 51, true, false). %* None *%
#program optimisation_module(#inc, 51, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 51, 34, 40, sequential, false). %* None *%

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     50 : Current =     57
Incrementor step ends | Minimum  =     58 : Maximum =    200

[20-01-2022_16-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(51), Number(51)]), ('plan_module', [Number(51), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(52), Number(51)]), ('plan_module', [Number(52), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(51)]), ('plan_module', [Number(53), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(54), Number(51)]), ('plan_module', [Number(54), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(55), Number(51)]), ('plan_module', [Number(55), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(56), Number(51)]), ('plan_module', [Number(56), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(57), Number(51)]), ('plan_module', [Number(57), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.563578s.

[20-01-2022_16-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.611854s with result Satisfiable.

[20-01-2022_16-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 5.175432199999989, Incremental time limit = None
Running cumulative time = 5.175432199999989, Cumulative time limit = 1800
Used memory = (RSS = 329.335938Mb, VMS = 326.496094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.563578s, Solving = 0.611854s, Total = 5.175432s, Memory = (RSS = 329.335938Mb, VMS = 326.496094Mb), Step range = [51-57]), Calls = 1
Final Model :: Total atoms = 11040, Cost = (6, 0, -6), Optimality proven = False, Number = 8, Thread ID = 1, Model type = ModelType.StableModel

[20-01-2022_16-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     58 : Maximum =    200

[20-01-2022_16-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(51)]), ('plan_module', [Number(58), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.771462s.

[20-01-2022_16-22-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031671s with result Unsatisfiable.

[20-01-2022_16-22-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.803132799999986, Incremental time limit = None
Running cumulative time = 5.978564999999975, Cumulative time limit = 1800
Used memory = (RSS = 335.601562Mb, VMS = 334.976562Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =     58 : Maximum =    200

[20-01-2022_16-22-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(59), Number(51)]), ('plan_module', [Number(59), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.756085s.

[20-01-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030981s with result Unsatisfiable.

[20-01-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7870663000000064, Incremental time limit = None
Running cumulative time = 6.765631299999981, Cumulative time limit = 1800
Used memory = (RSS = 339.218750Mb, VMS = 336.699219Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     59 : Current =     60
Incrementor step ends | Minimum  =     58 : Maximum =    200

[20-01-2022_16-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(60), Number(51)]), ('plan_module', [Number(60), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.743915s.

[20-01-2022_16-22-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040661s with result Unsatisfiable.

[20-01-2022_16-22-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7845767000000023, Incremental time limit = None
Running cumulative time = 7.550207999999984, Cumulative time limit = 1800
Used memory = (RSS = 344.054688Mb, VMS = 338.304688Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     58 : Maximum =    200

[20-01-2022_16-22-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(51)]), ('plan_module', [Number(61), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.812668s.

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.077576s with result Unsatisfiable.

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8902439999999956, Incremental time limit = None
Running cumulative time = 8.44045199999998, Cumulative time limit = 1800
Used memory = (RSS = 354.113281Mb, VMS = 357.070312Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     58 : Maximum =    200

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(51)]), ('plan_module', [Number(62), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.756966s.

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057071s with result Unsatisfiable.

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.814036999999999, Incremental time limit = None
Running cumulative time = 9.254488999999978, Cumulative time limit = 1800
Used memory = (RSS = 361.378906Mb, VMS = 361.773438Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     58 : Maximum =    200

[20-01-2022_16-22-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(51)]), ('plan_module', [Number(63), Number(51), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(51), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(51), Number(34), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.766281s.

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.113904s with result Satisfiable.

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8801841000000081, Incremental time limit = None
Running cumulative time = 10.134673099999986, Cumulative time limit = 1800
Used memory = (RSS = 374.941406Mb, VMS = 373.214844Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.170955s, Solving = 0.963718s, Total = 10.134673s, Memory = (RSS = 374.941406Mb, VMS = 373.214844Mb), Step range = [51-63]), Calls = 7
Final Model :: Total atoms = 15466, Cost = (17, 0, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 4.563578s, Solving = 0.611854s, Total = 5.175432s, Memory = (RSS = 329.335938Mb, VMS = 326.496094Mb), Step range = [51-57]
2 : Statistics :: Grounding = 0.771462s, Solving = 0.031671s, Total = 0.803133s, Memory = (RSS = 335.601562Mb, VMS = 334.976562Mb), Step range = [58-58]
3 : Statistics :: Grounding = 0.756085s, Solving = 0.030981s, Total = 0.787066s, Memory = (RSS = 339.218750Mb, VMS = 336.699219Mb), Step range = [59-59]
4 : Statistics :: Grounding = 0.743915s, Solving = 0.040661s, Total = 0.784577s, Memory = (RSS = 344.054688Mb, VMS = 338.304688Mb), Step range = [60-60]
5 : Statistics :: Grounding = 0.812668s, Solving = 0.077576s, Total = 0.890244s, Memory = (RSS = 354.113281Mb, VMS = 357.070312Mb), Step range = [61-61]
6 : Statistics :: Grounding = 0.756966s, Solving = 0.057071s, Total = 0.814037s, Memory = (RSS = 361.378906Mb, VMS = 361.773438Mb), Step range = [62-62]
7 : Statistics :: Grounding = 0.766281s, Solving = 0.113904s, Total = 0.880184s, Memory = (RSS = 374.941406Mb, VMS = 373.214844Mb), Step range = [63-63]

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 10.134673s due to: Stop condition reached.

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26, 40: 27, 41: 27, 42: 27, 43: 27, 44: 28, 45: 29, 46: 29, 47: 30, 48: 31, 49: 31, 50: 32, 51: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39, 27: 43, 28: 44, 29: 46, 30: 47, 31: 49, 32: 50, 33: 51}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12, 34: 13, 35: 14, 36: 14, 37: 14, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 17, 45: 18, 46: 19, 47: 20}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33, 13: 34, 14: 37, 15: 39, 16: 42, 17: 44, 18: 45, 19: 46, 20: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26, 40: 27, 41: 27, 42: 27, 43: 27, 44: 28, 45: 29, 46: 29, 47: 30, 48: 31, 49: 31, 50: 32, 51: 33, 52: 34, 53: 35, 54: 36, 55: 36, 56: 37, 57: 37, 58: 37, 59: 38, 60: 38, 61: 39, 62: 39, 63: 40}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39, 27: 43, 28: 44, 29: 46, 30: 47, 31: 49, 32: 50, 33: 51, 34: 52, 35: 53, 36: 55, 37: 58, 38: 60, 39: 62, 40: 63}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12, 34: 13, 35: 14, 36: 14, 37: 14, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 17, 45: 18, 46: 19, 47: 20}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33, 13: 34, 14: 37, 15: 39, 16: 42, 17: 44, 18: 45, 19: 46, 20: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-22-25] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 40, Last requested goal index = 40, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-22-25] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.170955s, Solving = 0.963718s, Total = 10.134673s, Memory = (RSS = 374.941406Mb, VMS = 373.214844Mb), Step range = [51-63]), Calls = 7
Model :: Total atoms = 15466, Cost = (17, 0, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 12 :: Actions = 17                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
        talos : grasp(manipulator_end_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,4))
        talos : release(manipulator_end_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 17:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 18:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 20:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 21:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 22:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 24:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 25:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 26:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 28:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 29:
    Current Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 30:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 31:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 32:
    Current Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 21] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 21] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 36:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 37:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 38:
    Current Sub-goals:
        [Index = 25] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 25] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 39:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 42:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : release(manipulator_end_2,(block,6))
Step 45:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 46:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
        talos : release(manipulator_end_2,(block,3))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
        talos : grasp(manipulator_end_1,(block,2))
Step 50:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 51:
    Current Sub-goals:
        [Index = 33] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
        talos : release(manipulator_end_1,(block,2))
Step 52:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 53:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 54:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 55:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 56:
    Current Sub-goals:
        [Index = 37] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 37] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 58:
    Current Sub-goals:
        [Index = 37] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 37] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 59:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 60:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 61:
    Current Sub-goals:
        [Index = 39] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 39] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 39] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 39] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 39] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
        talos : grasp(manipulator_end_2,(block,4))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 40] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 40] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)

[20-01-2022_16-22-25] INFO :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[20-01-2022_16-22-25] INFO :: ASH Planner Main #1 >> Online planning increment 7 finished.

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 2 : Total constraining sub-goal stages = 6 : Goals achieved = 6 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 47 : Goals achieved = 40 : Goals unachieved = 7 : Complete = False

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 14, Sub-goal Stage Range = [34-47]
Division points [total=1] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [41-47]

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [41-47], problem number = 8, increment number = 8

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 41)
	('last_sgoals', 47)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[20-01-2022_16-22-25] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [41-47] : Concurrency enabled : Minimum search length bound enabled with value 69

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 41
last_sgoals = 47
start_step = 63
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 69

[20-01-2022_16-22-25] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[20-01-2022_16-22-25] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[20-01-2022_16-22-25] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 63 as problem start state.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,8))', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 63})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 63})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 63})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,8)', 'S': 63})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 63})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 63})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 63})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 63})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 63})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 63})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 63})

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 63).
holds(1, complete_tower(red,puzzle_room_table), false, 63).
holds(1, complete_tower(yellow,puzzle_room_table), false, 63).
holds(1, configuration(manipulator_end_1), aligned_with((block,8)), 63).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 63).
holds(1, configuration(manipulator_limb_1), retracted, 63).
holds(1, configuration(manipulator_limb_2), retracted, 63).
holds(1, configuration(puzzle_room_door), open, 63).
holds(1, configuration(starting_room_door), closed, 63).
holds(1, configuration(store_room_door), open, 63).
holds(1, grasping(manipulator_arm_1), (block,8), 63).
holds(1, grasping(manipulator_arm_2), (block,4), 63).
holds(1, grasping(manipulator_end_1), (block,8), 63).
holds(1, grasping(manipulator_end_2), (block,4), 63).
holds(1, in((block,1)), (puzzle_room,1), 63).
holds(1, in((block,2)), (puzzle_room,1), 63).
holds(1, in((block,3)), (puzzle_room,1), 63).
holds(1, in((block,4)), (store_room,0), 63).
holds(1, in((block,5)), (puzzle_room,1), 63).
holds(1, in((block,6)), (puzzle_room,1), 63).
holds(1, in((block,7)), (puzzle_room,1), 63).
holds(1, in((block,8)), (store_room,0), 63).
holds(1, in((block,9)), (puzzle_room,1), 63).
holds(1, in(manipulator_arm_1), (store_room,0), 63).
holds(1, in(manipulator_arm_2), (store_room,0), 63).
holds(1, in(manipulator_end_1), (store_room,0), 63).
holds(1, in(manipulator_end_2), (store_room,0), 63).
holds(1, in(manipulator_limb_1), (store_room,0), 63).
holds(1, in(manipulator_limb_2), (store_room,0), 63).
holds(1, in(puzzle_room_table), (puzzle_room,1), 63).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 63).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 63).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 63).
holds(1, in(talos), (store_room,0), 63).
holds(1, in_tower((block,1),(block,1)), true, 63).
holds(1, in_tower((block,1),(block,2)), false, 63).
holds(1, in_tower((block,1),(block,3)), false, 63).
holds(1, in_tower((block,1),(block,4)), false, 63).
holds(1, in_tower((block,1),(block,5)), false, 63).
holds(1, in_tower((block,1),(block,6)), false, 63).
holds(1, in_tower((block,1),(block,7)), false, 63).
holds(1, in_tower((block,1),(block,8)), false, 63).
holds(1, in_tower((block,1),(block,9)), false, 63).
holds(1, in_tower((block,2),(block,1)), false, 63).
holds(1, in_tower((block,2),(block,2)), false, 63).
holds(1, in_tower((block,2),(block,3)), false, 63).
holds(1, in_tower((block,2),(block,4)), false, 63).
holds(1, in_tower((block,2),(block,5)), false, 63).
holds(1, in_tower((block,2),(block,6)), false, 63).
holds(1, in_tower((block,2),(block,7)), false, 63).
holds(1, in_tower((block,2),(block,8)), false, 63).
holds(1, in_tower((block,2),(block,9)), false, 63).
holds(1, in_tower((block,3),(block,1)), false, 63).
holds(1, in_tower((block,3),(block,2)), true, 63).
holds(1, in_tower((block,3),(block,3)), true, 63).
holds(1, in_tower((block,3),(block,4)), false, 63).
holds(1, in_tower((block,3),(block,5)), false, 63).
holds(1, in_tower((block,3),(block,6)), false, 63).
holds(1, in_tower((block,3),(block,7)), false, 63).
holds(1, in_tower((block,3),(block,8)), false, 63).
holds(1, in_tower((block,3),(block,9)), false, 63).
holds(1, in_tower((block,4),(block,1)), false, 63).
holds(1, in_tower((block,4),(block,2)), false, 63).
holds(1, in_tower((block,4),(block,3)), false, 63).
holds(1, in_tower((block,4),(block,4)), false, 63).
holds(1, in_tower((block,4),(block,5)), false, 63).
holds(1, in_tower((block,4),(block,6)), false, 63).
holds(1, in_tower((block,4),(block,7)), false, 63).
holds(1, in_tower((block,4),(block,8)), false, 63).
holds(1, in_tower((block,4),(block,9)), false, 63).
holds(1, in_tower((block,5),(block,1)), false, 63).
holds(1, in_tower((block,5),(block,2)), false, 63).
holds(1, in_tower((block,5),(block,3)), false, 63).
holds(1, in_tower((block,5),(block,4)), false, 63).
holds(1, in_tower((block,5),(block,5)), false, 63).
holds(1, in_tower((block,5),(block,6)), false, 63).
holds(1, in_tower((block,5),(block,7)), false, 63).
holds(1, in_tower((block,5),(block,8)), false, 63).
holds(1, in_tower((block,5),(block,9)), false, 63).
holds(1, in_tower((block,6),(block,1)), false, 63).
holds(1, in_tower((block,6),(block,2)), false, 63).
holds(1, in_tower((block,6),(block,3)), false, 63).
holds(1, in_tower((block,6),(block,4)), false, 63).
holds(1, in_tower((block,6),(block,5)), true, 63).
holds(1, in_tower((block,6),(block,6)), true, 63).
holds(1, in_tower((block,6),(block,7)), false, 63).
holds(1, in_tower((block,6),(block,8)), false, 63).
holds(1, in_tower((block,6),(block,9)), false, 63).
holds(1, in_tower((block,7),(block,1)), false, 63).
holds(1, in_tower((block,7),(block,2)), false, 63).
holds(1, in_tower((block,7),(block,3)), false, 63).
holds(1, in_tower((block,7),(block,4)), false, 63).
holds(1, in_tower((block,7),(block,5)), false, 63).
holds(1, in_tower((block,7),(block,6)), false, 63).
holds(1, in_tower((block,7),(block,7)), true, 63).
holds(1, in_tower((block,7),(block,8)), false, 63).
holds(1, in_tower((block,7),(block,9)), false, 63).
holds(1, in_tower((block,8),(block,1)), false, 63).
holds(1, in_tower((block,8),(block,2)), false, 63).
holds(1, in_tower((block,8),(block,3)), false, 63).
holds(1, in_tower((block,8),(block,4)), false, 63).
holds(1, in_tower((block,8),(block,5)), false, 63).
holds(1, in_tower((block,8),(block,6)), false, 63).
holds(1, in_tower((block,8),(block,7)), false, 63).
holds(1, in_tower((block,8),(block,8)), false, 63).
holds(1, in_tower((block,8),(block,9)), false, 63).
holds(1, in_tower((block,9),(block,1)), false, 63).
holds(1, in_tower((block,9),(block,2)), false, 63).
holds(1, in_tower((block,9),(block,3)), false, 63).
holds(1, in_tower((block,9),(block,4)), false, 63).
holds(1, in_tower((block,9),(block,5)), false, 63).
holds(1, in_tower((block,9),(block,6)), false, 63).
holds(1, in_tower((block,9),(block,7)), false, 63).
holds(1, in_tower((block,9),(block,8)), false, 63).
holds(1, in_tower((block,9),(block,9)), true, 63).
holds(1, on((block,1)), puzzle_room_table_left, 63).
holds(1, on((block,2)), (block,3), 63).
holds(1, on((block,3)), puzzle_room_table_left, 63).
holds(1, on((block,4)), nothing, 63).
holds(1, on((block,5)), (block,6), 63).
holds(1, on((block,6)), puzzle_room_table_right, 63).
holds(1, on((block,7)), puzzle_room_table_middle, 63).
holds(1, on((block,8)), nothing, 63).
holds(1, on((block,9)), puzzle_room_table_middle, 63).
holds(1, tower_base((block,1),puzzle_room_table), true, 63).
holds(1, tower_base((block,2),puzzle_room_table), false, 63).
holds(1, tower_base((block,3),puzzle_room_table), true, 63).
holds(1, tower_base((block,4),puzzle_room_table), false, 63).
holds(1, tower_base((block,5),puzzle_room_table), false, 63).
holds(1, tower_base((block,6),puzzle_room_table), true, 63).
holds(1, tower_base((block,7),puzzle_room_table), true, 63).
holds(1, tower_base((block,8),puzzle_room_table), false, 63).
holds(1, tower_base((block,9),puzzle_room_table), true, 63).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 63).
holds(2, complete_tower(blue,puzzle_room_table), false, 63).
holds(2, complete_tower(red,puzzle_room_table), false, 63).
holds(2, complete_tower(yellow,puzzle_room_table), false, 63).
holds(2, configuration(manipulator_arm_1), retracted, 63).
holds(2, configuration(manipulator_arm_2), retracted, 63).
holds(2, configuration(puzzle_room_door), open, 63).
holds(2, configuration(starting_room_door), closed, 63).
holds(2, configuration(store_room_door), open, 63).
holds(2, grasping(manipulator_arm_1), (block,8), 63).
holds(2, grasping(manipulator_arm_2), (block,4), 63).
holds(2, in((block,1)), puzzle_room, 63).
holds(2, in((block,2)), puzzle_room, 63).
holds(2, in((block,3)), puzzle_room, 63).
holds(2, in((block,4)), store_room, 63).
holds(2, in((block,5)), puzzle_room, 63).
holds(2, in((block,6)), puzzle_room, 63).
holds(2, in((block,7)), puzzle_room, 63).
holds(2, in((block,8)), store_room, 63).
holds(2, in((block,9)), puzzle_room, 63).
holds(2, in(manipulator_arm_1), store_room, 63).
holds(2, in(manipulator_arm_2), store_room, 63).
holds(2, in(puzzle_room_table), puzzle_room, 63).
holds(2, in(talos), store_room, 63).
holds(2, in_tower((block,1),(block,1)), true, 63).
holds(2, in_tower((block,1),(block,2)), false, 63).
holds(2, in_tower((block,1),(block,3)), false, 63).
holds(2, in_tower((block,1),(block,4)), false, 63).
holds(2, in_tower((block,1),(block,5)), false, 63).
holds(2, in_tower((block,1),(block,6)), false, 63).
holds(2, in_tower((block,1),(block,7)), false, 63).
holds(2, in_tower((block,1),(block,8)), false, 63).
holds(2, in_tower((block,1),(block,9)), false, 63).
holds(2, in_tower((block,2),(block,1)), false, 63).
holds(2, in_tower((block,2),(block,2)), false, 63).
holds(2, in_tower((block,2),(block,3)), false, 63).
holds(2, in_tower((block,2),(block,4)), false, 63).
holds(2, in_tower((block,2),(block,5)), false, 63).
holds(2, in_tower((block,2),(block,6)), false, 63).
holds(2, in_tower((block,2),(block,7)), false, 63).
holds(2, in_tower((block,2),(block,8)), false, 63).
holds(2, in_tower((block,2),(block,9)), false, 63).
holds(2, in_tower((block,3),(block,1)), false, 63).
holds(2, in_tower((block,3),(block,2)), true, 63).
holds(2, in_tower((block,3),(block,3)), true, 63).
holds(2, in_tower((block,3),(block,4)), false, 63).
holds(2, in_tower((block,3),(block,5)), false, 63).
holds(2, in_tower((block,3),(block,6)), false, 63).
holds(2, in_tower((block,3),(block,7)), false, 63).
holds(2, in_tower((block,3),(block,8)), false, 63).
holds(2, in_tower((block,3),(block,9)), false, 63).
holds(2, in_tower((block,4),(block,1)), false, 63).
holds(2, in_tower((block,4),(block,2)), false, 63).
holds(2, in_tower((block,4),(block,3)), false, 63).
holds(2, in_tower((block,4),(block,4)), false, 63).
holds(2, in_tower((block,4),(block,5)), false, 63).
holds(2, in_tower((block,4),(block,6)), false, 63).
holds(2, in_tower((block,4),(block,7)), false, 63).
holds(2, in_tower((block,4),(block,8)), false, 63).
holds(2, in_tower((block,4),(block,9)), false, 63).
holds(2, in_tower((block,5),(block,1)), false, 63).
holds(2, in_tower((block,5),(block,2)), false, 63).
holds(2, in_tower((block,5),(block,3)), false, 63).
holds(2, in_tower((block,5),(block,4)), false, 63).
holds(2, in_tower((block,5),(block,5)), false, 63).
holds(2, in_tower((block,5),(block,6)), false, 63).
holds(2, in_tower((block,5),(block,7)), false, 63).
holds(2, in_tower((block,5),(block,8)), false, 63).
holds(2, in_tower((block,5),(block,9)), false, 63).
holds(2, in_tower((block,6),(block,1)), false, 63).
holds(2, in_tower((block,6),(block,2)), false, 63).
holds(2, in_tower((block,6),(block,3)), false, 63).
holds(2, in_tower((block,6),(block,4)), false, 63).
holds(2, in_tower((block,6),(block,5)), true, 63).
holds(2, in_tower((block,6),(block,6)), true, 63).
holds(2, in_tower((block,6),(block,7)), false, 63).
holds(2, in_tower((block,6),(block,8)), false, 63).
holds(2, in_tower((block,6),(block,9)), false, 63).
holds(2, in_tower((block,7),(block,1)), false, 63).
holds(2, in_tower((block,7),(block,2)), false, 63).
holds(2, in_tower((block,7),(block,3)), false, 63).
holds(2, in_tower((block,7),(block,4)), false, 63).
holds(2, in_tower((block,7),(block,5)), false, 63).
holds(2, in_tower((block,7),(block,6)), false, 63).
holds(2, in_tower((block,7),(block,7)), true, 63).
holds(2, in_tower((block,7),(block,8)), false, 63).
holds(2, in_tower((block,7),(block,9)), false, 63).
holds(2, in_tower((block,8),(block,1)), false, 63).
holds(2, in_tower((block,8),(block,2)), false, 63).
holds(2, in_tower((block,8),(block,3)), false, 63).
holds(2, in_tower((block,8),(block,4)), false, 63).
holds(2, in_tower((block,8),(block,5)), false, 63).
holds(2, in_tower((block,8),(block,6)), false, 63).
holds(2, in_tower((block,8),(block,7)), false, 63).
holds(2, in_tower((block,8),(block,8)), false, 63).
holds(2, in_tower((block,8),(block,9)), false, 63).
holds(2, in_tower((block,9),(block,1)), false, 63).
holds(2, in_tower((block,9),(block,2)), false, 63).
holds(2, in_tower((block,9),(block,3)), false, 63).
holds(2, in_tower((block,9),(block,4)), false, 63).
holds(2, in_tower((block,9),(block,5)), false, 63).
holds(2, in_tower((block,9),(block,6)), false, 63).
holds(2, in_tower((block,9),(block,7)), false, 63).
holds(2, in_tower((block,9),(block,8)), false, 63).
holds(2, in_tower((block,9),(block,9)), true, 63).
holds(2, on((block,1)), puzzle_room_table, 63).
holds(2, on((block,2)), (block,3), 63).
holds(2, on((block,3)), puzzle_room_table, 63).
holds(2, on((block,4)), nothing, 63).
holds(2, on((block,5)), (block,6), 63).
holds(2, on((block,6)), puzzle_room_table, 63).
holds(2, on((block,7)), puzzle_room_table, 63).
holds(2, on((block,8)), nothing, 63).
holds(2, on((block,9)), puzzle_room_table, 63).
holds(2, tower_base((block,1),puzzle_room_table), true, 63).
holds(2, tower_base((block,2),puzzle_room_table), false, 63).
holds(2, tower_base((block,3),puzzle_room_table), true, 63).
holds(2, tower_base((block,4),puzzle_room_table), false, 63).
holds(2, tower_base((block,5),puzzle_room_table), false, 63).
holds(2, tower_base((block,6),puzzle_room_table), true, 63).
holds(2, tower_base((block,7),puzzle_room_table), true, 63).
holds(2, tower_base((block,8),puzzle_room_table), false, 63).
holds(2, tower_base((block,9),puzzle_room_table), true, 63).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 63).

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=69']

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,7))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,7)', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 47})

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 41).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 42).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 43).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 43).
sub_goal(2, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 44).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 44).
sub_goal(2, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 45).
sub_goal(2, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 45).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 46).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,7)), grasping(manipulator_arm_2), (block,7), 46).
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 47).
sub_goal(2, talos, put(manipulator_arm_2,(block,7),(block,8)), on((block,7)), (block,8), 47).

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=69']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001B5493F48B0>]
	incrementor = SolveIncrementor(step_start=63, step_increase=1, step_increase_initial=7, step_end_min=70, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 63), range_=None), IncPart(name='plan_module', args=('#inc', 63, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 63, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 63, 41, 47, 'sequential', 'false'), range_=None)]

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1284 rules

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006575100000006273s

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039954s.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008095s with result Satisfiable.

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001B54F5FCC70>

[20-01-2022_16-22-25] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 1)
	('start_step', 63)
	('last_sgoals', 47)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001B548379040>)
	('first_sgoals', 41)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001B54F5FCC70>)

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 63). %* None *%
#program plan_module(#inc, 63, true, true). %* None *%
#program optimisation_module(#inc, 63, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 63, 41, 47, sequential, false). %* None *%

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     62 : Current =     69
Incrementor step ends | Minimum  =     70 : Maximum =    200

[20-01-2022_16-22-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(63), Number(63)]), ('plan_module', [Number(63), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(63), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(64), Number(63)]), ('plan_module', [Number(64), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(64), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(65), Number(63)]), ('plan_module', [Number(65), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(65), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(66), Number(63)]), ('plan_module', [Number(66), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(66), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(67), Number(63)]), ('plan_module', [Number(67), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(67), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(68), Number(63)]), ('plan_module', [Number(68), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(68), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(63)]), ('plan_module', [Number(69), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(69), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.662383s.

[20-01-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.200797s with result Satisfiable.

[20-01-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.863180199999988, Incremental time limit = None
Running cumulative time = 4.863180199999988, Cumulative time limit = 1800
Used memory = (RSS = 334.765625Mb, VMS = 332.296875Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.662383s, Solving = 0.200797s, Total = 4.863180s, Memory = (RSS = 334.765625Mb, VMS = 332.296875Mb), Step range = [63-69]), Calls = 1
Final Model :: Total atoms = 13021, Cost = (6, 0, 0), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[20-01-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     70 : Maximum =    200

[20-01-2022_16-22-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(63)]), ('plan_module', [Number(70), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(70), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.760345s.

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027639s with result Unsatisfiable.

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7879843999999991, Incremental time limit = None
Running cumulative time = 5.651164599999987, Cumulative time limit = 1800
Used memory = (RSS = 338.468750Mb, VMS = 338.726562Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     70 : Maximum =    200

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(63)]), ('plan_module', [Number(71), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(71), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.652805s.

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024226s with result Unsatisfiable.

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6770309000000054, Incremental time limit = None
Running cumulative time = 6.3281954999999925, Cumulative time limit = 1800
Used memory = (RSS = 341.062500Mb, VMS = 339.210938Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     70 : Maximum =    200

[20-01-2022_16-22-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(63)]), ('plan_module', [Number(72), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(72), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.772681s.

[20-01-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041617s with result Unsatisfiable.

[20-01-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8142981999999961, Incremental time limit = None
Running cumulative time = 7.142493699999989, Cumulative time limit = 1800
Used memory = (RSS = 344.058594Mb, VMS = 339.621094Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     70 : Maximum =    200

[20-01-2022_16-22-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(63)]), ('plan_module', [Number(73), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(73), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.770752s.

[20-01-2022_16-22-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040860s with result Unsatisfiable.

[20-01-2022_16-22-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8116119000000168, Incremental time limit = None
Running cumulative time = 7.954105600000005, Cumulative time limit = 1800
Used memory = (RSS = 347.429688Mb, VMS = 340.558594Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     73 : Current =     74
Incrementor step ends | Minimum  =     70 : Maximum =    200

[20-01-2022_16-22-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(74)]), ('state_module', [Number(74), Number(63)]), ('plan_module', [Number(74), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(74), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.788261s.

[20-01-2022_16-22-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044190s with result Unsatisfiable.

[20-01-2022_16-22-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8324506000000014, Incremental time limit = None
Running cumulative time = 8.786556200000007, Cumulative time limit = 1800
Used memory = (RSS = 359.484375Mb, VMS = 362.070312Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     74 : Current =     75
Incrementor step ends | Minimum  =     70 : Maximum =    200

[20-01-2022_16-22-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(75)]), ('state_module', [Number(75), Number(63)]), ('plan_module', [Number(75), Number(63), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(75), Number(63), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(63), Number(41), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.771692s.

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122972s with result Satisfiable.

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.894664199999994, Incremental time limit = None
Running cumulative time = 9.6812204, Cumulative time limit = 1800
Used memory = (RSS = 364.355469Mb, VMS = 364.132812Mb), Total system virtual memory = 16324.18359375Mb

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.178920s, Solving = 0.502301s, Total = 9.681220s, Memory = (RSS = 364.355469Mb, VMS = 364.132812Mb), Step range = [63-75]), Calls = 7
Final Model :: Total atoms = 19203, Cost = (18, 0, -4), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 4.662383s, Solving = 0.200797s, Total = 4.863180s, Memory = (RSS = 334.765625Mb, VMS = 332.296875Mb), Step range = [63-69]
2 : Statistics :: Grounding = 0.760345s, Solving = 0.027639s, Total = 0.787984s, Memory = (RSS = 338.468750Mb, VMS = 338.726562Mb), Step range = [70-70]
3 : Statistics :: Grounding = 0.652805s, Solving = 0.024226s, Total = 0.677031s, Memory = (RSS = 341.062500Mb, VMS = 339.210938Mb), Step range = [71-71]
4 : Statistics :: Grounding = 0.772681s, Solving = 0.041617s, Total = 0.814298s, Memory = (RSS = 344.058594Mb, VMS = 339.621094Mb), Step range = [72-72]
5 : Statistics :: Grounding = 0.770752s, Solving = 0.040860s, Total = 0.811612s, Memory = (RSS = 347.429688Mb, VMS = 340.558594Mb), Step range = [73-73]
6 : Statistics :: Grounding = 0.788261s, Solving = 0.044190s, Total = 0.832451s, Memory = (RSS = 359.484375Mb, VMS = 362.070312Mb), Step range = [74-74]
7 : Statistics :: Grounding = 0.771692s, Solving = 0.122972s, Total = 0.894664s, Memory = (RSS = 364.355469Mb, VMS = 364.132812Mb), Step range = [75-75]

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 9.681220s due to: Stop condition reached.

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[20-01-2022_16-22-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[20-01-2022_16-22-35] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26, 40: 27, 41: 27, 42: 27, 43: 27, 44: 28, 45: 29, 46: 29, 47: 30, 48: 31, 49: 31, 50: 32, 51: 33, 52: 34, 53: 35, 54: 36, 55: 36, 56: 37, 57: 37, 58: 37, 59: 38, 60: 38, 61: 39, 62: 39, 63: 40}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39, 27: 43, 28: 44, 29: 46, 30: 47, 31: 49, 32: 50, 33: 51, 34: 52, 35: 53, 36: 55, 37: 58, 38: 60, 39: 62, 40: 63}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12, 34: 13, 35: 14, 36: 14, 37: 14, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 17, 45: 18, 46: 19, 47: 20}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33, 13: 34, 14: 37, 15: 39, 16: 42, 17: 44, 18: 45, 19: 46, 20: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 11, 17: 11, 18: 12, 19: 13, 20: 13, 21: 14, 22: 15, 23: 15, 24: 15, 25: 15, 26: 15, 27: 16, 28: 16, 29: 17, 30: 18, 31: 19, 32: 20, 33: 21, 34: 22, 35: 23, 36: 23, 37: 24, 38: 25, 39: 26, 40: 27, 41: 27, 42: 27, 43: 27, 44: 28, 45: 29, 46: 29, 47: 30, 48: 31, 49: 31, 50: 32, 51: 33, 52: 34, 53: 35, 54: 36, 55: 36, 56: 37, 57: 37, 58: 37, 59: 38, 60: 38, 61: 39, 62: 39, 63: 40, 64: 41, 65: 41, 66: 42, 67: 42, 68: 42, 69: 43, 70: 43, 71: 44, 72: 45, 73: 46, 74: 46, 75: 47}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 15, 11: 17, 12: 18, 13: 20, 14: 21, 15: 26, 16: 28, 17: 29, 18: 30, 19: 31, 20: 32, 21: 33, 22: 34, 23: 36, 24: 37, 25: 38, 26: 39, 27: 43, 28: 44, 29: 46, 30: 47, 31: 49, 32: 50, 33: 51, 34: 52, 35: 53, 36: 55, 37: 58, 38: 60, 39: 62, 40: 63, 41: 65, 42: 68, 43: 70, 44: 71, 45: 72, 46: 74, 47: 75}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 4, 12: 5, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 5, 19: 5, 20: 5, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 7, 29: 8, 30: 9, 31: 10, 32: 11, 33: 12, 34: 13, 35: 14, 36: 14, 37: 14, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 17, 45: 18, 46: 19, 47: 20}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 10, 4: 11, 5: 20, 6: 27, 7: 28, 8: 29, 9: 30, 10: 31, 11: 32, 12: 33, 13: 34, 14: 37, 15: 39, 16: 42, 17: 44, 18: 45, 19: 46, 20: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 2, 3: 2, 4: 2, 5: 3, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 5, 17: 5, 18: 6, 19: 6, 20: 6}
Sub-goal achievement steps: {1: 1, 2: 4, 3: 5, 4: 12, 5: 17, 6: 20}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[20-01-2022_16-22-36] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 47, Last requested goal index = 47, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[20-01-2022_16-22-36] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.178920s, Solving = 0.502301s, Total = 9.681220s, Memory = (RSS = 364.355469Mb, VMS = 364.132812Mb), Step range = [63-75]), Calls = 7
Model :: Total atoms = 19203, Cost = (18, 0, -4), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 12 :: Actions = 18                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
        talos : grasp(manipulator_end_2,(block,8))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,4))
        talos : release(manipulator_end_2,(block,8))
Step 16:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 17:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 11] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 18:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 12] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 20:
    Current Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 13] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 21:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 22:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 24:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 25:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 26:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 28:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 29:
    Current Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 17] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 30:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 31:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 32:
    Current Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 20] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 21] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 21] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 36:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 37:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 38:
    Current Sub-goals:
        [Index = 25] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 25] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 39:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 42:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : release(manipulator_end_2,(block,6))
Step 45:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 46:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
        talos : release(manipulator_end_2,(block,3))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
        talos : grasp(manipulator_end_1,(block,2))
Step 50:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 51:
    Current Sub-goals:
        [Index = 33] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
        talos : release(manipulator_end_1,(block,2))
Step 52:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 53:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 54:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 55:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 56:
    Current Sub-goals:
        [Index = 37] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 37] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 58:
    Current Sub-goals:
        [Index = 37] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 37] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 59:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 60:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 61:
    Current Sub-goals:
        [Index = 39] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 39] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 39] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 39] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
        [Index = 39] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
        talos : grasp(manipulator_end_2,(block,4))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 40] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 40] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 64:
    Current Sub-goals:
        [Index = 41] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 41] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 66:
    Current Sub-goals:
        [Index = 42] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 67:
    Current Sub-goals:
        [Index = 42] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 68:
    Current Sub-goals:
        [Index = 42] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 42] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 69:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 70:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,8),(block,9))
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 72:
    Current Sub-goals:
        [Index = 45] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
        [Index = 45] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 45] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
        [Index = 45] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,8))
        talos : release(manipulator_end_2,(block,4))
Step 73:
    Current Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 46] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
        talos : configure(manipulator_end_2,aligned_with((block,7)))
Step 74:
    Current Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 46] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Achieved Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 46] talos : grasp(manipulator_arm_2,(block,7)) -> grasping(manipulator_arm_2) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
        talos : grasp(manipulator_end_2,(block,7))
Step 75:
    Current Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 47] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 47] talos : put(manipulator_arm_2,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
        talos : put(manipulator_end_2,(block,7),(block,8))

[20-01-2022_16-22-36] INFO :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[20-01-2022_16-22-36] INFO :: ASH Planner Main #1 >> Online planning increment 8 finished.

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=75, step_range=range(0, 76)

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 75, Tota actions = 100, Produced sub-goal stages = 0

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=47, step_range=range(0, 48)

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 75, Tota actions = 100, Produced sub-goal stages = 0

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 75, Tota actions = 100, Produced sub-goal stages = 0

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=4, start_step=0, total_plan_length=6, step_range=range(0, 7)

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 75, Tota actions = 100, Produced sub-goal stages = 0

[20-01-2022_16-22-36] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 75, Actions = 100

[20-01-2022_16-22-36] INFO :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 10.160508700000001, Average ground wait time = 11.413302412500006, Absolution time = 90.71564180000004)

     ========================================================================================================================================================================================================     
     |        Lvl = 4 (classic), LE =   6, AC =  15, CF = 0.4, GT =   0.82s, ST =   0.11s, OT = 0.00s, TT =   0.93s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 3 (com-ref), LE =  20, AC =  33, CF = 0.6, GT =   5.31s, ST =   3.00s, OT = 0.00s, TT =   8.30s, EF = (LE = 3.3, AC = 1.2), ED = (LE = 2.3, AC = 0.4), EB = (LE = 0.7, AC = 0.4)        |     
     |        Lvl = 2 (com-ref), LE =  47, AC =  67, CF = 0.7, GT =  14.62s, ST =   4.91s, OT = 0.00s, TT =  19.52s, EF = (LE = 2.4, AC = 2.0), ED = (LE = 2.4, AC = 2.6), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  75, AC = 100, CF = 0.8, GT =  57.87s, ST =   4.09s, OT = 0.00s, TT =  61.96s, EF = (LE = 1.6, AC = 1.5), ED = (LE = 0.9, AC = 0.8), EB = (LE = 0.5, AC = 0.5)        |     
     ========================================================================================================================================================================================================     

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=75, step_range=range(0, 76)

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 75, Tota actions = 100, Produced sub-goal stages = 0

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=47, step_range=range(0, 48)

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 75, Tota actions = 100, Produced sub-goal stages = 0

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 75, Tota actions = 100, Produced sub-goal stages = 0

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=4, start_step=0, total_plan_length=6, step_range=range(0, 7)

[20-01-2022_16-22-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [4]: Length = 6, Tota actions = 15, Produced sub-goal stages = 28
Level [3]: Length = 20, Tota actions = 33, Produced sub-goal stages = 33
Level [2]: Length = 47, Tota actions = 67, Produced sub-goal stages = 67
Level [1]: Length = 75, Tota actions = 100, Produced sub-goal stages = 0

[20-01-2022_16-22-36] INFO :: __main__ >> Saving generated plan to file: ./solutions/plans/ASH_Plan_2022-01-20_16-20-52.txt

[20-01-2022_16-22-36] INFO :: __main__ >> Saving generated refinement schema to file: ./solutions/schemas/ASH_Schema_2022-01-20_16-20-52.txt

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[20-01-2022_16-22-36] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Ollie Kampo\\Anaconda3\\envs\\ASH_2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[20-01-2022_16-22-45] INFO :: __main__ >> Overall time: Real = 113.1596408, Process = 136.796875

[20-01-2022_16-22-45] INFO :: __main__ >> Exiting with code 0

