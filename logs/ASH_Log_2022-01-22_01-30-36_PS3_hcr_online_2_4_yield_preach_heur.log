[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 65).
holds(1, complete_tower(red,puzzle_room_table), false, 65).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 65).
holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 65).
holds(1, configuration(manipulator_limb_1), extended, 65).
holds(1, configuration(manipulator_limb_2), extended, 65).
holds(1, configuration(puzzle_room_door), open, 65).
holds(1, configuration(starting_room_door), closed, 65).
holds(1, configuration(store_room_door), open, 65).
holds(1, grasping(manipulator_arm_1), (block,4), 65).
holds(1, grasping(manipulator_arm_2), (block,2), 65).
holds(1, grasping(manipulator_end_1), (block,4), 65).
holds(1, grasping(manipulator_end_2), (block,2), 65).
holds(1, in((block,1)), (puzzle_room,1), 65).
holds(1, in((block,2)), (puzzle_room,1), 65).
holds(1, in((block,3)), (puzzle_room,1), 65).
holds(1, in((block,4)), (puzzle_room,1), 65).
holds(1, in((block,5)), (puzzle_room,1), 65).
holds(1, in((block,6)), (puzzle_room,1), 65).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 65).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 65).
holds(1, in(manipulator_end_1), (puzzle_room,1), 65).
holds(1, in(manipulator_end_2), (puzzle_room,1), 65).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 65).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 65).
holds(1, in(puzzle_room_table), (puzzle_room,1), 65).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 65).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 65).
holds(1, in(talos), (puzzle_room,1), 65).
holds(1, in_tower((block,1),(block,1)), true, 65).
holds(1, in_tower((block,1),(block,2)), false, 65).
holds(1, in_tower((block,1),(block,3)), false, 65).
holds(1, in_tower((block,1),(block,4)), false, 65).
holds(1, in_tower((block,1),(block,5)), false, 65).
holds(1, in_tower((block,1),(block,6)), false, 65).
holds(1, in_tower((block,2),(block,1)), false, 65).
holds(1, in_tower((block,2),(block,2)), false, 65).
holds(1, in_tower((block,2),(block,3)), false, 65).
holds(1, in_tower((block,2),(block,4)), false, 65).
holds(1, in_tower((block,2),(block,5)), false, 65).
holds(1, in_tower((block,2),(block,6)), false, 65).
holds(1, in_tower((block,3),(block,1)), false, 65).
holds(1, in_tower((block,3),(block,2)), true, 65).
holds(1, in_tower((block,3),(block,3)), true, 65).
holds(1, in_tower((block,3),(block,4)), false, 65).
holds(1, in_tower((block,3),(block,5)), false, 65).
holds(1, in_tower((block,3),(block,6)), false, 65).
holds(1, in_tower((block,4),(block,1)), false, 65).
holds(1, in_tower((block,4),(block,2)), false, 65).
holds(1, in_tower((block,4),(block,3)), false, 65).
holds(1, in_tower((block,4),(block,4)), false, 65).
holds(1, in_tower((block,4),(block,5)), false, 65).
holds(1, in_tower((block,4),(block,6)), false, 65).
holds(1, in_tower((block,5),(block,1)), false, 65).
holds(1, in_tower((block,5),(block,2)), false, 65).
holds(1, in_tower((block,5),(block,3)), false, 65).
holds(1, in_tower((block,5),(block,4)), false, 65).
holds(1, in_tower((block,5),(block,5)), false, 65).
holds(1, in_tower((block,5),(block,6)), false, 65).
holds(1, in_tower((block,6),(block,1)), false, 65).
holds(1, in_tower((block,6),(block,2)), false, 65).
holds(1, in_tower((block,6),(block,3)), false, 65).
holds(1, in_tower((block,6),(block,4)), true, 65).
holds(1, in_tower((block,6),(block,5)), true, 65).
holds(1, in_tower((block,6),(block,6)), true, 65).
holds(1, on((block,1)), puzzle_room_table_left, 65).
holds(1, on((block,2)), (block,3), 65).
holds(1, on((block,3)), puzzle_room_table_left, 65).
holds(1, on((block,4)), (block,5), 65).
holds(1, on((block,5)), (block,6), 65).
holds(1, on((block,6)), puzzle_room_table_right, 65).
holds(1, tower_base((block,1),puzzle_room_table), true, 65).
holds(1, tower_base((block,2),puzzle_room_table), false, 65).
holds(1, tower_base((block,3),puzzle_room_table), true, 65).
holds(1, tower_base((block,4),puzzle_room_table), false, 65).
holds(1, tower_base((block,5),puzzle_room_table), false, 65).
holds(1, tower_base((block,6),puzzle_room_table), true, 65).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 65).
holds(2, complete_tower(blue,puzzle_room_table), true, 65).
holds(2, complete_tower(red,puzzle_room_table), false, 65).
holds(2, configuration(manipulator_arm_1), extended, 65).
holds(2, configuration(manipulator_arm_2), extended, 65).
holds(2, configuration(puzzle_room_door), open, 65).
holds(2, configuration(starting_room_door), closed, 65).
holds(2, configuration(store_room_door), open, 65).
holds(2, grasping(manipulator_arm_1), (block,4), 65).
holds(2, grasping(manipulator_arm_2), (block,2), 65).
holds(2, in((block,1)), puzzle_room, 65).
holds(2, in((block,2)), puzzle_room, 65).
holds(2, in((block,3)), puzzle_room, 65).
holds(2, in((block,4)), puzzle_room, 65).
holds(2, in((block,5)), puzzle_room, 65).
holds(2, in((block,6)), puzzle_room, 65).
holds(2, in(manipulator_arm_1), puzzle_room, 65).
holds(2, in(manipulator_arm_2), puzzle_room, 65).
holds(2, in(puzzle_room_table), puzzle_room, 65).
holds(2, in(talos), puzzle_room, 65).
holds(2, in_tower((block,1),(block,1)), true, 65).
holds(2, in_tower((block,1),(block,2)), false, 65).
holds(2, in_tower((block,1),(block,3)), false, 65).
holds(2, in_tower((block,1),(block,4)), false, 65).
holds(2, in_tower((block,1),(block,5)), false, 65).
holds(2, in_tower((block,1),(block,6)), false, 65).
holds(2, in_tower((block,2),(block,1)), false, 65).
holds(2, in_tower((block,2),(block,2)), false, 65).
holds(2, in_tower((block,2),(block,3)), false, 65).
holds(2, in_tower((block,2),(block,4)), false, 65).
holds(2, in_tower((block,2),(block,5)), false, 65).
holds(2, in_tower((block,2),(block,6)), false, 65).
holds(2, in_tower((block,3),(block,1)), false, 65).
holds(2, in_tower((block,3),(block,2)), true, 65).
holds(2, in_tower((block,3),(block,3)), true, 65).
holds(2, in_tower((block,3),(block,4)), false, 65).
holds(2, in_tower((block,3),(block,5)), false, 65).
holds(2, in_tower((block,3),(block,6)), false, 65).
holds(2, in_tower((block,4),(block,1)), false, 65).
holds(2, in_tower((block,4),(block,2)), false, 65).
holds(2, in_tower((block,4),(block,3)), false, 65).
holds(2, in_tower((block,4),(block,4)), false, 65).
holds(2, in_tower((block,4),(block,5)), false, 65).
holds(2, in_tower((block,4),(block,6)), false, 65).
holds(2, in_tower((block,5),(block,1)), false, 65).
holds(2, in_tower((block,5),(block,2)), false, 65).
holds(2, in_tower((block,5),(block,3)), false, 65).
holds(2, in_tower((block,5),(block,4)), false, 65).
holds(2, in_tower((block,5),(block,5)), false, 65).
holds(2, in_tower((block,5),(block,6)), false, 65).
holds(2, in_tower((block,6),(block,1)), false, 65).
holds(2, in_tower((block,6),(block,2)), false, 65).
holds(2, in_tower((block,6),(block,3)), false, 65).
holds(2, in_tower((block,6),(block,4)), true, 65).
holds(2, in_tower((block,6),(block,5)), true, 65).
holds(2, in_tower((block,6),(block,6)), true, 65).
holds(2, on((block,1)), puzzle_room_table, 65).
holds(2, on((block,2)), (block,3), 65).
holds(2, on((block,3)), puzzle_room_table, 65).
holds(2, on((block,4)), (block,5), 65).
holds(2, on((block,5)), (block,6), 65).
holds(2, on((block,6)), puzzle_room_table, 65).
holds(2, tower_base((block,1),puzzle_room_table), true, 65).
holds(2, tower_base((block,2),puzzle_room_table), false, 65).
holds(2, tower_base((block,3),puzzle_room_table), true, 65).
holds(2, tower_base((block,4),puzzle_room_table), false, 65).
holds(2, tower_base((block,5),puzzle_room_table), false, 65).
holds(2, tower_base((block,6),puzzle_room_table), true, 65).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 65).

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 42})

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 40).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 41).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 42).

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000021CA14A15E0>]
	incrementor = SolveIncrementor(step_start=65, step_increase=1, step_increase_initial=2, step_end_min=68, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 65), range_=None), IncPart(name='plan_module', args=('#inc', 65, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 65, 'false', 'false', 'true', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 65, 40, 42, 'sequential', 'true'), range_=None)]

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 811 rules

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004535199999963879s

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029215s.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005109s with result Satisfiable.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000021CDD259360>

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 65)
	('last_sgoals', 42)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000021CA1455100>)
	('first_sgoals', 40)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000021CDD259360>)

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(40, 66)', truth=True, inc_range=None)

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 65). %* None *%
#program plan_module(#inc, 65, false, false). %* None *%
#program optimisation_module(#inc, 65, false, false, true, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 65, 40, 42, sequential, true). %* None *%

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     64 : Current =     66
Incrementor step ends | Minimum  =     68 : Maximum =    100

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(65), Number(65)]), ('plan_module', [Number(65), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(65), Number(40), Number(42), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(66), Number(65)]), ('plan_module', [Number(66), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(65), Number(40), Number(42), Function('sequential', [], True), Function('true', [], True)])]

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121331s.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 65: original = External(symbol='current_last_sgoals(40, 66)', truth=True, inc_range=None), conversion = current_last_sgoals(40,66).

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 66: original = External(symbol='current_last_sgoals(40, 66)', truth=True, inc_range=None), conversion = current_last_sgoals(40,66).

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011545s with result Satisfiable.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13287560000003396, Incremental time limit = None
Running cumulative time = 0.13287560000003396, Cumulative time limit = 1800
Used memory = (RSS = 1041.835938Mb, VMS = 1034.878906Mb), Total system virtual memory = 16324.0078125Mb

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.121331s, Solving = 0.011545s, Total = 0.132876s, Memory = (RSS = 1041.835938Mb, VMS = 1034.878906Mb), Step range = [65-66]), Calls = 1
Final Model :: Total atoms = 4153, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=64, end_step=66, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.1213310000000547, solving_time=0.011544599999979255, total_time=0.13287560000003396, memory=Memory(rss=1041.8359375, vms=1034.87890625), step_range=range(65, 67), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1213310000000547, solving_time=0.011544599999979255, total_time=0.13287560000003396, memory=Memory(rss=1041.8359375, vms=1034.87890625), step_range=range(65, 67), clingo_stats={'problem': {'lp': {'atoms': 12189.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27314.0, 'bodies_tr': 27314.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 259.0, 'count_bodies_tr': 259.0, 'sccs': 32.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 409.0, 'rules': 55870.0, 'rules_normal': 55314.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 55861.0, 'rules_tr_normal': 55314.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 3.0, 'eqs': 22748.0, 'eqs_atom': 7122.0, 'eqs_body': 2030.0, 'eqs_other': 13596.0}, 'lpStep': {'atoms': 5671.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24695.0, 'bodies_tr': 24695.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 259.0, 'count_bodies_tr': 259.0, 'sccs': 32.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 409.0, 'rules': 48442.0, 'rules_normal': 47886.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 48433.0, 'rules_tr_normal': 47886.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 3.0, 'eqs': 9692.0, 'eqs_atom': 2212.0, 'eqs_body': 505.0, 'eqs_other': 6975.0}, 'generator': {'vars': 1826.0, 'vars_eliminated': 0.0, 'vars_frozen': 1288.0, 'constraints': 25.0, 'constraints_binary': 1223.0, 'constraints_ternary': 172.0, 'acyc_edges': 0.0, 'complexity': 1446.0}}, 'solving': {'solvers': {'choices': 72.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 66.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.13302230834960938, 'cpu': 0.140625, 'solve': 0.005001068115234375, 'unsat': 0.0, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1720294952392578, 'cpu': 0.1875, 'solve': 0.00701141357421875, 'unsat': 0.0, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 72.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 24.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 72.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{40: 66}

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 41 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 2 ( 66.67% solved)

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(41, 66)', truth=True, inc_range=None)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 41, step = 66]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 41)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 66:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     68 : Maximum =    100

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(65)]), ('plan_module', [Number(67), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(65), Number(40), Number(42), Function('sequential', [], True), Function('true', [], True)])]

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082765s.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 67: original = External(symbol='current_last_sgoals(41, 66)', truth=True, inc_range=None), conversion = current_last_sgoals(41,66).

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004871s with result Unsatisfiable.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08763650000014422, Incremental time limit = None
Running cumulative time = 0.22051210000017818, Cumulative time limit = 1800
Used memory = (RSS = 1041.843750Mb, VMS = 1034.878906Mb), Total system virtual memory = 16324.0078125Mb

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=66, end_step=67, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.20409630000017387, solving_time=0.01641580000000431, total_time=0.22051210000017818, memory=Memory(rss=1041.84375, vms=1034.87890625), step_range=range(65, 68), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08276530000011917, solving_time=0.0048712000000250555, total_time=0.08763650000014422, memory=Memory(rss=1041.84375, vms=1034.87890625), step_range=range(67, 68), clingo_stats={'problem': {'lp': {'atoms': 13936.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49011.0, 'bodies_tr': 49011.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 461.0, 'count_bodies_tr': 461.0, 'sccs': 40.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 480.0, 'rules': 97056.0, 'rules_normal': 96292.0, 'rules_choice': 738.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 97037.0, 'rules_tr_normal': 96292.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 25871.0, 'eqs_atom': 7617.0, 'eqs_body': 2350.0, 'eqs_other': 15904.0}, 'lpStep': {'atoms': 1747.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21697.0, 'bodies_tr': 21697.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 71.0, 'rules': 41186.0, 'rules_normal': 40978.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 41176.0, 'rules_tr_normal': 40978.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 3123.0, 'eqs_atom': 495.0, 'eqs_body': 320.0, 'eqs_other': 2308.0}, 'generator': {'vars': 2281.0, 'vars_eliminated': 0.0, 'vars_frozen': 1605.0, 'constraints': 77.0, 'constraints_binary': 3770.0, 'constraints_ternary': 450.0, 'acyc_edges': 0.0, 'complexity': 4337.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.08900642395019531, 'cpu': 0.09375, 'solve': 0.0009918212890625, 'unsat': 0.0009918212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2610359191894531, 'cpu': 0.28125, 'solve': 0.00800323486328125, 'unsat': 0.0009918212890625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 72.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 24.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 168.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 67:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     68 : Maximum =    100

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(65)]), ('plan_module', [Number(68), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(65), Number(40), Number(42), Function('sequential', [], True), Function('true', [], True)])]

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085290s.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011008s with result Satisfiable.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09629799999993338, Incremental time limit = None
Running cumulative time = 0.31681010000011156, Cumulative time limit = 1800
Used memory = (RSS = 1041.847656Mb, VMS = 1034.878906Mb), Total system virtual memory = 16324.0078125Mb

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.289386s, Solving = 0.027424s, Total = 0.316810s, Memory = (RSS = 1041.847656Mb, VMS = 1034.878906Mb), Step range = [65-68]), Calls = 3
Final Model :: Total atoms = 4896, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=67, end_step=68, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2893860000001496, solving_time=0.02742409999996198, total_time=0.31681010000011156, memory=Memory(rss=1041.84765625, vms=1034.87890625), step_range=range(65, 69), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08528969999997571, solving_time=0.011008299999957671, total_time=0.09629799999993338, memory=Memory(rss=1041.84765625, vms=1034.87890625), step_range=range(68, 69), clingo_stats={'problem': {'lp': {'atoms': 15852.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 70999.0, 'bodies_tr': 70999.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 663.0, 'count_bodies_tr': 663.0, 'sccs': 59.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 692.0, 'rules': 138652.0, 'rules_normal': 137680.0, 'rules_choice': 933.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 138623.0, 'rules_tr_normal': 137680.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 7.0, 'eqs': 31612.0, 'eqs_atom': 8346.0, 'eqs_body': 2830.0, 'eqs_other': 20436.0}, 'lpStep': {'atoms': 1916.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21988.0, 'bodies_tr': 21988.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 19.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 212.0, 'rules': 41596.0, 'rules_normal': 41388.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 41586.0, 'rules_tr_normal': 41388.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 5741.0, 'eqs_atom': 729.0, 'eqs_body': 480.0, 'eqs_other': 4532.0}, 'generator': {'vars': 3100.0, 'vars_eliminated': 0.0, 'vars_frozen': 2109.0, 'constraints': 234.0, 'constraints_binary': 8469.0, 'constraints_ternary': 1033.0, 'acyc_edges': 0.0, 'complexity': 9830.0}}, 'solving': {'solvers': {'choices': 150.0, 'conflicts': 6.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 6.0, 'models': 1.0, 'models_level': 45.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 30.0, 'lemmas': 36.0, 'lits_learnt': 144.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 30.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 0.0, 'lemmas_other': 30.0, 'lits_conflict': 24.0, 'lits_loop': 0.0, 'lits_other': 120.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 6.0, 'levels': 12.0, 'levels_bounded': 6.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.09702110290527344, 'cpu': 0.09375, 'solve': 0.005001068115234375, 'unsat': 0.0, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.35805702209472656, 'cpu': 0.375, 'solve': 0.013004302978515625, 'unsat': 0.0009918212890625, 'sat': 0.0019989013671875}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 222.0, 'conflicts': 8.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 6.0, 'models': 3.0, 'models_level': 69.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 30.0, 'lemmas': 44.0, 'lits_learnt': 152.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 30.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 294.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 8.0, 'lemmas_other': 30.0, 'lits_conflict': 24.0, 'lits_loop': 8.0, 'lits_other': 120.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 6.0, 'levels': 12.0, 'levels_bounded': 6.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{40: 66, 41: 68}

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 42 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 3 (100.00% solved)

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(42, 68)', truth=True, inc_range=None)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 42, step = 68]:
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 42)

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(68)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete_tower(blue,puzzle_room_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1),puzzle_room_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_table), true, true)
final_goal(1, tower_base((block,4),puzzle_room_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_table), true, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false)

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     68 : Current =     69
Incrementor step ends | Minimum  =     68 : Maximum =    100

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(69), Number(65)]), ('plan_module', [Number(69), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(65), Number(40), Number(42), Function('sequential', [], True), Function('true', [], True)])]

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092175s.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 69: original = External(symbol='current_last_sgoals(42, 68)', truth=True, inc_range=None), conversion = current_last_sgoals(42,68).

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 69: original = External(symbol='seq_achieve_fgoals(68)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(68).

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015128s with result Satisfiable.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10730369999987488, Incremental time limit = None
Running cumulative time = 0.42411379999998644, Cumulative time limit = 1800
Used memory = (RSS = 1041.847656Mb, VMS = 1034.878906Mb), Total system virtual memory = 16324.0078125Mb

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.381561s, Solving = 0.042552s, Total = 0.424114s, Memory = (RSS = 1041.847656Mb, VMS = 1034.878906Mb), Step range = [65-69]), Calls = 4
Final Model :: Total atoms = 5558, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=68, end_step=69, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.38156130000015764, solving_time=0.0425524999998288, total_time=0.42411379999998644, memory=Memory(rss=1041.84765625, vms=1034.87890625), step_range=range(65, 70), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09217530000000806, solving_time=0.015128399999866815, total_time=0.10730369999987488, memory=Memory(rss=1041.84765625, vms=1034.87890625), step_range=range(69, 70), clingo_stats={'problem': {'lp': {'atoms': 18722.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94168.0, 'bodies_tr': 94168.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 865.0, 'count_bodies_tr': 865.0, 'sccs': 84.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1178.0, 'rules': 182254.0, 'rules_normal': 181074.0, 'rules_choice': 1128.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 182223.0, 'rules_tr_normal': 181074.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 17.0, 'eqs': 38613.0, 'eqs_atom': 9777.0, 'eqs_body': 2995.0, 'eqs_other': 25841.0}, 'lpStep': {'atoms': 2870.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23169.0, 'bodies_tr': 23169.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 43602.0, 'rules_normal': 43394.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 43600.0, 'rules_tr_normal': 43394.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 7001.0, 'eqs_atom': 1431.0, 'eqs_body': 165.0, 'eqs_other': 5405.0}, 'generator': {'vars': 4878.0, 'vars_eliminated': 0.0, 'vars_frozen': 3180.0, 'constraints': 691.0, 'constraints_binary': 25341.0, 'constraints_ternary': 2960.0, 'acyc_edges': 0.0, 'complexity': 29164.0}}, 'solving': {'solvers': {'choices': 180.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 56.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 156.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.10802459716796875, 'cpu': 0.09375, 'solve': 0.006000518798828125, 'unsat': 0.0, 'sat': 0.00199127197265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4660816192626953, 'cpu': 0.46875, 'solve': 0.01900482177734375, 'unsat': 0.0009918212890625, 'sat': 0.00399017333984375}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 402.0, 'conflicts': 8.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 6.0, 'models': 4.0, 'models_level': 125.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 30.0, 'lemmas': 44.0, 'lits_learnt': 152.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 30.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 450.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 8.0, 'lemmas_other': 30.0, 'lits_conflict': 24.0, 'lits_loop': 8.0, 'lits_other': 120.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 6.0, 'levels': 12.0, 'levels_bounded': 6.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{40: 66, 41: 68, 42: 69}

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 43 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 4 (133.33% solved)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 42 was achieved successfully.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.121331s, Solving = 0.011545s, Total = 0.132876s, Memory = (RSS = 1041.835938Mb, VMS = 1034.878906Mb), Step range = [65-66]
2 : Statistics :: Grounding = 0.082765s, Solving = 0.004871s, Total = 0.087637s, Memory = (RSS = 1041.843750Mb, VMS = 1034.878906Mb), Step range = [67-67]
3 : Statistics :: Grounding = 0.085290s, Solving = 0.011008s, Total = 0.096298s, Memory = (RSS = 1041.847656Mb, VMS = 1034.878906Mb), Step range = [68-68]
4 : Statistics :: Grounding = 0.092175s, Solving = 0.015128s, Total = 0.107304s, Memory = (RSS = 1041.847656Mb, VMS = 1034.878906Mb), Step range = [69-69]

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.424114s due to: External generator exit.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-01-2022_01-49-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 15, 28: 15, 29: 16, 30: 16, 31: 17, 32: 18, 33: 19, 34: 20, 35: 20, 36: 21, 37: 21, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 24, 44: 25, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 29, 51: 29, 52: 29, 53: 30, 54: 30, 55: 31, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 36, 62: 37, 63: 38, 64: 38, 65: 39}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 28, 16: 30, 17: 31, 18: 32, 19: 33, 20: 35, 21: 38, 22: 40, 23: 42, 24: 43, 25: 45, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55, 32: 56, 33: 57, 34: 59, 35: 60, 36: 61, 37: 62, 38: 64, 39: 65}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 6, 21: 6, 22: 7, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 21, 7: 23, 8: 25, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 15, 28: 15, 29: 16, 30: 16, 31: 17, 32: 18, 33: 19, 34: 20, 35: 20, 36: 21, 37: 21, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 24, 44: 25, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 29, 51: 29, 52: 29, 53: 30, 54: 30, 55: 31, 56: 32, 57: 33, 58: 34, 59: 34, 60: 35, 61: 36, 62: 37, 63: 38, 64: 38, 65: 39, 66: 40, 67: 41, 68: 41, 69: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 28, 16: 30, 17: 31, 18: 32, 19: 33, 20: 35, 21: 38, 22: 40, 23: 42, 24: 43, 25: 45, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55, 32: 56, 33: 57, 34: 59, 35: 60, 36: 61, 37: 62, 38: 64, 39: 65, 40: 66, 41: 68, 42: 69}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 6, 21: 6, 22: 7, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 21, 7: 23, 8: 25, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 42, Last requested goal index = 42, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.381561s, Solving = 0.042552s, Total = 0.424114s, Memory = (RSS = 1041.847656Mb, VMS = 1034.878906Mb), Step range = [65-69]), Calls = 4
Model :: Total atoms = 5558, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 4 :: Actions = 4                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 20] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 20] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 36:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 37:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 38:
    Current Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 21] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 41:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 42:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 43:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 47:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 51:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 52:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 53:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 54:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 55:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 56:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 58:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 59:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 60:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 61:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 62:
    Current Sub-goals:
        [Index = 37] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 37] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 64:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 65:
    Current Sub-goals:
        [Index = 39] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 39] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 66:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 67:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 68:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 69:
    Current Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=69, step_range=range(0, 70)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Tota actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 69, Tota actions = 69, Produced sub-goal stages = 0

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=42, step_range=range(0, 43)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Tota actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 69, Tota actions = 69, Produced sub-goal stages = 0

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Tota actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 69, Tota actions = 69, Produced sub-goal stages = 0

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 69, Actions = 69

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 9.257077699998263, Average ground wait time = 2.2433985375000702, Absolution time = 17.675096700000495)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.14s, ST =   0.78s, OT = 0.00s, TT =   1.92s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  42, AC =  42, CF = 1.0, GT =   3.54s, ST =   2.73s, OT = 0.02s, TT =   6.29s, EF = (LE = 2.1, AC = 2.1), ED = (LE = 2.0, AC = 2.0), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  69, AC =  69, CF = 1.0, GT =   7.05s, ST =   2.38s, OT = 0.03s, TT =   9.47s, EF = (LE = 1.6, AC = 1.6), ED = (LE = 0.9, AC = 0.9), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=69, step_range=range(0, 70)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Tota actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 69, Tota actions = 69, Produced sub-goal stages = 0

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=42, step_range=range(0, 43)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Tota actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 69, Tota actions = 69, Produced sub-goal stages = 0

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[22-01-2022_01-49-17] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Tota actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 69, Tota actions = 69, Produced sub-goal stages = 0

[22-01-2022_01-49-17] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 22.444727s            
      ================================================      

[22-01-2022_01-49-17] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 1075.155773s, Proccess time 1630.734375s         
  ################################################################################################  

[22-01-2022_01-49-17] DEBUG :: Experiment >> Refinement spread at run=0, level=2: rmse_mchild=7.540888541809909, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[22-01-2022_01-49-17] DEBUG :: Experiment >> Refinement spread at run=0, level=1: rmse_mchild=3.3615444521161004, rmse_div_indices=5.236092690801669, rmse_div_steps=11.946349977201312

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=1, level=2: rmse_mchild=5.601785429664366, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=1, level=1: rmse_mchild=2.625909917069125, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=2, level=2: rmse_mchild=7.352550577860718, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=2, level=1: rmse_mchild=2.6649604992963605, rmse_div_indices=4.041451884327381, rmse_div_steps=8.973340143632878

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=3, level=2: rmse_mchild=5.4120236510939215, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=3, level=1: rmse_mchild=2.2831013233959983, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=4, level=2: rmse_mchild=5.9565090447341715, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=4, level=1: rmse_mchild=2.4700164786816075, rmse_div_indices=3.3166247903554, rmse_div_steps=7.330965526829025

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=5, level=2: rmse_mchild=7.3095827514297955, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=5, level=1: rmse_mchild=2.5808717055155164, rmse_div_indices=4.041451884327381, rmse_div_steps=8.876858177931599

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=6, level=2: rmse_mchild=4.969909455915671, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=6, level=1: rmse_mchild=2.7864322251679714, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.351723796382303

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=7, level=2: rmse_mchild=6.007495318350235, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=7, level=1: rmse_mchild=2.470852815601049, rmse_div_indices=1.855921454276674, rmse_div_steps=4.766054739276268

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=8, level=2: rmse_mchild=4.895916665957458, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=8, level=1: rmse_mchild=1.6616574171293033, rmse_div_indices=1.1055415967851334, rmse_div_steps=2.706730294818619

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=9, level=2: rmse_mchild=7.317786550590279, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[22-01-2022_01-49-18] DEBUG :: Experiment >> Refinement spread at run=9, level=1: rmse_mchild=2.6014041821693636, rmse_div_indices=4.041451884327381, rmse_div_steps=8.870597499605086

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=10, level=2: rmse_mchild=5.916079783099615, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=10, level=1: rmse_mchild=2.4375993304617896, rmse_div_indices=1.855921454276674, rmse_div_steps=4.766054739276268

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=11, level=2: rmse_mchild=5.980802621722271, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=11, level=1: rmse_mchild=1.9401558044277112, rmse_div_indices=1.855921454276674, rmse_div_steps=4.108764345207017

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=12, level=2: rmse_mchild=6.032412452742268, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=12, level=1: rmse_mchild=2.4750302611055943, rmse_div_indices=1.855921454276674, rmse_div_steps=4.698551786336816

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=13, level=2: rmse_mchild=5.923681287847954, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=13, level=1: rmse_mchild=1.942816286725777, rmse_div_indices=1.855921454276674, rmse_div_steps=4.0371538379297744

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=14, level=2: rmse_mchild=7.411477585475112, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=14, level=1: rmse_mchild=2.598622887048234, rmse_div_indices=4.041451884327381, rmse_div_steps=8.973340143632878

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=15, level=2: rmse_mchild=5.452522352086233, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=15, level=1: rmse_mchild=2.1591507168749975, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=16, level=2: rmse_mchild=5.458021619598075, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=16, level=1: rmse_mchild=2.53564465208611, rmse_div_indices=1.855921454276674, rmse_div_steps=4.855552377319071

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=17, level=2: rmse_mchild=7.294518489934753, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[22-01-2022_01-49-19] DEBUG :: Experiment >> Refinement spread at run=17, level=1: rmse_mchild=2.6014041821693636, rmse_div_indices=4.041451884327381, rmse_div_steps=8.870597499605086

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=18, level=2: rmse_mchild=7.069653456853453, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=18, level=1: rmse_mchild=2.2923583979808644, rmse_div_indices=4.041451884327381, rmse_div_steps=8.287792227125388

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=19, level=2: rmse_mchild=5.366563145999494, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=19, level=1: rmse_mchild=2.8469481267426766, rmse_div_indices=1.855921454276674, rmse_div_steps=4.8498281756504875

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=20, level=2: rmse_mchild=6.402343321003645, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=20, level=1: rmse_mchild=2.4568066184237187, rmse_div_indices=3.3166247903554, rmse_div_steps=7.330965526829025

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=21, level=2: rmse_mchild=5.792236183029831, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=21, level=1: rmse_mchild=2.5356446520861096, rmse_div_indices=1.855921454276674, rmse_div_steps=4.766054739276268

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=22, level=2: rmse_mchild=7.116178749862876, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=22, level=1: rmse_mchild=2.0697421686355297, rmse_div_indices=4.041451884327381, rmse_div_steps=8.287792227125388

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=23, level=2: rmse_mchild=5.462600113499064, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=23, level=1: rmse_mchild=2.5786692544735046, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=24, level=2: rmse_mchild=6.523802572120035, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=24, level=1: rmse_mchild=3.0295974557359333, rmse_div_indices=3.3166247903554, rmse_div_steps=8.022104877565905

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=25, level=2: rmse_mchild=4.678675026115833, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-20] DEBUG :: Experiment >> Refinement spread at run=25, level=1: rmse_mchild=2.3051662244432736, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.861310946067698

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=26, level=2: rmse_mchild=4.7074409183759265, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=26, level=1: rmse_mchild=2.975580712821009, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=27, level=2: rmse_mchild=7.762409419761365, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=27, level=1: rmse_mchild=2.978871808030223, rmse_div_indices=5.236092690801669, rmse_div_steps=11.275280237956148

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=28, level=2: rmse_mchild=5.612931497889493, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=28, level=1: rmse_mchild=1.71205211631527, rmse_div_indices=1.9364916731037085, rmse_div_steps=4.443315828922761

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=29, level=2: rmse_mchild=5.592405564692173, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=29, level=1: rmse_mchild=1.7425741378346986, rmse_div_indices=1.9364916731037085, rmse_div_steps=4.443315828922761

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=30, level=2: rmse_mchild=7.482312476768127, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=30, level=1: rmse_mchild=3.0183834580656606, rmse_div_indices=5.236092690801669, rmse_div_steps=11.522622675994096

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=31, level=2: rmse_mchild=8.25742090485885, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=31, level=1: rmse_mchild=2.3881439011326373, rmse_div_indices=5.236092690801669, rmse_div_steps=10.739012472703852

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=32, level=2: rmse_mchild=5.217278984298232, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=32, level=1: rmse_mchild=2.40710681589756, rmse_div_indices=1.3333333333333333, rmse_div_steps=4.329325069286846

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=33, level=2: rmse_mchild=5.307541803886239, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772

[22-01-2022_01-49-21] DEBUG :: Experiment >> Refinement spread at run=33, level=1: rmse_mchild=2.509846312505347, rmse_div_indices=1.3333333333333333, rmse_div_steps=4.329325069286846

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=34, level=2: rmse_mchild=4.943682837723309, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=34, level=1: rmse_mchild=2.96671445004388, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=35, level=2: rmse_mchild=5.738031021177908, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=35, level=1: rmse_mchild=3.1803766944133107, rmse_div_indices=1.9364916731037085, rmse_div_steps=5.880169120772709

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=36, level=2: rmse_mchild=5.382378656319154, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=36, level=1: rmse_mchild=2.302251413344757, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=37, level=2: rmse_mchild=5.104899607240086, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=37, level=1: rmse_mchild=2.5516867699427412, rmse_div_indices=1.3333333333333333, rmse_div_steps=4.329325069286846

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=38, level=2: rmse_mchild=7.484316936100448, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=38, level=1: rmse_mchild=2.412234970109756, rmse_div_indices=5.236092690801669, rmse_div_steps=10.739012472703852

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=39, level=2: rmse_mchild=5.006995106848017, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=39, level=1: rmse_mchild=2.986842704067786, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=40, level=2: rmse_mchild=8.406842451241726, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=40, level=1: rmse_mchild=2.357323225422354, rmse_div_indices=5.236092690801669, rmse_div_steps=10.589237198422012

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=41, level=2: rmse_mchild=5.555177764932459, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-22] DEBUG :: Experiment >> Refinement spread at run=41, level=1: rmse_mchild=2.256704885923004, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=42, level=2: rmse_mchild=6.413267497929583, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=42, level=1: rmse_mchild=3.1236153957387027, rmse_div_indices=3.3166247903554, rmse_div_steps=8.022104877565905

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=43, level=2: rmse_mchild=4.895916665957458, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=43, level=1: rmse_mchild=2.2765309080279623, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.861310946067698

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=44, level=2: rmse_mchild=5.064582904840239, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=44, level=1: rmse_mchild=2.8424086951180385, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=45, level=2: rmse_mchild=4.950757517794624, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=45, level=1: rmse_mchild=2.256933760658475, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.688382662721788

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=46, level=2: rmse_mchild=7.827196177431608, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=46, level=1: rmse_mchild=2.3551578943847904, rmse_div_indices=5.236092690801669, rmse_div_steps=10.589237198422012

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=47, level=2: rmse_mchild=5.78878225536252, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=47, level=1: rmse_mchild=2.5238019823831244, rmse_div_indices=1.855921454276674, rmse_div_steps=4.766054739276268

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=48, level=2: rmse_mchild=6.395701681598352, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=48, level=1: rmse_mchild=2.617225195673411, rmse_div_indices=3.032234233110042, rmse_div_steps=7.39509972887452

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=49, level=2: rmse_mchild=7.293490248159655, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[22-01-2022_01-49-23] DEBUG :: Experiment >> Refinement spread at run=49, level=1: rmse_mchild=2.7291260967021453, rmse_div_indices=5.236092690801669, rmse_div_steps=11.234557302260635

[22-01-2022_01-49-24] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL       GT       ST       OT       TT        LT        CT       WT         RSS         VMS  LE  AC  CF  PSG
  0   3 1.139639 0.722363 0.000000 1.862002  1.862002  1.862002 1.862002  251.867188  241.574219  20  20 1.0   20
  0   2 3.534632 3.274552 0.014893 6.824077  7.666385  8.686079 4.357474  297.476562  294.781250  42  42 1.0   42
  0   1 7.259283 1.790397 0.031074 9.080755  9.755913 17.766834 2.254308  287.039062  279.375000  71  71 1.0    0
  1   3 1.130362 0.666865 0.000000 1.797227  1.797227  1.797227 1.797227  269.625000  258.585938  20  20 1.0   20
  1   2 3.559055 1.979815 0.016341 5.555211  5.171655  7.352438 3.690349  282.742188  272.566406  44  44 1.0   44
  1   1 7.517431 1.421503 0.032451 8.971385  7.019469 16.323823 2.074139  280.007812  269.242188  75  75 1.0    0
  2   3 1.136389 0.696503 0.000000 1.832892  1.832892  1.832892 1.832892  276.781250  265.722656  20  20 1.0   20
  2   2 3.577495 2.220238 0.016662 5.814395  6.370438  7.647286 3.837753  307.773438  297.835938  44  44 1.0   44
  2   1 7.408754 1.589660 0.031243 9.029657  8.368777 16.676944 2.118297  308.011719  298.480469  73  73 1.0    0
  3   3 1.134738 0.729183 0.000000 1.863920  1.863920  1.863920 1.863920  305.421875  294.566406  20  20 1.0   20
  3   2 3.523224 1.695335 0.015977 5.234536  5.117055  7.098456 3.563237  330.656250  320.304688  44  44 1.0   44
  3   1 7.510308 1.513006 0.031952 9.055266  6.987403 16.153723 2.075628  324.351562  315.070312  75  75 1.0    0
  4   3 1.135447 0.827521 0.000000 1.962969  1.962969  1.962969 1.962969  321.785156  310.679688  20  20 1.0   20
  4   2 3.545247 1.768621 0.016909 5.330777  5.847249  7.293745 3.661191  342.980469  332.738281  44  44 1.0   44
  4   1 7.147470 1.720901 0.031580 8.899952  7.946317 16.193697 2.070555  337.753906  329.832031  71  71 1.0    0
  5   3 1.146692 0.842020 0.000000 1.988712  1.988712  1.988712 1.988712  330.808594  320.867188  20  20 1.0   20
  5   2 3.613131 2.959347 0.016675 6.589152  7.250006  8.577865 4.303258  374.464844  372.460938  44  44 1.0   44
  5   1 7.340383 1.688706 0.031364 9.060453  9.299125 17.638318 2.238377  363.828125  354.023438  73  73 1.0    0
  6   3 1.142341 0.797083 0.000000 1.939424  1.939424  1.939424 1.939424  358.820312  347.796875  20  20 1.0   20
  6   2 3.515809 1.444743 0.016858 4.977411  4.486617  6.916834 3.472823  381.804688  374.320312  44  44 1.0   44
  6   1 7.242888 1.550872 0.031781 8.825540  6.340639 15.742374 2.001356  374.960938  365.031250  73  73 1.0    0
  7   3 1.141168 0.781374 0.000000 1.922542  1.922542  1.922542 1.922542  374.449219  363.746094  20  20 1.0   20
  7   2 3.566745 1.859533 0.016571 5.442849  5.365024  7.365391 3.697023  394.339844  384.929688  44  44 1.0   44
  7   1 7.475278 1.625362 0.031245 9.131885  7.356674 16.497276 2.095789  392.019531  382.578125  75  75 1.0    0
  8   3 1.139001 1.012185 0.000000 2.151186  2.151186  2.151186 2.151186  388.003906  377.378906  20  20 1.0   20
  8   2 3.545338 1.312071 0.016794 4.874203  4.713238  7.025389 3.526968  411.367188  404.195312  44  44 1.0   44
  8   1 7.440512 1.621637 0.032021 9.094171  6.731404 16.119560 2.048374  409.335938  400.921875  75  75 1.0    0
  9   3 1.149961 0.839190 0.000000 1.989151  1.989151  1.989151 1.989151  404.425781  393.644531  20  20 1.0   20
  9   2 3.614994 2.381805 0.016973 6.013772  6.793527  8.002923 4.015851  437.699219  435.937500  44  44 1.0   44
  9   1 7.327974 1.934673 0.032532 9.295178  8.938878 17.298101 2.196163  428.257812  418.734375  73  73 1.0    0
 10   3 1.137400 0.706597 0.000000 1.843997  1.843997  1.843997 1.843997  423.234375  413.761719  20  20 1.0   20
 10   2 3.549465 1.603317 0.016759 5.169541  5.178501  7.013538 3.521267  446.828125  438.054688  44  44 1.0   44
 10   1 7.497227 1.581940 0.031247 9.110414  7.082436 16.123952 2.049278  441.558594  433.292969  75  75 1.0    0
 11   3 1.132065 0.809783 0.000000 1.941848  1.941848  1.941848 1.941848  437.433594  427.820312  20  20 1.0   20
 11   2 3.547331 1.816570 0.017035 5.380937  5.523579  7.322785 3.675769  460.988281  452.554688  44  44 1.0   44
 11   1 7.300482 1.500973 0.031900 8.833355  7.362844 16.156139 2.053108  457.480469  448.621094  73  73 1.0    0
 12   3 1.139058 0.753109 0.000000 1.892167  1.892167  1.892167 1.892167  451.929688  442.347656  20  20 1.0   20
 12   2 3.541481 1.679597 0.016733 5.237811  5.354894  7.129977 3.579250  476.964844  468.250000  44  44 1.0   44
 12   1 7.515636 1.820984 0.033004 9.369624  7.213655 16.499602 2.096415  472.328125  464.265625  75  75 1.0    0
 13   3 1.133929 0.895288 0.000000 2.029217  2.029217  2.029217 2.029217  468.683594  459.175781  20  20 1.0   20
 13   2 3.543329 1.765199 0.016855 5.325382  5.550334  7.354600 3.691493  489.992188  481.730469  44  44 1.0   44
 13   1 7.305011 1.826119 0.031687 9.162817  7.438455 16.517417 2.098475  485.121094  477.234375  73  73 1.0    0
 14   3 1.143392 0.715901 0.000000 1.859293  1.859293  1.859293 1.859293  480.941406  471.343750  20  20 1.0   20
 14   2 3.587479 2.907946 0.017044 6.512469  7.169170  8.371763 4.200041  518.882812  518.492188  44  44 1.0   44
 14   1 7.328815 1.940343 0.031446 9.300605  9.482807 17.672368 2.242811  508.175781  500.765625  73  73 1.0    0
 15   3 1.140903 0.700025 0.000000 1.840928  1.840928  1.840928 1.840928  502.402344  493.042969  20  20 1.0   20
 15   2 3.557540 1.931288 0.016204 5.505032  5.413055  7.345959 3.687173  526.300781  519.375000  44  44 1.0   44
 15   1 7.504367 1.920695 0.032581 9.457644  7.249127 16.803603 2.134116  521.062500  512.535156  75  75 1.0    0
 16   3 1.140639 0.798287 0.000000 1.938926  1.938926  1.938926 1.938926  519.679688  510.730469  20  20 1.0   20
 16   2 3.552449 1.679496 0.016194 5.248139  5.326069  7.187065 3.607759  542.519531  535.203125  44  44 1.0   44
 16   1 7.495557 1.656807 0.032186 9.184550  7.470564 16.371615 2.080062  536.644531  528.242188  75  75 1.0    0
 17   3 1.145700 0.737917 0.000000 1.883617  1.883617  1.883617 1.883617  533.761719  524.449219  20  20 1.0   20
 17   2 3.607229 2.755655 0.016773 6.379657  6.727903  8.263274 4.146230  565.359375  564.835938  44  44 1.0   44
 17   1 7.330401 1.363095 0.032073 8.725570  8.710889 16.988843 2.157413  554.085938  548.574219  73  73 1.0    0
 18   3 1.135687 0.725734 0.000000 1.861421  1.861421  1.861421 1.861421  548.996094  540.878906  20  20 1.0   20
 18   2 3.616534 3.157373 0.016824 6.790732  7.087835  8.652153 4.340629  582.957031  582.910156  44  44 1.0   44
 18   1 7.111654 1.435304 0.031013 8.577971  9.159659 17.230124 2.187403  571.382812  563.503906  71  71 1.0    0
 19   3 1.133763 0.729494 0.000000 1.863258  1.863258  1.863258 1.863258  568.871094  560.031250  20  20 1.0   20
 19   2 3.583412 2.531886 0.016217 6.131515  5.666342  7.994772 4.011669  589.507812  581.433594  44  44 1.0   44
 19   1 7.743271 1.500191 0.031661 9.275123  7.542125 17.269895 2.192287  586.492188  580.984375  77  77 1.0    0
 20   3 1.134350 0.920418 0.000000 2.054768  2.054768  2.054768 2.054768  581.140625  572.070312  20  20 1.0   20
 20   2 3.564929 1.718276 0.017373 5.300579  5.514222  7.355346 3.691822  605.125000  597.285156  44  44 1.0   44
 20   1 7.128737 1.670323 0.030813 8.829873  7.908243 16.185219 2.056879  598.269531  592.445312  71  71 1.0    0
 21   3 1.133026 0.744417 0.000000 1.877443  1.877443  1.877443 1.877443  595.578125  586.882812  20  20 1.0   20
 21   2 3.559446 1.635200 0.016889 5.211535  5.238629  7.088978 3.558858  620.332031  612.417969  44  44 1.0   44
 21   1 7.514675 1.733012 0.031098 9.278785  7.108971 16.367762 2.127931  615.089844  607.097656  75  75 1.0    0
 22   3 1.134184 0.900663 0.000000 2.034847  2.034847  2.034847 2.034847  610.757812  601.812500  20  20 1.0   20
 22   2 3.605789 1.944665 0.016629 5.567083  6.392633  7.601930 3.815211  643.359375  643.156250  44  44 1.0   44
 22   1 7.127068 1.770390 0.031341 8.928798  8.354590 16.530728 2.100078  634.894531  627.140625  71  71 1.0    0
 23   3 1.147224 1.109399 0.000000 2.256623  2.256623  2.256623 2.256623  628.464844  619.531250  20  20 1.0   20
 23   2 3.561762 1.836172 0.016250 5.414184  5.503605  7.670807 3.849688  650.898438  643.515625  44  44 1.0   44
 23   1 7.506755 1.827118 0.030579 9.364453  7.419514 17.035260 2.162999  644.843750  637.828125  75  75 1.0    0
 24   3 1.141995 0.661070 0.000000 1.803065  1.803065  1.803065 1.803065  642.515625  633.847656  20  20 1.0   20
 24   2 3.545862 1.663012 0.017242 5.226117  5.582987  7.029181 3.528730  665.839844  658.320312  44  44 1.0   44
 24   1 7.335350 1.755569 0.031318 9.122236  7.568208 16.151417 2.052660  660.910156  655.433594  73  73 1.0    0
 25   3 1.142833 0.900577 0.000000 2.043410  2.043410  2.043410 2.043410  656.949219  648.167969  20  20 1.0   20
 25   2 3.522637 1.161220 0.016847 4.700704  4.556360  6.744114 3.386336  682.457031  677.300781  44  44 1.0   44
 25   1 7.026397 1.244383 0.031601 8.302381  6.429929 15.046495 1.914333  674.066406  665.406250  71  71 1.0    0
 26   3 1.142653 0.971186 0.000000 2.113839  2.113839  2.113839 2.113839  673.574219  664.781250  20  20 1.0   20
 26   2 3.541021 1.704308 0.016879 5.262209  5.110608  7.376048 3.702400  697.140625  691.785156  44  44 1.0   44
 26   1 7.229230 1.686073 0.032109 8.947412  6.914513 16.323460 2.073945  688.425781  679.820312  73  73 1.0    0
 27   3 1.129683 1.031540 0.000000 2.161222  2.161222  2.161222 2.161222  687.781250  678.933594  20  20 1.0   20
 27   2 3.518157 3.229621 0.015533 6.763310  7.965450  8.924533 4.476577  723.148438  722.746094  42  42 1.0   42
 27   1 7.237198 1.499365 0.030939 8.767501 10.012563 17.692034 2.306534  717.730469  713.617188  71  71 1.0    0
 28   3 1.133694 0.714728 0.000000 1.848422  1.848422  1.848422 1.848422  707.683594  699.238281  20  20 1.0   20
 28   2 3.355755 1.699989 0.016773 5.072517  5.262855  6.920938 3.474758  729.339844  722.386719  42  42 1.0   42
 28   1 6.888415 1.211432 0.029130 8.128978  7.151852 15.049916 1.914965  723.820312  715.445312  69  69 1.0    0
 29   3 1.133003 0.816825 0.000000 1.949828  1.949828  1.949828 1.949828  722.699219  714.027344  20  20 1.0   20
 29   2 3.349278 1.637544 0.016732 5.003555  4.755395  6.953383 3.491071  744.503906  737.460938  42  42 1.0   42
 29   1 6.892705 1.166284 0.030082 8.089071  6.600920 15.042454 1.913909  737.128906  728.667969  69  69 1.0    0
 30   3 1.144769 0.804192 0.000000 1.948961  1.948961  1.948961 1.948961  736.117188  727.523438  20  20 1.0   20
 30   2 3.506576 3.232535 0.015173 6.754284  7.750600  8.703245 4.365810  769.550781  768.148438  42  42 1.0   42
 30   1 7.241913 2.025119 0.030511 9.297543  9.776292 18.000789 2.283875  763.140625  759.132812  71  71 1.0    0
 31   3 1.146896 0.710066 0.000000 1.856962  1.856962  1.856962 1.856962  752.996094  744.453125  20  20 1.0   20
 31   2 3.535455 3.136930 0.016100 6.688485  7.589080  8.545447 4.287267  787.183594  786.660156  42  42 1.0   42
 31   1 7.031852 2.021546 0.031767 9.085165 10.204880 17.630613 2.237823  781.281250  777.105469  69  69 1.0    0
 32   3 1.149273 0.765262 0.000000 1.914535  1.914535  1.914535 1.914535  770.839844  762.406250  20  20 1.0   20
 32   2 3.572495 1.671707 0.016079 5.260282  4.863986  7.174817 3.601620  794.621094  786.855469  44  44 1.0   44
 32   1 7.317467 1.896964 0.031681 9.246112  6.709832 16.420929 2.086443  787.457031  779.343750  73  73 1.0    0
 33   3 1.138432 0.666998 0.000000 1.805431  1.805431  1.805431 1.805431  786.992188  778.570312  20  20 1.0   20
 33   2 3.579684 2.266013 0.016363 5.862060  4.735534  7.667490 3.848056  806.332031  800.136719  44  44 1.0   44
 33   1 7.309075 1.307704 0.032086 8.648866  6.570322 16.316356 2.073167  800.132812  792.109375  73  73 1.0    0
 34   3 1.140845 0.771637 0.000000 1.912482  1.912482  1.912482 1.912482  799.691406  791.851562  20  20 1.0   20
 34   2 3.532043 1.185852 0.016897 4.734792  4.412833  6.647274 3.337927  823.718750  818.753906  44  44 1.0   44
 34   1 7.276260 1.835289 0.031599 9.143148  6.247301 15.790422 2.007501  817.066406  810.511719  73  73 1.0    0
 35   3 1.136911 0.752481 0.000000 1.889393  1.889393  1.889393 1.889393  814.699219  806.386719  20  20 1.0   20
 35   2 3.382296 1.293369 0.016605 4.692271  4.853727  6.581663 3.305234  836.789062  830.105469  42  42 1.0   42
 35   1 7.551719 1.987462 0.030480 9.569660  7.329306 16.151323 2.053551  833.425781  829.039062  75  75 1.0    0
 36   3 1.137259 0.706855 0.000000 1.844113  1.844113  1.844113 1.844113  828.347656  820.050781  20  20 1.0   20
 36   2 3.566275 2.579423 0.016650 6.162348  5.830047  8.006462 4.017764  849.785156  843.449219  44  44 1.0   44
 36   1 7.521791 1.373322 0.031909 8.927022  7.710710 16.933484 2.150295  843.546875  835.937500  75  75 1.0    0
 37   3 1.140534 0.816770 0.000000 1.957304  1.957304  1.957304 1.957304  842.132812  833.894531  20  20 1.0   20
 37   2 3.548572 2.362163 0.016393 5.927128  5.446673  7.884432 3.956258  866.644531  858.921875  44  44 1.0   44
 37   1 7.338985 2.008986 0.032006 9.379977  7.327363 17.264409 2.191698  858.312500  851.207031  73  73 1.0    0
 38   3 1.145834 0.676144 0.000000 1.821979  1.821979  1.821979 1.821979  856.503906  848.335938  20  20 1.0   20
 38   2 3.509566 3.297768 0.015671 6.823005  7.685084  8.644984 4.337279  892.761719  892.402344  42  42 1.0   42
 38   1 7.055842 2.126143 0.030525 9.212510  9.710644 17.857494 2.265877  886.585938  882.917969  69  69 1.0    0
 39   3 1.147968 0.636320 0.000000 1.784289  1.784289  1.784289 1.784289  870.695312  863.777344  20  20 1.0   20
 39   2 3.539670 1.292494 0.016913 4.849076  4.287037  6.633365 3.331081  899.031250  895.339844  44  44 1.0   44
 39   1 7.252251 1.928494 0.032233 9.212977  6.124348 15.846342 2.014766  889.562500  881.882812  73  73 1.0    0
 40   3 1.145732 0.638305 0.000000 1.784037  1.784037  1.784037 1.784037  890.187500  882.269531  20  20 1.0   20
 40   2 3.506012 3.379628 0.016103 6.901742  7.013453  8.685779 4.357287  923.562500  924.160156  42  42 1.0   42
 40   1 7.051913 1.446949 0.031609 8.530471  9.016642 17.216250 2.185844  917.312500  914.097656  69  69 1.0    0
 41   3 1.142649 0.670328 0.000000 1.812977  1.812977  1.812977 1.812977  905.808594  898.531250  20  20 1.0   20
 41   2 3.575698 1.786172 0.016187 5.378058  5.168842  7.191035 3.610016  928.957031  923.089844  44  44 1.0   44
 41   1 7.501587 1.338900 0.031189 8.871676  7.008960 16.062711 2.041678  923.839844  916.433594  75  75 1.0    0
 42   3 1.134470 0.743211 0.000000 1.877681  1.877681  1.877681 1.877681  923.250000  915.500000  20  20 1.0   20
 42   2 3.582370 1.510523 0.017440 5.110333  5.524875  6.988014 3.508348  945.585938  938.484375  44  44 1.0   44
 42   1 7.333827 1.393317 0.032571 8.759715  7.560373 15.747729 2.002469  940.761719  935.191406  73  73 1.0    0
 43   3 1.134304 0.687602 0.000000 1.821906  1.821906  1.821906 1.821906  935.035156  927.195312  20  20 1.0   20
 43   2 3.536496 1.138729 0.016654 4.691880  4.282215  6.513786 3.271051  959.621094  955.402344  44  44 1.0   44
 43   1 7.058168 1.223052 0.032558 8.313778  6.144307 14.827563 1.887101  953.023438  947.050781  71  71 1.0    0
 44   3 1.135832 0.725487 0.000000 1.861319  1.861319  1.861319 1.861319  951.484375  943.585938  20  20 1.0   20
 44   2 3.528894 1.263033 0.017084 4.809011  4.357790  6.670330 3.349387  974.085938  969.539062  44  44 1.0   44
 44   1 7.282464 2.064743 0.031751 9.378959  6.220295 16.049289 2.039822  965.804688  958.000000  73  73 1.0    0
 45   3 1.134767 0.865772 0.000000 2.000539  2.000539  2.000539 2.000539  964.851562  956.863281  20  20 1.0   20
 45   2 3.529705 1.370565 0.016690 4.916960  4.478952  6.917499 3.473079  988.941406  984.929688  44  44 1.0   44
 45   1 7.074621 1.232240 0.031998 8.338859  6.350261 15.256358 1.940997  980.597656  973.003906  71  71 1.0    0
 46   3 1.145610 1.558189 0.000000 2.703799  2.703799  2.703799 2.703799  980.972656  973.007812  20  20 1.0   20
 46   2 3.504706 2.879046 0.015592 6.399344  8.147348  9.103143 4.565803 1014.960938 1015.015625  42  42 1.0   42
 46   1 7.048157 1.415578 0.031120 8.494856 10.133326 17.597998 2.233727 1009.562500 1005.933594  69  69 1.0    0
 47   3 1.146729 0.777258 0.000000 1.923987  1.923987  1.923987 1.923987  998.851562  991.003906  20  20 1.0   20
 47   2 3.550361 2.336921 0.017140 5.904422  5.983625  7.828410 3.928671 1021.273438 1015.148438  44  44 1.0   44
 47   1 7.511882 1.357012 0.032059 8.900952  7.855662 16.729362 2.125143 1017.558594 1010.804688  75  75 1.0    0
 48   3 1.146908 0.887796 0.000000 2.034704  2.034704  2.034704 2.034704 1012.628906 1005.039062  20  20 1.0   20
 48   2 3.399341 1.351423 0.017104 4.767868  5.421900  6.802572 3.415534 1037.535156 1031.859375  42  42 1.0   42
 48   1 7.109791 2.070318 0.031502 9.211611  8.071156 16.014184 2.035347 1031.089844 1024.984375  71  71 1.0    0
 49   3 1.139352 0.782969 0.000000 1.922321  1.922321  1.922321 1.922321 1028.203125 1020.523438  20  20 1.0   20
 49   2 3.543551 2.727661 0.015943 6.287154  7.246296  8.209476 4.119157 1062.593750 1062.304688  42  42 1.0   42
 49   1 7.049514 2.384662 0.031445 9.465621  9.257078 17.675097 2.243399 1048.644531 1044.550781  69  69 1.0    0

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL       GT       ST       OT       TT       LT        CT       WT        RSS        VMS    LE    AC  CF   PSG
  3 1.139720 0.798018 0.000000 1.937738 1.937738  1.937738 1.937738 647.507109 638.564141 20.00 20.00 1.0 20.00
  2 3.538726 2.060327 0.016544 5.615598 5.774830  7.553335 3.790986 674.145703 668.799844 43.52 43.52 1.0 43.52
  1 7.292166 1.660098 0.031553 8.983818 7.765110 16.537153 2.103782 667.675703 660.468984 72.64 72.64 1.0  0.00

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       GT       ST       OT       TT       LT       CT       WT        RSS        VMS       LE       AC  CF      PSG
  3 0.005422 0.150969 0.000000 0.151586 0.151586 0.151586 0.151586 229.586487 230.599661 0.000000 0.000000 0.0 0.000000
  2 0.057571 0.675667 0.000539 0.691374 1.096984 0.711663 0.355874 229.290644 230.610530 0.862838 0.862838 0.0 0.862838
  1 0.192791 0.284551 0.000712 0.354301 1.185187 0.805831 0.102619 228.773486 229.968270 2.126221 2.126221 0.0 0.000000

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT       ST       OT       TT        YT        WT       ET         RSS         VMS  LE  AC  CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 1.139639 0.722363 0.000000 1.862002  1.862002  1.862002 0.000000  251.867188  241.574219  20  20 1.0   20        1     20     0         0        1       1        81821            0
  0   2   1   1 2.730529 3.065034 0.008820 5.804383  7.666385  7.666385 1.048563  297.476562  294.781250  31  31 1.0   31        1     31    10        10        1      10       108228        79419
  0   2   2   2 0.829219 0.213271 0.006073 1.048563  8.714948  1.048563 0.000000  274.175781  263.914062  11  11 1.0   11       32     42    10        10       11      20         2820          240
  0   1   1   1 1.594880 0.489079 0.005568 2.089528  9.755913  9.755913 2.990809  287.039062  279.375000  15  15 1.0    0        1     15     7         7        1       7        10406         6696
  0   1   2   2 1.557139 0.379219 0.005888 1.942246 12.746722  2.990809 1.970395  270.863281  261.246094  15  15 1.0    0       16     30     8         8        8      15         5539         2133
  0   1   3   3 1.491475 0.472314 0.006606 1.970395 14.717117  1.970395 1.652741  276.917969  266.308594  14  14 1.0    0       31     44     8         8       16      23        11952         7014
  0   1   4   4 1.341704 0.304748 0.006289 1.652741 16.369858  1.652741 0.260469  279.894531  271.265625  13  13 1.0    0       45     57     8         8       24      31         4828          833
  0   1   5   5 0.232781 0.026872 0.000816 0.260469 16.630327  0.260469 0.467344  273.359375  262.878906   2   2 1.0    0       58     59     2         2       32      33          180            0
  0   1   6   6 0.414631 0.050948 0.001765 0.467344 17.097671  0.467344 0.473907  273.507812  262.941406   4   4 1.0    0       60     63     3         3       34      36          444           12
  0   1   7   7 0.416636 0.055439 0.001832 0.473907 17.571578  0.473907 0.462883  273.621094  262.941406   4   4 1.0    0       64     67     3         3       37      39          432            0
  0   1   8   8 0.413950 0.046623 0.002309 0.462883 18.034461  0.462883 0.000000  273.628906  262.941406   4   4 1.0    0       68     71     3         3       40      42          402            6
  1   3   1   1 1.130362 0.666865 0.000000 1.797227  1.797227  1.797227 0.000000  269.625000  258.585938  20  20 1.0   20        1     20     0         0        1       1        70954            0
  1   2   1   1 2.138149 1.227814 0.008465 3.374428  5.171655  5.171655 2.209043  281.281250  272.566406  26  26 1.0   26        1     26    10        10        1      10        54556        31492
  1   2   2   2 1.445305 0.755862 0.007876 2.209043  7.380698  2.209043 0.000000  282.742188  272.394531  18  18 1.0   18       27     44    10        10       11      20        29646        24521
  1   1   1   1 1.483457 0.359603 0.004753 1.847814  7.019469  7.019469 3.414045  280.007812  269.242188  14  14 1.0    0        1     14     6         6        1       6         8397         5136
  1   1   2   2 1.003406 0.197177 0.004419 1.205002 10.433513  3.414045 1.323542  270.539062  259.562500  10  10 1.0    0       15     24     6         6        7      12         2766          409
  1   1   3   3 1.116924 0.201697 0.004921 1.323542 11.757055  1.323542 1.370522  271.058594  259.914062  11  11 1.0    0       25     35     7         7       13      19         3916          486
  1   1   4   4 1.127568 0.237308 0.005647 1.370522 13.127578  1.370522 0.583205  277.355469  267.996094  11  11 1.0    0       36     46     7         7       20      26         2446          195
  1   1   5   5 0.510477 0.070207 0.002521 0.583205 13.710783  0.583205 0.827798  272.574219  261.152344   5   5 1.0    0       47     51     4         4       27      30          648            0
  1   1   6   6 0.714821 0.110709 0.002267 0.827798 14.538580  0.827798 1.224730  273.781250  262.351562   7   7 1.0    0       52     58     4         4       31      34         1748          696
  1   1   7   7 1.040751 0.180276 0.003703 1.224730 15.763310  1.224730 0.829801  276.152344  264.980469  10  10 1.0    0       59     68     5         5       35      39         2967         1017
  1   1   8   8 0.724537 0.101044 0.004221 0.829801 16.593112  0.829801 0.000000  275.953125  264.773438   7   7 1.0    0       69     75     5         5       40      44         1129           82
  2   3   1   1 1.136389 0.696503 0.000000 1.832892  1.832892  1.832892 0.000000  276.781250  265.722656  20  20 1.0   20        1     20     0         0        1       1        83198            0
  2   2   1   1 2.560679 1.968064 0.008803 4.537546  6.370438  6.370438 1.305069  307.082031  296.726562  30  30 1.0   30        1     30    10        10        1      10        72915        46293
  2   2   2   2 1.040964 0.256246 0.007859 1.305069  7.675507  1.305069 0.000000  307.773438  297.835938  14  14 1.0   14       31     44    10        10       11      20         4016          211
  2   1   1   1 1.600467 0.392164 0.005708 1.998339  8.368777  8.368777 2.797161  294.167969  288.695312  15  15 1.0    0        1     15     7         7        1       7         7414         4233
  2   1   2   2 1.214151 0.272428 0.005513 1.492092 11.165938  2.797161 1.519718  292.769531  284.820312  12  12 1.0    0       16     27     7         7        8      14         3368          734
  2   1   3   3 1.219508 0.294568 0.005641 1.519718 12.685656  1.519718 1.792571  296.570312  287.359375  12  12 1.0    0       28     39     8         8       15      22         3572          587
  2   1   4   4 1.457703 0.329225 0.005643 1.792571 14.478227  1.792571 0.660430  308.011719  298.480469  13  13 1.0    0       40     52     8         8       23      30         6863         4362
  2   1   5   5 0.593135 0.065290 0.002005 0.660430 15.138657  0.660430 0.653263  303.031250  292.460938   6   6 1.0    0       53     58     3         3       31      33          976           62
  2   1   6   6 0.514107 0.137281 0.001875 0.653263 15.791920  0.653263 0.581358  303.082031  292.500000   5   5 1.0    0       59     63     3         3       34      36          534           76
  2   1   7   7 0.511240 0.068026 0.002092 0.581358 16.373277  0.581358 0.573096  303.527344  292.882812   5   5 1.0    0       64     68     4         4       37      40          598           54
  2   1   8   8 0.502854 0.067477 0.002765 0.573096 16.946374  0.573096 0.000000  303.562500  292.890625   5   5 1.0    0       69     73     4         4       41      44          600           24
  3   3   1   1 1.134738 0.729183 0.000000 1.863920  1.863920  1.863920 0.000000  305.421875  294.566406  20  20 1.0   20        1     20     0         0        1       1        78837            0
  3   2   1   1 2.113292 1.131544 0.008299 3.253134  5.117055  5.117055 2.009420  325.941406  316.925781  26  26 1.0   26        1     26    10        10        1      10        50229        27305
  3   2   2   2 1.434155 0.567587 0.007678 2.009420  7.126474  2.009420 0.000000  330.656250  320.304688  18  18 1.0   18       27     44    10        10       11      20        19913        15024
  3   1   1   1 1.487944 0.377791 0.004613 1.870348  6.987403  6.987403 3.167686  322.843750  312.066406  14  14 1.0    0        1     14     6         6        1       6         8492         5656
  3   1   2   2 1.011260 0.142983 0.004023 1.158266 10.155089  3.167686 1.425430  314.378906  303.292969  10  10 1.0    0       15     24     6         6        7      12         2456          330
  3   1   3   3 1.125383 0.294757 0.005290 1.425430 11.580519  1.425430 1.412395  322.585938  313.945312  11  11 1.0    0       25     35     7         7       13      19         4349          770
  3   1   4   4 1.124725 0.282651 0.005019 1.412395 12.992914  1.412395 0.671307  324.351562  315.070312  11  11 1.0    0       36     46     7         7       20      26         2409          137
  3   1   5   5 0.513338 0.155145 0.002824 0.671307 13.664221  0.671307 0.824901  319.722656  308.527344   5   5 1.0    0       47     51     4         4       27      30          618            6
  3   1   6   6 0.712145 0.110602 0.002154 0.824901 14.489123  0.824901 1.203996  320.921875  309.726562   7   7 1.0    0       52     58     4         4       31      34         1698          629
  3   1   7   7 1.027098 0.173063 0.003835 1.203996 15.693119  1.203996 0.911903  323.269531  313.308594  10  10 1.0    0       59     68     5         5       35      39         2870          839
  3   1   8   8 0.716342 0.191366 0.004194 0.911903 16.605022  0.911903 0.000000  321.000000  309.796875   7   7 1.0    0       69     75     5         5       40      44         1092           36
  4   3   1   1 1.135447 0.827521 0.000000 1.962969  1.962969  1.962969 0.000000  321.785156  310.679688  20  20 1.0   20        1     20     0         0        1       1        97470            0
  4   2   1   1 2.341010 1.534653 0.008618 3.884280  5.847249  5.847249 1.475132  342.980469  332.738281  28  28 1.0   28        1     28    10        10        1      10        53015        36680
  4   2   2   2 1.228488 0.238353 0.008291 1.475132  7.322381  1.475132 0.000000  340.890625  329.921875  16  16 1.0   16       29     44    10        10       11      20         5342          766
  4   1   1   1 1.604440 0.489035 0.005593 2.099068  7.946317  7.946317 2.662997  337.390625  329.832031  15  15 1.0    0        1     15     7         7        1       7         8914         4598
  4   1   2   2 1.016616 0.166364 0.004885 1.187865 10.609314  2.662997 1.443230  328.480469  317.304688  10  10 1.0    0       16     25     7         7        8      14         2789          553
  4   1   3   3 1.142151 0.295853 0.005226 1.443230 12.052544  1.443230 1.625151  334.851562  326.328125  11  11 1.0    0       26     36     7         7       15      21         2857          164
  4   1   4   4 1.243831 0.376477 0.004843 1.625151 13.677695  1.625151 0.675349  337.753906  328.882812  12  12 1.0    0       37     48     7         7       22      28         5449         2676
  4   1   5   5 0.503704 0.169127 0.002518 0.675349 14.353043  0.675349 0.944432  308.851562  300.867188   5   5 1.0    0       49     53     4         4       29      32          624            0
  4   1   6   6 0.824305 0.117404 0.002723 0.944432 15.297476  0.944432 0.577103  322.257812  313.531250   8   8 1.0    0       54     61     4         4       33      36         1822          278
  4   1   7   7 0.509630 0.064827 0.002646 0.577103 15.874579  0.577103 0.689860  323.371094  313.859375   5   5 1.0    0       62     66     4         4       37      40          629           17
  4   1   8   8 0.509520 0.177194 0.003146 0.689860 16.564439  0.689860 0.000000  323.722656  313.968750   5   5 1.0    0       67     71     4         4       41      44          648            0
  5   3   1   1 1.146692 0.842020 0.000000 1.988712  1.988712  1.988712 0.000000  330.808594  320.867188  20  20 1.0   20        1     20     0         0        1       1        95798            0
  5   2   1   1 2.598835 2.653681 0.008777 5.261293  7.250006  7.250006 1.356511  374.464844  372.460938  30  30 1.0   30        1     30    10        10        1      10        97508        68790
  5   2   2   2 1.038605 0.310008 0.007898 1.356511  8.606517  1.356511 0.000000  363.074219  352.792969  14  14 1.0   14       31     44    10        10       11      20         3773           83
  5   1   1   1 1.601074 0.442475 0.005571 2.049120  9.299125  9.299125 2.784595  360.789062  353.355469  15  15 1.0    0        1     15     7         7        1       7        10791         6716
  5   1   2   2 1.223029 0.200191 0.004863 1.428084 12.083720  2.784595 1.572172  358.246094  349.480469  12  12 1.0    0       16     27     7         7        8      14         3105          573
  5   1   3   3 1.222276 0.344274 0.005623 1.572172 13.655892  1.572172 1.723425  359.921875  350.964844  12  12 1.0    0       28     39     8         8       15      22         3427          556
  5   1   4   4 1.369658 0.347801 0.005966 1.723425 15.379317  1.723425 0.660093  363.828125  354.023438  13  13 1.0    0       40     52     8         8       23      30         7894         5155
  5   1   5   5 0.594091 0.064087 0.001915 0.660093 16.039411  0.660093 0.462730  356.304688  345.437500   6   6 1.0    0       53     58     3         3       31      33          952           48
  5   1   6   6 0.413239 0.047768 0.001722 0.462730 16.502141  0.462730 0.699729  356.390625  345.437500   4   4 1.0    0       59     62     3         3       34      36          441           27
  5   1   7   7 0.612786 0.084402 0.002542 0.699729 17.201870  0.699729 0.705143  357.460938  346.500000   6   6 1.0    0       63     68     4         4       37      40          712           28
  5   1   8   8 0.509505 0.192476 0.003162 0.705143 17.907013  0.705143 0.000000  356.398438  345.437500   5   5 1.0    0       69     73     4         4       41      44          600           24
  6   3   1   1 1.142341 0.797083 0.000000 1.939424  1.939424  1.939424 0.000000  358.820312  347.796875  20  20 1.0   20        1     20     0         0        1       1        93450            0
  6   2   1   1 1.918329 0.620575 0.008289 2.547193  4.486617  4.486617 2.459029  376.910156  368.656250  24  24 1.0   24        1     24    10        10        1      10        18178         5905
  6   2   2   2 1.622169 0.828291 0.008569 2.459029  6.945645  2.459029 0.000000  381.804688  374.320312  20  20 1.0   20       25     44    10        10       11      20        28755        20906
  6   1   1   1 1.475988 0.373313 0.004722 1.854023  6.340639  6.340639 3.767423  373.593750  362.765625  14  14 1.0    0        1     14     6         6        1       6         8393         5449
  6   1   2   2 1.006775 0.297788 0.003831 1.308395 10.108063  3.767423 1.183253  367.257812  356.425781  10  10 1.0    0       15     24     6         6        7      12         3539          729
  6   1   3   3 1.014738 0.163535 0.004980 1.183253 11.291316  1.183253 0.948157  369.976562  360.484375  10  10 1.0    0       25     34     6         6       13      18         2308          256
  6   1   4   4 0.818105 0.125740 0.004312 0.948157 12.239473  0.948157 0.960625  370.324219  360.445312   8   8 1.0    0       35     42     6         6       19      24         1334           38
  6   1   5   5 0.814022 0.143453 0.003150 0.960625 13.200098  0.960625 1.089156  374.960938  365.031250   8   8 1.0    0       43     50     5         5       25      29         2565         1066
  6   1   6   6 0.814701 0.270907 0.003549 1.089156 14.289254  1.089156 1.027818  372.203125  361.417969   8   8 1.0    0       51     58     5         5       30      34         1699          329
  6   1   7   7 0.898140 0.125922 0.003756 1.027818 15.317072  1.027818 0.693778  373.019531  362.234375   9   9 1.0    0       59     67     5         5       35      39         2000          200
  6   1   8   8 0.604275 0.086023 0.003480 0.693778 16.010850  0.693778 0.000000  373.406250  362.847656   6   6 1.0    0       68     73     5         5       40      44          849           45
  7   3   1   1 1.141168 0.781374 0.000000 1.922542  1.922542  1.922542 0.000000  374.449219  363.746094  20  20 1.0   20        1     20     0         0        1       1        92417            0
  7   2   1   1 2.144843 1.289224 0.008415 3.442482  5.365024  5.365024 2.029022  394.339844  384.929688  26  26 1.0   26        1     26    10        10        1      10        54963        30881
  7   2   2   2 1.446735 0.574131 0.008156 2.029022  7.394046  2.029022 0.000000  393.851562  384.613281  18  18 1.0   18       27     44    10        10       11      20        13146         7834
  7   1   1   1 1.478812 0.508068 0.004769 1.991650  7.356674  7.356674 3.196845  378.675781  370.113281  14  14 1.0    0        1     14     6         6        1       6         8171         5269
  7   1   2   2 1.003245 0.160303 0.004275 1.167823 10.553519  3.196845 1.476253  375.191406  366.632812  10  10 1.0    0       15     24     6         6        7      12         3269          497
  7   1   3   3 1.117806 0.353634 0.004813 1.476253 12.029772  1.476253 1.332435  382.105469  372.871094  11  11 1.0    0       25     35     7         7       13      19         3486          506
  7   1   4   4 1.135419 0.191519 0.005497 1.332435 13.362207  1.332435 0.580068  386.117188  378.304688  11  11 1.0    0       36     46     7         7       20      26         2513          343
  7   1   5   5 0.506259 0.071778 0.002031 0.580068 13.942274  0.580068 0.936348  383.382812  372.757812   5   5 1.0    0       47     51     4         4       27      30          810          201
  7   1   6   6 0.811683 0.122079 0.002586 0.936348 14.878622  0.936348 1.191814  385.417969  374.964844   8   8 1.0    0       52     59     4         4       31      34         1752          334
  7   1   7   7 1.021089 0.167078 0.003647 1.191814 16.070436  1.191814 0.695873  392.019531  382.578125  10  10 1.0    0       60     69     5         5       35      39         2749          638
  7   1   8   8 0.606040 0.086206 0.003627 0.695873 16.766310  0.695873 0.000000  387.179688  376.742188   6   6 1.0    0       70     75     5         5       40      44          846           42
  8   3   1   1 1.139001 1.012185 0.000000 2.151186  2.151186  2.151186 0.000000  388.003906  377.378906  20  20 1.0   20        1     20     0         0        1       1       108304            0
  8   2   1   1 1.945621 0.608072 0.008360 2.562053  4.713238  4.713238 2.340697  406.699219  398.757812  24  24 1.0   24        1     24    10        10        1      10        22992        10510
  8   2   2   2 1.624235 0.708028 0.008434 2.340697  7.053935  2.340697 0.000000  411.367188  404.195312  20  20 1.0   20       25     44    10        10       11      20        28932        19875
  8   1   1   1 1.478226 0.535256 0.004682 2.018165  6.731404  6.731404 3.259764  402.824219  392.253906  14  14 1.0    0        1     14     6         6        1       6         9588         5703
  8   1   2   2 0.800206 0.115127 0.003734 0.919067  9.991167  3.259764 1.300742  395.144531  384.394531   8   8 1.0    0       15     22     6         6        7      12         2088          230
  8   1   3   3 1.113662 0.182237 0.004843 1.300742 11.291909  1.300742 0.984383  399.343750  388.968750  11  11 1.0    0       23     33     6         6       13      18         2324          207
  8   1   4   4 0.706549 0.273406 0.004428 0.984383 12.276292  0.984383 0.952971  396.375000  385.546875   7   7 1.0    0       34     40     6         6       19      24         1171           19
  8   1   5   5 0.812295 0.137608 0.003068 0.952971 13.229263  0.952971 0.943947  402.980469  393.382812   8   8 1.0    0       41     48     5         5       25      29         2267          930
  8   1   6   6 0.814262 0.126092 0.003593 0.943947 14.173209  0.943947 0.901944  401.238281  390.691406   8   8 1.0    0       49     56     5         5       30      34         1549          279
  8   1   7   7 0.793076 0.105306 0.003562 0.901944 15.075153  0.901944 1.311839  401.566406  390.843750   8   8 1.0    0       57     64     5         5       35      39         1686          110
  8   1   8   8 1.126304 0.181423 0.004111 1.311839 16.386992  1.311839 0.000000  409.335938  400.921875  11  11 1.0    0       65     75     5         5       40      44         1983          211
  9   3   1   1 1.149961 0.839190 0.000000 1.989151  1.989151  1.989151 0.000000  404.425781  393.644531  20  20 1.0   20        1     20     0         0        1       1        83685            0
  9   2   1   1 2.594354 2.201162 0.008860 4.804376  6.793527  6.793527 1.238174  437.699219  435.937500  30  30 1.0   30        1     30    10        10        1      10        82418        53729
  9   2   2   2 1.045319 0.184741 0.008114 1.238174  8.031702  1.238174 0.000000  427.601562  417.753906  14  14 1.0   14       31     44    10        10       11      20         4020          237
  9   1   1   1 1.581546 0.557367 0.006438 2.145351  8.938878  8.938878 2.525401  424.187500  417.101562  15  15 1.0    0        1     15     7         7        1       7         8172         4034
  9   1   2   2 1.110946 0.171497 0.004784 1.287227 11.464279  2.525401 1.593296  417.953125  407.437500  11  11 1.0    0       16     26     7         7        8      14         2521          253
  9   1   3   3 1.338337 0.248287 0.006672 1.593296 13.057575  1.593296 1.920043  424.152344  414.789062  13  13 1.0    0       27     39     8         8       15      22         4236          559
  9   1   4   4 1.376662 0.537748 0.005633 1.920043 14.977618  1.920043 0.663517  428.257812  418.734375  13  13 1.0    0       40     52     8         8       23      30         7677         4771
  9   1   5   5 0.597256 0.064372 0.001888 0.663517 15.641135  0.663517 0.765352  422.570312  412.351562   6   6 1.0    0       53     58     3         3       31      33         1095           58
  9   1   6   6 0.510652 0.252727 0.001973 0.765352 16.406487  0.765352 0.586814  422.570312  412.351562   5   5 1.0    0       59     63     3         3       34      36          521           35
  9   1   7   7 0.513195 0.071020 0.002598 0.586814 16.993301  0.586814 0.576007  422.574219  412.355469   5   5 1.0    0       64     68     4         4       37      40          581           41
  9   1   8   8 0.505954 0.067509 0.002544 0.576007 17.569308  0.576007 0.000000  421.316406  412.355469   5   5 1.0    0       69     73     4         4       41      44          598           22
 10   3   1   1 1.137400 0.706597 0.000000 1.843997  1.843997  1.843997 0.000000  423.234375  413.761719  20  20 1.0   20        1     20     0         0        1       1        83640            0
 10   2   1   1 2.129272 1.196849 0.008384 3.334504  5.178501  5.178501 1.864033  443.730469  435.886719  26  26 1.0   26        1     26    10        10        1      10        44406        22968
 10   2   2   2 1.444990 0.410668 0.008375 1.864033  7.042534  1.864033 0.000000  446.828125  438.054688  18  18 1.0   18       27     44    10        10       11      20        13135         7037
 10   1   1   1 1.490500 0.408420 0.005015 1.903935  7.082436  7.082436 3.025897  438.648438  429.371094  14  14 1.0    0        1     14     6         6        1       6        10928         7482
 10   1   2   2 1.002870 0.155046 0.003948 1.161864 10.108332  3.025897 1.345099  430.382812  420.734375  10  10 1.0    0       15     24     6         6        7      12         3125          434
 10   1   3   3 1.129710 0.210115 0.005274 1.345099 11.453431  1.345099 1.322922  438.457031  431.000000  11  11 1.0    0       25     35     7         7       13      19         4315          786
 10   1   4   4 1.126465 0.191381 0.005076 1.322922 12.776353  1.322922 0.796247  440.011719  432.371094  11  11 1.0    0       36     46     7         7       20      26         2445          171
 10   1   5   5 0.513727 0.280525 0.001995 0.796247 13.572600  0.796247 0.943012  435.492188  425.828125   5   5 1.0    0       47     51     4         4       27      30          849          217
 10   1   6   6 0.818067 0.122304 0.002641 0.943012 14.515613  0.943012 1.178043  437.023438  427.359375   8   8 1.0    0       52     59     4         4       31      34         1740          235
 10   1   7   7 1.015087 0.159248 0.003708 1.178043 15.693656  1.178043 0.700567  441.558594  433.292969  10  10 1.0    0       60     69     5         5       35      39         2306          321
 10   1   8   8 0.606624 0.090352 0.003590 0.700567 16.394223  0.700567 0.000000  436.449219  427.003906   6   6 1.0    0       70     75     5         5       40      44          848           56
 11   3   1   1 1.132065 0.809783 0.000000 1.941848  1.941848  1.941848 0.000000  437.433594  427.820312  20  20 1.0   20        1     20     0         0        1       1        99441            0
 11   2   1   1 2.133527 1.439441 0.008763 3.581731  5.523579  5.523579 1.827958  458.625000  450.734375  26  26 1.0   26        1     26    10        10        1      10        55590        31699
 11   2   2   2 1.438388 0.381298 0.008272 1.827958  7.351537  1.827958 0.000000  460.988281  452.554688  18  18 1.0   18       27     44    10        10       11      20        10613         6003
 11   1   1   1 1.482600 0.351664 0.005000 1.839264  7.362844  7.362844 2.759773  453.414062  443.910156  14  14 1.0    0        1     14     6         6        1       6         7634         4385
 11   1   2   2 0.809012 0.118871 0.003933 0.931815 10.122617  2.759773 1.554127  444.699219  435.074219   8   8 1.0    0       15     22     6         6        7      12         2123          237
 11   1   3   3 1.125418 0.423113 0.005596 1.554127 11.676744  1.554127 1.320894  452.699219  445.539062  11  11 1.0    0       23     33     7         7       13      19         3780          771
 11   1   4   4 1.125236 0.190621 0.005038 1.320894 12.997639  1.320894 0.581120  454.554688  446.699219  11  11 1.0    0       34     44     7         7       20      26         2448          234
 11   1   5   5 0.508390 0.070693 0.002038 0.581120 13.578759  0.581120 0.945521  449.765625  440.363281   5   5 1.0    0       45     49     4         4       27      30          754          168
 11   1   6   6 0.818456 0.124404 0.002661 0.945521 14.524280  0.945521 1.201385  451.296875  441.894531   8   8 1.0    0       50     57     4         4       31      34         1896          324
 11   1   7   7 1.028962 0.168701 0.003722 1.201385 15.725665  1.201385 0.699199  457.480469  448.621094  10  10 1.0    0       58     67     5         5       35      39         2336          458
 11   1   8   8 0.607689 0.087598 0.003912 0.699199 16.424864  0.699199 0.000000  451.093750  442.359375   6   6 1.0    0       68     73     5         5       40      44          873            9
 12   3   1   1 1.139058 0.753109 0.000000 1.892167  1.892167  1.892167 0.000000  451.929688  442.347656  20  20 1.0   20        1     20     0         0        1       1        89088            0
 12   2   1   1 2.127268 1.326978 0.008481 3.462727  5.354894  5.354894 1.803605  472.757812  465.171875  26  26 1.0   26        1     26    10        10        1      10        52041        28439
 12   2   2   2 1.438562 0.356791 0.008252 1.803605  7.158499  1.803605 0.000000  476.964844  468.250000  18  18 1.0   18       27     44    10        10       11      20        10521         5406
 12   1   1   1 1.489465 0.364648 0.004648 1.858761  7.213655  7.213655 2.975333  468.898438  459.566406  14  14 1.0    0        1     14     6         6        1       6         8316         5086
 12   1   2   2 1.007993 0.159171 0.004565 1.171728 10.188988  2.975333 1.583264  460.484375  451.140625  10  10 1.0    0       15     24     6         6        7      12         3501          454
 12   1   3   3 1.128569 0.449084 0.005612 1.583264 11.772252  1.583264 1.322870  468.558594  461.199219  11  11 1.0    0       25     35     7         7       13      19         3762          637
 12   1   4   4 1.125992 0.191762 0.005116 1.322870 13.095122  1.322870 0.830590  470.285156  462.566406  11  11 1.0    0       36     46     7         7       20      26         2456          169
 12   1   5   5 0.513588 0.314358 0.002644 0.830590 13.925712  0.830590 0.945621  465.679688  456.273438   5   5 1.0    0       47     51     4         4       27      30          910          239
 12   1   6   6 0.817843 0.125112 0.002665 0.945621 14.871333  0.945621 1.074995  467.210938  457.812500   8   8 1.0    0       52     59     4         4       31      34         1901          311
 12   1   7   7 0.924096 0.147259 0.003640 1.074995 15.946327  1.074995 0.824993  472.328125  464.265625   9   9 1.0    0       60     68     5         5       35      39         2250          341
 12   1   8   8 0.714730 0.106149 0.004114 0.824993 16.771321  0.824993 0.000000  468.085938  458.464844   7   7 1.0    0       69     75     5         5       40      44          990           18
 13   3   1   1 1.133929 0.895288 0.000000 2.029217  2.029217  2.029217 0.000000  468.683594  459.175781  20  20 1.0   20        1     20     0         0        1       1        98897            0
 13   2   1   1 2.131916 1.380864 0.008336 3.521116  5.550334  5.550334 1.832653  489.066406  481.007812  26  26 1.0   26        1     26    10        10        1      10        54572        29617
 13   2   2   2 1.435862 0.388272 0.008519 1.832653  7.382987  1.832653 0.000000  489.992188  481.730469  18  18 1.0   18       27     44    10        10       11      20        12351         7530
 13   1   1   1 1.486749 0.396540 0.004832 1.888121  7.438455  7.438455 2.756652  481.906250  472.519531  14  14 1.0    0        1     14     6         6        1       6        10983         6826
 13   1   2   2 0.803482 0.116826 0.003692 0.923999 10.195107  2.756652 1.336784  472.785156  463.183594   8   8 1.0    0       15     22     6         6        7      12         1972          297
 13   1   3   3 1.134166 0.197214 0.005404 1.336784 11.531891  1.336784 1.579470  480.792969  473.609375  11  11 1.0    0       23     33     7         7       13      19         3779          639
 13   1   4   4 1.127892 0.446235 0.005343 1.579470 13.111361  1.579470 0.580671  483.308594  475.628906  11  11 1.0    0       34     44     7         7       20      26         2519          315
 13   1   5   5 0.507434 0.071255 0.001983 0.580671 13.692033  0.580671 0.939303  478.824219  469.289062   5   5 1.0    0       45     49     4         4       27      30          747          181
 13   1   6   6 0.813299 0.123347 0.002657 0.939303 14.631336  0.939303 1.330511  480.355469  470.824219   8   8 1.0    0       50     57     4         4       31      34         1855          244
 13   1   7   7 0.921966 0.404944 0.003601 1.330511 15.961847  1.330511 0.825953  485.121094  477.234375   9   9 1.0    0       58     66     5         5       35      39         2110          225
 13   1   8   8 0.716412 0.105366 0.004175 0.825953 16.787801  0.825953 0.000000  482.515625  474.414062   7   7 1.0    0       67     73     5         5       40      44          990           18
 14   3   1   1 1.143392 0.715901 0.000000 1.859293  1.859293  1.859293 0.000000  480.941406  471.343750  20  20 1.0   20        1     20     0         0        1       1        89456            0
 14   2   1   1 2.574248 2.726860 0.008769 5.309877  7.169170  7.169170 1.230912  518.882812  518.492188  30  30 1.0   30        1     30    10        10        1      10       111167        79743
 14   2   2   2 1.037683 0.184955 0.008275 1.230912  8.400083  1.230912 0.000000  506.617188  498.031250  14  14 1.0   14       31     44    10        10       11      20         4000          215
 14   1   1   1 1.600815 0.706835 0.005986 2.313636  9.482807  9.482807 2.675240  505.812500  500.765625  15  15 1.0    0        1     15     7         7        1       7        10164         6637
 14   1   2   2 1.227280 0.211847 0.005200 1.444327 12.158046  2.675240 1.457575  501.835938  494.507812  12  12 1.0    0       16     27     7         7        8      14         3732          835
 14   1   3   3 1.230209 0.221623 0.005743 1.457575 13.615622  1.457575 1.933518  504.476562  496.906250  12  12 1.0    0       28     39     8         8       15      22         3623          760
 14   1   4   4 1.359346 0.568404 0.005769 1.933518 15.549140  1.933518 0.661560  508.175781  499.996094  13  13 1.0    0       40     52     8         8       23      30         4947         2533
 14   1   5   5 0.593074 0.066531 0.001955 0.661560 16.210700  0.661560 0.576512  500.746094  491.636719   6   6 1.0    0       53     58     3         3       31      33         1046           43
 14   1   6   6 0.511716 0.062930 0.001866 0.576512 16.787212  0.576512 0.578139  500.750000  491.636719   5   5 1.0    0       59     63     3         3       34      36          524           36
 14   1   7   7 0.505921 0.070068 0.002150 0.578139 17.365350  0.578139 0.577138  500.750000  491.636719   5   5 1.0    0       64     68     4         4       37      40          599           56
 14   1   8   8 0.505756 0.068605 0.002777 0.577138 17.942488  0.577138 0.000000  500.949219  491.636719   5   5 1.0    0       69     73     4         4       41      44          599           23
 15   3   1   1 1.140903 0.700025 0.000000 1.840928  1.840928  1.840928 0.000000  502.402344  493.042969  20  20 1.0   20        1     20     0         0        1       1        80638            0
 15   2   1   1 2.145429 1.418123 0.008575 3.572127  5.413055  5.413055 1.961291  526.300781  519.375000  26  26 1.0   26        1     26    10        10        1      10        51841        28634
 15   2   2   2 1.436622 0.517039 0.007629 1.961291  7.374346  1.961291 0.000000  525.921875  517.757812  18  18 1.0   18       27     44    10        10       11      20        18607        13946
 15   1   1   1 1.480051 0.351074 0.004947 1.836072  7.249127  7.249127 3.124398  518.441406  509.343750  14  14 1.0    0        1     14     6         6        1       6         8290         5488
 15   1   2   2 1.005816 0.153405 0.003886 1.163107 10.373525  3.124398 1.637128  511.496094  502.339844  10  10 1.0    0       15     24     6         6        7      12         2733          358
 15   1   3   3 1.131767 0.499717 0.005643 1.637128 12.010653  1.637128 1.334774  517.003906  510.039062  11  11 1.0    0       25     35     7         7       13      19         4494          892
 15   1   4   4 1.138522 0.190801 0.005451 1.334774 13.345428  1.334774 0.581084  518.636719  511.167969  11  11 1.0    0       36     46     7         7       20      26         2454          302
 15   1   5   5 0.508376 0.070047 0.002661 0.581084 13.926512  0.581084 0.816114  514.984375  505.761719   5   5 1.0    0       47     51     4         4       27      30          648            0
 15   1   6   6 0.705127 0.108847 0.002140 0.816114 14.742626  0.816114 1.507563  516.410156  507.062500   7   7 1.0    0       52     58     4         4       31      34         1708          596
 15   1   7   7 1.024106 0.479803 0.003654 1.507563 16.250189  1.507563 0.822735  521.062500  512.535156  10  10 1.0    0       59     68     5         5       35      39         3447         1137
 15   1   8   8 0.715916 0.102620 0.004199 0.822735 17.072924  0.822735 0.000000  517.253906  508.035156   7   7 1.0    0       69     75     5         5       40      44         1070           34
 16   3   1   1 1.140639 0.798287 0.000000 1.938926  1.938926  1.938926 0.000000  519.679688  510.730469  20  20 1.0   20        1     20     0         0        1       1        95094            0
 16   2   1   1 2.142164 1.236481 0.008498 3.387143  5.326069  5.326069 1.889449  542.519531  535.203125  26  26 1.0   26        1     26    10        10        1      10        56276        33098
 16   2   2   2 1.434955 0.446798 0.007696 1.889449  7.215518  1.889449 0.000000  542.066406  534.437500  18  18 1.0   18       27     44    10        10       11      20        14724        11245
 16   1   1   1 1.474719 0.665065 0.004711 2.144495  7.470564  7.470564 3.046689  536.015625  527.363281  14  14 1.0    0        1     14     6         6        1       6         7435         4529
 16   1   2   2 1.001862 0.151397 0.003980 1.157240 10.517253  3.046689 1.351667  526.535156  517.230469  10  10 1.0    0       15     24     6         6        7      12         2899          348
 16   1   3   3 1.132396 0.213683 0.005588 1.351667 11.868919  1.351667 1.468111  533.656250  526.683594  11  11 1.0    0       25     35     7         7       13      19         4101          710
 16   1   4   4 1.242100 0.220598 0.005414 1.468111 13.337031  1.468111 0.460843  536.187500  528.242188  12  12 1.0    0       36     47     7         7       20      26         2798          480
 16   1   5   5 0.408217 0.050665 0.001961 0.460843 13.797873  0.460843 0.818792  531.316406  522.140625   4   4 1.0    0       48     51     4         4       27      30          533           29
 16   1   6   6 0.705271 0.111307 0.002215 0.818792 14.616666  0.818792 1.202952  531.683594  523.089844   7   7 1.0    0       52     58     4         4       31      34         1668          629
 16   1   7   7 1.021375 0.177744 0.003834 1.202952 15.819617  1.202952 0.820875  536.644531  527.996094  10  10 1.0    0       59     68     5         5       35      39         4073         1089
 16   1   8   8 0.714130 0.102262 0.004483 0.820875 16.640492  0.820875 0.000000  532.820312  523.503906   7   7 1.0    0       69     75     5         5       40      44         1016           70
 17   3   1   1 1.145700 0.737917 0.000000 1.883617  1.883617  1.883617 0.000000  533.761719  524.449219  20  20 1.0   20        1     20     0         0        1       1        88427            0
 17   2   1   1 2.587771 2.247818 0.008697 4.844286  6.727903  6.727903 1.564556  565.359375  564.835938  30  30 1.0   30        1     30    10        10        1      10        89259        64080
 17   2   2   2 1.044344 0.512136 0.008076 1.564556  8.292460  1.564556 0.000000  547.195312  540.851562  14  14 1.0   14       31     44    10        10       11      20         4016          211
 17   1   1   1 1.598707 0.378390 0.005889 1.982985  8.710889  8.710889 2.849252  554.085938  548.574219  15  15 1.0    0        1     15     7         7        1       7         7928         4445
 17   1   2   2 1.108254 0.171490 0.004951 1.284696 11.560141  2.849252 1.602905  544.171875  535.222656  11  11 1.0    0       16     26     7         7        8      14         2732          357
 17   1   3   3 1.346608 0.249509 0.006788 1.602905 13.163046  1.602905 1.713123  553.339844  545.343750  13  13 1.0    0       27     39     8         8       15      22         4559          787
 17   1   4   4 1.367908 0.339036 0.006178 1.713123 14.876169  1.713123 0.655998  546.125000  540.003906  13  13 1.0    0       40     52     8         8       23      30         7196         4537
 17   1   5   5 0.591864 0.062293 0.001841 0.655998 15.532167  0.655998 0.576363  541.585938  533.718750   6   6 1.0    0       53     58     3         3       31      33          963           32
 17   1   6   6 0.512351 0.062214 0.001798 0.576363 16.108530  0.576363 0.575644  542.160156  533.968750   5   5 1.0    0       59     63     3         3       34      36          525           33
 17   1   7   7 0.505139 0.068510 0.001994 0.575644 16.684173  0.575644 0.575130  542.527344  534.230469   5   5 1.0    0       64     68     4         4       37      40          607           63
 17   1   8   8 0.504868 0.067629 0.002634 0.575130 17.259304  0.575130 0.000000  542.734375  534.382812   5   5 1.0    0       69     73     4         4       41      44          605           29
 18   3   1   1 1.135687 0.725734 0.000000 1.861421  1.861421  1.861421 0.000000  548.996094  540.878906  20  20 1.0   20        1     20     0         0        1       1        87295            0
 18   2   1   1 2.588582 2.629045 0.008787 5.226413  7.087835  7.087835 1.593424  582.957031  582.910156  30  30 1.0   30        1     30    10        10        1      10        96472        66536
 18   2   2   2 1.053030 0.532357 0.008037 1.593424  8.681259  1.593424 0.000000  570.457031  562.078125  14  14 1.0   14       31     44    10        10       11      20         4155          623
 18   1   1   1 1.596298 0.469597 0.005930 2.071825  9.159659  9.159659 2.773428  568.914062  563.503906  15  15 1.0    0        1     15     7         7        1       7        12687         8392
 18   1   2   2 1.009913 0.165405 0.004686 1.180004 11.933088  2.773428 1.448012  559.929688  550.871094  10  10 1.0    0       16     25     7         7        8      14         2598          426
 18   1   3   3 1.224911 0.217452 0.005649 1.448012 13.381099  1.448012 1.734080  567.750000  560.316406  12  12 1.0    0       26     37     8         8       15      22         3626          760
 18   1   4   4 1.374274 0.354073 0.005733 1.734080 15.115179  1.734080 0.656303  571.382812  563.312500  13  13 1.0    0       38     50     8         8       23      30         7903         4784
 18   1   5   5 0.590243 0.064170 0.001889 0.656303 15.771482  0.656303 0.573086  567.140625  558.632812   6   6 1.0    0       51     56     3         3       31      33         1024           38
 18   1   6   6 0.509855 0.061403 0.001827 0.573086 16.344568  0.573086 0.576224  567.140625  558.632812   5   5 1.0    0       57     61     3         3       34      36          536           37
 18   1   7   7 0.505085 0.068542 0.002597 0.576224 16.920791  0.576224 0.578436  567.140625  558.632812   5   5 1.0    0       62     66     4         4       37      40          619            7
 18   1   8   8 0.505973 0.069761 0.002701 0.578436 17.499227  0.578436 0.000000  567.140625  558.632812   5   5 1.0    0       67     71     4         4       41      44          602           25
 19   3   1   1 1.133763 0.729494 0.000000 1.863258  1.863258  1.863258 0.000000  568.871094  560.031250  20  20 1.0   20        1     20     0         0        1       1        86960            0
 19   2   1   1 2.166412 1.628301 0.008372 3.803085  5.666342  5.666342 2.356996  588.218750  580.769531  26  26 1.0   26        1     26    10        10        1      10        58091        32507
 19   2   2   2 1.441707 0.907445 0.007844 2.356996  8.023338  2.356996 0.000000  589.507812  581.433594  18  18 1.0   18       27     44    10        10       11      20        21812        17089
 19   1   1   1 1.484194 0.386910 0.004679 1.875783  7.542125  7.542125 3.039093  582.621094  573.789062  14  14 1.0    0        1     14     6         6        1       6         8280         5471
 19   1   2   2 0.597703 0.080736 0.003658 0.682097 10.581218  3.039093 2.213290  570.835938  561.769531   6   6 1.0    0       15     20     6         6        7      12         1812            0
 19   1   3   3 1.782960 0.424710 0.005619 2.213290 12.794508  2.213290 1.323757  586.492188  580.984375  17  17 1.0    0       21     37     7         7       13      19        11457         2004
 19   1   4   4 1.127379 0.191310 0.005068 1.323757 14.118265  1.323757 0.583670  583.382812  576.031250  11  11 1.0    0       38     48     7         7       20      26         2491          253
 19   1   5   5 0.510660 0.070410 0.002601 0.583670 14.701936  0.583670 0.818761  578.570312  569.441406   5   5 1.0    0       49     53     4         4       27      30          706           69
 19   1   6   6 0.707209 0.109371 0.002181 0.818761 15.520697  0.818761 1.195300  579.773438  570.644531   7   7 1.0    0       54     60     4         4       31      34         1655          581
 19   1   7   7 1.018529 0.173059 0.003712 1.195300 16.715997  1.195300 0.822302  584.488281  576.125000  10  10 1.0    0       61     70     5         5       35      39         2979          979
 19   1   8   8 0.719225 0.098935 0.004142 0.822302 17.538299  0.822302 0.000000  580.253906  571.128906   7   7 1.0    0       71     77     5         5       40      44         1023           70
 20   3   1   1 1.134350 0.920418 0.000000 2.054768  2.054768  2.054768 0.000000  581.140625  572.070312  20  20 1.0   20        1     20     0         0        1       1       103530            0
 20   2   1   1 2.351157 1.099843 0.008454 3.459454  5.514222  5.514222 1.869422  605.125000  597.285156  28  28 1.0   28        1     28    10        10        1      10        40470        27692
 20   2   2   2 1.238295 0.622208 0.008919 1.869422  7.383643  1.869422 0.000000  602.191406  593.761719  16  16 1.0   16       29     44    10        10       11      20         5475          664
 20   1   1   1 1.604096 0.784318 0.005608 2.394022  7.908243  7.908243 3.047420  594.640625  591.101562  15  15 1.0    0        1     15     7         7        1       7         9653         6089
 20   1   2   2 1.009991 0.163120 0.004887 1.177998 10.955663  3.047420 1.332349  586.667969  578.496094  10  10 1.0    0       16     25     7         7        8      14         2575          403
 20   1   3   3 1.134599 0.192501 0.005250 1.332349 12.288013  1.332349 1.507349  594.882812  589.148438  11  11 1.0    0       26     36     7         7       15      21         2781          158
 20   1   4   4 1.243239 0.259070 0.005040 1.507349 13.795362  1.507349 0.572411  598.269531  592.445312  12  12 1.0    0       37     48     7         7       22      28         4847         2681
 20   1   5   5 0.506433 0.063388 0.002590 0.572411 14.367773  0.572411 0.933145  593.406250  584.535156   5   5 1.0    0       49     53     4         4       29      32          624            0
 20   1   6   6 0.819464 0.110939 0.002743 0.933145 15.300919  0.933145 0.576433  594.925781  586.050781   8   8 1.0    0       54     61     4         4       33      36         1793          165
 20   1   7   7 0.509459 0.064918 0.002055 0.576433 15.877352  0.576433 0.577679  593.503906  584.652344   5   5 1.0    0       62     66     4         4       37      40          573           27
 20   1   8   8 0.507452 0.067588 0.002639 0.577679 16.455030  0.577679 0.000000  593.503906  584.652344   5   5 1.0    0       67     71     4         4       41      44          600           24
 21   3   1   1 1.133026 0.744417 0.000000 1.877443  1.877443  1.877443 0.000000  595.578125  586.882812  20  20 1.0   20        1     20     0         0        1       1        88884            0
 21   2   1   1 2.141149 1.211612 0.008426 3.361186  5.238629  5.238629 1.879086  617.207031  609.906250  26  26 1.0   26        1     26    10        10        1      10        53563        30139
 21   2   2   2 1.443136 0.427487 0.008463 1.879086  7.117715  1.879086 0.000000  620.332031  612.417969  18  18 1.0   18       27     44    10        10       11      20        12851         7398
 21   1   1   1 1.486685 0.379012 0.004646 1.870342  7.108971  7.108971 3.432736  611.179688  602.722656  14  14 1.0    0        1     14     6         6        1       6         9673         5932
 21   1   2   2 1.012408 0.537285 0.003958 1.553650 10.541708  3.432736 1.339692  603.027344  594.042969  10  10 1.0    0       15     24     6         6        7      12         2712          382
 21   1   3   3 1.130223 0.204168 0.005302 1.339692 11.881400  1.339692 1.327843  610.976562  604.410156  11  11 1.0    0       25     35     7         7       13      19         4182          666
 21   1   4   4 1.130714 0.191939 0.005191 1.327843 13.209243  1.327843 0.584472  613.605469  606.484375  11  11 1.0    0       36     46     7         7       20      26         2389          123
 21   1   5   5 0.512688 0.069636 0.002148 0.584472 13.793715  0.584472 1.336619  607.785156  598.906250   5   5 1.0    0       47     51     4         4       27      30          875          212
 21   1   6   6 0.816902 0.517084 0.002633 1.336619 15.130334  1.336619 1.192218  609.492188  600.492188   8   8 1.0    0       52     59     4         4       31      34         1723          233
 21   1   7   7 1.024389 0.164098 0.003731 1.192218 16.322552  1.192218 0.700894  615.089844  607.097656  10  10 1.0    0       60     69     5         5       35      39         2481          423
 21   1   8   8 0.607946 0.089458 0.003490 0.700894 17.023446  0.700894 0.000000  610.000000  600.996094   6   6 1.0    0       70     75     5         5       40      44          863           35
 22   3   1   1 1.134184 0.900663 0.000000 2.034847  2.034847  2.034847 0.000000  610.757812  601.812500  20  20 1.0   20        1     20     0         0        1       1       103587            0
 22   2   1   1 2.585126 1.763987 0.008674 4.357786  6.392633  6.392633 1.237789  643.359375  643.156250  30  30 1.0   30        1     30    10        10        1      10        72783        47841
 22   2   2   2 1.044962 0.184872 0.007955 1.237789  7.630422  1.237789 0.000000  631.707031  625.183594  14  14 1.0   14       31     44    10        10       11      20         3987          197
 22   1   1   1 1.599376 0.356805 0.005776 1.961957  8.354590  8.354590 2.835685  631.492188  626.488281  15  15 1.0    0        1     15     7         7        1       7         6825         3082
 22   1   2   2 1.014401 0.578688 0.004806 1.597895 11.190275  2.835685 1.446065  621.859375  613.050781  10  10 1.0    0       16     25     7         7        8      14         2490          442
 22   1   3   3 1.226136 0.213814 0.006116 1.446065 12.636340  1.446065 1.764009  630.359375  623.226562  12  12 1.0    0       26     37     8         8       15      22         3574          576
 22   1   4   4 1.367761 0.390371 0.005877 1.764009 14.400349  1.764009 0.661033  634.894531  627.140625  13  13 1.0    0       38     50     8         8       23      30         9136         5777
 22   1   5   5 0.593187 0.065808 0.002038 0.661033 15.061382  0.661033 0.578162  626.832031  618.125000   6   6 1.0    0       51     56     3         3       31      33          969           49
 22   1   6   6 0.513907 0.062402 0.001853 0.578162 15.639544  0.578162 0.583591  626.855469  618.125000   5   5 1.0    0       57     61     3         3       34      36          545           38
 22   1   7   7 0.510065 0.071380 0.002147 0.583591 16.223135  0.583591 0.577489  626.855469  618.125000   5   5 1.0    0       62     66     4         4       37      40          637           74
 22   1   8   8 0.507602 0.067159 0.002728 0.577489 16.800624  0.577489 0.000000  626.941406  618.125000   5   5 1.0    0       67     71     4         4       41      44          604           28
 23   3   1   1 1.147224 1.109399 0.000000 2.256623  2.256623  2.256623 0.000000  628.464844  619.531250  20  20 1.0   20        1     20     0         0        1       1        92059            0
 23   2   1   1 2.144306 1.094243 0.008433 3.246981  5.503605  5.503605 2.195771  650.339844  643.515625  26  26 1.0   26        1     26    10        10        1      10        50947        27744
 23   2   2   2 1.442083 0.745871 0.007818 2.195771  7.699375  2.195771 0.000000  650.898438  643.019531  18  18 1.0   18       27     44    10        10       11      20        30362        24965
 23   1   1   1 1.478529 0.432493 0.004888 1.915910  7.419514  7.419514 3.365325  644.062500  635.574219  14  14 1.0    0        1     14     6         6        1       6        12343         8708
 23   1   2   2 1.012226 0.153450 0.003878 1.169554 10.784840  3.365325 1.334621  634.929688  626.101562  10  10 1.0    0       15     24     6         6        7      12         3675          381
 23   1   3   3 1.130301 0.199714 0.004606 1.334621 12.119461  1.334621 1.758455  638.996094  630.960938  11  11 1.0    0       25     35     7         7       13      19         3460          407
 23   1   4   4 1.131654 0.621451 0.005350 1.758455 13.877915  1.758455 0.581093  644.843750  637.828125  11  11 1.0    0       36     46     7         7       20      26         2561          335
 23   1   5   5 0.510528 0.068040 0.002525 0.581093 14.459009  0.581093 0.815546  638.335938  629.617188   5   5 1.0    0       47     51     4         4       27      30          648            0
 23   1   6   6 0.703431 0.109958 0.002158 0.815546 15.274555  0.815546 1.204443  639.660156  630.820312   7   7 1.0    0       52     58     4         4       31      34         1699          610
 23   1   7   7 1.025312 0.175549 0.003581 1.204443 16.478998  1.204443 0.824995  643.738281  636.316406  10  10 1.0    0       59     68     5         5       35      39         3204          846
 23   1   8   8 0.720545 0.100858 0.003592 0.824995 17.303993  0.824995 0.000000  641.699219  632.898438   7   7 1.0    0       69     75     5         5       40      44         1077           57
 24   3   1   1 1.141995 0.661070 0.000000 1.803065  1.803065  1.803065 0.000000  642.515625  633.847656  20  20 1.0   20        1     20     0         0        1       1        78889            0
 24   2   1   1 2.339991 1.431321 0.008611 3.779923  5.582987  5.582987 1.474472  665.839844  658.320312  28  28 1.0   28        1     28    10        10        1      10        39840        26301
 24   2   2   2 1.230283 0.235558 0.008631 1.474472  7.057459  1.474472 0.000000  664.417969  655.761719  16  16 1.0   16       29     44    10        10       11      20         5230          667
 24   1   1   1 1.595263 0.384345 0.005612 1.985221  7.568208  7.568208 2.907109  660.554688  655.433594  15  15 1.0    0        1     15     7         7        1       7         8128         4577
 24   1   2   2 1.226873 0.200917 0.004847 1.432637 10.475317  2.907109 1.341898  657.160156  650.472656  12  12 1.0    0       16     27     7         7        8      14         3511          774
 24   1   3   3 1.136937 0.199505 0.005456 1.341898 11.817215  1.341898 1.502952  659.066406  652.710938  11  11 1.0    0       28     38     7         7       15      21         3243          578
 24   1   4   4 1.249262 0.248859 0.004831 1.502952 13.320167  1.502952 1.013526  660.910156  653.351562  12  12 1.0    0       39     50     7         7       22      28         5023         2593
 24   1   5   5 0.502555 0.508405 0.002566 1.013526 14.333693  1.013526 0.931533  655.187500  646.515625   5   5 1.0    0       51     55     4         4       29      32          624            0
 24   1   6   6 0.813649 0.115165 0.002718 0.931533 15.265226  0.931533 0.573464  656.726562  648.062500   8   8 1.0    0       56     63     4         4       33      36         2012          277
 24   1   7   7 0.506520 0.064362 0.002581 0.573464 15.838690  0.573464 0.582588  655.187500  646.515625   5   5 1.0    0       64     68     4         4       37      40          626           14
 24   1   8   8 0.510171 0.069712 0.002705 0.582588 16.421278  0.582588 0.000000  655.187500  646.515625   5   5 1.0    0       69     73     4         4       41      44          598           19
 25   3   1   1 1.142833 0.900577 0.000000 2.043410  2.043410  2.043410 0.000000  656.949219  648.167969  20  20 1.0   20        1     20     0         0        1       1       102494            0
 25   2   1   1 1.926970 0.577755 0.008225 2.512950  4.556360  4.556360 2.216313  677.679688  671.796875  24  24 1.0   24        1     24    10        10        1      10        23716         9697
 25   2   2   2 1.620473 0.587218 0.008622 2.216313  6.772673  2.216313 0.000000  682.457031  677.300781  20  20 1.0   20       25     44    10        10       11      20        22317        15025
 25   1   1   1 1.475858 0.392979 0.004732 1.873569  6.429929  6.429929 3.140251  674.066406  665.406250  14  14 1.0    0        1     14     6         6        1       6        10926         7407
 25   1   2   2 0.802451 0.117794 0.003693 0.923938  9.570179  3.140251 1.301506  665.433594  656.574219   8   8 1.0    0       15     22     6         6        7      12         2321          295
 25   1   3   3 1.118368 0.178675 0.004463 1.301506 10.871685  1.301506 0.820534  667.226562  658.585938  11  11 1.0    0       23     33     6         6       13      18         2252          230
 25   1   4   4 0.712274 0.103998 0.004261 0.820534 11.692218  0.820534 0.951563  667.277344  658.656250   7   7 1.0    0       34     40     6         6       19      24         1171           19
 25   1   5   5 0.808374 0.140162 0.003027 0.951563 12.643782  0.951563 0.951833  673.328125  664.941406   8   8 1.0    0       41     48     5         5       25      29         2351          880
 25   1   6   6 0.816007 0.132290 0.003537 0.951833 13.595615  0.951833 1.022934  672.019531  663.164062   8   8 1.0    0       49     56     5         5       30      34         2051          375
 25   1   7   7 0.893334 0.125940 0.003660 1.022934 14.618549  1.022934 0.696111  671.968750  663.175781   9   9 1.0    0       57     65     5         5       35      39         1973          228
 25   1   8   8 0.604239 0.087645 0.004228 0.696111 15.314660  0.696111 0.000000  672.738281  663.875000   6   6 1.0    0       66     71     5         5       40      44          878           14
 26   3   1   1 1.142653 0.971186 0.000000 2.113839  2.113839  2.113839 0.000000  673.574219  664.781250  20  20 1.0   20        1     20     0         0        1       1       112949            0
 26   2   1   1 1.937555 1.050865 0.008350 2.996769  5.110608  5.110608 2.294191  692.410156  686.519531  24  24 1.0   24        1     24    10        10        1      10        20884         9266
 26   2   2   2 1.628069 0.657592 0.008529 2.294191  7.404799  2.294191 0.000000  697.140625  691.785156  20  20 1.0   20       25     44    10        10       11      20        24829        16873
 26   1   1   1 1.477633 0.321407 0.004863 1.803904  6.914513  6.914513 3.449025  688.425781  679.820312  14  14 1.0    0        1     14     6         6        1       6         6236         3539
 26   1   2   2 1.001042 0.149676 0.004117 1.154835 10.363538  3.449025 1.291654  679.917969  671.085938  10  10 1.0    0       15     24     6         6        7      12         2841          290
 26   1   3   3 1.110181 0.177045 0.004429 1.291654 11.655192  1.291654 0.819299  681.406250  672.640625  11  11 1.0    0       25     35     6         6       13      18         2384          214
 26   1   4   4 0.711018 0.104072 0.004209 0.819299 12.474492  0.819299 0.959758  681.902344  673.074219   7   7 1.0    0       36     42     6         6       19      24         1173           21
 26   1   5   5 0.811608 0.144823 0.003327 0.959758 13.434250  0.959758 1.431272  686.285156  677.562500   8   8 1.0    0       43     50     5         5       25      29         2776          969
 26   1   6   6 0.817657 0.610030 0.003585 1.431272 14.865522  1.431272 1.032832  686.414062  677.566406   8   8 1.0    0       51     58     5         5       30      34         2010          555
 26   1   7   7 0.901997 0.127257 0.003579 1.032832 15.898354  1.032832 0.693205  686.316406  677.714844   9   9 1.0    0       59     67     5         5       35      39         1919          265
 26   1   8   8 0.602929 0.086276 0.004000 0.693205 16.591560  0.693205 0.000000  686.882812  678.031250   6   6 1.0    0       68     73     5         5       40      44          879           15
 27   3   1   1 1.129683 1.031540 0.000000 2.161222  2.161222  2.161222 0.000000  687.781250  678.933594  20  20 1.0   20        1     20     0         0        1       1       115101            0
 27   2   1   1 2.717011 3.078339 0.008878 5.804227  7.965450  7.965450 0.987704  723.148438  722.746094  31  31 1.0   31        1     31    10        10        1      10       118925        85779
 27   2   2   2 0.825871 0.155178 0.006656 0.987704  8.953153  0.987704 0.000000  707.214844  698.871094  11  11 1.0   11       32     42    10        10       11      20         2809          105
 27   1   1   1 1.594965 0.446291 0.005857 2.047113 10.012563 10.012563 2.544366  711.167969  706.425781  15  15 1.0    0        1     15     7         7        1       7        11444         7209
 27   1   2   2 1.327111 0.223762 0.005789 1.556662 12.556929  2.544366 2.076616  708.656250  701.406250  13  13 1.0    0       16     28     8         8        8      15         3898          697
 27   1   3   3 1.337913 0.732214 0.006488 2.076616 14.633545  2.076616 2.179634  711.457031  703.859375  13  13 1.0    0       29     41     8         8       16      23         3610          589
 27   1   4   4 1.723815 0.449423 0.006397 2.179634 16.813180  2.179634 0.259924  717.730469  713.617188  16  16 1.0    0       42     57     8         8       24      31         9643         4608
 27   1   5   5 0.232460 0.026695 0.000769 0.259924 17.073103  0.259924 0.462841  706.066406  697.832031   2   2 1.0    0       58     59     2         2       32      33          180            0
 27   1   6   6 0.408945 0.052223 0.001673 0.462841 17.535944  0.462841 0.458598  706.066406  697.832031   4   4 1.0    0       60     63     3         3       34      36          438            6
 27   1   7   7 0.409290 0.047681 0.001626 0.458598 17.994542  0.458598 0.457730  706.066406  697.832031   4   4 1.0    0       64     67     3         3       37      39          400            4
 27   1   8   8 0.407572 0.047817 0.002341 0.457730 18.452272  0.457730 0.000000  706.066406  697.832031   4   4 1.0    0       68     71     3         3       40      42          402            6
 28   3   1   1 1.133694 0.714728 0.000000 1.848422  1.848422  1.848422 0.000000  707.683594  699.238281  20  20 1.0   20        1     20     0         0        1       1        85168            0
 28   2   1   1 2.032871 1.373024 0.008538 3.414433  5.262855  5.262855 1.686661  728.199219  722.234375  25  25 1.0   25        1     25    10        10        1      10        40768        20678
 28   2   2   2 1.347558 0.330868 0.008235 1.686661  6.949516  1.686661 0.000000  729.339844  722.386719  17  17 1.0   17       26     42    10        10       11      20         9661         5608
 28   1   1   1 1.486242 0.398038 0.004717 1.888997  7.151852  7.151852 2.612918  723.820312  715.445312  14  14 1.0    0        1     14     6         6        1       6        10345         6420
 28   1   2   2 0.804756 0.117665 0.003836 0.926258  9.764771  2.612918 1.210188  713.332031  704.707031   8   8 1.0    0       15     22     6         6        7      12         2452          196
 28   1   3   3 1.023749 0.181986 0.004454 1.210188 10.974959  1.210188 1.208727  716.476562  707.964844  10  10 1.0    0       23     32     6         6       13      18         3441          824
 28   1   4   4 1.036070 0.167366 0.005291 1.208727 12.183685  1.208727 0.576427  717.398438  708.804688  10  10 1.0    0       33     42     7         7       19      25         1981          288
 28   1   5   5 0.508537 0.065900 0.001990 0.576427 12.760112  0.576427 0.940915  719.308594  710.640625   5   5 1.0    0       43     47     4         4       26      29          678           49
 28   1   6   6 0.818191 0.120099 0.002625 0.940915 13.701027  0.940915 0.920702  721.785156  713.121094   8   8 1.0    0       48     55     4         4       30      33         1866          303
 28   1   7   7 0.808777 0.109155 0.002770 0.920702 14.621729  0.920702 0.697993  721.507812  712.839844   8   8 1.0    0       56     63     4         4       34      37         1729          168
 28   1   8   8 0.608171 0.086376 0.003446 0.697993 15.319721  0.697993 0.000000  721.671875  713.128906   6   6 1.0    0       64     69     5         5       38      42          847           43
 29   3   1   1 1.133003 0.816825 0.000000 1.949828  1.949828  1.949828 0.000000  722.699219  714.027344  20  20 1.0   20        1     20     0         0        1       1        87865            0
 29   2   1   1 2.024237 0.772830 0.008499 2.805566  4.755395  4.755395 2.226748  742.582031  736.265625  25  25 1.0   25        1     25    10        10        1      10        38165        16585
 29   2   2   2 1.349291 0.869224 0.008233 2.226748  6.982142  2.226748 0.000000  744.503906  737.460938  17  17 1.0   17       26     42    10        10       11      20         8713         4968
 29   1   1   1 1.485507 0.355101 0.004917 1.845526  6.600920  6.600920 3.150869  737.128906  728.667969  14  14 1.0    0        1     14     6         6        1       6         9079         5453
 29   1   2   2 0.804755 0.115595 0.003772 0.924122  9.751790  3.150869 1.210294  728.496094  719.832031   8   8 1.0    0       15     22     6         6        7      12         2003          200
 29   1   3   3 1.027039 0.178728 0.004527 1.210294 10.962084  1.210294 1.215630  731.617188  723.300781  10  10 1.0    0       23     32     6         6       13      18         3450          726
 29   1   4   4 1.039389 0.170871 0.005370 1.215630 12.177713  1.215630 0.576312  732.531250  724.121094  10  10 1.0    0       33     42     7         7       19      25         2314          573
 29   1   5   5 0.508603 0.065712 0.001997 0.576312 12.754025  0.576312 0.939323  733.742188  725.214844   5   5 1.0    0       43     47     4         4       26      29          645           71
 29   1   6   6 0.816082 0.120551 0.002690 0.939323 13.693348  0.939323 0.920396  734.523438  726.207031   8   8 1.0    0       48     55     4         4       30      33         1913          343
 29   1   7   7 0.809306 0.108360 0.002730 0.920396 14.613744  0.920396 0.697529  734.238281  725.582031   8   8 1.0    0       56     63     4         4       34      37         1749          128
 29   1   8   8 0.606854 0.086596 0.004079 0.697529 15.311273  0.697529 0.000000  735.027344  726.371094   6   6 1.0    0       64     69     5         5       38      42          879           15
 30   3   1   1 1.144769 0.804192 0.000000 1.948961  1.948961  1.948961 0.000000  736.117188  727.523438  20  20 1.0   20        1     20     0         0        1       1        94652            0
 30   2   1   1 2.709089 3.083529 0.009021 5.801639  7.750600  7.750600 0.981021  769.550781  768.148438  31  31 1.0   31        1     31    10        10        1      10       119240        83674
 30   2   2   2 0.821948 0.152920 0.006153 0.981021  8.731620  0.981021 0.000000  752.390625  744.082031  11  11 1.0   11       32     42    10        10       11      20         2694          248
 30   1   1   1 1.600996 0.418627 0.006070 2.025693  9.776292  9.776292 3.112262  758.601562  753.785156  15  15 1.0    0        1     15     7         7        1       7        11272         6566
 30   1   2   2 1.347097 0.778353 0.005791 2.131241 12.888554  3.112262 1.579057  755.078125  747.972656  13  13 1.0    0       16     28     8         8        8      15         4344          928
 30   1   3   3 1.332069 0.240570 0.006418 1.579057 14.467611  1.579057 2.169876  757.093750  749.984375  13  13 1.0    0       29     41     8         8       16      23         4026          585
 30   1   4   4 1.713302 0.450168 0.006406 2.169876 16.637487  2.169876 0.350149  763.140625  759.132812  16  16 1.0    0       42     57     8         8       24      31         9825         4088
 30   1   5   5 0.314427 0.034762 0.000961 0.350149 16.987637  0.350149 0.458242  751.593750  743.046875   3   3 1.0    0       58     60     2         2       32      33          232           16
 30   1   6   6 0.409447 0.047539 0.001256 0.458242 17.445878  0.458242 0.358741  751.593750  743.046875   4   4 1.0    0       61     64     3         3       34      36          417           44
 30   1   7   7 0.318550 0.038997 0.001195 0.358741 17.804620  0.358741 0.466384  751.593750  743.046875   3   3 1.0    0       65     67     3         3       37      39          324            0
 30   1   8   8 0.411370 0.052600 0.002414 0.466384 18.271004  0.466384 0.000000  751.593750  743.046875   4   4 1.0    0       68     71     3         3       40      42          432            0
 31   3   1   1 1.146896 0.710066 0.000000 1.856962  1.856962  1.856962 0.000000  752.996094  744.453125  20  20 1.0   20        1     20     0         0        1       1        81544            0
 31   2   1   1 2.735566 2.987256 0.009295 5.732118  7.589080  7.589080 0.985453  787.183594  786.660156  31  31 1.0   31        1     31    10        10        1      10       112331        80854
 31   2   2   2 0.824335 0.154313 0.006805 0.985453  8.574533  0.985453 0.000000  771.667969  763.500000  11  11 1.0   11       32     42    10        10       11      20         2636           44
 31   1   1   1 1.600195 1.010087 0.005518 2.615800 10.204880 10.204880 2.312930  773.671875  769.285156  15  15 1.0    0        1     15     7         7        1       7        11716         7915
 31   1   2   2 1.127166 0.194044 0.006266 1.327476 12.517810  2.312930 1.591025  770.312500  764.152344  11  11 1.0    0       16     26     8         8        8      15         3078          599
 31   1   3   3 1.338841 0.245218 0.006966 1.591025 14.108835  1.591025 2.166784  771.675781  764.750000  13  13 1.0    0       27     39     8         8       16      23         4146          820
 31   1   4   4 1.721372 0.438963 0.006448 2.166784 16.275618  2.166784 0.350762  781.281250  777.105469  16  16 1.0    0       40     55     8         8       24      31         8640         3729
 31   1   5   5 0.314940 0.034907 0.000915 0.350762 16.626381  0.350762 0.357093  770.824219  762.714844   3   3 1.0    0       56     58     2         2       32      33          231           15
 31   1   6   6 0.317034 0.038875 0.001184 0.357093 16.983473  0.357093 0.458810  769.324219  761.000000   3   3 1.0    0       59     61     3         3       34      36          346           22
 31   1   7   7 0.408397 0.048533 0.001880 0.458810 17.442283  0.458810 0.460301  769.386719  761.000000   4   4 1.0    0       62     65     3         3       37      39          402            6
 31   1   8   8 0.409505 0.048205 0.002591 0.460301 17.902584  0.460301 0.000000  769.390625  761.000000   4   4 1.0    0       66     69     3         3       40      42          402            6
 32   3   1   1 1.149273 0.765262 0.000000 1.914535  1.914535  1.914535 0.000000  770.839844  762.406250  20  20 1.0   20        1     20     0         0        1       1        84553            0
 32   2   1   1 2.055773 0.885311 0.008367 2.949451  4.863986  4.863986 2.339253  791.769531  786.105469  25  25 1.0   25        1     25    10        10        1      10        40997        20606
 32   2   2   2 1.541305 0.790236 0.007712 2.339253  7.203239  2.339253 0.000000  794.621094  786.855469  19  19 1.0   19       26     44    10        10       11      20        29022        24704
 32   1   1   1 1.479709 0.360984 0.005154 1.845846  6.709832  6.709832 3.498026  786.152344  778.273438  14  14 1.0    0        1     14     6         6        1       6         7381         4631
 32   1   2   2 1.001747 0.153183 0.003842 1.158773 10.207858  3.498026 1.210734  777.960938  769.539062  10  10 1.0    0       15     24     6         6        7      12         3018          359
 32   1   3   3 1.020949 0.185936 0.003849 1.210734 11.418592  1.210734 1.213785  779.335938  771.144531  10  10 1.0    0       25     34     6         6       13      18         3931          979
 32   1   4   4 1.040576 0.167722 0.005488 1.213785 12.632377  1.213785 0.463722  781.109375  772.894531  10  10 1.0    0       35     44     7         7       19      25         1956          275
 32   1   5   5 0.410553 0.051165 0.002004 0.463722 13.096099  0.463722 1.549458  782.699219  774.480469   4   4 1.0    0       45     48     4         4       26      29          504            0
 32   1   6   6 0.822372 0.723543 0.003543 1.549458 14.645557  1.549458 1.220062  784.273438  776.058594   8   8 1.0    0       49     56     5         5       30      34         2633         1135
 32   1   7   7 1.030033 0.186351 0.003678 1.220062 15.865619  1.220062 0.825924  787.457031  779.343750  10  10 1.0    0       57     66     5         5       35      39         3166          992
 32   1   8   8 0.718564 0.103237 0.004123 0.825924 16.691543  0.825924 0.000000  786.050781  777.628906   7   7 1.0    0       67     73     5         5       40      44         1061           31
 33   3   1   1 1.138432 0.666998 0.000000 1.805431  1.805431  1.805431 0.000000  786.992188  778.570312  20  20 1.0   20        1     20     0         0        1       1        77331            0
 33   2   1   1 2.051034 0.870554 0.008516 2.930103  4.735534  4.735534 2.960578  806.332031  800.136719  25  25 1.0   25        1     25    10        10        1      10        41911        17433
 33   2   2   2 1.553539 1.399193 0.007847 2.960578  7.696112  2.960578 0.000000  802.839844  795.597656  19  19 1.0   19       26     44    10        10       11      20        29251        24680
 33   1   1   1 1.483098 0.347168 0.004523 1.834788  6.570322  6.570322 4.120592  800.132812  791.972656  14  14 1.0    0        1     14     6         6        1       6         7005         3985
 33   1   2   2 1.004169 0.151485 0.004361 1.160014 10.690914  4.120592 1.206914  791.941406  783.542969  10  10 1.0    0       15     24     6         6        7      12         2851          347
 33   1   3   3 1.019142 0.183323 0.004449 1.206914 11.897828  1.206914 1.212509  793.261719  785.085938  10  10 1.0    0       25     34     6         6       13      18         3606          797
 33   1   4   4 1.036619 0.170137 0.005753 1.212509 13.110337  1.212509 0.464806  780.839844  774.328125  10  10 1.0    0       35     44     7         7       19      25         1939          262
 33   1   5   5 0.410411 0.052411 0.001984 0.464806 13.575142  0.464806 0.972263  790.992188  783.218750   4   4 1.0    0       45     48     4         4       26      29          504            0
 33   1   6   6 0.819132 0.149980 0.003150 0.972263 14.547405  0.972263 1.217444  793.496094  785.511719   8   8 1.0    0       49     56     5         5       30      34         2556         1152
 33   1   7   7 1.025345 0.188473 0.003626 1.217444 15.764850  1.217444 0.820484  799.347656  792.109375  10  10 1.0    0       57     66     5         5       35      39         3831         1121
 33   1   8   8 0.716065 0.100179 0.004240 0.820484 16.585334  0.820484 0.000000  798.515625  790.750000   7   7 1.0    0       67     73     5         5       40      44         1072           33
 34   3   1   1 1.140845 0.771637 0.000000 1.912482  1.912482  1.912482 0.000000  799.691406  791.851562  20  20 1.0   20        1     20     0         0        1       1        86703            0
 34   2   1   1 1.930921 0.561042 0.008388 2.500350  4.412833  4.412833 2.263022  819.089844  813.449219  24  24 1.0   24        1     24    10        10        1      10        22688         8764
 34   2   2   2 1.625605 0.628908 0.008509 2.263022  6.675855  2.263022 0.000000  823.718750  818.753906  20  20 1.0   20       25     44    10        10       11      20        23241        16309
 34   1   1   1 1.490568 0.339159 0.004741 1.834468  6.247301  6.247301 3.433925  814.656250  806.921875  14  14 1.0    0        1     14     6         6        1       6         6601         3884
 34   1   2   2 1.012116 0.154928 0.003859 1.170903  9.681226  3.433925 1.913965  806.687500  798.542969  10  10 1.0    0       15     24     6         6        7      12         3147          427
 34   1   3   3 1.121534 0.787808 0.004623 1.913965 11.595190  1.913965 0.819912  808.039062  799.894531  11  11 1.0    0       25     35     6         6       13      18         2367          270
 34   1   4   4 0.711257 0.104896 0.003760 0.819912 12.415103  0.819912 0.966472  808.601562  800.453125   7   7 1.0    0       36     42     6         6       19      24         1336          256
 34   1   5   5 0.819116 0.144229 0.003127 0.966472 13.381574  0.966472 0.953898  812.800781  804.507812   8   8 1.0    0       43     50     5         5       25      29         2496         1038
 34   1   6   6 0.822844 0.127381 0.003673 0.953898 14.335472  0.953898 1.027735  817.066406  810.511719   8   8 1.0    0       51     58     5         5       30      34         1651          332
 34   1   7   7 0.898111 0.125916 0.003708 1.027735 15.363208  1.027735 0.696801  813.144531  805.070312   9   9 1.0    0       59     67     5         5       35      39         1883          198
 34   1   8   8 0.606705 0.085988 0.004108 0.696801 16.060008  0.696801 0.000000  813.750000  805.433594   6   6 1.0    0       68     73     5         5       40      44          880           16
 35   3   1   1 1.136911 0.752481 0.000000 1.889393  1.889393  1.889393 0.000000  814.699219  806.386719  20  20 1.0   20        1     20     0         0        1       1        90423            0
 35   2   1   1 2.050046 0.905836 0.008453 2.964335  4.853727  4.853727 1.756742  834.359375  828.277344  25  25 1.0   25        1     25    10        10        1      10        43913        21873
 35   2   2   2 1.356738 0.391852 0.008152 1.756742  6.610469  1.756742 0.000000  836.789062  830.105469  17  17 1.0   17       26     42    10        10       11      20        11888         7511
 35   1   1   1 1.497056 0.973664 0.004858 2.475579  7.329306  7.329306 2.678152  830.003906  821.898438  14  14 1.0    0        1     14     6         6        1       6         8228         5417
 35   1   2   2 0.803237 0.114063 0.004111 0.921410 10.007458  2.678152 2.051610  820.808594  812.511719   8   8 1.0    0       15     22     6         6        7      12         2054           74
 35   1   3   3 1.664411 0.382442 0.004757 2.051610 12.059069  2.051610 1.216353  833.425781  829.039062  16  16 1.0    0       23     38     6         6       13      18         9259         2326
 35   1   4   4 1.039565 0.171584 0.005204 1.216353 13.275421  1.216353 0.582803  824.820312  816.769531  10  10 1.0    0       39     48     7         7       19      25         2009          330
 35   1   5   5 0.511650 0.069049 0.002104 0.582803 13.858224  0.582803 0.945185  826.402344  818.109375   5   5 1.0    0       49     53     4         4       26      29          637           73
 35   1   6   6 0.825117 0.117385 0.002683 0.945185 14.803410  0.945185 0.927639  827.851562  819.558594   8   8 1.0    0       54     61     4         4       30      33         1678          258
 35   1   7   7 0.813553 0.111334 0.002753 0.927639 15.731049  0.927639 0.697359  826.660156  819.105469   8   8 1.0    0       62     69     4         4       34      37         1865          203
 35   1   8   8 0.606919 0.086429 0.004010 0.697359 16.428407  0.697359 0.000000  827.253906  819.148438   6   6 1.0    0       70     75     5         5       38      42          879           15
 36   3   1   1 1.137259 0.706855 0.000000 1.844113  1.844113  1.844113 0.000000  828.347656  820.050781  20  20 1.0   20        1     20     0         0        1       1        80436            0
 36   2   1   1 2.146574 1.830507 0.008853 3.985934  5.830047  5.830047 2.205481  849.785156  843.449219  26  26 1.0   26        1     26    10        10        1      10        54961        31313
 36   2   2   2 1.444517 0.753167 0.007797 2.205481  8.035528  2.205481 0.000000  848.484375  840.894531  18  18 1.0   18       27     44    10        10       11      20        31825        26280
 36   1   1   1 1.490796 0.384989 0.004878 1.880663  7.710710  7.710710 3.371453  836.597656  829.550781  14  14 1.0    0        1     14     6         6        1       6        10016         6499
 36   1   2   2 1.010043 0.151683 0.004247 1.165973 11.082163  3.371453 1.345958  829.523438  821.964844  10  10 1.0    0       15     24     6         6        7      12         2721          404
 36   1   3   3 1.127896 0.213106 0.004956 1.345958 12.428122  1.345958 1.329371  838.429688  832.855469  11  11 1.0    0       25     35     7         7       13      19         3969          931
 36   1   4   4 1.131538 0.192677 0.005156 1.329371 13.757493  1.329371 0.581304  840.839844  834.500000  11  11 1.0    0       36     46     7         7       20      26         2596          361
 36   1   5   5 0.510879 0.067813 0.002612 0.581304 14.338797  0.581304 0.825901  837.171875  828.871094   5   5 1.0    0       47     51     4         4       27      30          648            0
 36   1   6   6 0.711535 0.112226 0.002141 0.825901 15.164698  0.825901 1.215270  838.472656  830.183594   7   7 1.0    0       52     58     4         4       31      34         1631          560
 36   1   7   7 1.029656 0.182025 0.003589 1.215270 16.379967  1.215270 0.822391  843.546875  835.937500  10  10 1.0    0       59     68     5         5       35      39         3296          874
 36   1   8   8 0.715001 0.103060 0.004330 0.822391 17.202358  0.822391 0.000000  841.011719  832.734375   7   7 1.0    0       69     75     5         5       40      44         1087           80
 37   3   1   1 1.140534 0.816770 0.000000 1.957304  1.957304  1.957304 0.000000  842.132812  833.894531  20  20 1.0   20        1     20     0         0        1       1        92047            0
 37   2   1   1 2.029105 1.451727 0.008537 3.489369  5.446673  5.446673 2.465844  862.976562  856.871094  25  25 1.0   25        1     25    10        10        1      10        39289        18150
 37   2   2   2 1.543814 0.914174 0.007856 2.465844  7.912517  2.465844 0.000000  866.644531  858.921875  19  19 1.0   19       26     44    10        10       11      20        36185        31612
 37   1   1   1 1.486816 0.389058 0.004816 1.880690  7.327363  7.327363 3.638841  858.312500  850.226562  14  14 1.0    0        1     14     6         6        1       6         9667         6587
 37   1   2   2 1.013771 0.155324 0.003903 1.172998 10.966204  3.638841 1.212698  850.101562  841.804688  10  10 1.0    0       15     24     6         6        7      12         3211          464
 37   1   3   3 1.027102 0.181070 0.004526 1.212698 12.178903  1.212698 1.214154  851.382812  843.148438  10  10 1.0    0       25     34     6         6       13      18         3474          746
 37   1   4   4 1.038827 0.170199 0.005128 1.214154 13.393056  1.214154 0.462749  853.074219  844.906250  10  10 1.0    0       35     44     7         7       19      25         2330          755
 37   1   5   5 0.408594 0.052040 0.002115 0.462749 13.855806  0.462749 0.969389  854.957031  846.792969   4   4 1.0    0       45     48     4         4       26      29          504            0
 37   1   6   6 0.819341 0.146430 0.003618 0.969389 14.825194  0.969389 1.219303  856.660156  848.371094   8   8 1.0    0       49     56     5         5       30      34         2645         1267
 37   1   7   7 1.032778 0.182883 0.003641 1.219303 16.044497  1.219303 1.489091  858.246094  851.207031  10  10 1.0    0       57     66     5         5       35      39         2877         1029
 37   1   8   8 0.718070 0.766761 0.004260 1.489091 17.533588  1.489091 0.000000  855.933594  847.640625   7   7 1.0    0       67     73     5         5       40      44         1037           93
 38   3   1   1 1.145834 0.676144 0.000000 1.821979  1.821979  1.821979 0.000000  856.503906  848.335938  20  20 1.0   20        1     20     0         0        1       1        82400            0
 38   2   1   1 2.707920 3.146339 0.008846 5.863106  7.685084  7.685084 0.989474  892.761719  892.402344  31  31 1.0   31        1     31    10        10        1      10       126238        88119
 38   2   2   2 0.826428 0.156220 0.006825 0.989474  8.674558  0.989474 0.000000  863.808594  858.070312  11  11 1.0   11       32     42    10        10       11      20         2636           44
 38   1   1   1 1.604288 0.415774 0.005498 2.025560  9.710644  9.710644 2.323262  878.796875  874.351562  15  15 1.0    0        1     15     7         7        1       7         9213         5742
 38   1   2   2 1.132656 0.195406 0.005726 1.333789 12.033906  2.323262 1.591240  876.527344  870.500000  11  11 1.0    0       16     26     8         8        8      15         3346          616
 38   1   3   3 1.350763 0.234229 0.006249 1.591240 13.625147  1.591240 2.192116  880.136719  873.000000  13  13 1.0    0       27     39     8         8       16      23         3662          292
 38   1   4   4 1.714977 0.470618 0.006521 2.192116 15.817263  2.192116 0.351497  886.585938  882.917969  16  16 1.0    0       40     55     8         8       24      31         8920         5095
 38   1   5   5 0.316280 0.034345 0.000872 0.351497 16.168760  0.351497 1.034067  863.414062  857.578125   3   3 1.0    0       56     58     2         2       32      33          232           16
 38   1   6   6 0.318102 0.714322 0.001643 1.034067 17.202827  1.034067 0.462453  863.714844  857.777344   3   3 1.0    0       59     61     3         3       34      36          348           24
 38   1   7   7 0.412067 0.048670 0.001716 0.462453 17.665280  0.462453 0.461738  864.210938  858.281250   4   4 1.0    0       62     65     3         3       37      39          402            6
 38   1   8   8 0.411334 0.048104 0.002300 0.461738 18.127017  0.461738 0.000000  864.960938  858.910156   4   4 1.0    0       66     69     3         3       40      42          402            6
 39   3   1   1 1.147968 0.636320 0.000000 1.784289  1.784289  1.784289 0.000000  870.695312  863.777344  20  20 1.0   20        1     20     0         0        1       1        78914            0
 39   2   1   1 1.928145 0.566196 0.008408 2.502749  4.287037  4.287037 2.375124  892.781250  888.296875  24  24 1.0   24        1     24    10        10        1      10        21054         9370
 39   2   2   2 1.636379 0.730241 0.008505 2.375124  6.662162  2.375124 0.000000  899.031250  895.339844  20  20 1.0   20       25     44    10        10       11      20        28750        20084
 39   1   1   1 1.481943 0.350426 0.004942 1.837310  6.124348  6.124348 3.533830  889.562500  881.882812  14  14 1.0    0        1     14     6         6        1       6         6601         3959
 39   1   2   2 1.003322 0.151152 0.004232 1.158706  9.658178  3.533830 1.307153  880.820312  873.000000  10  10 1.0    0       15     24     6         6        7      12         2846          305
 39   1   3   3 1.122530 0.179984 0.004639 1.307153 10.965331  1.307153 0.822103  883.410156  875.851562  11  11 1.0    0       25     35     6         6       13      18         2320          220
 39   1   4   4 0.713472 0.104851 0.003780 0.822103 11.787434  0.822103 0.963381  882.257812  874.367188   7   7 1.0    0       36     42     6         6       19      24         1247          121
 39   1   5   5 0.815091 0.145281 0.003009 0.963381 12.750815  0.963381 1.632107  888.605469  881.164062   8   8 1.0    0       43     50     5         5       25      29         2656         1056
 39   1   6   6 0.813106 0.815436 0.003565 1.632107 14.382922  1.632107 1.033852  888.261719  880.273438   8   8 1.0    0       51     58     5         5       30      34         1656          292
 39   1   7   7 0.900737 0.129238 0.003878 1.033852 15.416774  1.033852 0.701356  888.660156  880.796875   9   9 1.0    0       59     67     5         5       35      39         2054          317
 39   1   8   8 0.608251 0.088915 0.004189 0.701356 16.118130  0.701356 0.000000  889.117188  881.117188   6   6 1.0    0       68     73     5         5       40      44          880           16
 40   3   1   1 1.145732 0.638305 0.000000 1.784037  1.784037  1.784037 0.000000  890.187500  882.269531  20  20 1.0   20        1     20     0         0        1       1        80027            0
 40   2   1   1 2.708317 2.512307 0.008791 5.229415  7.013453  7.013453 1.701122  923.562500  924.160156  31  31 1.0   31        1     31    10        10        1      10        92456        64940
 40   2   2   2 0.822449 0.871362 0.007312 1.701122  8.714575  1.701122 0.000000  905.234375  897.359375  11  11 1.0   11       32     42    10        10       11      20         2894          305
 40   1   1   1 1.601673 0.395669 0.005847 2.003189  9.016642  9.016642 3.033528  909.695312  905.417969  15  15 1.0    0        1     15     7         7        1       7         8693         4595
 40   1   2   2 1.124600 0.202105 0.005701 1.332405 12.050169  3.033528 1.588088  904.898438  899.101562  11  11 1.0    0       16     26     8         8        8      15         3241          572
 40   1   3   3 1.340199 0.241473 0.006415 1.588088 13.638257  1.588088 2.192607  908.410156  901.593750  13  13 1.0    0       27     39     8         8       16      23         3891          672
 40   1   4   4 1.724360 0.461226 0.007021 2.192607 15.830864  2.192607 0.260827  917.312500  914.097656  16  16 1.0    0       40     55     8         8       24      31        11258         4594
 40   1   5   5 0.232930 0.026977 0.000920 0.260827 16.091691  0.260827 0.465353  904.390625  896.328125   2   2 1.0    0       56     57     2         2       32      33          180            0
 40   1   6   6 0.411872 0.051832 0.001649 0.465353 16.557044  0.465353 0.470078  904.390625  896.328125   4   4 1.0    0       58     61     3         3       34      36          444           12
 40   1   7   7 0.412204 0.056164 0.001711 0.470078 17.027122  0.470078 0.459633  904.394531  896.328125   4   4 1.0    0       62     65     3         3       37      39          432            0
 40   1   8   8 0.409794 0.047494 0.002345 0.459633 17.486755  0.459633 0.000000  904.394531  896.328125   4   4 1.0    0       66     69     3         3       40      42          401            5
 41   3   1   1 1.142649 0.670328 0.000000 1.812977  1.812977  1.812977 0.000000  905.808594  898.531250  20  20 1.0   20        1     20     0         0        1       1        77205            0
 41   2   1   1 2.149600 1.197834 0.008432 3.355866  5.168842  5.168842 2.051190  928.957031  923.089844  26  26 1.0   26        1     26    10        10        1      10        54453        30216
 41   2   2   2 1.450754 0.592680 0.007756 2.051190  7.220033  2.051190 0.000000  928.675781  921.496094  18  18 1.0   18       27     44    10        10       11      20        20754        17392
 41   1   1   1 1.481718 0.353439 0.004961 1.840118  7.008960  7.008960 3.217201  921.074219  913.207031  14  14 1.0    0        1     14     6         6        1       6         8238         4772
 41   1   2   2 1.010248 0.151852 0.003911 1.166010 10.226161  3.217201 1.351333  912.871094  904.773438  10  10 1.0    0       15     24     6         6        7      12         2970          397
 41   1   3   3 1.129049 0.217370 0.004915 1.351333 11.577494  1.351333 1.325598  920.621094  914.890625  11  11 1.0    0       25     35     7         7       13      19         4669         1162
 41   1   4   4 1.128112 0.192155 0.005332 1.325598 12.903092  1.325598 0.583317  922.386719  916.261719  11  11 1.0    0       36     46     7         7       20      26         2450          161
 41   1   5   5 0.512506 0.068670 0.002140 0.583317 13.486409  0.583317 0.817362  917.625000  909.722656   5   5 1.0    0       47     51     4         4       27      30          734          129
 41   1   6   6 0.705226 0.109915 0.002221 0.817362 14.303771  0.817362 1.209952  918.828125  910.925781   7   7 1.0    0       52     58     4         4       31      34         1583          597
 41   1   7   7 1.026394 0.179847 0.003711 1.209952 15.513723  1.209952 0.819704  923.839844  916.433594  10  10 1.0    0       59     68     5         5       35      39         3284          922
 41   1   8   8 0.714488 0.101218 0.003998 0.819704 16.333427  0.819704 0.000000  922.371094  914.550781   7   7 1.0    0       69     75     5         5       40      44         1078           32
 42   3   1   1 1.134470 0.743211 0.000000 1.877681  1.877681  1.877681 0.000000  923.250000  915.500000  20  20 1.0   20        1     20     0         0        1       1        89550            0
 42   2   1   1 2.367788 1.270672 0.008734 3.647194  5.524875  5.524875 1.491822  945.585938  938.484375  28  28 1.0   28        1     28    10        10        1      10        48782        33139
 42   2   2   2 1.239343 0.243773 0.008706 1.491822  7.016697  1.491822 0.000000  943.859375  935.960938  16  16 1.0   16       29     44    10        10       11      20         5240          734
 42   1   1   1 1.611826 0.417886 0.005786 2.035498  7.560373  7.560373 2.931515  939.335938  935.144531  15  15 1.0    0        1     15     7         7        1       7         8723         5365
 42   1   2   2 1.221235 0.213540 0.004918 1.439693 10.491888  2.931515 1.333834  935.980469  930.175781  12  12 1.0    0       16     27     7         7        8      14         3734          737
 42   1   3   3 1.136117 0.192443 0.005274 1.333834 11.825722  1.333834 1.537500  937.972656  932.195312  11  11 1.0    0       28     38     7         7       15      21         2932          242
 42   1   4   4 1.242236 0.290327 0.004937 1.537500 13.363222  1.537500 0.573777  940.761719  935.191406  12  12 1.0    0       39     50     7         7       22      28         6575         4108
 42   1   5   5 0.504192 0.066729 0.002856 0.573777 13.936999  0.573777 0.928124  933.351562  925.289062   5   5 1.0    0       51     55     4         4       29      32          624            0
 42   1   6   6 0.811236 0.114123 0.002765 0.928124 14.865123  0.928124 0.577197  934.867188  926.812500   8   8 1.0    0       56     63     4         4       33      36         1928          238
 42   1   7   7 0.507739 0.066781 0.002677 0.577197 15.442320  0.577197 0.577431  933.351562  925.289062   5   5 1.0    0       64     68     4         4       37      40          629           17
 42   1   8   8 0.505752 0.068322 0.003357 0.577431 16.019751  0.577431 0.000000  933.351562  925.289062   5   5 1.0    0       69     73     4         4       41      44          648            0
 43   3   1   1 1.134304 0.687602 0.000000 1.821906  1.821906  1.821906 0.000000  935.035156  927.195312  20  20 1.0   20        1     20     0         0        1       1        83064            0
 43   2   1   1 1.937981 0.514084 0.008244 2.460309  4.282215  4.282215 2.259887  956.183594  951.062500  24  24 1.0   24        1     24    10        10        1      10        18357         7333
 43   2   2   2 1.623016 0.628460 0.008411 2.259887  6.542102  2.259887 0.000000  959.621094  955.402344  20  20 1.0   20       25     44    10        10       11      20        23705        15771
 43   1   1   1 1.483029 0.374379 0.004684 1.862092  6.144307  6.144307 3.179263  951.703125  943.902344  14  14 1.0    0        1     14     6         6        1       6         7961         5070
 43   1   2   2 0.799949 0.115453 0.003974 0.919376  9.323570  3.179263 1.304810  942.746094  934.824219   8   8 1.0    0       15     22     6         6        7      12         2395          248
 43   1   3   3 1.118366 0.181657 0.004787 1.304810 10.628381  1.304810 0.816177  943.300781  935.425781  11  11 1.0    0       23     33     6         6       13      18         2264          247
 43   1   4   4 0.708946 0.102847 0.004384 0.816177 11.444558  0.816177 0.961960  943.601562  935.597656   7   7 1.0    0       34     40     6         6       19      24         1181           29
 43   1   5   5 0.816779 0.142131 0.003051 0.961960 12.406518  0.961960 0.960273  948.761719  941.000000   8   8 1.0    0       41     48     5         5       25      29         2349          865
 43   1   6   6 0.828489 0.128062 0.003722 0.960273 13.366791  0.960273 1.030828  953.023438  947.050781   8   8 1.0    0       49     56     5         5       30      34         1560          324
 43   1   7   7 0.899905 0.127143 0.003780 1.030828 14.397619  1.030828 0.699186  950.007812  942.066406   9   9 1.0    0       57     65     5         5       35      39         1872          155
 43   1   8   8 0.607794 0.087216 0.004176 0.699186 15.096805  0.699186 0.000000  950.691406  942.687500   6   6 1.0    0       66     71     5         5       40      44          881           17
 44   3   1   1 1.135832 0.725487 0.000000 1.861319  1.861319  1.861319 0.000000  951.484375  943.585938  20  20 1.0   20        1     20     0         0        1       1        89372            0
 44   2   1   1 1.927252 0.560655 0.008564 2.496471  4.357790  4.357790 2.340984  969.257812  963.949219  24  24 1.0   24        1     24    10        10        1      10        21743         8920
 44   2   2   2 1.626218 0.706247 0.008519 2.340984  6.698773  2.340984 0.000000  974.085938  969.539062  20  20 1.0   20       25     44    10        10       11      20        29427        21196
 44   1   1   1 1.487418 0.370198 0.004889 1.862505  6.220295  6.220295 3.515189  965.804688  958.000000  14  14 1.0    0        1     14     6         6        1       6         8498         5181
 44   1   2   2 1.010258 0.159898 0.004049 1.174205  9.735484  3.515189 1.313059  957.128906  949.121094  10  10 1.0    0       15     24     6         6        7      12         3564          396
 44   1   3   3 1.116504 0.191863 0.004692 1.313059 11.048543  1.313059 0.823927  958.585938  950.820312  11  11 1.0    0       25     35     6         6       13      18         2316          197
 44   1   4   4 0.714261 0.105114 0.004553 0.823927 11.872470  0.823927 0.967078  958.992188  950.984375   7   7 1.0    0       36     42     6         6       19      24         1170          125
 44   1   5   5 0.821485 0.142547 0.003045 0.967078 12.839548  0.967078 0.962821  963.273438  955.285156   8   8 1.0    0       43     50     5         5       25      29         2724         1043
 44   1   6   6 0.826373 0.132949 0.003499 0.962821 13.802369  0.962821 1.817084  963.230469  955.242188   8   8 1.0    0       51     58     5         5       30      34         1889          378
 44   1   7   7 0.902877 0.910665 0.003542 1.817084 15.619453  1.817084 0.699122  963.429688  955.503906   9   9 1.0    0       59     67     5         5       35      39         1977          169
 44   1   8   8 0.608496 0.087144 0.003482 0.699122 16.318575  0.699122 0.000000  963.953125  955.964844   6   6 1.0    0       68     73     5         5       40      44          847           43
 45   3   1   1 1.134767 0.865772 0.000000 2.000539  2.000539  2.000539 0.000000  964.851562  956.863281  20  20 1.0   20        1     20     0         0        1       1        94894            0
 45   2   1   1 1.931992 0.538178 0.008242 2.478413  4.478952  4.478952 2.467206  985.023438  980.796875  24  24 1.0   24        1     24    10        10        1      10        21407         8488
 45   2   2   2 1.622235 0.836523 0.008448 2.467206  6.946158  2.467206 0.000000  988.941406  984.929688  20  20 1.0   20       25     44    10        10       11      20        34219        24704
 45   1   1   1 1.488562 0.377913 0.004834 1.871309  6.350261  6.350261 3.395678  980.597656  973.003906  14  14 1.0    0        1     14     6         6        1       6         9429         5900
 45   1   2   2 0.806508 0.118148 0.003816 0.928472  9.745938  3.395678 1.188041  971.507812  963.667969   8   8 1.0    0       15     22     6         6        7      12         2191          205
 45   1   3   3 1.019776 0.163812 0.004453 1.188041 10.933980  1.188041 0.945747  973.304688  965.421875  10  10 1.0    0       23     32     6         6       13      18         2480          335
 45   1   4   4 0.815047 0.126375 0.004325 0.945747 11.879726  0.945747 0.956319  974.101562  966.160156   8   8 1.0    0       33     40     6         6       19      24         1506          124
 45   1   5   5 0.814703 0.138507 0.003109 0.956319 12.836046  0.956319 0.956308  977.964844  970.214844   8   8 1.0    0       41     48     5         5       25      29         2392          969
 45   1   6   6 0.823557 0.129184 0.003568 0.956308 13.792354  0.956308 1.037406  978.136719  970.171875   8   8 1.0    0       49     56     5         5       30      34         1627          346
 45   1   7   7 0.905489 0.128179 0.003738 1.037406 14.829759  1.037406 0.698218  979.449219  971.488281   9   9 1.0    0       57     65     5         5       35      39         1998          208
 45   1   8   8 0.607420 0.086643 0.004156 0.698218 15.527978  0.698218 0.000000  980.070312  972.105469   6   6 1.0    0       66     71     5         5       40      44          882           18
 46   3   1   1 1.145610 1.558189 0.000000 2.703799  2.703799  2.703799 0.000000  980.972656  973.007812  20  20 1.0   20        1     20     0         0        1       1       101663            0
 46   2   1   1 2.704786 2.729967 0.008796 5.443549  8.147348  8.147348 0.984258 1014.960938 1015.015625  31  31 1.0   31        1     31    10        10        1      10       109170        74872
 46   2   2   2 0.824538 0.152924 0.006795 0.984258  9.131606  0.984258 0.000000  998.234375  990.382812  11  11 1.0   11       32     42    10        10       11      20         2844          119
 46   1   1   1 1.592484 0.387726 0.005768 1.985978 10.133326 10.133326 2.307030 1001.589844  997.726562  15  15 1.0    0        1     15     7         7        1       7         8989         4748
 46   1   2   2 1.122669 0.194048 0.006055 1.322772 12.440356  2.307030 1.594410  999.363281  993.902344  11  11 1.0    0       16     26     8         8        8      15         2967          447
 46   1   3   3 1.351127 0.237096 0.006188 1.594410 14.034766  1.594410 2.180343 1003.332031  996.500000  13  13 1.0    0       27     39     8         8       16      23         3891          547
 46   1   4   4 1.717137 0.456770 0.006435 2.180343 16.215109  2.180343 0.259855 1009.562500 1005.933594  16  16 1.0    0       40     55     8         8       24      31        10180         4097
 46   1   5   5 0.231827 0.027050 0.000978 0.259855 16.474964  0.259855 0.471279  997.328125  989.597656   2   2 1.0    0       56     57     2         2       32      33          180            0
 46   1   6   6 0.416201 0.053432 0.001646 0.471279 16.946243  0.471279 0.462209  997.328125  989.597656   4   4 1.0    0       58     61     3         3       34      36          438            6
 46   1   7   7 0.412141 0.048341 0.001727 0.462209 17.408452  0.462209 0.461364  997.453125  989.597656   4   4 1.0    0       62     65     3         3       37      39          402            6
 46   1   8   8 0.412187 0.046853 0.002323 0.461364 17.869815  0.461364 0.000000  997.453125  989.597656   4   4 1.0    0       66     69     3         3       40      42          402            6
 47   3   1   1 1.146729 0.777258 0.000000 1.923987  1.923987  1.923987 0.000000  998.851562  991.003906  20  20 1.0   20        1     20     0         0        1       1        90522            0
 47   2   1   1 2.139383 1.911724 0.008531 4.059637  5.983625  5.983625 1.873718 1021.273438 1015.148438  26  26 1.0   26        1     26    10        10        1      10        48024        28124
 47   2   2   2 1.435824 0.429285 0.008609 1.873718  7.857343  1.873718 0.000000 1021.230469 1014.578125  18  18 1.0   18       27     44    10        10       11      20        14692         8325
 47   1   1   1 1.482866 0.384340 0.004832 1.872038  7.855662  7.855662 3.036417 1016.109375 1008.554688  14  14 1.0    0        1     14     6         6        1       6        10192         6870
 47   1   2   2 1.007086 0.151572 0.004040 1.162698 10.892079  3.036417 1.352392 1004.796875  997.003906  10  10 1.0    0       15     24     6         6        7      12         3123          385
 47   1   3   3 1.132422 0.214441 0.005530 1.352392 12.244471  1.352392 1.331670 1012.929688 1007.316406  11  11 1.0    0       25     35     7         7       13      19         4471          789
 47   1   4   4 1.135204 0.190966 0.005499 1.331670 13.576141  1.331670 0.584608 1014.691406 1008.722656  11  11 1.0    0       36     46     7         7       20      26         2350          127
 47   1   5   5 0.508237 0.074157 0.002215 0.584608 14.160749  0.584608 0.942972 1010.500000 1002.898438   5   5 1.0    0       47     51     4         4       27      30          768          184
 47   1   6   6 0.817022 0.123206 0.002745 0.942972 15.103722  0.942972 1.192635 1012.031250 1004.429688   8   8 1.0    0       52     59     4         4       31      34         1835          231
 47   1   7   7 1.024480 0.164519 0.003636 1.192635 16.296356  1.192635 0.704790 1017.558594 1010.804688  10  10 1.0    0       60     69     5         5       35      39         2492          568
 47   1   8   8 0.610408 0.090819 0.003563 0.704790 17.001146  0.704790 0.000000 1012.035156 1004.222656   6   6 1.0    0       70     75     5         5       40      44          850           58
 48   3   1   1 1.146908 0.887796 0.000000 2.034704  2.034704  2.034704 0.000000 1012.628906 1005.039062  20  20 1.0   20        1     20     0         0        1       1        99174            0
 48   2   1   1 2.259083 1.119522 0.008591 3.387196  5.421900  5.421900 1.409167 1037.535156 1031.859375  27  27 1.0   27        1     27    10        10        1      10        48115        26888
 48   2   2   2 1.164935 0.235719 0.008512 1.409167  6.831067  1.409167 0.000000 1035.191406 1027.855469  15  15 1.0   15       28     42    10        10       11      20         4957          820
 48   1   1   1 1.479852 1.164685 0.004718 2.649255  8.071156  8.071156 2.709910 1028.710938 1021.191406  14  14 1.0    0        1     14     6         6        1       6         6201         3491
 48   1   2   2 1.113326 0.182259 0.005158 1.300744 10.781066  2.709910 1.451824 1020.894531 1013.230469  11  11 1.0    0       15     25     7         7        7      13         3865          587
 48   1   3   3 1.228642 0.217650 0.005531 1.451824 12.232890  1.451824 1.377071 1028.433594 1023.058594  12  12 1.0    0       26     37     7         7       14      20         3882          741
 48   1   4   4 1.141954 0.229173 0.005944 1.377071 13.609961  1.377071 0.584111 1031.089844 1024.984375  11  11 1.0    0       38     48     7         7       21      27         3983         1850
 48   1   5   5 0.517725 0.064691 0.001694 0.584111 14.194071  0.584111 0.936679 1026.230469 1018.621094   5   5 1.0    0       49     53     3         3       28      30          564           50
 48   1   6   6 0.818178 0.115774 0.002727 0.936679 15.130750  0.936679 0.574957 1027.769531 1020.164062   8   8 1.0    0       54     61     4         4       31      34         1888          235
 48   1   7   7 0.507114 0.065294 0.002549 0.574957 15.705707  0.574957 0.577068 1026.425781 1018.621094   5   5 1.0    0       62     66     4         4       35      38          630           18
 48   1   8   8 0.506806 0.067081 0.003181 0.577068 16.282775  0.577068 0.000000 1026.425781 1018.621094   5   5 1.0    0       67     71     4         4       39      42          648            0
 49   3   1   1 1.139352 0.782969 0.000000 1.922321  1.922321  1.922321 0.000000 1028.203125 1020.523438  20  20 1.0   20        1     20     0         0        1       1        87551            0
 49   2   1   1 2.741430 2.573663 0.008882 5.323975  7.246296  7.246296 0.992017 1062.593750 1062.304688  31  31 1.0   31        1     31    10        10        1      10        89266        64701
 49   2   2   2 0.826768 0.158188 0.007061 0.992017  8.238313  0.992017 0.000000 1043.054688 1036.058594  11  11 1.0   11       32     42    10        10       11      20         2877          147
 49   1   1   1 1.599582 0.405493 0.005706 2.010781  9.257078  9.257078 3.479979 1048.269531 1044.550781  15  15 1.0    0        1     15     7         7        1       7        10162         5776
 49   1   2   2 1.346099 1.135932 0.005931 2.487963 12.737057  3.479979 1.948114 1034.578125 1030.316406  13  13 1.0    0       16     28     8         8        8      15         5584         1627
 49   1   3   3 1.495209 0.446388 0.006516 1.948114 14.685171  1.948114 1.611994 1045.847656 1039.652344  14  14 1.0    0       29     42     8         8       16      23        11036         6481
 49   1   4   4 1.349374 0.256323 0.006297 1.611994 16.297164  1.611994 0.262220 1048.644531 1043.203125  13  13 1.0    0       43     55     8         8       24      31         4895         1048
 49   1   5   5 0.233188 0.028040 0.000992 0.262220 16.559384  0.262220 0.466823 1041.730469 1034.773438   2   2 1.0    0       56     57     2         2       32      33          180            0
 49   1   6   6 0.411886 0.053183 0.001754 0.466823 17.026208  0.466823 0.460055 1041.769531 1034.820312   4   4 1.0    0       58     61     3         3       34      36          438            6
 49   1   7   7 0.409634 0.048660 0.001761 0.460055 17.486262  0.460055 0.460926 1041.804688 1034.843750   4   4 1.0    0       62     65     3         3       37      39          402            6
 49   1   8   8 0.410776 0.047661 0.002489 0.460926 17.947188  0.460926 0.000000 1041.847656 1034.878906   4   4 1.0    0       66     69     3         3       40      42          402            6

[22-01-2022_01-49-24] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-01-22_01-30-36_PS3_hcr_online_2_4_yield_preach_heur.xlsx

[22-01-2022_01-49-28] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-01-22_01-30-36_PS3_hcr_online_2_4_yield_preach_heur.dat

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[22-01-2022_01-49-29] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[22-01-2022_02-07-07] INFO :: __main__ >> Overall time: Real = 2191.4296149999996, Process = 1720.0

[22-01-2022_02-07-07] INFO :: __main__ >> Exiting with code 0

